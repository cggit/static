





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" integrity="sha512-/YEVWs7BzxfKyUd6zVxjEQcXRWsLbcEjv045Rq8DSoipySmQblhVKxlXLva2GtNd5DhwCxHwW1RM0N9I7S2Vew==" rel="stylesheet" href="https://github.githubassets.com/assets/frameworks-481a47a96965f6706fb41bae0d14b09a.css" />
  
    <link crossorigin="anonymous" media="all" integrity="sha512-UuDKgNf/5qyjHC2IFg8kEkn3j2n+D4ShuvNV5eohEqUPfuPzqAxcd98IqomrgGo/g36tB35YvxoA1CbXgE0iFg==" rel="stylesheet" href="https://github.githubassets.com/assets/github-5362384f9e2512870c388a187eaf4868.css" />
    
    
    
    

  <meta name="viewport" content="width=device-width">
  
  <title>sql.js/sql-wasm-debug.js at master Â· kripken/sql.js</title>
    <meta name="description" content="SQLite compiled to JavaScript through Emscripten. Contribute to kripken/sql.js development by creating an account on GitHub.">
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    <meta name="twitter:image:src" content="https://avatars1.githubusercontent.com/u/173661?s=400&amp;v=4" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary" /><meta name="twitter:title" content="kripken/sql.js" /><meta name="twitter:description" content="SQLite compiled to JavaScript through Emscripten. Contribute to kripken/sql.js development by creating an account on GitHub." />
    <meta property="og:image" content="https://avatars1.githubusercontent.com/u/173661?s=400&amp;v=4" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="kripken/sql.js" /><meta property="og:url" content="https://github.com/kripken/sql.js" /><meta property="og:description" content="SQLite compiled to JavaScript through Emscripten. Contribute to kripken/sql.js development by creating an account on GitHub." />

  <link rel="assets" href="https://github.githubassets.com/">
  <link rel="web-socket" href="wss://live.github.com/_sockets/VjI6NDY4Mjc4NjA5OjQ4ZDljNWZlNmY0NjU4OGMyMDg3MjkzZmNkNTg5MjFiODczZGYwZjAxOTNhZmZkZjgyNmI2Y2QwY2Y4MWMzODg=--80ba86a883bd78641474e00ff3c2857bf492f7cc">
  <link rel="sudo-modal" href="/sessions/sudo_modal">
  <meta name="request-id" content="F566:1454:F3E73:19D08D:5DCF1A99" data-pjax-transient>


  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

      <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
    <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">

  <meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="F566:1454:F3E73:19D08D:5DCF1A99" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" /><meta name="octolytics-dimension-ga_id" content="" class="js-octo-ga-id" /><meta name="octolytics-dimension-visitor_id" content="2345988761554525148" /><meta name="octolytics-actor-id" content="1779421" /><meta name="octolytics-actor-login" content="cggit" /><meta name="octolytics-actor-hash" content="0b91ace3a860e02a647bc5b8e1f4bb7c5e59b3be3ceaa2fad334fa3aaf382e5c" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />



    <meta name="google-analytics" content="UA-3769691-2">

  <meta class="js-ga-set" name="userId" content="de59e0ed7b0c1a175910177893405f67">

<meta class="js-ga-set" name="dimension1" content="Logged In">



  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="cggit">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="MDhhYWJhZDMyMGIxNmJjZmFhNmYwMzQ4YWZiNDVjYzAwYmZiNGY2NGJkYWJhYmIzZWRkMTRmZDFlNGViMWEwM3x7InJlbW90ZV9hZGRyZXNzIjoiMTk4LjE2OC40OC4zNSIsInJlcXVlc3RfaWQiOiJGNTY2OjE0NTQ6RjNFNzM6MTlEMDhEOjVEQ0YxQTk5IiwidGltZXN0YW1wIjoxNTczODUzODU3LCJob3N0IjoiZ2l0aHViLmNvbSJ9">

    <meta name="enabled-features" content="LAUNCH_PROJECT,ACTIONS_V2_ON_MARKETPLACE,MARKETPLACE_FEATURED_BLOG_POSTS,MARKETPLACE_INVOICED_BILLING,MARKETPLACE_SOCIAL_PROOF_CUSTOMERS,MARKETPLACE_TRENDING_SOCIAL_PROOF,MARKETPLACE_RECOMMENDATIONS,MARKETPLACE_PENDING_INSTALLATIONS,NOTIFY_ON_BLOCK,RELATED_ISSUES,GHE_CLOUD_TRIAL">

  <meta name="html-safe-nonce" content="908fedc434bfa4348485beaedd1d466572fb085a">

  <meta http-equiv="x-pjax-version" content="a24d82d484ab528e3f0db8bcd6034055">
  

      <link href="https://github.com/kripken/sql.js/commits/master.atom" rel="alternate" title="Recent Commits to sql.js:master" type="application/atom+xml">

  <meta name="go-import" content="github.com/kripken/sql.js git https://github.com/kripken/sql.js.git">

  <meta name="octolytics-dimension-user_id" content="173661" /><meta name="octolytics-dimension-user_login" content="kripken" /><meta name="octolytics-dimension-repository_id" content="3556910" /><meta name="octolytics-dimension-repository_nwo" content="kripken/sql.js" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="3556910" /><meta name="octolytics-dimension-repository_network_root_nwo" content="kripken/sql.js" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


    <link rel="canonical" href="https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://github.githubassets.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



  <meta name="webauthn-auth-enabled" content="true">

  <meta name="webauthn-registration-enabled" content="true">

  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-in env-production emoji-size-boost page-responsive page-blob">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="p-3 bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <span class="Progress progress-pjax-loader position-fixed width-full js-pjax-loader-bar">
      <span class="progress-pjax-loader-bar top-0 left-0" style="width: 0%;"></span>
    </span>

    
    
    


          <header class="Header js-details-container Details flex-wrap flex-lg-nowrap p-responsive" role="banner">

    <div class="Header-item d-none d-lg-flex">
      <a class="Header-link" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <svg class="octicon octicon-mark-github v-align-middle" height="32" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/></svg>
</a>

    </div>

    <div class="Header-item d-lg-none">
      <button class="Header-link btn-link js-details-target" type="button" aria-label="Toggle navigation" aria-expanded="false">
        <svg height="24" class="octicon octicon-three-bars" viewBox="0 0 12 16" version="1.1" width="18" aria-hidden="true"><path fill-rule="evenodd" d="M11.41 9H.59C0 9 0 8.59 0 8c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zm0-4H.59C0 5 0 4.59 0 4c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zM.59 11H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1H.59C0 13 0 12.59 0 12c0-.59 0-1 .59-1z"/></svg>
      </button>
    </div>

    <div class="Header-item Header-item--full flex-column flex-lg-row width-full flex-order-2 flex-lg-order-none mr-0 mr-lg-3 mt-3 mt-lg-0 Details-content--hidden">
        <div class="header-search flex-self-stretch flex-lg-self-auto mr-0 mr-lg-3 mb-3 mb-lg-0 scoped-search site-scoped-search js-site-search position-relative js-jump-to"
  role="combobox"
  aria-owns="jump-to-results"
  aria-label="Search or jump to"
  aria-haspopup="listbox"
  aria-expanded="false"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" role="search" aria-label="Site" data-scope-type="Repository" data-scope-id="3556910" data-scoped-search-url="/kripken/sql.js/search" data-unscoped-search-url="/search" action="/kripken/sql.js/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
      <label class="form-control input-sm header-search-wrapper p-0 header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center js-chromeless-input-container">
        <input type="text"
          class="form-control input-sm header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search or jump toâ¦"
          data-unscoped-placeholder="Search or jump toâ¦"
          data-scoped-placeholder="Search or jump toâ¦"
          autocapitalize="off"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          aria-label="Search or jump toâ¦"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations#csrf-token=iJQkSD4A0CppIxNYMPuksCWLrp9F7lUxqXmsj1RggfL3F6+/8Q1wkPrtSEXLU4mKT+J34Bq6lUSDSFISZmgjDg=="
          spellcheck="false"
          autocomplete="off"
          >
          <input type="hidden" class="js-site-search-type-field" name="type" >
            <img src="https://github.githubassets.com/images/search-key-slash.svg" alt="" class="mr-2 header-search-key-slash">

            <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
              
<ul class="d-none js-jump-to-suggestions-template-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-suggestion" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 12 16" version="1.1" role="img"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 15 16" version="1.1" role="img"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 00-1 1v14a1 1 0 001 1h13a1 1 0 001-1V1a1 1 0 00-1-1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M15.7 13.3l-3.81-3.83A5.93 5.93 0 0013 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 000-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z"/></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>
  </a>
</li>

</ul>

<ul class="d-none js-jump-to-no-results-template-container">
  <li class="d-flex flex-justify-center flex-items-center f5 d-none js-jump-to-suggestion p-2">
    <span class="text-gray">No suggested jump to results</span>
  </li>
</ul>

<ul id="jump-to-results" role="listbox" class="p-0 m-0 js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 12 16" version="1.1" role="img"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 15 16" version="1.1" role="img"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 00-1 1v14a1 1 0 001 1h13a1 1 0 001-1V1a1 1 0 00-1-1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M15.7 13.3l-3.81-3.83A5.93 5.93 0 0013 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 000-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z"/></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-global-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 12 16" version="1.1" role="img"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 15 16" version="1.1" role="img"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 00-1 1v14a1 1 0 001 1h13a1 1 0 001-1V1a1 1 0 00-1-1z"/></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M15.7 13.3l-3.81-3.83A5.93 5.93 0 0013 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 000-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z"/></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">âµ</span>
    </div>
  </a>
</li>


    <li class="d-flex flex-justify-center flex-items-center p-0 f5 js-jump-to-suggestion">
      <img src="https://github.githubassets.com/images/spinners/octocat-spinner-128.gif" alt="Octocat Spinner Icon" class="m-2" width="28">
    </li>
</ul>

            </div>
      </label>
</form>  </div>
</div>


      <nav class="d-flex flex-column flex-lg-row flex-self-stretch flex-lg-self-auto" aria-label="Global">
    <a class="Header-link d-block d-lg-none py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15" data-ga-click="Header, click, Nav menu - item:dashboard:user" aria-label="Dashboard" href="/dashboard">
      Dashboard
</a>
  <a class="js-selected-navigation-item Header-link  mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15" data-hotkey="g p" data-ga-click="Header, click, Nav menu - item:pulls context:user" aria-label="Pull requests you created" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls" href="/pulls">
    Pull requests
</a>
  <a class="js-selected-navigation-item Header-link  mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15" data-hotkey="g i" data-ga-click="Header, click, Nav menu - item:issues context:user" aria-label="Issues you created" data-selected-links="/issues /issues/assigned /issues/mentioned /issues" href="/issues">
    Issues
</a>
    <div class="mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15">
      <a class="js-selected-navigation-item Header-link" data-ga-click="Header, click, Nav menu - item:marketplace context:user" data-octo-click="marketplace_click" data-octo-dimensions="location:nav_bar" data-selected-links=" /marketplace" href="/marketplace">
        Marketplace
</a>      

    </div>

  <a class="js-selected-navigation-item Header-link  mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore" href="/explore">
    Explore
</a>


    <a class="Header-link d-block d-lg-none mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15" href="https://github.com/cggit">
      <img class="avatar" height="20" width="20" alt="@cggit" src="https://avatars0.githubusercontent.com/u/1779421?s=60&amp;v=4" />
      cggit
</a>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form action="/logout" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="21lcf3PxaM/XmWKQ62hW1eIq8m7sEq1J0oTeQM07T1P/Ab8lCsQ6qLMDVSyRWlu26/gOWXuS75Du9W7ecNiyOQ==" />
      <button type="submit" class="Header-link mr-0 mr-lg-3 py-2 py-lg-0 border-top border-lg-top-0 border-white-fade-15 d-lg-none btn-link d-block width-full text-left" data-ga-click="Header, sign out, icon:logout" style="padding-left: 2px;">
        <svg class="octicon octicon-sign-out v-align-middle" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 9V7H8V5h4V3l4 3-4 3zm-2 3H6V3L2 1h8v3h1V1c0-.55-.45-1-1-1H1C.45 0 0 .45 0 1v11.38c0 .39.22.73.55.91L6 16.01V13h4c.55 0 1-.45 1-1V8h-1v4z"/></svg>
        Sign out
      </button>
</form></nav>

    </div>

    <div class="Header-item Header-item--full flex-justify-center d-lg-none position-relative">
      <div class="css-truncate css-truncate-target width-fit position-absolute left-0 right-0 text-center">
              <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
    <a class="Header-link" href="/kripken">kripken</a>
    /
    <a class="Header-link" href="/kripken/sql.js">sql.js</a>

</div>
    </div>


    <div class="Header-item mr-0 mr-lg-3 flex-order-1 flex-lg-order-none">
      

    <a aria-label="You have unread notifications" class="Header-link notification-indicator position-relative tooltipped tooltipped-sw js-socket-channel js-notification-indicator" data-hotkey="g n" data-ga-click="Header, go to notifications, icon:unread" data-channel="notification-changed:1779421" href="/notifications">
        <span class="mail-status unread"></span>
        <svg class="octicon octicon-bell" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 12v1H0v-1l.73-.58c.77-.77.81-2.55 1.19-4.42C2.69 3.23 6 2 6 2c0-.55.45-1 1-1s1 .45 1 1c0 0 3.39 1.23 4.16 5 .38 1.88.42 3.66 1.19 4.42l.66.58H14zm-7 4c1.11 0 2-.89 2-2H5c0 1.11.89 2 2 2z"/></svg>
</a>
    </div>


    <div class="Header-item position-relative d-none d-lg-flex">
      <details class="details-overlay details-reset">
  <summary class="Header-link"
      aria-label="Create newâ¦"
      data-ga-click="Header, create new, icon:add">
    <svg class="octicon octicon-plus" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 9H7v5H5V9H0V7h5V2h2v5h5v2z"/></svg> <span class="dropdown-caret"></span>
  </summary>
  <details-menu class="dropdown-menu dropdown-menu-sw">
    
<a role="menuitem" class="dropdown-item" href="/new" data-ga-click="Header, create new repository">
  New repository
</a>

  <a role="menuitem" class="dropdown-item" href="/new/import" data-ga-click="Header, import a repository">
    Import repository
  </a>

<a role="menuitem" class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, create new gist">
  New gist
</a>

  <a role="menuitem" class="dropdown-item" href="/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>


  <div role="none" class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="kripken/sql.js">This repository</span>
  </div>
    <a role="menuitem" class="dropdown-item" href="/kripken/sql.js/issues/new" data-ga-click="Header, create new issue" data-skip-pjax>
      New issue
    </a>


  </details-menu>
</details>

    </div>

    <div class="Header-item position-relative mr-0 d-none d-lg-flex">
      
  <details class="details-overlay details-reset js-feature-preview-indicator-container" data-feature-preview-indicator-src="/users/cggit/feature_preview/indicator_check.json">

  <summary class="Header-link"
    aria-label="View profile and more"
    data-ga-click="Header, show menu, icon:avatar">
    <img alt="@cggit" class="avatar" src="https://avatars3.githubusercontent.com/u/1779421?s=40&amp;v=4" height="20" width="20">
      <span class="feature-preview-indicator js-feature-preview-indicator" hidden></span>
    <span class="dropdown-caret"></span>
  </summary>
  <details-menu class="dropdown-menu dropdown-menu-sw mt-2" style="width: 180px">
    <div class="header-nav-current-user css-truncate"><a role="menuitem" class="no-underline user-profile-link px-3 pt-2 pb-2 mb-n2 mt-n1 d-block" href="/cggit" data-ga-click="Header, go to profile, text:Signed in as">Signed in as <strong class="css-truncate-target">cggit</strong></a></div>
    <div role="none" class="dropdown-divider"></div>

      <div class="pl-3 pr-3 f6 user-status-container js-user-status-context pb-1" data-url="/users/status?compact=1&amp;link_mentions=0&amp;truncate=1">
        
<div class="js-user-status-container
    user-status-compact rounded-1 px-2 py-1 mt-2
    border
  " data-team-hovercards-enabled>
  <details class="js-user-status-details details-reset details-overlay details-overlay-dark">
    <summary class="btn-link btn-block link-gray no-underline js-toggle-user-status-edit toggle-user-status-edit "
      role="menuitem" data-hydro-click="{&quot;event_type&quot;:&quot;user_profile.click&quot;,&quot;payload&quot;:{&quot;profile_user_id&quot;:173661,&quot;target&quot;:&quot;EDIT_USER_STATUS&quot;,&quot;user_id&quot;:1779421,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;}}" data-hydro-click-hmac="ab69a4cf9680168bf111ccab01387d0606a7a649acb249c19a4947dcc6e11780">
      <div class="d-flex">
        <div class="f6 lh-condensed user-status-header
          d-inline-block v-align-middle
            user-status-emoji-only-header circle
            pr-2
"
            style="max-width: 29px"
          >
          <div class="user-status-emoji-container flex-shrink-0 mr-1 mt-1 lh-condensed-ultra v-align-bottom" style="">
            <svg class="octicon octicon-smiley" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm4.81 12.81a6.72 6.72 0 01-2.17 1.45c-.83.36-1.72.53-2.64.53-.92 0-1.81-.17-2.64-.53-.81-.34-1.55-.83-2.17-1.45a6.773 6.773 0 01-1.45-2.17A6.59 6.59 0 011.21 8c0-.92.17-1.81.53-2.64.34-.81.83-1.55 1.45-2.17.62-.62 1.36-1.11 2.17-1.45A6.59 6.59 0 018 1.21c.92 0 1.81.17 2.64.53.81.34 1.55.83 2.17 1.45.62.62 1.11 1.36 1.45 2.17.36.83.53 1.72.53 2.64 0 .92-.17 1.81-.53 2.64-.34.81-.83 1.55-1.45 2.17zM4 6.8v-.59c0-.66.53-1.19 1.2-1.19h.59c.66 0 1.19.53 1.19 1.19v.59c0 .67-.53 1.2-1.19 1.2H5.2C4.53 8 4 7.47 4 6.8zm5 0v-.59c0-.66.53-1.19 1.2-1.19h.59c.66 0 1.19.53 1.19 1.19v.59c0 .67-.53 1.2-1.19 1.2h-.59C9.53 8 9 7.47 9 6.8zm4 3.2c-.72 1.88-2.91 3-5 3s-4.28-1.13-5-3c-.14-.39.23-1 .66-1h8.59c.41 0 .89.61.75 1z"/></svg>
          </div>
        </div>
        <div class="
          d-inline-block v-align-middle
          
          
           css-truncate css-truncate-target 
           user-status-message-wrapper f6"
           style="line-height: 20px;" >
          <div class="d-inline-block text-gray-dark v-align-text-top text-left">
              <span class="text-gray ml-2">Set status</span>
          </div>
        </div>
      </div>
    </summary>
    <details-dialog class="details-dialog rounded-1 anim-fade-in fast Box Box--overlay" role="dialog" tabindex="-1">
      <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="position-relative flex-auto js-user-status-form" action="/users/status?compact=1&amp;link_mentions=0&amp;truncate=1" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="_method" value="put" /><input type="hidden" name="authenticity_token" value="bM9Iu+8DJOEfZex6TOMeh7ziUck/qxymZ4Nuot5SVnp1CdO5uphlDTJGtOe+jOZrchXfYjFqOQ8N6s3ioel0sw==" />
        <div class="Box-header bg-gray border-bottom p-3">
          <button class="Box-btn-octicon js-toggle-user-status-edit btn-octicon float-right" type="reset" aria-label="Close dialog" data-close-dialog>
            <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
          </button>
          <h3 class="Box-title f5 text-bold text-gray-dark">Edit status</h3>
        </div>
        <input type="hidden" name="emoji" class="js-user-status-emoji-field" value="">
        <input type="hidden" name="organization_id" class="js-user-status-org-id-field" value="">
        <div class="px-3 py-2 text-gray-dark">
          <div class="js-characters-remaining-container position-relative mt-2">
            <div class="input-group d-table form-group my-0 js-user-status-form-group">
              <span class="input-group-button d-table-cell v-align-middle" style="width: 1%">
                <button type="button" aria-label="Choose an emoji" class="btn-outline btn js-toggle-user-status-emoji-picker btn-open-emoji-picker p-0">
                  <span class="js-user-status-original-emoji" hidden></span>
                  <span class="js-user-status-custom-emoji"></span>
                  <span class="js-user-status-no-emoji-icon" >
                    <svg class="octicon octicon-smiley" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm4.81 12.81a6.72 6.72 0 01-2.17 1.45c-.83.36-1.72.53-2.64.53-.92 0-1.81-.17-2.64-.53-.81-.34-1.55-.83-2.17-1.45a6.773 6.773 0 01-1.45-2.17A6.59 6.59 0 011.21 8c0-.92.17-1.81.53-2.64.34-.81.83-1.55 1.45-2.17.62-.62 1.36-1.11 2.17-1.45A6.59 6.59 0 018 1.21c.92 0 1.81.17 2.64.53.81.34 1.55.83 2.17 1.45.62.62 1.11 1.36 1.45 2.17.36.83.53 1.72.53 2.64 0 .92-.17 1.81-.53 2.64-.34.81-.83 1.55-1.45 2.17zM4 6.8v-.59c0-.66.53-1.19 1.2-1.19h.59c.66 0 1.19.53 1.19 1.19v.59c0 .67-.53 1.2-1.19 1.2H5.2C4.53 8 4 7.47 4 6.8zm5 0v-.59c0-.66.53-1.19 1.2-1.19h.59c.66 0 1.19.53 1.19 1.19v.59c0 .67-.53 1.2-1.19 1.2h-.59C9.53 8 9 7.47 9 6.8zm4 3.2c-.72 1.88-2.91 3-5 3s-4.28-1.13-5-3c-.14-.39.23-1 .66-1h8.59c.41 0 .89.61.75 1z"/></svg>
                  </span>
                </button>
              </span>
              <text-expander keys=": @" data-mention-url="/autocomplete/user-suggestions" data-emoji-url="/autocomplete/emoji">
                <input
                  type="text"
                  autocomplete="off"
                  data-no-org-url="/autocomplete/user-suggestions"
                  data-org-url="/suggestions?mention_suggester=1"
                  data-maxlength="80"
                  class="d-table-cell width-full form-control js-user-status-message-field js-characters-remaining-field"
                  placeholder="What's happening?"
                  name="message"
                  value=""
                  aria-label="What is your current status?">
              </text-expander>
              <div class="error">Could not update your status, please try again.</div>
            </div>
            <div style="margin-left: 53px" class="my-1 text-small label-characters-remaining js-characters-remaining" data-suffix="remaining" hidden>
              80 remaining
            </div>
          </div>
          <include-fragment class="js-user-status-emoji-picker" data-url="/users/status/emoji"></include-fragment>
          <div class="overflow-auto ml-n3 mr-n3 px-3 border-bottom" style="max-height: 33vh">
            <div class="user-status-suggestions js-user-status-suggestions collapsed overflow-hidden">
              <h4 class="f6 text-normal my-3">Suggestions:</h4>
              <div class="mx-3 mt-2 clearfix">
                  <div class="float-left col-6">
                      <button type="button" value=":palm_tree:" class="d-flex flex-items-baseline flex-items-stretch lh-condensed f6 btn-link link-gray no-underline js-predefined-user-status mb-1">
                        <div class="emoji-status-width mr-2 v-align-middle js-predefined-user-status-emoji">
                          <g-emoji alias="palm_tree" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f334.png">ð´</g-emoji>
                        </div>
                        <div class="d-flex flex-items-center no-underline js-predefined-user-status-message ws-normal text-left" style="border-left: 1px solid transparent">
                          On vacation
                        </div>
                      </button>
                      <button type="button" value=":face_with_thermometer:" class="d-flex flex-items-baseline flex-items-stretch lh-condensed f6 btn-link link-gray no-underline js-predefined-user-status mb-1">
                        <div class="emoji-status-width mr-2 v-align-middle js-predefined-user-status-emoji">
                          <g-emoji alias="face_with_thermometer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f912.png">ð¤</g-emoji>
                        </div>
                        <div class="d-flex flex-items-center no-underline js-predefined-user-status-message ws-normal text-left" style="border-left: 1px solid transparent">
                          Out sick
                        </div>
                      </button>
                  </div>
                  <div class="float-left col-6">
                      <button type="button" value=":house:" class="d-flex flex-items-baseline flex-items-stretch lh-condensed f6 btn-link link-gray no-underline js-predefined-user-status mb-1">
                        <div class="emoji-status-width mr-2 v-align-middle js-predefined-user-status-emoji">
                          <g-emoji alias="house" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png">ð </g-emoji>
                        </div>
                        <div class="d-flex flex-items-center no-underline js-predefined-user-status-message ws-normal text-left" style="border-left: 1px solid transparent">
                          Working from home
                        </div>
                      </button>
                      <button type="button" value=":dart:" class="d-flex flex-items-baseline flex-items-stretch lh-condensed f6 btn-link link-gray no-underline js-predefined-user-status mb-1">
                        <div class="emoji-status-width mr-2 v-align-middle js-predefined-user-status-emoji">
                          <g-emoji alias="dart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png">ð¯</g-emoji>
                        </div>
                        <div class="d-flex flex-items-center no-underline js-predefined-user-status-message ws-normal text-left" style="border-left: 1px solid transparent">
                          Focusing
                        </div>
                      </button>
                  </div>
              </div>
            </div>
            <div class="user-status-limited-availability-container">
              <div class="form-checkbox my-0">
                <input type="checkbox" name="limited_availability" value="1" class="js-user-status-limited-availability-checkbox" data-default-message="I may be slow to respond." aria-describedby="limited-availability-help-text-truncate-true-compact-true" id="limited-availability-truncate-true-compact-true">
                <label class="d-block f5 text-gray-dark mb-1" for="limited-availability-truncate-true-compact-true">
                  Busy
                </label>
                <p class="note" id="limited-availability-help-text-truncate-true-compact-true">
                  When others mention you, assign you, or request your review,
                  GitHub will let them know that you have limited availability.
                </p>
              </div>
            </div>
          </div>
            

<div class="d-inline-block f5 mr-2 pt-3 pb-2" >
  <div class="d-inline-block mr-1">
    Clear status
  </div>

  <details class="js-user-status-expire-drop-down f6 dropdown details-reset details-overlay d-inline-block mr-2">
    <summary class="f5 btn-link link-gray-dark border px-2 py-1 rounded-1" aria-haspopup="true">
      <div class="js-user-status-expiration-interval-selected d-inline-block v-align-baseline">
        Never
      </div>
      <div class="dropdown-caret"></div>
    </summary>

    <ul class="dropdown-menu dropdown-menu-se pl-0 overflow-auto" style="width: 220px; max-height: 15.5em">
      <li>
        <button type="button" class="btn-link dropdown-item js-user-status-expire-button ws-normal" title="Never">
          <span class="d-inline-block text-bold mb-1">Never</span>
          <div class="f6 lh-condensed">Keep this status until you clear your status or edit your status.</div>
        </button>
      </li>
      <li class="dropdown-divider" role="none"></li>
        <li>
          <button type="button" class="btn-link dropdown-item ws-normal js-user-status-expire-button" title="in 30 minutes" value="2019-11-15T17:07:37-05:00">
            in 30 minutes
          </button>
        </li>
        <li>
          <button type="button" class="btn-link dropdown-item ws-normal js-user-status-expire-button" title="in 1 hour" value="2019-11-15T17:37:37-05:00">
            in 1 hour
          </button>
        </li>
        <li>
          <button type="button" class="btn-link dropdown-item ws-normal js-user-status-expire-button" title="in 4 hours" value="2019-11-15T20:37:37-05:00">
            in 4 hours
          </button>
        </li>
        <li>
          <button type="button" class="btn-link dropdown-item ws-normal js-user-status-expire-button" title="today" value="2019-11-15T23:59:59-05:00">
            today
          </button>
        </li>
        <li>
          <button type="button" class="btn-link dropdown-item ws-normal js-user-status-expire-button" title="this week" value="2019-11-17T23:59:59-05:00">
            this week
          </button>
        </li>
    </ul>
  </details>
  <input class="js-user-status-expiration-date-input" type="hidden" name="expires_at" value="">
</div>

          <include-fragment class="js-user-status-org-picker" data-url="/users/status/organizations"></include-fragment>
        </div>
        <div class="d-flex flex-items-center flex-justify-between p-3 border-top">
          <button type="submit" disabled class="width-full btn btn-primary mr-2 js-user-status-submit">
            Set status
          </button>
          <button type="button" disabled class="width-full js-clear-user-status-button btn ml-2 ">
            Clear status
          </button>
        </div>
</form>    </details-dialog>
  </details>
</div>

      </div>
      <div role="none" class="dropdown-divider"></div>


    <a role="menuitem" class="dropdown-item" href="/cggit" data-ga-click="Header, go to profile, text:your profile">Your profile</a>

    <a role="menuitem" class="dropdown-item" href="/cggit?tab=repositories" data-ga-click="Header, go to repositories, text:your repositories">Your repositories</a>

    <a role="menuitem" class="dropdown-item" href="/cggit?tab=projects" data-ga-click="Header, go to projects, text:your projects">Your projects</a>

    <a role="menuitem" class="dropdown-item" href="/cggit?tab=stars" data-ga-click="Header, go to starred repos, text:your stars">Your stars</a>
      <a role="menuitem" class="dropdown-item" href="https://gist.github.com/mine" data-ga-click="Header, your gists, text:your gists">Your gists</a>





    <div role="none" class="dropdown-divider"></div>
      
<div id="feature-enrollment-toggle" class="hide-sm hide-md feature-preview-details position-relative">
  <button
    type="button"
    class="dropdown-item btn-link"
    role="menuitem"
    data-feature-preview-trigger-url="/users/cggit/feature_previews"
    data-feature-preview-close-details="{&quot;event_type&quot;:&quot;feature_preview.clicks.close_modal&quot;,&quot;payload&quot;:{&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}"
    data-feature-preview-close-hmac="865c8786c9af3b7634a0e653314b2a78173238ced8eddcf9c78769ce9ffdcb5b"
    data-hydro-click="{&quot;event_type&quot;:&quot;feature_preview.clicks.open_modal&quot;,&quot;payload&quot;:{&quot;link_location&quot;:&quot;user_dropdown&quot;,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}"
    data-hydro-click-hmac="82f56528fc9d7bccf08bf1b3383d302d618da4e56cc27cfe0d7cbde60d2cb441"
  >
    Feature preview
  </button>
    <span class="feature-preview-indicator js-feature-preview-indicator" hidden></span>
</div>

    <a role="menuitem" class="dropdown-item" href="https://help.github.com" data-ga-click="Header, go to help, text:help">Help</a>
    <a role="menuitem" class="dropdown-item" href="/settings/profile" data-ga-click="Header, go to settings, icon:settings">Settings</a>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="logout-form" action="/logout" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="DLO2OyQAV+gShG0T/DRAWpm9U0ZljJsfNH72JPVMNR0o61VhXTUFj3YeWq+GBk05kG+vcfIM2cYID0a6SK/Idw==" />
      
      <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout" role="menuitem">
        Sign out
      </button>
</form>  </details-menu>
</details>

    </div>

  </header>

      

  </div>

  <div id="start-of-content" class="show-on-focus"></div>


    <div id="js-flash-container">

</div>



  <div class="application-main " data-commit-hovercards-enabled>
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main  >
      


  

      <div class="border-bottom shelf intro-shelf js-notice mb-0 pb-4">
  <div class="width-full container">
    <div class="width-full mx-auto shelf-content">
      <h2 class="shelf-title">Learn Git and GitHub without any code!</h2>
      <p class="shelf-lead">
          Using the Hello World guide, youâll start a branch, write comments, and open a pull request.
      </p>
      <a class="btn btn-primary shelf-cta" target="_blank" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;READ_GUIDE&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="44ef1435980c596dd72bcdc96ef2b7933f92c394a539a2dedea802770f357201" href="https://guides.github.com/activities/hello-world/">Read the guide</a>
    </div>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="shelf-dismiss js-notice-dismiss" action="/dashboard/dismiss_bootcamp" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="_method" value="delete" /><input type="hidden" name="authenticity_token" value="1hbCGx8Pp42zE2INWJGbW8x6ali80VdRcLDzrJ34UjkQ0Mpu8SKYfvCLmSyjBWTMThB3o1z+3DuwxehIWp5eCA==" />
      <button name="button" type="submit" class="mr-1 close-button tooltipped tooltipped-w" aria-label="Hide this notice forever" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;DISMISS_BANNER&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="c3fa5f994a3f4ae805f448e6f3a34b85706b84b181d32fcc4cacb12f2ccf9d08">
        <svg aria-label="Hide this notice forever" class="octicon octicon-x v-align-text-top" viewBox="0 0 12 16" version="1.1" width="12" height="16" role="img"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
</button></form>  </div>
</div>











  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav pt-0 pt-lg-4 ">
    <div class="repohead-details-container clearfix container-lg p-responsive d-none d-lg-block">

      <ul class="pagehead-actions">



    <li >
      
    <details class="dropdown details-reset details-overlay d-inline-block float-left"
      data-deferred-details-content-url="/kripken/sql.js/used_by_contents"
    >
      <summary class="btn btn-sm btn-with-count" data-menu-button>
        <svg class="octicon octicon-package v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M1 4.27v7.47c0 .45.3.84.75.97l6.5 1.73c.16.05.34.05.5 0l6.5-1.73c.45-.13.75-.52.75-.97V4.27c0-.45-.3-.84-.75-.97l-6.5-1.74a1.4 1.4 0 00-.5 0L1.75 3.3c-.45.13-.75.52-.75.97zm7 9.09l-6-1.59V5l6 1.61v6.75zM2 4l2.5-.67L11 5.06l-2.5.67L2 4zm13 7.77l-6 1.59V6.61l2-.55V8.5l2-.53V5.53L15 5v6.77zm-2-7.24L6.5 2.8l2-.53L15 4l-2 .53z"/></svg>
        Used by
        <div class="dropdown-caret"></div>
      </summary>
      <include-fragment>
        <div class="dropdown-menu dropdown-menu-s p-3 text-center" style="width:360px;">
          <img width="32" height="32" alt="Loading..." class="my-0" src="https://github.githubassets.com/images/spinners/octocat-spinner-64.gif" />
          <p class="pt-1 m-0 f5 text-gray-light">
            Loading dependents...
          </p>
        </div>
      </include-fragment>
    </details>
    <a class="social-count"
      href="/kripken/sql.js/network/dependents?package_id=UGFja2FnZS0xMzgwNDgwOQ%3D%3D"
      aria-label="1671 repositories depend on this package"
    >
      1.7k
    </a>

    </li>

  <li>
    
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form data-remote="true" class="clearfix js-social-form js-social-container" action="/notifications/subscribe" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="S+Qt9FJpfvxm00uowhB4S8AiSDMY+X1Oycti14uwrCCADy0GX5Me/VL2A0vFl5k67XWjZMAx44GzVEYnG3Lwtw==" />      <input type="hidden" name="repository_id" value="3556910">

      <details class="details-reset details-overlay select-menu float-left">
        <summary class="select-menu-button float-left btn btn-sm btn-with-count" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;WATCH_BUTTON&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="b6193374f6047711047de246c7278f3ad866cfcfa194233269461734b1fb6b0c" data-ga-click="Repository, click Watch settings, action:blob#show">          <span data-menu-button>
              <svg class="octicon octicon-eye v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
              Watch
          </span>
</summary>        <details-menu
          class="select-menu-modal position-absolute mt-5"
          style="z-index: 99;">
          <div class="select-menu-header">
            <span class="select-menu-title">Notifications</span>
          </div>
          <div class="select-menu-list">
            <button type="submit" name="do" value="included" class="select-menu-item width-full" aria-checked="true" role="menuitemradio">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <div class="select-menu-item-text">
                <span class="select-menu-item-heading">Not watching</span>
                <span class="description">Be notified only when participating or @mentioned.</span>
                <span class="hidden-select-button-text" data-menu-button-contents>
                  <svg class="octicon octicon-eye v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                  Watch
                </span>
              </div>
            </button>

            <button type="submit" name="do" value="release_only" class="select-menu-item width-full" aria-checked="false" role="menuitemradio">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <div class="select-menu-item-text">
                <span class="select-menu-item-heading">Releases only</span>
                <span class="description">Be notified of new releases, and when participating or @mentioned.</span>
                <span class="hidden-select-button-text" data-menu-button-contents>
                  <svg class="octicon octicon-eye v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                  Unwatch releases
                </span>
              </div>
            </button>

            <button type="submit" name="do" value="subscribed" class="select-menu-item width-full" aria-checked="false" role="menuitemradio">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <div class="select-menu-item-text">
                <span class="select-menu-item-heading">Watching</span>
                <span class="description">Be notified of all conversations.</span>
                <span class="hidden-select-button-text" data-menu-button-contents>
                  <svg class="octicon octicon-eye v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
                  Unwatch
                </span>
              </div>
            </button>

            <button type="submit" name="do" value="ignore" class="select-menu-item width-full" aria-checked="false" role="menuitemradio">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <div class="select-menu-item-text">
                <span class="select-menu-item-heading">Ignoring</span>
                <span class="description">Never be notified.</span>
                <span class="hidden-select-button-text" data-menu-button-contents>
                  <svg class="octicon octicon-mute v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 2.81v10.38c0 .67-.81 1-1.28.53L3 10H1c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h2l3.72-3.72C7.19 1.81 8 2.14 8 2.81zm7.53 3.22l-1.06-1.06-1.97 1.97-1.97-1.97-1.06 1.06L11.44 8 9.47 9.97l1.06 1.06 1.97-1.97 1.97 1.97 1.06-1.06L13.56 8l1.97-1.97z"/></svg>
                  Stop ignoring
                </span>
              </div>
            </button>
          </div>
        </details-menu>
      </details>
        <a class="social-count js-social-count"
          href="/kripken/sql.js/watchers"
          aria-label="219 users are watching this repository">
          219
        </a>
</form>
  </li>

  <li>
      <div class="js-toggler-container js-social-container starring-container ">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="starred js-social-form" action="/kripken/sql.js/unstar" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="41oVk5mFEw6eb68/rNxCy4z9yWEgE2oANw6bgxpG4CUuLz8m4hmqwex1Q8/nPkN8blc6bIhzEpyAnsKIoRNcrg==" />
      <input type="hidden" name="context" value="repository"></input>
      <button type="submit" class="btn btn-sm btn-with-count js-toggler-target" aria-label="Unstar this repository" title="Unstar kripken/sql.js" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;UNSTAR_BUTTON&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="24634459a271530c5e1ab0999fdbfe991d7c091b4823ee2d42930ff12c5ccfdb" data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">        <svg class="octicon octicon-star v-align-text-bottom" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z"/></svg>
        Unstar
</button>        <a class="social-count js-social-count" href="/kripken/sql.js/stargazers"
           aria-label="5928 users starred this repository">
           5.9k
        </a>
</form>
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="unstarred js-social-form" action="/kripken/sql.js/star" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="bUCarb8pl+CNlvj72cyVUVdxDmLuyBK6FZFYvtgf5UzqJmnP5XYLkAOOCpARSuWNP0GIVZ3ZDzE737/3voXmYQ==" />
      <input type="hidden" name="context" value="repository"></input>
      <button type="submit" class="btn btn-sm btn-with-count js-toggler-target" aria-label="Unstar this repository" title="Star kripken/sql.js" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;STAR_BUTTON&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="41b0f9343eb96a9779fba0aaa2505a6d919ce844fd11c2fd7ad4351f4582352f" data-ga-click="Repository, click star button, action:blob#show; text:Star">        <svg class="octicon octicon-star v-align-text-bottom" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z"/></svg>
        Star
</button>        <a class="social-count js-social-count" href="/kripken/sql.js/stargazers"
           aria-label="5928 users starred this repository">
          5.9k
        </a>
</form>  </div>

  </li>

  <li>
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="btn-with-count" action="/kripken/sql.js/fork" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="4S4mK7VMGVosGN48R+gdIJo06II+ZAg3yI03WlOJHq802v7T4SapuwVWhB/YRXm4PIv7+bM6suPToT8xk0s93Q==" />
            <button class="btn btn-sm btn-with-count" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;FORK_BUTTON&quot;,&quot;repository_id&quot;:3556910,&quot;client_id&quot;:&quot;546218073.1535384540&quot;,&quot;originating_request_id&quot;:&quot;F566:1454:F3E73:19D08D:5DCF1A99&quot;,&quot;originating_url&quot;:&quot;https://github.com/kripken/sql.js/blob/master/dist/sql-wasm-debug.js&quot;,&quot;referrer&quot;:&quot;https://github.com/kripken/sql.js/tree/master/dist&quot;,&quot;user_id&quot;:1779421}}" data-hydro-click-hmac="8a496cf923f4d49cdce5241d520206165bc7ed6a66bcb1778449b3944a558708" data-ga-click="Repository, show fork modal, action:blob#show; text:Fork" type="submit" title="Fork your own copy of kripken/sql.js to your account" aria-label="Fork your own copy of kripken/sql.js to your account">              <svg class="octicon octicon-repo-forked v-align-text-bottom" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 00-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 002 1a1.993 1.993 0 00-1 3.72V6.5l3 3v1.78A1.993 1.993 0 005 15a1.993 1.993 0 001-3.72V9.5l3-3V4.72A1.993 1.993 0 008 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
              Fork
</button></form>
    <a href="/kripken/sql.js/network/members" class="social-count"
       aria-label="697 users forked this repository">
      697
    </a>
  </li>
</ul>

      <h1 class="public ">
    <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a class="url fn" rel="author" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=173661" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/kripken">kripken</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a data-pjax="#js-repo-pjax-container" href="/kripken/sql.js">sql.js</a></strong>
  

</h1>

    </div>
    
<nav class="hx_reponav reponav js-repo-nav js-sidenav-container-pjax container-lg p-responsive d-none d-lg-block"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
    aria-label="Repository"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-hotkey="g c" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /kripken/sql.js" href="/kripken/sql.js">
      <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" data-hotkey="g i" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /kripken/sql.js/issues" href="/kripken/sql.js/issues">
        <svg class="octicon octicon-issue-opened" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 011.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">75</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a data-hotkey="g p" itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /kripken/sql.js/pulls" href="/kripken/sql.js/pulls">
      <svg class="octicon octicon-git-pull-request" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0010 15a1.993 1.993 0 001-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 00-1 3.72v6.56A1.993 1.993 0 002 15a1.993 1.993 0 001-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">9</span>
      <meta itemprop="position" content="3">
</a>  </span>


    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement" class="position-relative float-left">
      <a data-hotkey="g w" data-skip-pjax="true" class="js-selected-navigation-item reponav-item" data-selected-links="repo_actions /kripken/sql.js/actions" href="/kripken/sql.js/actions">
        <svg class="octicon octicon-play" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 8A7 7 0 110 8a7 7 0 0114 0zm-8.223 3.482l4.599-3.066a.5.5 0 000-.832L5.777 4.518A.5.5 0 005 4.934v6.132a.5.5 0 00.777.416z"/></svg>
        Actions
</a>
    </span>

    <a data-hotkey="g b" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /kripken/sql.js/projects" href="/kripken/sql.js/projects">
      <svg class="octicon octicon-project" viewBox="0 0 15 16" version="1.1" width="15" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 00-1 1v14a1 1 0 001 1h13a1 1 0 001-1V1a1 1 0 00-1-1z"/></svg>
      Projects
      <span class="Counter" >0</span>
</a>

    <a class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /kripken/sql.js/wiki" href="/kripken/sql.js/wiki">
      <svg class="octicon octicon-book" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      Wiki
</a>
    <a data-skip-pjax="true" class="js-selected-navigation-item reponav-item" data-selected-links="security alerts policy code_scanning /kripken/sql.js/security/advisories" href="/kripken/sql.js/security/advisories">
      <svg class="octicon octicon-shield" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M0 2l7-2 7 2v6.02C14 12.69 8.69 16 7 16c-1.69 0-7-3.31-7-7.98V2zm1 .75L7 1l6 1.75v5.268C13 12.104 8.449 15 7 15c-1.449 0-6-2.896-6-6.982V2.75zm1 .75L7 2v12c-1.207 0-5-2.482-5-5.985V3.5z"/></svg>
      Security
</a>
    <a class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse people /kripken/sql.js/pulse" href="/kripken/sql.js/pulse">
      <svg class="octicon octicon-graph" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
      Insights
</a>

</nav>

  <div class="reponav-wrapper reponav-small d-lg-none">
  <nav class="reponav js-reponav text-center no-wrap"
       itemscope
       itemtype="http://schema.org/BreadcrumbList">

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a class="js-selected-navigation-item selected reponav-item" itemprop="url" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /kripken/sql.js" href="/kripken/sql.js">
        <span itemprop="name">Code</span>
        <meta itemprop="position" content="1">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /kripken/sql.js/issues" href="/kripken/sql.js/issues">
          <span itemprop="name">Issues</span>
          <span class="Counter">75</span>
          <meta itemprop="position" content="2">
</a>      </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /kripken/sql.js/pulls" href="/kripken/sql.js/pulls">
        <span itemprop="name">Pull requests</span>
        <span class="Counter">9</span>
        <meta itemprop="position" content="3">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /kripken/sql.js/projects" href="/kripken/sql.js/projects">
          <span itemprop="name">Projects</span>
          <span class="Counter">0</span>
          <meta itemprop="position" content="4">
</a>      </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_wiki /kripken/sql.js/wiki" href="/kripken/sql.js/wiki">
          <span itemprop="name">Wiki</span>
          <meta itemprop="position" content="5">
</a>      </span>

      <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="security alerts policy code_scanning /kripken/sql.js/security/advisories" href="/kripken/sql.js/security/advisories">
        <span itemprop="name">Security</span>
        <meta itemprop="position" content="6">
</a>
      <a class="js-selected-navigation-item reponav-item" data-selected-links="pulse /kripken/sql.js/pulse" href="/kripken/sql.js/pulse">
        Pulse
</a>
      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="community /kripken/sql.js/community" href="/kripken/sql.js/community">
          Community
</a>      </span>

  </nav>
</div>


  </div>
<div class="container-lg clearfix new-discussion-timeline experiment-repo-nav  p-responsive">
  <div class="repository-content ">

    
    


  


    <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/kripken/sql.js/blob/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/dist/sql-wasm-debug.js">Permalink</a>

    <!-- blob contrib key: blob_contributors:v21:a5e7d44f670c8aa083c3f664cf58551b -->
      

    <div class="d-flex flex-items-start flex-shrink-0 pb-3 flex-column flex-md-row">
      <span class="d-flex flex-justify-between width-full width-md-auto">
        
<details class="details-reset details-overlay select-menu branch-select-menu  hx_rsm" id="branch-select-menu">
  <summary class="btn btn-sm select-menu-button css-truncate"
           data-hotkey="w"
           title="Switch branches or tags">
    <i>Branch:</i>
    <span class="css-truncate-target" data-menu-button>master</span>
  </summary>

  <details-menu class="select-menu-modal hx_rsm-modal position-absolute" style="z-index: 99;" src="/kripken/sql.js/ref-list/master/dist/sql-wasm-debug.js?source_action=show&amp;source_controller=blob" preload>
    <include-fragment class="select-menu-loading-overlay anim-pulse">
      <svg height="32" class="octicon octicon-octoface" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M14.7 5.34c.13-.32.55-1.59-.13-3.31 0 0-1.05-.33-3.44 1.3-1-.28-2.07-.32-3.13-.32s-2.13.04-3.13.32c-2.39-1.64-3.44-1.3-3.44-1.3-.68 1.72-.26 2.99-.13 3.31C.49 6.21 0 7.33 0 8.69 0 13.84 3.33 15 7.98 15S16 13.84 16 8.69c0-1.36-.49-2.48-1.3-3.35zM8 14.02c-3.3 0-5.98-.15-5.98-3.35 0-.76.38-1.48 1.02-2.07 1.07-.98 2.9-.46 4.96-.46 2.07 0 3.88-.52 4.96.46.65.59 1.02 1.3 1.02 2.07 0 3.19-2.68 3.35-5.98 3.35zM5.49 9.01c-.66 0-1.2.8-1.2 1.78s.54 1.79 1.2 1.79c.66 0 1.2-.8 1.2-1.79s-.54-1.78-1.2-1.78zm5.02 0c-.66 0-1.2.79-1.2 1.78s.54 1.79 1.2 1.79c.66 0 1.2-.8 1.2-1.79s-.53-1.78-1.2-1.78z"/></svg>
    </include-fragment>
  </details-menu>
</details>

        <div class="BtnGroup flex-shrink-0 d-md-none">
          <a href="/kripken/sql.js/find/master"
                class="js-pjax-capture-input btn btn-sm BtnGroup-item"
                data-pjax
                data-hotkey="t">
            Find file
          </a>
          <clipboard-copy value="dist/sql-wasm-debug.js" class="btn btn-sm BtnGroup-item">
            Copy path
          </clipboard-copy>
        </div>
      </span>
      <h2 id="blob-path" class="breadcrumb flex-auto min-width-0 text-normal flex-md-self-center ml-md-2 mr-md-3 my-2 my-md-0">
        <span class="js-repo-root text-bold"><span class="js-path-segment"><a data-pjax="true" href="/kripken/sql.js"><span>sql.js</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a data-pjax="true" href="/kripken/sql.js/tree/master/dist"><span>dist</span></a></span><span class="separator">/</span><strong class="final-path">sql-wasm-debug.js</strong>
      </h2>

      <div class="BtnGroup flex-shrink-0 d-none d-md-inline-block">
        <a href="/kripken/sql.js/find/master"
              class="js-pjax-capture-input btn btn-sm BtnGroup-item"
              data-pjax
              data-hotkey="t">
          Find file
        </a>
        <clipboard-copy value="dist/sql-wasm-debug.js" class="btn btn-sm BtnGroup-item">
          Copy path
        </clipboard-copy>
      </div>
    </div>



    
  <div class="Box Box--condensed d-flex flex-column flex-shrink-0">
      <div class="Box-body d-flex flex-justify-between bg-blue-light flex-column flex-md-row flex-items-start flex-md-items-center">
        <span class="pr-md-4 f6">
          <a rel="contributor" data-skip-pjax="true" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=552629" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/lovasoa"><img class="avatar" src="https://avatars1.githubusercontent.com/u/552629?s=40&amp;v=4" width="20" height="20" alt="@lovasoa" /></a>
          <a class="text-bold link-gray-dark lh-default v-align-middle" rel="contributor" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=552629" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/lovasoa">lovasoa</a>
            <span class="lh-default v-align-middle">
              <a data-pjax="true" title="Update compiled code for the latest SQLite" class="link-gray" href="/kripken/sql.js/commit/dda3553f9b71fd91fe45dd5488a081c5e24e8e65">Update compiled code for the latest SQLite</a>
            </span>
        </span>
        <span class="d-inline-block flex-shrink-0 v-align-bottom f6 mt-2 mt-md-0">
          <a class="pr-2 text-mono link-gray" href="/kripken/sql.js/commit/dda3553f9b71fd91fe45dd5488a081c5e24e8e65" data-pjax>dda3553</a>
          <relative-time datetime="2019-11-05T18:39:15Z" class="no-wrap">Nov 5, 2019</relative-time>
        </span>
      </div>

    <div class="Box-body d-flex flex-items-center flex-auto f6 border-bottom-0 flex-wrap" >
      <details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark float-left mr-2" id="blob_contributors_box">
        <summary class="btn-link">
          <span><strong>2</strong> contributors</span>
        </summary>
        <details-dialog
          class="Box Box--overlay d-flex flex-column anim-fade-in fast"
          aria-label="Users who have contributed to this file"
          src="/kripken/sql.js/contributors/master/dist/sql-wasm-debug.js/list" preload>
          <div class="Box-header">
            <button class="Box-btn-octicon btn-octicon float-right" type="button" aria-label="Close dialog" data-close-dialog>
              <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
            </button>
            <h3 class="Box-title">
              Users who have contributed to this file
            </h3>
          </div>
          <include-fragment class="octocat-spinner my-3" aria-label="Loading..."></include-fragment>
        </details-dialog>
      </details>
        <span class="">
    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=1330693" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/kripken/sql.js/commits/master/dist/sql-wasm-debug.js?author=Taytay">
      <img class="avatar mr-1" src="https://avatars1.githubusercontent.com/u/1330693?s=40&amp;v=4" width="20" height="20" alt="@Taytay" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=552629" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/kripken/sql.js/commits/master/dist/sql-wasm-debug.js?author=lovasoa">
      <img class="avatar mr-1" src="https://avatars1.githubusercontent.com/u/552629?s=40&amp;v=4" width="20" height="20" alt="@lovasoa" /> 
</a>
</span>

    </div>
  </div>





    <div class="Box mt-3 position-relative">
      
<div class="Box-header py-2 d-flex flex-column flex-shrink-0 flex-md-row flex-md-items-center">
  <div class="text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1 mt-2 mt-md-0">

      7772 lines (6866 sloc)
      <span class="file-info-divider"></span>
    299 KB
  </div>

  <div class="d-flex py-1 py-md-0 flex-auto flex-order-1 flex-md-order-2 flex-sm-grow-0 flex-justify-between">

    <div class="BtnGroup">
      <a id="raw-url" class="btn btn-sm BtnGroup-item" href="/kripken/sql.js/raw/master/dist/sql-wasm-debug.js">Raw</a>
        <a class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b" href="/kripken/sql.js/blame/master/dist/sql-wasm-debug.js">Blame</a>
      <a rel="nofollow" class="btn btn-sm BtnGroup-item" href="/kripken/sql.js/commits/master/dist/sql-wasm-debug.js">History</a>
    </div>


    <div>
            <a class="btn-octicon tooltipped tooltipped-nw"
               href="https://desktop.github.com"
               aria-label="Open this file in GitHub Desktop"
               data-ga-click="Repository, open with desktop, type:mac">
                <svg class="octicon octicon-device-desktop" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"/></svg>
            </a>

            <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="inline-form js-update-url-with-hash" action="/kripken/sql.js/edit/master/dist/sql-wasm-debug.js" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="+94u8kssjbA+aoaVbGmA+VX+JSStgmJrnEWfPSJPr5elU9pLvh5mAaq6nVIcyTOe8vEXXDUMfnH0InVb73DewA==" />
              <button class="btn-octicon tooltipped tooltipped-nw" type="submit"
                aria-label="Fork this project and edit the file" data-hotkey="e" data-disable-with>
                <svg class="octicon octicon-pencil" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 011.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
              </button>
</form>
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="inline-form" action="/kripken/sql.js/delete/master/dist/sql-wasm-debug.js" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="+ZeOGmIuELuTMyE3zATS7MN9sGIqKrsRag8HVr2+5ibWbywSxv45ynoS0AeH04sCZwJA8Uf7f6//v0fo052nMw==" />
            <button class="btn-octicon btn-octicon-danger tooltipped tooltipped-nw" type="submit"
              aria-label="Fork this project and delete the file" data-disable-with>
              <svg class="octicon octicon-trashcan" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
            </button>
</form>    </div>
  </div>
</div>




      

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-javascript ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> We are modularizing this manually because the current modularize setting in Emscripten has some issues:</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> https://github.com/kripken/emscripten/issues/5820</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> In addition, When you use emcc&#39;s modularization, it still expects to export a global object called `Module`,</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> which is able to be used/called before the WASM is loaded.</span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> The modularization below exports a promise that loads and resolves to the actual sql.js module.</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> That way, this module can&#39;t be used before the WASM is finished loading.</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> We are going to define a function that a user will call to start loading initializing our Sql.js library</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> However, that function might be called multiple times, and on subsequent calls, we don&#39;t actually want it to instantiate a new instance of the Module</span></td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Instead, we want to return the previously loaded module</span></td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> TODO: Make this not declare a global if used in the browser</span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> initSqlJsPromise <span class="pl-k">=</span> <span class="pl-c1">undefined</span>;</td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-en">initSqlJs</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">moduleConfig</span>) {</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (initSqlJsPromise){</td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> initSqlJsPromise;</td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> If we&#39;re here, we&#39;ve never called this function before</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line">    initSqlJsPromise <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Promise</span>((<span class="pl-smi">resolveModule</span>, <span class="pl-smi">reject</span>) <span class="pl-k">=&gt;</span> {</td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> We are modularizing this manually because the current modularize setting in Emscripten has some issues:</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> https://github.com/kripken/emscripten/issues/5820</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> properties to it, like `preRun`, `postRun`, etc</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> We are using that to get notified when the WASM has finished loading.</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Only then will we return our promise</span></td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> If they passed in a moduleConfig object, use that</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Otherwise, initialize Module to the empty object</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> Module <span class="pl-k">=</span> <span class="pl-k">typeof</span> moduleConfig <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> moduleConfig <span class="pl-k">:</span> {};</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> EMCC only allows for a single onAbort function (not an array of functions)</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> So if the user defined their own onAbort function, we remember it and call it</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> originalOnAbortFunction <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onAbort<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onAbort<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">errorThatCausedAbort</span>) {</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">reject</span>(<span class="pl-k">new</span> <span class="pl-en">Error</span>(errorThatCausedAbort));</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (originalOnAbortFunction){</td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">originalOnAbortFunction</span>(errorThatCausedAbort);</td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">||</span> [];</td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">push</span>(<span class="pl-k">function</span> () {</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> When Emscripted calls postRun, this promise resolves with the built Module</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">resolveModule</span>(Module);</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> There is a section of code in the emcc-generated code below that looks like this:</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> (Note that this is lowercase `module`)</span></td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if (typeof module !== &#39;undefined&#39;) {</span></td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>     module[&#39;exports&#39;] = Module;</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> }</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> When that runs, it&#39;s going to overwrite our own modularization export efforts in shell-post.js!</span></td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> but that carries with it additional unnecessary baggage/bugs we don&#39;t want either.</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> So, we have three options:</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> 1) We undefine `module`</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> 2) We remember what `module[&#39;exports&#39;]` was at the beginning of this function and we restore it later</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> 3) We write a script to remove those lines of code as part of the Make process.</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Since those are the only lines of code that care about module, we will undefine it. It&#39;s the most straightforward</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> of the options, and has the side effect of reducing emcc&#39;s efforts to modify the module if its output were to change in the future.</span></td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> That&#39;s a nice side effect since we&#39;re handling the modularization efforts ourselves</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">module</span> <span class="pl-k">=</span> <span class="pl-c1">undefined</span>;</td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> The emcc-generated code and shell-post.js code goes below,</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copyright 2010 The Emscripten Authors.  All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Emscripten is available under two separate licenses, the MIT license and the</span></td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> University of Illinois/NCSA Open Source License.  Both these licenses can be</span></td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> found in the LICENSE file.</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> The Module object: Our interface to the outside world. We import</span></td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> and export values on it. There are various ways Module can be used:</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 1. Not defined. We create it here</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 2. A function parameter, function(Module) { ..generated code.. }</span></td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 3. pre-run appended it, var Module = {}; ..generated code..</span></td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 4. External script tag defines var Module.</span></td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> We need to check if Module already exists (e.g. case 3 above).</span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Substitution will be replaced with actual code on later stage of the build,</span></td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> this way Closure Compiler will not mangle it (e.g. case 4. above).</span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Note that if you want to run closure, and also to use Module</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> after the generated code, you will need to define   var Module = {};</span></td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> before the code. Then that object will be used in the code, and you</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> can continue to use Module afterwards as well.</span></td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Module <span class="pl-k">=</span> <span class="pl-k">typeof</span> Module <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> Module <span class="pl-k">:</span> {};</td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> --pre-jses are emitted after the Module integration code, so that they can</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> refer to Module (if they choose; they can also define Module)</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Wait for preRun to run, and then finish our initialization</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runCompiledCode <span class="pl-k">=</span> (<span class="pl-k">function</span>() {<span class="pl-c"><span class="pl-c">//</span> Generated by CoffeeScript 1.12.7</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Database, <span class="pl-c1">NULL</span>, RegisterExtensionFunctions, SQLite, Statement, apiTemp, i, sqlite3_bind_blob, sqlite3_bind_double, sqlite3_bind_int, sqlite3_bind_parameter_index, sqlite3_bind_text, sqlite3_changes, sqlite3_clear_bindings, sqlite3_close_v2, sqlite3_column_blob, sqlite3_column_bytes, sqlite3_column_double, sqlite3_column_name, sqlite3_column_text, sqlite3_column_type, sqlite3_create_function_v2, sqlite3_data_count, sqlite3_errmsg, sqlite3_exec, sqlite3_finalize, sqlite3_free, sqlite3_open, sqlite3_prepare_v2, sqlite3_prepare_v2_sqlptr, sqlite3_reset, sqlite3_result_blob, sqlite3_result_double, sqlite3_result_error, sqlite3_result_int, sqlite3_result_int64, sqlite3_result_null, sqlite3_result_text, sqlite3_step, sqlite3_value_blob, sqlite3_value_bytes, sqlite3_value_double, sqlite3_value_int, sqlite3_value_text, sqlite3_value_type;</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line">apiTemp <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span>(<span class="pl-c1">4</span>);</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line">SQLite <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span> Represents a prepared statement.</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Prepared statements allow you to have a template sql string,</span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class="pl-c">that you can execute multiple times with different parameters.</span></td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class="pl-c">You can&#39;t instantiate this class directly, you have to use a [Database](Database.html)</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class="pl-c">object in order to create a statement.</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line"><span class="pl-c">**Warning**: When you close a database (using db.close()), all its statements are</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-c">closed too and become unusable.</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class="pl-c">@see Database.html#prepare-dynamic</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line"><span class="pl-c">@see https://en.wikipedia.org/wiki/Prepared_statement</span></td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line">Statement <span class="pl-k">=</span> (<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">Statement</span>(<span class="pl-smi">stmt1</span>, <span class="pl-smi">db</span>) {</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">stmt</span> <span class="pl-k">=</span> stmt1;</td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span> <span class="pl-k">=</span> db;</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">pos</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">allocatedmem</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Bind values to the parameters, after having reseted the statement</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  SQL statements can have parameters, named *&#39;?&#39;, &#39;?NNN&#39;, &#39;:VVV&#39;, &#39;@VVV&#39;, &#39;$VVV&#39;*,</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  where NNN is a number and VVV a string.</span></td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  This function binds these parameters to the given values.</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  *Warning*: &#39;:&#39;, &#39;@&#39;, and &#39;$&#39; are included in the parameters names</span></td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ## Binding values to named parameters</span></td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Bind values to named parameters</span></td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      var stmt = db.prepare(&quot;UPDATE test SET a=@newval WHERE id BETWEEN $mini AND $maxi&quot;);</span></td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      stmt.bind({$mini:10, $maxi:20, &#39;@newval&#39;:5});</span></td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  - Create a statement that contains parameters like &#39;$VVV&#39;, &#39;:VVV&#39;, &#39;@VVV&#39;</span></td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  - Call Statement.bind with an object as parameter</span></td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ## Binding values to parameters</span></td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Bind values to anonymous parameters</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      var stmt = db.prepare(&quot;UPDATE test SET a=? WHERE id BETWEEN ? AND ?&quot;);</span></td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      stmt.bind([5, 10, 20]);</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   - Create a statement that contains parameters like &#39;?&#39;, &#39;?NNN&#39;</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   - Call Statement.bind with an array as parameter</span></td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ## Value types</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  Javascript type | SQLite type</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  --- | ---</span></td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  number | REAL, INTEGER</span></td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  boolean | INTEGER</span></td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  string | TEXT</span></td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  Array, Uint8Array | BLOB</span></td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  null | NULL</span></td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @see http://www.sqlite.org/datatype3.html</span></td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @see http://www.sqlite.org/lang_expr.html#varparam</span></td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param values [Array,Object] The values to bind</span></td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Boolean] true if it worked</span></td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @throw [String] SQLite Error</span></td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>bind<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">values</span>) {</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>) {</td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Statement closed<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>reset<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">Array</span>.<span class="pl-en">isArray</span>(values)) {</td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindFromArray</span>(values);</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindFromObject</span>(values);</td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Execute the statement, fetching the the next line of result,</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  that can be retrieved with [Statement.get()](#get-dynamic) .</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Boolean] true if a row of result available</span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @throw [String] SQLite Error</span></td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> ret;</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>) {</td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Statement closed<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">pos</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">switch</span> (ret <span class="pl-k">=</span> <span class="pl-en">sqlite3_step</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>)) {</td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">ROW</span>:</td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">DONE</span>:</td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">db</span>.<span class="pl-en">handleError</span>(ret);</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getNumber</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">sqlite3_column_double</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos);</td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getString</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">sqlite3_column_text</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos);</td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getBlob</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> i, k, ptr, ref, result, size;</td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line">    size <span class="pl-k">=</span> <span class="pl-en">sqlite3_column_bytes</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos);</td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line">    ptr <span class="pl-k">=</span> <span class="pl-en">sqlite3_column_blob</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos);</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line">    result <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(size);</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (i <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, ref <span class="pl-k">=</span> size; <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> k <span class="pl-k">&lt;</span> ref <span class="pl-k">:</span> k <span class="pl-k">&gt;</span> ref; i <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> <span class="pl-k">++</span>k <span class="pl-k">:</span> <span class="pl-k">--</span>k) {</td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">      result[i] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr <span class="pl-k">+</span> i];</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> result;</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Get one row of results of a statement.</span></td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  If the first parameter is not provided, step must have been called before get.</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param [Array,Object] Optional: If set, the values will be bound to the statement, and it will be executed</span></td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Array&lt;String,Number,Uint8Array,null&gt;] One row of result</span></td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Print all the rows of the table test to the console</span></td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      var stmt = db.prepare(&quot;SELECT * FROM test&quot;);</span></td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      while (stmt.step()) console.log(stmt.get());</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>get<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">params</span>) {</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> field, k, ref, results1;</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (params <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>bind<span class="pl-pds">&#39;</span></span>](params) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">    results1 <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (field <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, ref <span class="pl-k">=</span> <span class="pl-en">sqlite3_data_count</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>); <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> k <span class="pl-k">&lt;</span> ref <span class="pl-k">:</span> k <span class="pl-k">&gt;</span> ref; field <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> <span class="pl-k">++</span>k <span class="pl-k">:</span> <span class="pl-k">--</span>k) {</td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">switch</span> (<span class="pl-en">sqlite3_column_type</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, field)) {</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">INTEGER</span>:</td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">FLOAT</span>:</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">results1</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getNumber</span>(field));</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">TEXT</span>:</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">results1</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getString</span>(field));</td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">BLOB</span>:</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">results1</span>.<span class="pl-c1">push</span>(<span class="pl-c1">this</span>.<span class="pl-en">getBlob</span>(field));</td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">results1</span>.<span class="pl-c1">push</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> results1;</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Get the list of column names of a row of result of a statement.</span></td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Array&lt;String&gt;] The names of the columns</span></td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example</span></td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      var stmt = db.prepare(&quot;SELECT 5 AS nbr, x&#39;616200&#39; AS data, NULL AS null_value;&quot;);</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      stmt.step(); // Execute the statement</span></td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      console.log(stmt.getColumnNames()); // Will print [&#39;nbr&#39;,&#39;data&#39;,&#39;null_value&#39;]</span></td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>getColumnNames<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> i, k, ref, results1;</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line">    results1 <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (i <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, ref <span class="pl-k">=</span> <span class="pl-en">sqlite3_data_count</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>); <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> k <span class="pl-k">&lt;</span> ref <span class="pl-k">:</span> k <span class="pl-k">&gt;</span> ref; i <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> <span class="pl-k">++</span>k <span class="pl-k">:</span> <span class="pl-k">--</span>k) {</td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">results1</span>.<span class="pl-c1">push</span>(<span class="pl-en">sqlite3_column_name</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, i));</td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> results1;</td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Get one row of result as a javascript object, associating column names with</span></td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  their value in the current row.</span></td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param [Array,Object] Optional: If set, the values will be bound to the statement, and it will be executed</span></td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Object] The row of result</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @see [Statement.get](#get-dynamic)</span></td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example</span></td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      var stmt = db.prepare(&quot;SELECT 5 AS nbr, x&#39;616200&#39; AS data, NULL AS null_value;&quot;);</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      stmt.step(); // Execute the statement</span></td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      console.log(stmt.getAsObject()); // Will print {nbr:5, data: Uint8Array([1,2,3]), null_value:null}</span></td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>getAsObject<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">params</span>) {</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> i, k, len, name, names, rowObject, values;</td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line">    values <span class="pl-k">=</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>get<span class="pl-pds">&#39;</span></span>](params);</td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">    names <span class="pl-k">=</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>getColumnNames<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">    rowObject <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (i <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">names</span>.<span class="pl-c1">length</span>; k <span class="pl-k">&lt;</span> len; i <span class="pl-k">=</span> <span class="pl-k">++</span>k) {</td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">      name <span class="pl-k">=</span> names[i];</td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">      rowObject[name] <span class="pl-k">=</span> values[i];</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> rowObject;</td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Shorthand for bind + step + reset</span></td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  Bind the values, execute the statement, ignoring the rows it returns, and resets it</span></td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param [Array,Object] Value to bind to the statement</span></td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>run<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">values</span>) {</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (values <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>bind<span class="pl-pds">&#39;</span></span>](values);</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>reset<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindString</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">string</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> bytes, strptr;</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line">    bytes <span class="pl-k">=</span> <span class="pl-en">intArrayFromString</span>(string);</td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">allocatedmem</span>.<span class="pl-c1">push</span>(strptr <span class="pl-k">=</span> <span class="pl-en">allocate</span>(bytes, <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">ALLOC_NORMAL</span>));</td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_bind_text</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos, strptr, <span class="pl-smi">bytes</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindBlob</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">array</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> blobptr;</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">allocatedmem</span>.<span class="pl-c1">push</span>(blobptr <span class="pl-k">=</span> <span class="pl-en">allocate</span>(array, <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">ALLOC_NORMAL</span>));</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_bind_blob</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos, blobptr, <span class="pl-smi">array</span>.<span class="pl-c1">length</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindNumber</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">num</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> bindfunc;</td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line">    bindfunc <span class="pl-k">=</span> num <span class="pl-k">===</span> (num <span class="pl-k">|</span> <span class="pl-c1">0</span>) <span class="pl-k">?</span> sqlite3_bind_int <span class="pl-k">:</span> sqlite3_bind_double;</td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span>.<span class="pl-en">handleError</span>(<span class="pl-en">bindfunc</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos, num));</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindNull</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">sqlite3_bind_blob</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, pos, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>) <span class="pl-k">===</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span>;</td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindValue</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">val</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pos <span class="pl-k">==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line">      pos <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">pos</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">switch</span> (<span class="pl-k">typeof</span> val) {</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>:</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindString</span>(val, pos);</td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>number<span class="pl-pds">&quot;</span></span>:</td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span>:</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindNumber</span>(val <span class="pl-k">+</span> <span class="pl-c1">0</span>, pos);</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>object<span class="pl-pds">&quot;</span></span>:</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (val <span class="pl-k">===</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindNull</span>(pos);</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">val</span>.<span class="pl-c1">length</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">bindBlob</span>(val, pos);</td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Wrong API use : tried to bind a value of an unknown type (<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> val <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>).<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Bind names and values of an object to the named parameters of the statement</span></td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param [Object]</span></td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @private</span></td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @nodoc</span></td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindFromObject</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">valuesObj</span>) {</td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> name, num, value;</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (name <span class="pl-k">in</span> valuesObj) {</td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line">      value <span class="pl-k">=</span> valuesObj[name];</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line">      num <span class="pl-k">=</span> <span class="pl-en">sqlite3_bind_parameter_index</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>, name);</td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (num <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>.<span class="pl-en">bindValue</span>(value, num);</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Bind values to numbered parameters</span></td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param [Array]</span></td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @private</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @nodoc</span></td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bindFromArray</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">values</span>) {</td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> k, len, num, value;</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (num <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">values</span>.<span class="pl-c1">length</span>; k <span class="pl-k">&lt;</span> len; num <span class="pl-k">=</span> <span class="pl-k">++</span>k) {</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">      value <span class="pl-k">=</span> values[num];</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">this</span>.<span class="pl-en">bindValue</span>(value, num <span class="pl-k">+</span> <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Reset a statement, so that it&#39;s parameters can be bound to new values</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  It also clears all previous bindings, freeing the memory used by bound parameters.</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>reset<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">freemem</span>();</td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">sqlite3_clear_bindings</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>) <span class="pl-k">===</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-en">sqlite3_reset</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>) <span class="pl-k">===</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span>;</td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Free the memory allocated during parameter binding</span></td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">freemem</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> mem;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (mem <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">allocatedmem</span>.<span class="pl-c1">pop</span>()) {</td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">_free</span>(mem);</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Free the memory used by the statement</span></td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Boolean] true in case of success</span></td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Statement</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> res;</td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">freemem</span>();</td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line">    res <span class="pl-k">=</span> <span class="pl-en">sqlite3_finalize</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>) <span class="pl-k">===</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span>;</td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">delete</span> <span class="pl-c1">this</span>.<span class="pl-smi">db</span>.<span class="pl-smi">statements</span>[<span class="pl-c1">this</span>.<span class="pl-smi">stmt</span>];</td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">stmt</span> <span class="pl-k">=</span> <span class="pl-c1">NULL</span>;</td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> res;</td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Statement;</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line">})();</td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line">Database <span class="pl-k">=</span> (<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">Database</span>(<span class="pl-smi">data</span>) {</td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-c1">filename</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>dbfile_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> (<span class="pl-c1">0xffffffff</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>() <span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (data <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">createDataFile</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">this</span>.<span class="pl-c1">filename</span>, data, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_open</span>(<span class="pl-c1">this</span>.<span class="pl-c1">filename</span>, apiTemp));</td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span> <span class="pl-k">=</span> <span class="pl-en">getValue</span>(apiTemp, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">RegisterExtensionFunctions</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>);</td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">statements</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">functions</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Execute an SQL query, ignoring the rows it returns.</span></td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param sql [String] a string containing some SQL text to execute</span></td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param params [Array] (*optional*) When the SQL statement contains placeholders, you can pass them in here. They will be bound to the statement before it is executed.</span></td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  If you use the params argument, you **cannot** provide an sql string that contains several</span></td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  queries (separated by &#39;;&#39;)</span></td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Insert values in a table</span></td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      db.run(&quot;INSERT INTO test VALUES (:age, :name)&quot;, {&#39;:age&#39;:18, &#39;:name&#39;:&#39;John&#39;});</span></td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Database] The database object (useful for method chaining)</span></td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>run<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">sql</span>, <span class="pl-smi">params</span>) {</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> stmt;</td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">db</span>) {</td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Database closed<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (params) {</td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line">      stmt <span class="pl-k">=</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>prepare<span class="pl-pds">&#39;</span></span>](sql, params);</td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line">        stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">        stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_exec</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>, sql, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, apiTemp));</td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Execute an SQL query, and returns the result.</span></td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  This is a wrapper against Database.prepare, Statement.step, Statement.get,</span></td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  and Statement.free.</span></td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  The result is an array of result elements. There are as many result elements</span></td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  as the number of statements in your sql string (statements are separated by a semicolon)</span></td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  Each result element is an object with two properties:</span></td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      &#39;columns&#39; : the name of the columns of the result (as returned by Statement.getColumnNames())</span></td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      &#39;values&#39; : an array of rows. Each row is itself an array of values</span></td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ## Example use</span></td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  We have the following table, named *test* :</span></td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  | id | age |  name  |</span></td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  |:--:|:---:|:------:|</span></td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  | 1  |  1  | Ling   |</span></td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  | 2  |  18 | Paul   |</span></td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  | 3  |  3  | Markus |</span></td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  We query it like that:</span></td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ```javascript</span></td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  var db = new SQL.Database();</span></td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  var res = db.exec(&quot;SELECT id FROM test; SELECT age,name FROM test;&quot;);</span></td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ```</span></td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  `res` is now :</span></td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ```javascript</span></td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      [</span></td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line"><span class="pl-c">          {columns: [&#39;id&#39;], values:[[1],[2],[3]]},</span></td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line"><span class="pl-c">          {columns: [&#39;age&#39;,&#39;name&#39;], values:[[1,&#39;Ling&#39;],[18,&#39;Paul&#39;],[3,&#39;Markus&#39;]]}</span></td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      ]</span></td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  ```</span></td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param sql [String] a string containing some SQL text to execute</span></td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Array&lt;QueryResults&gt;] An array of results.</span></td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>exec<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">sql</span>) {</td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> curresult, nextSqlPtr, pStmt, pzTail, results, stack, stmt;</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">db</span>) {</td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Database closed<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line">    stack <span class="pl-k">=</span> <span class="pl-en">stackSave</span>();</td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line">      nextSqlPtr <span class="pl-k">=</span> <span class="pl-en">allocateUTF8OnStack</span>(sql);</td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line">      pzTail <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span>(<span class="pl-c1">4</span>);</td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line">      results <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">while</span> (<span class="pl-en">getValue</span>(nextSqlPtr, <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!==</span> <span class="pl-c1">NULL</span>) {</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">setValue</span>(apiTemp, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">setValue</span>(pzTail, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_prepare_v2_sqlptr</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>, nextSqlPtr, <span class="pl-k">-</span><span class="pl-c1">1</span>, apiTemp, pzTail));</td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line">        pStmt <span class="pl-k">=</span> <span class="pl-en">getValue</span>(apiTemp, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line">        nextSqlPtr <span class="pl-k">=</span> <span class="pl-en">getValue</span>(pzTail, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (pStmt <span class="pl-k">===</span> <span class="pl-c1">NULL</span>) {</td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line">        curresult <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line">        stmt <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Statement</span>(pStmt, <span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">while</span> (stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>]()) {</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (curresult <span class="pl-k">===</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line">              curresult <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line">                <span class="pl-s"><span class="pl-pds">&#39;</span>columns<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>getColumnNames<span class="pl-pds">&#39;</span></span>](),</td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line">                <span class="pl-s"><span class="pl-pds">&#39;</span>values<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> []</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line">              };</td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">results</span>.<span class="pl-c1">push</span>(curresult);</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line">            curresult[<span class="pl-s"><span class="pl-pds">&#39;</span>values<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">push</span>(stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>get<span class="pl-pds">&#39;</span></span>]());</td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line">          stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> results;</td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">stackRestore</span>(stack);</td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Execute an sql statement, and call a callback for each row of result.</span></td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  **Currently** this method is synchronous, it will not return until the callback has</span></td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  been called on every row of the result. But this might change.</span></td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param sql [String] A string of SQL text. Can contain placeholders that will be</span></td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  bound to the parameters given as the second argument</span></td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param params [Array&lt;String,Number,null,Uint8Array&gt;] (*optional*) Parameters to bind</span></td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  to the query</span></td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param callback [Function(Object)] A function that will be called on each row of result</span></td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param done [Function] A function that will be called when all rows have been retrieved</span></td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Database] The database object. Useful for method chaining</span></td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Read values from a table</span></td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      db.each(&quot;SELECT name,age FROM users WHERE age &gt;= $majority&quot;,</span></td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                      {$majority:18},</span></td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                      function(row){console.log(row.name + &quot; is a grown-up.&quot;)}</span></td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  );</span></td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>each<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">sql</span>, <span class="pl-smi">params</span>, <span class="pl-smi">callback</span>, <span class="pl-smi">done</span>) {</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> stmt;</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> params <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line">      done <span class="pl-k">=</span> callback;</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line">      callback <span class="pl-k">=</span> params;</td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line">      params <span class="pl-k">=</span> <span class="pl-k">void</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line">    stmt <span class="pl-k">=</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>prepare<span class="pl-pds">&#39;</span></span>](sql, params);</td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">while</span> (stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>step<span class="pl-pds">&#39;</span></span>]()) {</td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">callback</span>(stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>getAsObject<span class="pl-pds">&#39;</span></span>]());</td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line">      stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> done <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">done</span>();</td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Prepare an SQL statement</span></td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param sql [String] a string of SQL, that can contain placeholders (&#39;?&#39;, &#39;:VVV&#39;, &#39;:AAA&#39;, &#39;@AAA&#39;)</span></td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param params [Array] (*optional*) values to bind to placeholders</span></td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Statement] the resulting statement</span></td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @throw [String] SQLite error</span></td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>prepare<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">sql</span>, <span class="pl-smi">params</span>) {</td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> pStmt, stmt;</td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">setValue</span>(apiTemp, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_prepare_v2</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>, sql, <span class="pl-k">-</span><span class="pl-c1">1</span>, apiTemp, <span class="pl-c1">NULL</span>));</td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line">    pStmt <span class="pl-k">=</span> <span class="pl-en">getValue</span>(apiTemp, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (pStmt <span class="pl-k">===</span> <span class="pl-c1">NULL</span>) {</td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Nothing to prepare<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line">    stmt <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Statement</span>(pStmt, <span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (params <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">stmt</span>.<span class="pl-en">bind</span>(params);</td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">statements</span>[pStmt] <span class="pl-k">=</span> stmt;</td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> stmt;</td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Exports the contents of the database to a binary array</span></td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Uint8Array] An array of bytes of the SQLite3 database file</span></td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>export<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> _, binaryDb, func, ref, ref1, stmt;</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line">    ref <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">statements</span>;</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (_ <span class="pl-k">in</span> ref) {</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line">      stmt <span class="pl-k">=</span> ref[_];</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line">      stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line">    ref1 <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">functions</span>;</td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (_ <span class="pl-k">in</span> ref1) {</td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line">      func <span class="pl-k">=</span> ref1[_];</td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">removeFunction</span>(func);</td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">functions</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_close_v2</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>));</td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line">    binaryDb <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">readFile</span>(<span class="pl-c1">this</span>.<span class="pl-c1">filename</span>, {</td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line">      encoding<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>binary<span class="pl-pds">&#39;</span></span></td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_open</span>(<span class="pl-c1">this</span>.<span class="pl-c1">filename</span>, apiTemp));</td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">db</span> <span class="pl-k">=</span> <span class="pl-en">getValue</span>(apiTemp, <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> binaryDb;</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Close the database, and all associated prepared statements.</span></td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  The memory associated to the database and all associated statements</span></td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  will be freed.</span></td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  **Warning**: A statement belonging to a database that has been closed cannot</span></td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  be used anymore.</span></td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  Databases **must** be closed, when you&#39;re finished with them, or the</span></td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  memory consumption will grow forever</span></td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>close<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> _, func, ref, ref1, stmt;</td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line">    ref <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">statements</span>;</td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (_ <span class="pl-k">in</span> ref) {</td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line">      stmt <span class="pl-k">=</span> ref[_];</td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line">      stmt[<span class="pl-s"><span class="pl-pds">&#39;</span>free<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line">    ref1 <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-smi">functions</span>;</td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (_ <span class="pl-k">in</span> ref1) {</td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line">      func <span class="pl-k">=</span> ref1[_];</td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">removeFunction</span>(func);</td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">functions</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_close_v2</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>));</td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">FS</span>.<span class="pl-en">unlink</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">this</span>.<span class="pl-c1">filename</span>);</td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">db</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Analyze a result code, return null if no error occured, and throw</span></td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  an error with a descriptive message otherwise</span></td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @nodoc</span></td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">handleError</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">returnCode</span>) {</td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> errmsg;</td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (returnCode <span class="pl-k">===</span> <span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span>) {</td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line">      errmsg <span class="pl-k">=</span> <span class="pl-en">sqlite3_errmsg</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>);</td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(errmsg);</td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Returns the number of rows modified, inserted or deleted by the</span></td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  most recently completed INSERT, UPDATE or DELETE statement on the</span></td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  database Executing any other type of SQL statement does not modify</span></td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  the value returned by this function.</span></td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @return [Number] the number of rows modified</span></td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>getRowsModified<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">sqlite3_changes</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>);</td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="LC743" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="LC744" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">/*</span> Register a custom function with SQLite</span></td>
      </tr>
      <tr>
        <td id="L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="LC745" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @example Register a simple function</span></td>
      </tr>
      <tr>
        <td id="L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="LC746" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      db.create_function(&quot;addOne&quot;, function(x) {return x+1;})</span></td>
      </tr>
      <tr>
        <td id="L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="LC747" class="blob-code blob-code-inner js-file-line"><span class="pl-c">      db.exec(&quot;SELECT addOne(1)&quot;) // = 2</span></td>
      </tr>
      <tr>
        <td id="L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="LC748" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  </span></td>
      </tr>
      <tr>
        <td id="L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="LC749" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param name [String] the name of the function as referenced in SQL statements.</span></td>
      </tr>
      <tr>
        <td id="L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="LC750" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  @param func [Function] the actual function to be executed.</span></td>
      </tr>
      <tr>
        <td id="L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="LC751" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="LC752" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="LC753" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">Database</span>.<span class="pl-c1">prototype</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>create_function<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">name</span>, <span class="pl-smi">func</span>) {</td>
      </tr>
      <tr>
        <td id="L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="LC754" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> func_ptr, wrapped_func;</td>
      </tr>
      <tr>
        <td id="L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="LC755" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">wrapped_func</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">cx</span>, <span class="pl-smi">argc</span>, <span class="pl-smi">argv</span>) {</td>
      </tr>
      <tr>
        <td id="L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="LC756" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> arg, args, blobptr, data_func, error, i, k, ref, result, value_ptr, value_type;</td>
      </tr>
      <tr>
        <td id="L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="LC757" class="blob-code blob-code-inner js-file-line">      args <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="LC758" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (i <span class="pl-k">=</span> k <span class="pl-k">=</span> <span class="pl-c1">0</span>, ref <span class="pl-k">=</span> argc; <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> k <span class="pl-k">&lt;</span> ref <span class="pl-k">:</span> k <span class="pl-k">&gt;</span> ref; i <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref <span class="pl-k">?</span> <span class="pl-k">++</span>k <span class="pl-k">:</span> <span class="pl-k">--</span>k) {</td>
      </tr>
      <tr>
        <td id="L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="LC759" class="blob-code blob-code-inner js-file-line">        value_ptr <span class="pl-k">=</span> <span class="pl-en">getValue</span>(argv <span class="pl-k">+</span> (<span class="pl-c1">4</span> <span class="pl-k">*</span> i), <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="LC760" class="blob-code blob-code-inner js-file-line">        value_type <span class="pl-k">=</span> <span class="pl-en">sqlite3_value_type</span>(value_ptr);</td>
      </tr>
      <tr>
        <td id="L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="LC761" class="blob-code blob-code-inner js-file-line">        data_func <span class="pl-k">=</span> (<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="LC762" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">switch</span> (<span class="pl-c1">false</span>) {</td>
      </tr>
      <tr>
        <td id="L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="LC763" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> value_type <span class="pl-k">!==</span> <span class="pl-c1">1</span>:</td>
      </tr>
      <tr>
        <td id="L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="LC764" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> sqlite3_value_double;</td>
      </tr>
      <tr>
        <td id="L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="LC765" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> value_type <span class="pl-k">!==</span> <span class="pl-c1">2</span>:</td>
      </tr>
      <tr>
        <td id="L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="LC766" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> sqlite3_value_double;</td>
      </tr>
      <tr>
        <td id="L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="LC767" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> value_type <span class="pl-k">!==</span> <span class="pl-c1">3</span>:</td>
      </tr>
      <tr>
        <td id="L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="LC768" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> sqlite3_value_text;</td>
      </tr>
      <tr>
        <td id="L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="LC769" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> value_type <span class="pl-k">!==</span> <span class="pl-c1">4</span>:</td>
      </tr>
      <tr>
        <td id="L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="LC770" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="LC771" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> blob_arg, blob_ptr, j, l, ref1, size;</td>
      </tr>
      <tr>
        <td id="L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="LC772" class="blob-code blob-code-inner js-file-line">                size <span class="pl-k">=</span> <span class="pl-en">sqlite3_value_bytes</span>(ptr);</td>
      </tr>
      <tr>
        <td id="L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="LC773" class="blob-code blob-code-inner js-file-line">                blob_ptr <span class="pl-k">=</span> <span class="pl-en">sqlite3_value_blob</span>(ptr);</td>
      </tr>
      <tr>
        <td id="L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="LC774" class="blob-code blob-code-inner js-file-line">                blob_arg <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(size);</td>
      </tr>
      <tr>
        <td id="L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="LC775" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (j <span class="pl-k">=</span> l <span class="pl-k">=</span> <span class="pl-c1">0</span>, ref1 <span class="pl-k">=</span> size; <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref1 <span class="pl-k">?</span> l <span class="pl-k">&lt;</span> ref1 <span class="pl-k">:</span> l <span class="pl-k">&gt;</span> ref1; j <span class="pl-k">=</span> <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> ref1 <span class="pl-k">?</span> <span class="pl-k">++</span>l <span class="pl-k">:</span> <span class="pl-k">--</span>l) {</td>
      </tr>
      <tr>
        <td id="L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="LC776" class="blob-code blob-code-inner js-file-line">                  blob_arg[j] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[blob_ptr <span class="pl-k">+</span> j];</td>
      </tr>
      <tr>
        <td id="L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="LC777" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="LC778" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> blob_arg;</td>
      </tr>
      <tr>
        <td id="L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="LC779" class="blob-code blob-code-inner js-file-line">              };</td>
      </tr>
      <tr>
        <td id="L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="LC780" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="LC781" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="LC782" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="LC783" class="blob-code blob-code-inner js-file-line">              };</td>
      </tr>
      <tr>
        <td id="L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="LC784" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="LC785" class="blob-code blob-code-inner js-file-line">        })();</td>
      </tr>
      <tr>
        <td id="L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="LC786" class="blob-code blob-code-inner js-file-line">        arg <span class="pl-k">=</span> <span class="pl-en">data_func</span>(value_ptr);</td>
      </tr>
      <tr>
        <td id="L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="LC787" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">args</span>.<span class="pl-c1">push</span>(arg);</td>
      </tr>
      <tr>
        <td id="L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="LC788" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="LC789" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="LC790" class="blob-code blob-code-inner js-file-line">        result <span class="pl-k">=</span> <span class="pl-smi">func</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, args);</td>
      </tr>
      <tr>
        <td id="L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="LC791" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">catch</span> (error1) {</td>
      </tr>
      <tr>
        <td id="L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="LC792" class="blob-code blob-code-inner js-file-line">        error <span class="pl-k">=</span> error1;</td>
      </tr>
      <tr>
        <td id="L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="LC793" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">sqlite3_result_error</span>(cx, error, <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="LC794" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="LC795" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="LC796" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">switch</span> (<span class="pl-k">typeof</span> result) {</td>
      </tr>
      <tr>
        <td id="L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="LC797" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>boolean<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="LC798" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">sqlite3_result_int</span>(cx, result <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="LC799" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="LC800" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="LC801" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">sqlite3_result_double</span>(cx, result);</td>
      </tr>
      <tr>
        <td id="L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="LC802" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="LC803" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="LC804" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">sqlite3_result_text</span>(cx, result, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="LC805" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="LC806" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="LC807" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (result <span class="pl-k">===</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="LC808" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">sqlite3_result_null</span>(cx);</td>
      </tr>
      <tr>
        <td id="L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="LC809" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">result</span>.<span class="pl-c1">length</span> <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="LC810" class="blob-code blob-code-inner js-file-line">            blobptr <span class="pl-k">=</span> <span class="pl-en">allocate</span>(result, <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">ALLOC_NORMAL</span>);</td>
      </tr>
      <tr>
        <td id="L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="LC811" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">sqlite3_result_blob</span>(cx, blobptr, <span class="pl-smi">result</span>.<span class="pl-c1">length</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="LC812" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">_free</span>(blobptr);</td>
      </tr>
      <tr>
        <td id="L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="LC813" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="LC814" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">sqlite3_result_error</span>(cx, <span class="pl-s"><span class="pl-pds">&quot;</span>Wrong API use : tried to return a value of an unknown type (<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> result <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>).<span class="pl-pds">&quot;</span></span>, <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="LC815" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="LC816" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="LC817" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="LC818" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">sqlite3_result_null</span>(cx);</td>
      </tr>
      <tr>
        <td id="L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="LC819" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="LC820" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="LC821" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (name <span class="pl-k">in</span> <span class="pl-c1">this</span>.<span class="pl-smi">functions</span>) {</td>
      </tr>
      <tr>
        <td id="L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="LC822" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">removeFunction</span>(<span class="pl-c1">this</span>.<span class="pl-smi">functions</span>[name]);</td>
      </tr>
      <tr>
        <td id="L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="LC823" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">delete</span> <span class="pl-c1">this</span>.<span class="pl-smi">functions</span>[name];</td>
      </tr>
      <tr>
        <td id="L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="LC824" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="LC825" class="blob-code blob-code-inner js-file-line">    func_ptr <span class="pl-k">=</span> <span class="pl-en">addFunction</span>(wrapped_func);</td>
      </tr>
      <tr>
        <td id="L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="LC826" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-smi">functions</span>[name] <span class="pl-k">=</span> func_ptr;</td>
      </tr>
      <tr>
        <td id="L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="LC827" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">this</span>.<span class="pl-en">handleError</span>(<span class="pl-en">sqlite3_create_function_v2</span>(<span class="pl-c1">this</span>.<span class="pl-smi">db</span>, name, <span class="pl-smi">func</span>.<span class="pl-c1">length</span>, <span class="pl-smi">SQLite</span>.<span class="pl-c1">UTF8</span>, <span class="pl-c1">0</span>, func_ptr, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="LC828" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="LC829" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="LC830" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="LC831" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Database;</td>
      </tr>
      <tr>
        <td id="L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="LC832" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="LC833" class="blob-code blob-code-inner js-file-line">})();</td>
      </tr>
      <tr>
        <td id="L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="LC834" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="LC835" class="blob-code blob-code-inner js-file-line">sqlite3_open <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_open<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="LC836" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="LC837" class="blob-code blob-code-inner js-file-line">sqlite3_close_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_close_v2<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="LC838" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="LC839" class="blob-code blob-code-inner js-file-line">sqlite3_exec <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_exec<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="LC840" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="LC841" class="blob-code blob-code-inner js-file-line">sqlite3_free <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_free<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="LC842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="LC843" class="blob-code blob-code-inner js-file-line">sqlite3_changes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_changes<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="LC844" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="LC845" class="blob-code blob-code-inner js-file-line">sqlite3_prepare_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_prepare_v2<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="LC846" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="LC847" class="blob-code blob-code-inner js-file-line">sqlite3_prepare_v2_sqlptr <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_prepare_v2<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="LC848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="LC849" class="blob-code blob-code-inner js-file-line">sqlite3_bind_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_bind_text<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="LC850" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="LC851" class="blob-code blob-code-inner js-file-line">sqlite3_bind_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_bind_blob<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="LC852" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="LC853" class="blob-code blob-code-inner js-file-line">sqlite3_bind_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_bind_double<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="LC854" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="LC855" class="blob-code blob-code-inner js-file-line">sqlite3_bind_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_bind_int<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="LC856" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="LC857" class="blob-code blob-code-inner js-file-line">sqlite3_bind_parameter_index <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_bind_parameter_index<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="LC858" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="LC859" class="blob-code blob-code-inner js-file-line">sqlite3_step <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_step<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="LC860" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="LC861" class="blob-code blob-code-inner js-file-line">sqlite3_errmsg <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_errmsg<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="LC862" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="LC863" class="blob-code blob-code-inner js-file-line">sqlite3_data_count <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_data_count<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="LC864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="LC865" class="blob-code blob-code-inner js-file-line">sqlite3_column_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_double<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="LC866" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="LC867" class="blob-code blob-code-inner js-file-line">sqlite3_column_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_text<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="LC868" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="LC869" class="blob-code blob-code-inner js-file-line">sqlite3_column_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_blob<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L870" class="blob-num js-line-number" data-line-number="870"></td>
        <td id="LC870" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L871" class="blob-num js-line-number" data-line-number="871"></td>
        <td id="LC871" class="blob-code blob-code-inner js-file-line">sqlite3_column_bytes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_bytes<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L872" class="blob-num js-line-number" data-line-number="872"></td>
        <td id="LC872" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L873" class="blob-num js-line-number" data-line-number="873"></td>
        <td id="LC873" class="blob-code blob-code-inner js-file-line">sqlite3_column_type <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_type<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L874" class="blob-num js-line-number" data-line-number="874"></td>
        <td id="LC874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L875" class="blob-num js-line-number" data-line-number="875"></td>
        <td id="LC875" class="blob-code blob-code-inner js-file-line">sqlite3_column_name <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_column_name<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L876" class="blob-num js-line-number" data-line-number="876"></td>
        <td id="LC876" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L877" class="blob-num js-line-number" data-line-number="877"></td>
        <td id="LC877" class="blob-code blob-code-inner js-file-line">sqlite3_reset <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_reset<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L878" class="blob-num js-line-number" data-line-number="878"></td>
        <td id="LC878" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L879" class="blob-num js-line-number" data-line-number="879"></td>
        <td id="LC879" class="blob-code blob-code-inner js-file-line">sqlite3_clear_bindings <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_clear_bindings<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L880" class="blob-num js-line-number" data-line-number="880"></td>
        <td id="LC880" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L881" class="blob-num js-line-number" data-line-number="881"></td>
        <td id="LC881" class="blob-code blob-code-inner js-file-line">sqlite3_finalize <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_finalize<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L882" class="blob-num js-line-number" data-line-number="882"></td>
        <td id="LC882" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L883" class="blob-num js-line-number" data-line-number="883"></td>
        <td id="LC883" class="blob-code blob-code-inner js-file-line">sqlite3_create_function_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_create_function_v2<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L884" class="blob-num js-line-number" data-line-number="884"></td>
        <td id="LC884" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L885" class="blob-num js-line-number" data-line-number="885"></td>
        <td id="LC885" class="blob-code blob-code-inner js-file-line">sqlite3_value_type <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_type<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L886" class="blob-num js-line-number" data-line-number="886"></td>
        <td id="LC886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L887" class="blob-num js-line-number" data-line-number="887"></td>
        <td id="LC887" class="blob-code blob-code-inner js-file-line">sqlite3_value_bytes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_bytes<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L888" class="blob-num js-line-number" data-line-number="888"></td>
        <td id="LC888" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L889" class="blob-num js-line-number" data-line-number="889"></td>
        <td id="LC889" class="blob-code blob-code-inner js-file-line">sqlite3_value_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_text<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L890" class="blob-num js-line-number" data-line-number="890"></td>
        <td id="LC890" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L891" class="blob-num js-line-number" data-line-number="891"></td>
        <td id="LC891" class="blob-code blob-code-inner js-file-line">sqlite3_value_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_int<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L892" class="blob-num js-line-number" data-line-number="892"></td>
        <td id="LC892" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L893" class="blob-num js-line-number" data-line-number="893"></td>
        <td id="LC893" class="blob-code blob-code-inner js-file-line">sqlite3_value_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_blob<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L894" class="blob-num js-line-number" data-line-number="894"></td>
        <td id="LC894" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L895" class="blob-num js-line-number" data-line-number="895"></td>
        <td id="LC895" class="blob-code blob-code-inner js-file-line">sqlite3_value_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_value_double<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L896" class="blob-num js-line-number" data-line-number="896"></td>
        <td id="LC896" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L897" class="blob-num js-line-number" data-line-number="897"></td>
        <td id="LC897" class="blob-code blob-code-inner js-file-line">sqlite3_result_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_double<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L898" class="blob-num js-line-number" data-line-number="898"></td>
        <td id="LC898" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L899" class="blob-num js-line-number" data-line-number="899"></td>
        <td id="LC899" class="blob-code blob-code-inner js-file-line">sqlite3_result_null <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_null<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L900" class="blob-num js-line-number" data-line-number="900"></td>
        <td id="LC900" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L901" class="blob-num js-line-number" data-line-number="901"></td>
        <td id="LC901" class="blob-code blob-code-inner js-file-line">sqlite3_result_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_text<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L902" class="blob-num js-line-number" data-line-number="902"></td>
        <td id="LC902" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L903" class="blob-num js-line-number" data-line-number="903"></td>
        <td id="LC903" class="blob-code blob-code-inner js-file-line">sqlite3_result_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_blob<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L904" class="blob-num js-line-number" data-line-number="904"></td>
        <td id="LC904" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L905" class="blob-num js-line-number" data-line-number="905"></td>
        <td id="LC905" class="blob-code blob-code-inner js-file-line">sqlite3_result_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_int<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L906" class="blob-num js-line-number" data-line-number="906"></td>
        <td id="LC906" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L907" class="blob-num js-line-number" data-line-number="907"></td>
        <td id="LC907" class="blob-code blob-code-inner js-file-line">sqlite3_result_int64 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_int64<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L908" class="blob-num js-line-number" data-line-number="908"></td>
        <td id="LC908" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L909" class="blob-num js-line-number" data-line-number="909"></td>
        <td id="LC909" class="blob-code blob-code-inner js-file-line">sqlite3_result_error <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>sqlite3_result_error<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L910" class="blob-num js-line-number" data-line-number="910"></td>
        <td id="LC910" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L911" class="blob-num js-line-number" data-line-number="911"></td>
        <td id="LC911" class="blob-code blob-code-inner js-file-line">RegisterExtensionFunctions <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cwrap<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>RegisterExtensionFunctions<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, [<span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L912" class="blob-num js-line-number" data-line-number="912"></td>
        <td id="LC912" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L913" class="blob-num js-line-number" data-line-number="913"></td>
        <td id="LC913" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>SQL<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L914" class="blob-num js-line-number" data-line-number="914"></td>
        <td id="LC914" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&#39;</span>Database<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> Database</td>
      </tr>
      <tr>
        <td id="L915" class="blob-num js-line-number" data-line-number="915"></td>
        <td id="LC915" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L916" class="blob-num js-line-number" data-line-number="916"></td>
        <td id="LC916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L917" class="blob-num js-line-number" data-line-number="917"></td>
        <td id="LC917" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span> (i <span class="pl-k">in</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>SQL<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L918" class="blob-num js-line-number" data-line-number="918"></td>
        <td id="LC918" class="blob-code blob-code-inner js-file-line">  Module[i] <span class="pl-k">=</span> <span class="pl-c1">this</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>SQL<span class="pl-pds">&#39;</span></span>][i];</td>
      </tr>
      <tr>
        <td id="L919" class="blob-num js-line-number" data-line-number="919"></td>
        <td id="LC919" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L920" class="blob-num js-line-number" data-line-number="920"></td>
        <td id="LC920" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L921" class="blob-num js-line-number" data-line-number="921"></td>
        <td id="LC921" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">NULL</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L922" class="blob-num js-line-number" data-line-number="922"></td>
        <td id="LC922" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L923" class="blob-num js-line-number" data-line-number="923"></td>
        <td id="LC923" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">OK</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L924" class="blob-num js-line-number" data-line-number="924"></td>
        <td id="LC924" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L925" class="blob-num js-line-number" data-line-number="925"></td>
        <td id="LC925" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">ERROR</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L926" class="blob-num js-line-number" data-line-number="926"></td>
        <td id="LC926" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L927" class="blob-num js-line-number" data-line-number="927"></td>
        <td id="LC927" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">INTERNAL</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L928" class="blob-num js-line-number" data-line-number="928"></td>
        <td id="LC928" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L929" class="blob-num js-line-number" data-line-number="929"></td>
        <td id="LC929" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">PERM</span> <span class="pl-k">=</span> <span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L930" class="blob-num js-line-number" data-line-number="930"></td>
        <td id="LC930" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L931" class="blob-num js-line-number" data-line-number="931"></td>
        <td id="LC931" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">ABORT</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L932" class="blob-num js-line-number" data-line-number="932"></td>
        <td id="LC932" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L933" class="blob-num js-line-number" data-line-number="933"></td>
        <td id="LC933" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">BUSY</span> <span class="pl-k">=</span> <span class="pl-c1">5</span>;</td>
      </tr>
      <tr>
        <td id="L934" class="blob-num js-line-number" data-line-number="934"></td>
        <td id="LC934" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L935" class="blob-num js-line-number" data-line-number="935"></td>
        <td id="LC935" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">LOCKED</span> <span class="pl-k">=</span> <span class="pl-c1">6</span>;</td>
      </tr>
      <tr>
        <td id="L936" class="blob-num js-line-number" data-line-number="936"></td>
        <td id="LC936" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L937" class="blob-num js-line-number" data-line-number="937"></td>
        <td id="LC937" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NOMEM</span> <span class="pl-k">=</span> <span class="pl-c1">7</span>;</td>
      </tr>
      <tr>
        <td id="L938" class="blob-num js-line-number" data-line-number="938"></td>
        <td id="LC938" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L939" class="blob-num js-line-number" data-line-number="939"></td>
        <td id="LC939" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">READONLY</span> <span class="pl-k">=</span> <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L940" class="blob-num js-line-number" data-line-number="940"></td>
        <td id="LC940" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L941" class="blob-num js-line-number" data-line-number="941"></td>
        <td id="LC941" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">INTERRUPT</span> <span class="pl-k">=</span> <span class="pl-c1">9</span>;</td>
      </tr>
      <tr>
        <td id="L942" class="blob-num js-line-number" data-line-number="942"></td>
        <td id="LC942" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L943" class="blob-num js-line-number" data-line-number="943"></td>
        <td id="LC943" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">IOERR</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>;</td>
      </tr>
      <tr>
        <td id="L944" class="blob-num js-line-number" data-line-number="944"></td>
        <td id="LC944" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L945" class="blob-num js-line-number" data-line-number="945"></td>
        <td id="LC945" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">CORRUPT</span> <span class="pl-k">=</span> <span class="pl-c1">11</span>;</td>
      </tr>
      <tr>
        <td id="L946" class="blob-num js-line-number" data-line-number="946"></td>
        <td id="LC946" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L947" class="blob-num js-line-number" data-line-number="947"></td>
        <td id="LC947" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NOTFOUND</span> <span class="pl-k">=</span> <span class="pl-c1">12</span>;</td>
      </tr>
      <tr>
        <td id="L948" class="blob-num js-line-number" data-line-number="948"></td>
        <td id="LC948" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L949" class="blob-num js-line-number" data-line-number="949"></td>
        <td id="LC949" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">FULL</span> <span class="pl-k">=</span> <span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L950" class="blob-num js-line-number" data-line-number="950"></td>
        <td id="LC950" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L951" class="blob-num js-line-number" data-line-number="951"></td>
        <td id="LC951" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">CANTOPEN</span> <span class="pl-k">=</span> <span class="pl-c1">14</span>;</td>
      </tr>
      <tr>
        <td id="L952" class="blob-num js-line-number" data-line-number="952"></td>
        <td id="LC952" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L953" class="blob-num js-line-number" data-line-number="953"></td>
        <td id="LC953" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">PROTOCOL</span> <span class="pl-k">=</span> <span class="pl-c1">15</span>;</td>
      </tr>
      <tr>
        <td id="L954" class="blob-num js-line-number" data-line-number="954"></td>
        <td id="LC954" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L955" class="blob-num js-line-number" data-line-number="955"></td>
        <td id="LC955" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">EMPTY</span> <span class="pl-k">=</span> <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L956" class="blob-num js-line-number" data-line-number="956"></td>
        <td id="LC956" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L957" class="blob-num js-line-number" data-line-number="957"></td>
        <td id="LC957" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">SCHEMA</span> <span class="pl-k">=</span> <span class="pl-c1">17</span>;</td>
      </tr>
      <tr>
        <td id="L958" class="blob-num js-line-number" data-line-number="958"></td>
        <td id="LC958" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L959" class="blob-num js-line-number" data-line-number="959"></td>
        <td id="LC959" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">TOOBIG</span> <span class="pl-k">=</span> <span class="pl-c1">18</span>;</td>
      </tr>
      <tr>
        <td id="L960" class="blob-num js-line-number" data-line-number="960"></td>
        <td id="LC960" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L961" class="blob-num js-line-number" data-line-number="961"></td>
        <td id="LC961" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">CONSTRAINT</span> <span class="pl-k">=</span> <span class="pl-c1">19</span>;</td>
      </tr>
      <tr>
        <td id="L962" class="blob-num js-line-number" data-line-number="962"></td>
        <td id="LC962" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L963" class="blob-num js-line-number" data-line-number="963"></td>
        <td id="LC963" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">MISMATCH</span> <span class="pl-k">=</span> <span class="pl-c1">20</span>;</td>
      </tr>
      <tr>
        <td id="L964" class="blob-num js-line-number" data-line-number="964"></td>
        <td id="LC964" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L965" class="blob-num js-line-number" data-line-number="965"></td>
        <td id="LC965" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">MISUSE</span> <span class="pl-k">=</span> <span class="pl-c1">21</span>;</td>
      </tr>
      <tr>
        <td id="L966" class="blob-num js-line-number" data-line-number="966"></td>
        <td id="LC966" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L967" class="blob-num js-line-number" data-line-number="967"></td>
        <td id="LC967" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NOLFS</span> <span class="pl-k">=</span> <span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L968" class="blob-num js-line-number" data-line-number="968"></td>
        <td id="LC968" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L969" class="blob-num js-line-number" data-line-number="969"></td>
        <td id="LC969" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">AUTH</span> <span class="pl-k">=</span> <span class="pl-c1">23</span>;</td>
      </tr>
      <tr>
        <td id="L970" class="blob-num js-line-number" data-line-number="970"></td>
        <td id="LC970" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L971" class="blob-num js-line-number" data-line-number="971"></td>
        <td id="LC971" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">FORMAT</span> <span class="pl-k">=</span> <span class="pl-c1">24</span>;</td>
      </tr>
      <tr>
        <td id="L972" class="blob-num js-line-number" data-line-number="972"></td>
        <td id="LC972" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L973" class="blob-num js-line-number" data-line-number="973"></td>
        <td id="LC973" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">RANGE</span> <span class="pl-k">=</span> <span class="pl-c1">25</span>;</td>
      </tr>
      <tr>
        <td id="L974" class="blob-num js-line-number" data-line-number="974"></td>
        <td id="LC974" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L975" class="blob-num js-line-number" data-line-number="975"></td>
        <td id="LC975" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NOTADB</span> <span class="pl-k">=</span> <span class="pl-c1">26</span>;</td>
      </tr>
      <tr>
        <td id="L976" class="blob-num js-line-number" data-line-number="976"></td>
        <td id="LC976" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L977" class="blob-num js-line-number" data-line-number="977"></td>
        <td id="LC977" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NOTICE</span> <span class="pl-k">=</span> <span class="pl-c1">27</span>;</td>
      </tr>
      <tr>
        <td id="L978" class="blob-num js-line-number" data-line-number="978"></td>
        <td id="LC978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L979" class="blob-num js-line-number" data-line-number="979"></td>
        <td id="LC979" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">WARNING</span> <span class="pl-k">=</span> <span class="pl-c1">28</span>;</td>
      </tr>
      <tr>
        <td id="L980" class="blob-num js-line-number" data-line-number="980"></td>
        <td id="LC980" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L981" class="blob-num js-line-number" data-line-number="981"></td>
        <td id="LC981" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">ROW</span> <span class="pl-k">=</span> <span class="pl-c1">100</span>;</td>
      </tr>
      <tr>
        <td id="L982" class="blob-num js-line-number" data-line-number="982"></td>
        <td id="LC982" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L983" class="blob-num js-line-number" data-line-number="983"></td>
        <td id="LC983" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">DONE</span> <span class="pl-k">=</span> <span class="pl-c1">101</span>;</td>
      </tr>
      <tr>
        <td id="L984" class="blob-num js-line-number" data-line-number="984"></td>
        <td id="LC984" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L985" class="blob-num js-line-number" data-line-number="985"></td>
        <td id="LC985" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">INTEGER</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L986" class="blob-num js-line-number" data-line-number="986"></td>
        <td id="LC986" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L987" class="blob-num js-line-number" data-line-number="987"></td>
        <td id="LC987" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">FLOAT</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L988" class="blob-num js-line-number" data-line-number="988"></td>
        <td id="LC988" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L989" class="blob-num js-line-number" data-line-number="989"></td>
        <td id="LC989" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">TEXT</span> <span class="pl-k">=</span> <span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L990" class="blob-num js-line-number" data-line-number="990"></td>
        <td id="LC990" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L991" class="blob-num js-line-number" data-line-number="991"></td>
        <td id="LC991" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">BLOB</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L992" class="blob-num js-line-number" data-line-number="992"></td>
        <td id="LC992" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L993" class="blob-num js-line-number" data-line-number="993"></td>
        <td id="LC993" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">NULL</span> <span class="pl-k">=</span> <span class="pl-c1">5</span>;</td>
      </tr>
      <tr>
        <td id="L994" class="blob-num js-line-number" data-line-number="994"></td>
        <td id="LC994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L995" class="blob-num js-line-number" data-line-number="995"></td>
        <td id="LC995" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">SQLite</span>.<span class="pl-c1">UTF8</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L996" class="blob-num js-line-number" data-line-number="996"></td>
        <td id="LC996" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L997" class="blob-num js-line-number" data-line-number="997"></td>
        <td id="LC997" class="blob-code blob-code-inner js-file-line">}).<span class="pl-en">bind</span>(<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L998" class="blob-num js-line-number" data-line-number="998"></td>
        <td id="LC998" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L999" class="blob-num js-line-number" data-line-number="999"></td>
        <td id="LC999" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onRuntimeInitialized<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> runCompiledCode;</td>
      </tr>
      <tr>
        <td id="L1000" class="blob-num js-line-number" data-line-number="1000"></td>
        <td id="LC1000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1001" class="blob-num js-line-number" data-line-number="1001"></td>
        <td id="LC1001" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1002" class="blob-num js-line-number" data-line-number="1002"></td>
        <td id="LC1002" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1003" class="blob-num js-line-number" data-line-number="1003"></td>
        <td id="LC1003" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Sometimes an existing Module object exists with properties</span></td>
      </tr>
      <tr>
        <td id="L1004" class="blob-num js-line-number" data-line-number="1004"></td>
        <td id="LC1004" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> meant to overwrite the default module functionality. Here</span></td>
      </tr>
      <tr>
        <td id="L1005" class="blob-num js-line-number" data-line-number="1005"></td>
        <td id="LC1005" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> we collect those properties and reapply _after_ we configure</span></td>
      </tr>
      <tr>
        <td id="L1006" class="blob-num js-line-number" data-line-number="1006"></td>
        <td id="LC1006" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> the current environment&#39;s defaults to avoid having to be so</span></td>
      </tr>
      <tr>
        <td id="L1007" class="blob-num js-line-number" data-line-number="1007"></td>
        <td id="LC1007" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> defensive during initialization.</span></td>
      </tr>
      <tr>
        <td id="L1008" class="blob-num js-line-number" data-line-number="1008"></td>
        <td id="LC1008" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> moduleOverrides <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L1009" class="blob-num js-line-number" data-line-number="1009"></td>
        <td id="LC1009" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> key;</td>
      </tr>
      <tr>
        <td id="L1010" class="blob-num js-line-number" data-line-number="1010"></td>
        <td id="LC1010" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span> (key <span class="pl-k">in</span> Module) {</td>
      </tr>
      <tr>
        <td id="L1011" class="blob-num js-line-number" data-line-number="1011"></td>
        <td id="LC1011" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-smi">Module</span>.<span class="pl-en">hasOwnProperty</span>(key)) {</td>
      </tr>
      <tr>
        <td id="L1012" class="blob-num js-line-number" data-line-number="1012"></td>
        <td id="LC1012" class="blob-code blob-code-inner js-file-line">    moduleOverrides[key] <span class="pl-k">=</span> Module[key];</td>
      </tr>
      <tr>
        <td id="L1013" class="blob-num js-line-number" data-line-number="1013"></td>
        <td id="LC1013" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1014" class="blob-num js-line-number" data-line-number="1014"></td>
        <td id="LC1014" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1015" class="blob-num js-line-number" data-line-number="1015"></td>
        <td id="LC1015" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1016" class="blob-num js-line-number" data-line-number="1016"></td>
        <td id="LC1016" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> arguments_ <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L1017" class="blob-num js-line-number" data-line-number="1017"></td>
        <td id="LC1017" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> thisProgram <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>./this.program<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1018" class="blob-num js-line-number" data-line-number="1018"></td>
        <td id="LC1018" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-en">quit_</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">status</span>, <span class="pl-smi">toThrow</span>) {</td>
      </tr>
      <tr>
        <td id="L1019" class="blob-num js-line-number" data-line-number="1019"></td>
        <td id="LC1019" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> toThrow;</td>
      </tr>
      <tr>
        <td id="L1020" class="blob-num js-line-number" data-line-number="1020"></td>
        <td id="LC1020" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1021" class="blob-num js-line-number" data-line-number="1021"></td>
        <td id="LC1021" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1022" class="blob-num js-line-number" data-line-number="1022"></td>
        <td id="LC1022" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Determine the runtime environment we are in. You can customize this by</span></td>
      </tr>
      <tr>
        <td id="L1023" class="blob-num js-line-number" data-line-number="1023"></td>
        <td id="LC1023" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> setting the ENVIRONMENT setting at compile time (see settings.js).</span></td>
      </tr>
      <tr>
        <td id="L1024" class="blob-num js-line-number" data-line-number="1024"></td>
        <td id="LC1024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1025" class="blob-num js-line-number" data-line-number="1025"></td>
        <td id="LC1025" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1026" class="blob-num js-line-number" data-line-number="1026"></td>
        <td id="LC1026" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ENVIRONMENT_IS_WORKER</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1027" class="blob-num js-line-number" data-line-number="1027"></td>
        <td id="LC1027" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ENVIRONMENT_IS_NODE</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1028" class="blob-num js-line-number" data-line-number="1028"></td>
        <td id="LC1028" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ENVIRONMENT_HAS_NODE</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1029" class="blob-num js-line-number" data-line-number="1029"></td>
        <td id="LC1029" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ENVIRONMENT_IS_SHELL</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1030" class="blob-num js-line-number" data-line-number="1030"></td>
        <td id="LC1030" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">=</span> <span class="pl-k">typeof</span> <span class="pl-c1">window</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1031" class="blob-num js-line-number" data-line-number="1031"></td>
        <td id="LC1031" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ENVIRONMENT_IS_WORKER</span> <span class="pl-k">=</span> <span class="pl-k">typeof</span> importScripts <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1032" class="blob-num js-line-number" data-line-number="1032"></td>
        <td id="LC1032" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> A web environment like Electron.js can have Node enabled, so we must</span></td>
      </tr>
      <tr>
        <td id="L1033" class="blob-num js-line-number" data-line-number="1033"></td>
        <td id="LC1033" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> distinguish between Node-enabled environments and Node environments per se.</span></td>
      </tr>
      <tr>
        <td id="L1034" class="blob-num js-line-number" data-line-number="1034"></td>
        <td id="LC1034" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> This will allow the former to do things like mount NODEFS.</span></td>
      </tr>
      <tr>
        <td id="L1035" class="blob-num js-line-number" data-line-number="1035"></td>
        <td id="LC1035" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Extended check using process.versions fixes issue #8816.</span></td>
      </tr>
      <tr>
        <td id="L1036" class="blob-num js-line-number" data-line-number="1036"></td>
        <td id="LC1036" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> (Also makes redundant the original check that &#39;require&#39; is a function.)</span></td>
      </tr>
      <tr>
        <td id="L1037" class="blob-num js-line-number" data-line-number="1037"></td>
        <td id="LC1037" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ENVIRONMENT_HAS_NODE</span> <span class="pl-k">=</span> <span class="pl-k">typeof</span> <span class="pl-c1">process</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> <span class="pl-c1">process</span>.<span class="pl-smi">versions</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> <span class="pl-c1">process</span>.<span class="pl-smi">versions</span>.<span class="pl-smi">node</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1038" class="blob-num js-line-number" data-line-number="1038"></td>
        <td id="LC1038" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ENVIRONMENT_IS_NODE</span> <span class="pl-k">=</span> <span class="pl-c1">ENVIRONMENT_HAS_NODE</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_WORKER</span>;</td>
      </tr>
      <tr>
        <td id="L1039" class="blob-num js-line-number" data-line-number="1039"></td>
        <td id="LC1039" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">ENVIRONMENT_IS_SHELL</span> <span class="pl-k">=</span> <span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_NODE</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_WORKER</span>;</td>
      </tr>
      <tr>
        <td id="L1040" class="blob-num js-line-number" data-line-number="1040"></td>
        <td id="LC1040" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1041" class="blob-num js-line-number" data-line-number="1041"></td>
        <td id="LC1041" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>ENVIRONMENT<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L1042" class="blob-num js-line-number" data-line-number="1042"></td>
        <td id="LC1042" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1043" class="blob-num js-line-number" data-line-number="1043"></td>
        <td id="LC1043" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1044" class="blob-num js-line-number" data-line-number="1044"></td>
        <td id="LC1044" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1045" class="blob-num js-line-number" data-line-number="1045"></td>
        <td id="LC1045" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1046" class="blob-num js-line-number" data-line-number="1046"></td>
        <td id="LC1046" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Three configurations we can be running in:</span></td>
      </tr>
      <tr>
        <td id="L1047" class="blob-num js-line-number" data-line-number="1047"></td>
        <td id="LC1047" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)</span></td>
      </tr>
      <tr>
        <td id="L1048" class="blob-num js-line-number" data-line-number="1048"></td>
        <td id="LC1048" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)</span></td>
      </tr>
      <tr>
        <td id="L1049" class="blob-num js-line-number" data-line-number="1049"></td>
        <td id="LC1049" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)</span></td>
      </tr>
      <tr>
        <td id="L1050" class="blob-num js-line-number" data-line-number="1050"></td>
        <td id="LC1050" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1051" class="blob-num js-line-number" data-line-number="1051"></td>
        <td id="LC1051" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1052" class="blob-num js-line-number" data-line-number="1052"></td>
        <td id="LC1052" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1053" class="blob-num js-line-number" data-line-number="1053"></td>
        <td id="LC1053" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1054" class="blob-num js-line-number" data-line-number="1054"></td>
        <td id="LC1054" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> `/` should be present at the end if `scriptDirectory` is not empty</span></td>
      </tr>
      <tr>
        <td id="L1055" class="blob-num js-line-number" data-line-number="1055"></td>
        <td id="LC1055" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> scriptDirectory <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1056" class="blob-num js-line-number" data-line-number="1056"></td>
        <td id="LC1056" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">locateFile</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L1057" class="blob-num js-line-number" data-line-number="1057"></td>
        <td id="LC1057" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>locateFile<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L1058" class="blob-num js-line-number" data-line-number="1058"></td>
        <td id="LC1058" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>locateFile<span class="pl-pds">&#39;</span></span>](path, scriptDirectory);</td>
      </tr>
      <tr>
        <td id="L1059" class="blob-num js-line-number" data-line-number="1059"></td>
        <td id="LC1059" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1060" class="blob-num js-line-number" data-line-number="1060"></td>
        <td id="LC1060" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> scriptDirectory <span class="pl-k">+</span> path;</td>
      </tr>
      <tr>
        <td id="L1061" class="blob-num js-line-number" data-line-number="1061"></td>
        <td id="LC1061" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1062" class="blob-num js-line-number" data-line-number="1062"></td>
        <td id="LC1062" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1063" class="blob-num js-line-number" data-line-number="1063"></td>
        <td id="LC1063" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Hooks that are implemented differently in different runtime environments.</span></td>
      </tr>
      <tr>
        <td id="L1064" class="blob-num js-line-number" data-line-number="1064"></td>
        <td id="LC1064" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> read_,</td>
      </tr>
      <tr>
        <td id="L1065" class="blob-num js-line-number" data-line-number="1065"></td>
        <td id="LC1065" class="blob-code blob-code-inner js-file-line">    readAsync,</td>
      </tr>
      <tr>
        <td id="L1066" class="blob-num js-line-number" data-line-number="1066"></td>
        <td id="LC1066" class="blob-code blob-code-inner js-file-line">    readBinary,</td>
      </tr>
      <tr>
        <td id="L1067" class="blob-num js-line-number" data-line-number="1067"></td>
        <td id="LC1067" class="blob-code blob-code-inner js-file-line">    setWindowTitle;</td>
      </tr>
      <tr>
        <td id="L1068" class="blob-num js-line-number" data-line-number="1068"></td>
        <td id="LC1068" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1069" class="blob-num js-line-number" data-line-number="1069"></td>
        <td id="LC1069" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_NODE</span>) {</td>
      </tr>
      <tr>
        <td id="L1070" class="blob-num js-line-number" data-line-number="1070"></td>
        <td id="LC1070" class="blob-code blob-code-inner js-file-line">  scriptDirectory <span class="pl-k">=</span> <span class="pl-c1">__dirname</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1071" class="blob-num js-line-number" data-line-number="1071"></td>
        <td id="LC1071" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1072" class="blob-num js-line-number" data-line-number="1072"></td>
        <td id="LC1072" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Expose functionality in the same simple way that the shells work</span></td>
      </tr>
      <tr>
        <td id="L1073" class="blob-num js-line-number" data-line-number="1073"></td>
        <td id="LC1073" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Note that we pollute the global namespace here, otherwise we break in node</span></td>
      </tr>
      <tr>
        <td id="L1074" class="blob-num js-line-number" data-line-number="1074"></td>
        <td id="LC1074" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> nodeFS;</td>
      </tr>
      <tr>
        <td id="L1075" class="blob-num js-line-number" data-line-number="1075"></td>
        <td id="LC1075" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> nodePath;</td>
      </tr>
      <tr>
        <td id="L1076" class="blob-num js-line-number" data-line-number="1076"></td>
        <td id="LC1076" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1077" class="blob-num js-line-number" data-line-number="1077"></td>
        <td id="LC1077" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">read_</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">shell_read</span>(<span class="pl-smi">filename</span>, <span class="pl-smi">binary</span>) {</td>
      </tr>
      <tr>
        <td id="L1078" class="blob-num js-line-number" data-line-number="1078"></td>
        <td id="LC1078" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> ret;</td>
      </tr>
      <tr>
        <td id="L1079" class="blob-num js-line-number" data-line-number="1079"></td>
        <td id="LC1079" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>nodeFS) nodeFS <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>fs<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1080" class="blob-num js-line-number" data-line-number="1080"></td>
        <td id="LC1080" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>nodePath) nodePath <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>path<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1081" class="blob-num js-line-number" data-line-number="1081"></td>
        <td id="LC1081" class="blob-code blob-code-inner js-file-line">      filename <span class="pl-k">=</span> nodePath[<span class="pl-s"><span class="pl-pds">&#39;</span>normalize<span class="pl-pds">&#39;</span></span>](filename);</td>
      </tr>
      <tr>
        <td id="L1082" class="blob-num js-line-number" data-line-number="1082"></td>
        <td id="LC1082" class="blob-code blob-code-inner js-file-line">      ret <span class="pl-k">=</span> nodeFS[<span class="pl-s"><span class="pl-pds">&#39;</span>readFileSync<span class="pl-pds">&#39;</span></span>](filename);</td>
      </tr>
      <tr>
        <td id="L1083" class="blob-num js-line-number" data-line-number="1083"></td>
        <td id="LC1083" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> binary <span class="pl-k">?</span> ret <span class="pl-k">:</span> <span class="pl-smi">ret</span>.<span class="pl-c1">toString</span>();</td>
      </tr>
      <tr>
        <td id="L1084" class="blob-num js-line-number" data-line-number="1084"></td>
        <td id="LC1084" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1085" class="blob-num js-line-number" data-line-number="1085"></td>
        <td id="LC1085" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1086" class="blob-num js-line-number" data-line-number="1086"></td>
        <td id="LC1086" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">readBinary</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">readBinary</span>(<span class="pl-smi">filename</span>) {</td>
      </tr>
      <tr>
        <td id="L1087" class="blob-num js-line-number" data-line-number="1087"></td>
        <td id="LC1087" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-en">read_</span>(filename, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L1088" class="blob-num js-line-number" data-line-number="1088"></td>
        <td id="LC1088" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">ret</span>.<span class="pl-smi">buffer</span>) {</td>
      </tr>
      <tr>
        <td id="L1089" class="blob-num js-line-number" data-line-number="1089"></td>
        <td id="LC1089" class="blob-code blob-code-inner js-file-line">      ret <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(ret);</td>
      </tr>
      <tr>
        <td id="L1090" class="blob-num js-line-number" data-line-number="1090"></td>
        <td id="LC1090" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1091" class="blob-num js-line-number" data-line-number="1091"></td>
        <td id="LC1091" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-smi">ret</span>.<span class="pl-smi">buffer</span>);</td>
      </tr>
      <tr>
        <td id="L1092" class="blob-num js-line-number" data-line-number="1092"></td>
        <td id="LC1092" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1093" class="blob-num js-line-number" data-line-number="1093"></td>
        <td id="LC1093" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1094" class="blob-num js-line-number" data-line-number="1094"></td>
        <td id="LC1094" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1095" class="blob-num js-line-number" data-line-number="1095"></td>
        <td id="LC1095" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>argv<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1096" class="blob-num js-line-number" data-line-number="1096"></td>
        <td id="LC1096" class="blob-code blob-code-inner js-file-line">    thisProgram <span class="pl-k">=</span> <span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>argv<span class="pl-pds">&#39;</span></span>][<span class="pl-c1">1</span>].<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\\</span><span class="pl-pds">/</span>g</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1097" class="blob-num js-line-number" data-line-number="1097"></td>
        <td id="LC1097" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1098" class="blob-num js-line-number" data-line-number="1098"></td>
        <td id="LC1098" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1099" class="blob-num js-line-number" data-line-number="1099"></td>
        <td id="LC1099" class="blob-code blob-code-inner js-file-line">  arguments_ <span class="pl-k">=</span> <span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>argv<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">slice</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L1100" class="blob-num js-line-number" data-line-number="1100"></td>
        <td id="LC1100" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1101" class="blob-num js-line-number" data-line-number="1101"></td>
        <td id="LC1101" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">module</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1102" class="blob-num js-line-number" data-line-number="1102"></td>
        <td id="LC1102" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">module</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>exports<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> Module;</td>
      </tr>
      <tr>
        <td id="L1103" class="blob-num js-line-number" data-line-number="1103"></td>
        <td id="LC1103" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1104" class="blob-num js-line-number" data-line-number="1104"></td>
        <td id="LC1104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1105" class="blob-num js-line-number" data-line-number="1105"></td>
        <td id="LC1105" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1106" class="blob-num js-line-number" data-line-number="1106"></td>
        <td id="LC1106" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>on<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>unhandledRejection<span class="pl-pds">&#39;</span></span>, abort);</td>
      </tr>
      <tr>
        <td id="L1107" class="blob-num js-line-number" data-line-number="1107"></td>
        <td id="LC1107" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1108" class="blob-num js-line-number" data-line-number="1108"></td>
        <td id="LC1108" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">quit_</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">status</span>) {</td>
      </tr>
      <tr>
        <td id="L1109" class="blob-num js-line-number" data-line-number="1109"></td>
        <td id="LC1109" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>exit<span class="pl-pds">&#39;</span></span>](status);</td>
      </tr>
      <tr>
        <td id="L1110" class="blob-num js-line-number" data-line-number="1110"></td>
        <td id="LC1110" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1111" class="blob-num js-line-number" data-line-number="1111"></td>
        <td id="LC1111" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1112" class="blob-num js-line-number" data-line-number="1112"></td>
        <td id="LC1112" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>inspect<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span> () { <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>[Emscripten Module object]<span class="pl-pds">&#39;</span></span>; };</td>
      </tr>
      <tr>
        <td id="L1113" class="blob-num js-line-number" data-line-number="1113"></td>
        <td id="LC1113" class="blob-code blob-code-inner js-file-line">} <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L1114" class="blob-num js-line-number" data-line-number="1114"></td>
        <td id="LC1114" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_SHELL</span>) {</td>
      </tr>
      <tr>
        <td id="L1115" class="blob-num js-line-number" data-line-number="1115"></td>
        <td id="LC1115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1116" class="blob-num js-line-number" data-line-number="1116"></td>
        <td id="LC1116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1117" class="blob-num js-line-number" data-line-number="1117"></td>
        <td id="LC1117" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> read <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1118" class="blob-num js-line-number" data-line-number="1118"></td>
        <td id="LC1118" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">read_</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">shell_read</span>(<span class="pl-smi">f</span>) {</td>
      </tr>
      <tr>
        <td id="L1119" class="blob-num js-line-number" data-line-number="1119"></td>
        <td id="LC1119" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">read</span>(f);</td>
      </tr>
      <tr>
        <td id="L1120" class="blob-num js-line-number" data-line-number="1120"></td>
        <td id="LC1120" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L1121" class="blob-num js-line-number" data-line-number="1121"></td>
        <td id="LC1121" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1122" class="blob-num js-line-number" data-line-number="1122"></td>
        <td id="LC1122" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1123" class="blob-num js-line-number" data-line-number="1123"></td>
        <td id="LC1123" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">readBinary</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">readBinary</span>(<span class="pl-smi">f</span>) {</td>
      </tr>
      <tr>
        <td id="L1124" class="blob-num js-line-number" data-line-number="1124"></td>
        <td id="LC1124" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> data;</td>
      </tr>
      <tr>
        <td id="L1125" class="blob-num js-line-number" data-line-number="1125"></td>
        <td id="LC1125" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> readbuffer <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1126" class="blob-num js-line-number" data-line-number="1126"></td>
        <td id="LC1126" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-en">readbuffer</span>(f));</td>
      </tr>
      <tr>
        <td id="L1127" class="blob-num js-line-number" data-line-number="1127"></td>
        <td id="LC1127" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1128" class="blob-num js-line-number" data-line-number="1128"></td>
        <td id="LC1128" class="blob-code blob-code-inner js-file-line">    data <span class="pl-k">=</span> <span class="pl-en">read</span>(f, <span class="pl-s"><span class="pl-pds">&#39;</span>binary<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1129" class="blob-num js-line-number" data-line-number="1129"></td>
        <td id="LC1129" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> data <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1130" class="blob-num js-line-number" data-line-number="1130"></td>
        <td id="LC1130" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> data;</td>
      </tr>
      <tr>
        <td id="L1131" class="blob-num js-line-number" data-line-number="1131"></td>
        <td id="LC1131" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1132" class="blob-num js-line-number" data-line-number="1132"></td>
        <td id="LC1132" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1133" class="blob-num js-line-number" data-line-number="1133"></td>
        <td id="LC1133" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> scriptArgs <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1134" class="blob-num js-line-number" data-line-number="1134"></td>
        <td id="LC1134" class="blob-code blob-code-inner js-file-line">    arguments_ <span class="pl-k">=</span> scriptArgs;</td>
      </tr>
      <tr>
        <td id="L1135" class="blob-num js-line-number" data-line-number="1135"></td>
        <td id="LC1135" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">arguments</span> <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1136" class="blob-num js-line-number" data-line-number="1136"></td>
        <td id="LC1136" class="blob-code blob-code-inner js-file-line">    arguments_ <span class="pl-k">=</span> <span class="pl-c1">arguments</span>;</td>
      </tr>
      <tr>
        <td id="L1137" class="blob-num js-line-number" data-line-number="1137"></td>
        <td id="LC1137" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1138" class="blob-num js-line-number" data-line-number="1138"></td>
        <td id="LC1138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1139" class="blob-num js-line-number" data-line-number="1139"></td>
        <td id="LC1139" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> quit <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1140" class="blob-num js-line-number" data-line-number="1140"></td>
        <td id="LC1140" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">quit_</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">status</span>) {</td>
      </tr>
      <tr>
        <td id="L1141" class="blob-num js-line-number" data-line-number="1141"></td>
        <td id="LC1141" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">quit</span>(status);</td>
      </tr>
      <tr>
        <td id="L1142" class="blob-num js-line-number" data-line-number="1142"></td>
        <td id="LC1142" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L1143" class="blob-num js-line-number" data-line-number="1143"></td>
        <td id="LC1143" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1144" class="blob-num js-line-number" data-line-number="1144"></td>
        <td id="LC1144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1145" class="blob-num js-line-number" data-line-number="1145"></td>
        <td id="LC1145" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> print <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1146" class="blob-num js-line-number" data-line-number="1146"></td>
        <td id="LC1146" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Prefer to use print/printErr where they exist, as they usually work better.</span></td>
      </tr>
      <tr>
        <td id="L1147" class="blob-num js-line-number" data-line-number="1147"></td>
        <td id="LC1147" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-en">console</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) <span class="pl-en">console</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L1148" class="blob-num js-line-number" data-line-number="1148"></td>
        <td id="LC1148" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">console</span>.<span class="pl-smi">log</span> <span class="pl-k">=</span> print;</td>
      </tr>
      <tr>
        <td id="L1149" class="blob-num js-line-number" data-line-number="1149"></td>
        <td id="LC1149" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">console</span>.<span class="pl-smi">warn</span> <span class="pl-k">=</span> <span class="pl-en">console</span>.<span class="pl-smi">error</span> <span class="pl-k">=</span> <span class="pl-k">typeof</span> printErr <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> printErr <span class="pl-k">:</span> print;</td>
      </tr>
      <tr>
        <td id="L1150" class="blob-num js-line-number" data-line-number="1150"></td>
        <td id="LC1150" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1151" class="blob-num js-line-number" data-line-number="1151"></td>
        <td id="LC1151" class="blob-code blob-code-inner js-file-line">} <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L1152" class="blob-num js-line-number" data-line-number="1152"></td>
        <td id="LC1152" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">||</span> <span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) {</td>
      </tr>
      <tr>
        <td id="L1153" class="blob-num js-line-number" data-line-number="1153"></td>
        <td id="LC1153" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) { <span class="pl-c"><span class="pl-c">//</span> Check worker, not web, since window could be polyfilled</span></td>
      </tr>
      <tr>
        <td id="L1154" class="blob-num js-line-number" data-line-number="1154"></td>
        <td id="LC1154" class="blob-code blob-code-inner js-file-line">    scriptDirectory <span class="pl-k">=</span> <span class="pl-smi">self</span>.<span class="pl-c1">location</span>.<span class="pl-c1">href</span>;</td>
      </tr>
      <tr>
        <td id="L1155" class="blob-num js-line-number" data-line-number="1155"></td>
        <td id="LC1155" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">document</span>.<span class="pl-smi">currentScript</span>) { <span class="pl-c"><span class="pl-c">//</span> web</span></td>
      </tr>
      <tr>
        <td id="L1156" class="blob-num js-line-number" data-line-number="1156"></td>
        <td id="LC1156" class="blob-code blob-code-inner js-file-line">    scriptDirectory <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-smi">currentScript</span>.<span class="pl-smi">src</span>;</td>
      </tr>
      <tr>
        <td id="L1157" class="blob-num js-line-number" data-line-number="1157"></td>
        <td id="LC1157" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1158" class="blob-num js-line-number" data-line-number="1158"></td>
        <td id="LC1158" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.</span></td>
      </tr>
      <tr>
        <td id="L1159" class="blob-num js-line-number" data-line-number="1159"></td>
        <td id="LC1159" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> otherwise, slice off the final part of the url to find the script directory.</span></td>
      </tr>
      <tr>
        <td id="L1160" class="blob-num js-line-number" data-line-number="1160"></td>
        <td id="LC1160" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> if scriptDirectory does not contain a slash, lastIndexOf will return -1,</span></td>
      </tr>
      <tr>
        <td id="L1161" class="blob-num js-line-number" data-line-number="1161"></td>
        <td id="LC1161" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> and scriptDirectory will correctly be replaced with an empty string.</span></td>
      </tr>
      <tr>
        <td id="L1162" class="blob-num js-line-number" data-line-number="1162"></td>
        <td id="LC1162" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-smi">scriptDirectory</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>blob:<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L1163" class="blob-num js-line-number" data-line-number="1163"></td>
        <td id="LC1163" class="blob-code blob-code-inner js-file-line">    scriptDirectory <span class="pl-k">=</span> <span class="pl-smi">scriptDirectory</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-smi">scriptDirectory</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>)<span class="pl-k">+</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1164" class="blob-num js-line-number" data-line-number="1164"></td>
        <td id="LC1164" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1165" class="blob-num js-line-number" data-line-number="1165"></td>
        <td id="LC1165" class="blob-code blob-code-inner js-file-line">    scriptDirectory <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1166" class="blob-num js-line-number" data-line-number="1166"></td>
        <td id="LC1166" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1167" class="blob-num js-line-number" data-line-number="1167"></td>
        <td id="LC1167" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1168" class="blob-num js-line-number" data-line-number="1168"></td>
        <td id="LC1168" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1169" class="blob-num js-line-number" data-line-number="1169"></td>
        <td id="LC1169" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">read_</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">shell_read</span>(<span class="pl-smi">url</span>) {</td>
      </tr>
      <tr>
        <td id="L1170" class="blob-num js-line-number" data-line-number="1170"></td>
        <td id="LC1170" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> xhr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>();</td>
      </tr>
      <tr>
        <td id="L1171" class="blob-num js-line-number" data-line-number="1171"></td>
        <td id="LC1171" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">xhr</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>GET<span class="pl-pds">&#39;</span></span>, url, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L1172" class="blob-num js-line-number" data-line-number="1172"></td>
        <td id="LC1172" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">xhr</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L1173" class="blob-num js-line-number" data-line-number="1173"></td>
        <td id="LC1173" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">responseText</span>;</td>
      </tr>
      <tr>
        <td id="L1174" class="blob-num js-line-number" data-line-number="1174"></td>
        <td id="LC1174" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1175" class="blob-num js-line-number" data-line-number="1175"></td>
        <td id="LC1175" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1176" class="blob-num js-line-number" data-line-number="1176"></td>
        <td id="LC1176" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) {</td>
      </tr>
      <tr>
        <td id="L1177" class="blob-num js-line-number" data-line-number="1177"></td>
        <td id="LC1177" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">readBinary</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">readBinary</span>(<span class="pl-smi">url</span>) {</td>
      </tr>
      <tr>
        <td id="L1178" class="blob-num js-line-number" data-line-number="1178"></td>
        <td id="LC1178" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> xhr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>();</td>
      </tr>
      <tr>
        <td id="L1179" class="blob-num js-line-number" data-line-number="1179"></td>
        <td id="LC1179" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">xhr</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>GET<span class="pl-pds">&#39;</span></span>, url, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L1180" class="blob-num js-line-number" data-line-number="1180"></td>
        <td id="LC1180" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">xhr</span>.<span class="pl-smi">responseType</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>arraybuffer<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1181" class="blob-num js-line-number" data-line-number="1181"></td>
        <td id="LC1181" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">xhr</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L1182" class="blob-num js-line-number" data-line-number="1182"></td>
        <td id="LC1182" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-smi">xhr</span>.<span class="pl-smi">response</span>);</td>
      </tr>
      <tr>
        <td id="L1183" class="blob-num js-line-number" data-line-number="1183"></td>
        <td id="LC1183" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L1184" class="blob-num js-line-number" data-line-number="1184"></td>
        <td id="LC1184" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1185" class="blob-num js-line-number" data-line-number="1185"></td>
        <td id="LC1185" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1186" class="blob-num js-line-number" data-line-number="1186"></td>
        <td id="LC1186" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">readAsync</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">readAsync</span>(<span class="pl-smi">url</span>, <span class="pl-smi">onload</span>, <span class="pl-smi">onerror</span>) {</td>
      </tr>
      <tr>
        <td id="L1187" class="blob-num js-line-number" data-line-number="1187"></td>
        <td id="LC1187" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> xhr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>();</td>
      </tr>
      <tr>
        <td id="L1188" class="blob-num js-line-number" data-line-number="1188"></td>
        <td id="LC1188" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">xhr</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>GET<span class="pl-pds">&#39;</span></span>, url, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L1189" class="blob-num js-line-number" data-line-number="1189"></td>
        <td id="LC1189" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">xhr</span>.<span class="pl-smi">responseType</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>arraybuffer<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1190" class="blob-num js-line-number" data-line-number="1190"></td>
        <td id="LC1190" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">xhr</span>.<span class="pl-en">onload</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">xhr_onload</span>() {</td>
      </tr>
      <tr>
        <td id="L1191" class="blob-num js-line-number" data-line-number="1191"></td>
        <td id="LC1191" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">==</span> <span class="pl-c1">200</span> <span class="pl-k">||</span> (<span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">xhr</span>.<span class="pl-smi">response</span>)) { <span class="pl-c"><span class="pl-c">//</span> file URLs can return 0</span></td>
      </tr>
      <tr>
        <td id="L1192" class="blob-num js-line-number" data-line-number="1192"></td>
        <td id="LC1192" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">onload</span>(<span class="pl-smi">xhr</span>.<span class="pl-smi">response</span>);</td>
      </tr>
      <tr>
        <td id="L1193" class="blob-num js-line-number" data-line-number="1193"></td>
        <td id="LC1193" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L1194" class="blob-num js-line-number" data-line-number="1194"></td>
        <td id="LC1194" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1195" class="blob-num js-line-number" data-line-number="1195"></td>
        <td id="LC1195" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">onerror</span>();</td>
      </tr>
      <tr>
        <td id="L1196" class="blob-num js-line-number" data-line-number="1196"></td>
        <td id="LC1196" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L1197" class="blob-num js-line-number" data-line-number="1197"></td>
        <td id="LC1197" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">xhr</span>.<span class="pl-smi">onerror</span> <span class="pl-k">=</span> onerror;</td>
      </tr>
      <tr>
        <td id="L1198" class="blob-num js-line-number" data-line-number="1198"></td>
        <td id="LC1198" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">xhr</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L1199" class="blob-num js-line-number" data-line-number="1199"></td>
        <td id="LC1199" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1200" class="blob-num js-line-number" data-line-number="1200"></td>
        <td id="LC1200" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1201" class="blob-num js-line-number" data-line-number="1201"></td>
        <td id="LC1201" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">setWindowTitle</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">title</span>) { <span class="pl-c1">document</span>.<span class="pl-c1">title</span> <span class="pl-k">=</span> title };</td>
      </tr>
      <tr>
        <td id="L1202" class="blob-num js-line-number" data-line-number="1202"></td>
        <td id="LC1202" class="blob-code blob-code-inner js-file-line">} <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L1203" class="blob-num js-line-number" data-line-number="1203"></td>
        <td id="LC1203" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1204" class="blob-num js-line-number" data-line-number="1204"></td>
        <td id="LC1204" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>environment detection error<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1205" class="blob-num js-line-number" data-line-number="1205"></td>
        <td id="LC1205" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1206" class="blob-num js-line-number" data-line-number="1206"></td>
        <td id="LC1206" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1207" class="blob-num js-line-number" data-line-number="1207"></td>
        <td id="LC1207" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Set up the out() and err() hooks, which are how we can print to stdout or</span></td>
      </tr>
      <tr>
        <td id="L1208" class="blob-num js-line-number" data-line-number="1208"></td>
        <td id="LC1208" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> stderr, respectively.</span></td>
      </tr>
      <tr>
        <td id="L1209" class="blob-num js-line-number" data-line-number="1209"></td>
        <td id="LC1209" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> out <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>print<span class="pl-pds">&#39;</span></span>] <span class="pl-k">||</span> <span class="pl-en">console</span>.<span class="pl-smi">log</span>.<span class="pl-en">bind</span>(<span class="pl-en">console</span>);</td>
      </tr>
      <tr>
        <td id="L1210" class="blob-num js-line-number" data-line-number="1210"></td>
        <td id="LC1210" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> err <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>printErr<span class="pl-pds">&#39;</span></span>] <span class="pl-k">||</span> <span class="pl-en">console</span>.<span class="pl-smi">warn</span>.<span class="pl-en">bind</span>(<span class="pl-en">console</span>);</td>
      </tr>
      <tr>
        <td id="L1211" class="blob-num js-line-number" data-line-number="1211"></td>
        <td id="LC1211" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1212" class="blob-num js-line-number" data-line-number="1212"></td>
        <td id="LC1212" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Merge back in the overrides</span></td>
      </tr>
      <tr>
        <td id="L1213" class="blob-num js-line-number" data-line-number="1213"></td>
        <td id="LC1213" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span> (key <span class="pl-k">in</span> moduleOverrides) {</td>
      </tr>
      <tr>
        <td id="L1214" class="blob-num js-line-number" data-line-number="1214"></td>
        <td id="LC1214" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-smi">moduleOverrides</span>.<span class="pl-en">hasOwnProperty</span>(key)) {</td>
      </tr>
      <tr>
        <td id="L1215" class="blob-num js-line-number" data-line-number="1215"></td>
        <td id="LC1215" class="blob-code blob-code-inner js-file-line">    Module[key] <span class="pl-k">=</span> moduleOverrides[key];</td>
      </tr>
      <tr>
        <td id="L1216" class="blob-num js-line-number" data-line-number="1216"></td>
        <td id="LC1216" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1217" class="blob-num js-line-number" data-line-number="1217"></td>
        <td id="LC1217" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1218" class="blob-num js-line-number" data-line-number="1218"></td>
        <td id="LC1218" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Free the object hierarchy contained in the overrides, this lets the GC</span></td>
      </tr>
      <tr>
        <td id="L1219" class="blob-num js-line-number" data-line-number="1219"></td>
        <td id="LC1219" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.</span></td>
      </tr>
      <tr>
        <td id="L1220" class="blob-num js-line-number" data-line-number="1220"></td>
        <td id="LC1220" class="blob-code blob-code-inner js-file-line">moduleOverrides <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L1221" class="blob-num js-line-number" data-line-number="1221"></td>
        <td id="LC1221" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1222" class="blob-num js-line-number" data-line-number="1222"></td>
        <td id="LC1222" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Emit code to handle expected values on the Module object. This applies Module.x</span></td>
      </tr>
      <tr>
        <td id="L1223" class="blob-num js-line-number" data-line-number="1223"></td>
        <td id="LC1223" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> to the proper local x. This has two benefits: first, we only emit it if it is</span></td>
      </tr>
      <tr>
        <td id="L1224" class="blob-num js-line-number" data-line-number="1224"></td>
        <td id="LC1224" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> expected to arrive, and second, by using a local everywhere else that can be</span></td>
      </tr>
      <tr>
        <td id="L1225" class="blob-num js-line-number" data-line-number="1225"></td>
        <td id="LC1225" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> minified.</span></td>
      </tr>
      <tr>
        <td id="L1226" class="blob-num js-line-number" data-line-number="1226"></td>
        <td id="LC1226" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>arguments<span class="pl-pds">&#39;</span></span>]) arguments_ <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>arguments<span class="pl-pds">&#39;</span></span>];<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>arguments<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>arguments<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.arguments has been replaced with plain arguments_<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1227" class="blob-num js-line-number" data-line-number="1227"></td>
        <td id="LC1227" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>thisProgram<span class="pl-pds">&#39;</span></span>]) thisProgram <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>thisProgram<span class="pl-pds">&#39;</span></span>];<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>thisProgram<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>thisProgram<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.thisProgram has been replaced with plain thisProgram<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1228" class="blob-num js-line-number" data-line-number="1228"></td>
        <td id="LC1228" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>quit<span class="pl-pds">&#39;</span></span>]) quit_ <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>quit<span class="pl-pds">&#39;</span></span>];<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>quit<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>quit<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.quit has been replaced with plain quit_<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1229" class="blob-num js-line-number" data-line-number="1229"></td>
        <td id="LC1229" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1230" class="blob-num js-line-number" data-line-number="1230"></td>
        <td id="LC1230" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message</span></td>
      </tr>
      <tr>
        <td id="L1231" class="blob-num js-line-number" data-line-number="1231"></td>
        <td id="LC1231" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Assertions on removed incoming Module JS APIs.</span></td>
      </tr>
      <tr>
        <td id="L1232" class="blob-num js-line-number" data-line-number="1232"></td>
        <td id="LC1232" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>memoryInitializerPrefixURL<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1233" class="blob-num js-line-number" data-line-number="1233"></td>
        <td id="LC1233" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>pthreadMainPrefixURL<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1234" class="blob-num js-line-number" data-line-number="1234"></td>
        <td id="LC1234" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>cdInitializerPrefixURL<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1235" class="blob-num js-line-number" data-line-number="1235"></td>
        <td id="LC1235" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>filePackagePrefixURL<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.filePackagePrefixURL option was removed, use Module.locateFile instead<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1236" class="blob-num js-line-number" data-line-number="1236"></td>
        <td id="LC1236" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>read<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.read option was removed (modify read_ in JS)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1237" class="blob-num js-line-number" data-line-number="1237"></td>
        <td id="LC1237" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>readAsync<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.readAsync option was removed (modify readAsync in JS)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1238" class="blob-num js-line-number" data-line-number="1238"></td>
        <td id="LC1238" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>readBinary<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.readBinary option was removed (modify readBinary in JS)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1239" class="blob-num js-line-number" data-line-number="1239"></td>
        <td id="LC1239" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>setWindowTitle<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Module.setWindowTitle option was removed (modify setWindowTitle in JS)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1240" class="blob-num js-line-number" data-line-number="1240"></td>
        <td id="LC1240" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>read<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>read<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.read has been replaced with plain read_<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1241" class="blob-num js-line-number" data-line-number="1241"></td>
        <td id="LC1241" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>readAsync<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>readAsync<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.readAsync has been replaced with plain readAsync<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1242" class="blob-num js-line-number" data-line-number="1242"></td>
        <td id="LC1242" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>readBinary<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>readBinary<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.readBinary has been replaced with plain readBinary<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1243" class="blob-num js-line-number" data-line-number="1243"></td>
        <td id="LC1243" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, &#39;setWindowTitle&#39;)) Object.defineProperty(Module, &#39;setWindowTitle&#39;, { get: function() { abort(&#39;Module.setWindowTitle has been replaced with plain setWindowTitle&#39;) } });</span></td>
      </tr>
      <tr>
        <td id="L1244" class="blob-num js-line-number" data-line-number="1244"></td>
        <td id="LC1244" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1245" class="blob-num js-line-number" data-line-number="1245"></td>
        <td id="LC1245" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1246" class="blob-num js-line-number" data-line-number="1246"></td>
        <td id="LC1246" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> TODO remove when SDL2 is fixed (also see above)</span></td>
      </tr>
      <tr>
        <td id="L1247" class="blob-num js-line-number" data-line-number="1247"></td>
        <td id="LC1247" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1248" class="blob-num js-line-number" data-line-number="1248"></td>
        <td id="LC1248" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1249" class="blob-num js-line-number" data-line-number="1249"></td>
        <td id="LC1249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1250" class="blob-num js-line-number" data-line-number="1250"></td>
        <td id="LC1250" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copyright 2017 The Emscripten Authors.  All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L1251" class="blob-num js-line-number" data-line-number="1251"></td>
        <td id="LC1251" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Emscripten is available under two separate licenses, the MIT license and the</span></td>
      </tr>
      <tr>
        <td id="L1252" class="blob-num js-line-number" data-line-number="1252"></td>
        <td id="LC1252" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> University of Illinois/NCSA Open Source License.  Both these licenses can be</span></td>
      </tr>
      <tr>
        <td id="L1253" class="blob-num js-line-number" data-line-number="1253"></td>
        <td id="LC1253" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> found in the LICENSE file.</span></td>
      </tr>
      <tr>
        <td id="L1254" class="blob-num js-line-number" data-line-number="1254"></td>
        <td id="LC1254" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1255" class="blob-num js-line-number" data-line-number="1255"></td>
        <td id="LC1255" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> {{PREAMBLE_ADDITIONS}}</span></td>
      </tr>
      <tr>
        <td id="L1256" class="blob-num js-line-number" data-line-number="1256"></td>
        <td id="LC1256" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1257" class="blob-num js-line-number" data-line-number="1257"></td>
        <td id="LC1257" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">STACK_ALIGN</span> <span class="pl-k">=</span> <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L1258" class="blob-num js-line-number" data-line-number="1258"></td>
        <td id="LC1258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1259" class="blob-num js-line-number" data-line-number="1259"></td>
        <td id="LC1259" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> stack management, and other functionality that is provided by the compiled code,</span></td>
      </tr>
      <tr>
        <td id="L1260" class="blob-num js-line-number" data-line-number="1260"></td>
        <td id="LC1260" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> should not be used before it is ready</span></td>
      </tr>
      <tr>
        <td id="L1261" class="blob-num js-line-number" data-line-number="1261"></td>
        <td id="LC1261" class="blob-code blob-code-inner js-file-line">stackSave <span class="pl-k">=</span> stackRestore <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L1262" class="blob-num js-line-number" data-line-number="1262"></td>
        <td id="LC1262" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>cannot use the stack before compiled code is ready to run, and has provided stack access<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1263" class="blob-num js-line-number" data-line-number="1263"></td>
        <td id="LC1263" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1264" class="blob-num js-line-number" data-line-number="1264"></td>
        <td id="LC1264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1265" class="blob-num js-line-number" data-line-number="1265"></td>
        <td id="LC1265" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">staticAlloc</span>(<span class="pl-smi">size</span>) {</td>
      </tr>
      <tr>
        <td id="L1266" class="blob-num js-line-number" data-line-number="1266"></td>
        <td id="LC1266" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1267" class="blob-num js-line-number" data-line-number="1267"></td>
        <td id="LC1267" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1268" class="blob-num js-line-number" data-line-number="1268"></td>
        <td id="LC1268" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1269" class="blob-num js-line-number" data-line-number="1269"></td>
        <td id="LC1269" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">dynamicAlloc</span>(<span class="pl-smi">size</span>) {</td>
      </tr>
      <tr>
        <td id="L1270" class="blob-num js-line-number" data-line-number="1270"></td>
        <td id="LC1270" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-c1">DYNAMICTOP_PTR</span>);</td>
      </tr>
      <tr>
        <td id="L1271" class="blob-num js-line-number" data-line-number="1271"></td>
        <td id="LC1271" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[<span class="pl-c1">DYNAMICTOP_PTR</span><span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>];</td>
      </tr>
      <tr>
        <td id="L1272" class="blob-num js-line-number" data-line-number="1272"></td>
        <td id="LC1272" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> end <span class="pl-k">=</span> (ret <span class="pl-k">+</span> size <span class="pl-k">+</span> <span class="pl-c1">15</span>) <span class="pl-k">&amp;</span> <span class="pl-k">-</span><span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L1273" class="blob-num js-line-number" data-line-number="1273"></td>
        <td id="LC1273" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (end <span class="pl-k">&gt;</span> <span class="pl-en">_emscripten_get_heap_size</span>()) {</td>
      </tr>
      <tr>
        <td id="L1274" class="blob-num js-line-number" data-line-number="1274"></td>
        <td id="LC1274" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1275" class="blob-num js-line-number" data-line-number="1275"></td>
        <td id="LC1275" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1276" class="blob-num js-line-number" data-line-number="1276"></td>
        <td id="LC1276" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP32</span>[<span class="pl-c1">DYNAMICTOP_PTR</span><span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> end;</td>
      </tr>
      <tr>
        <td id="L1277" class="blob-num js-line-number" data-line-number="1277"></td>
        <td id="LC1277" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1278" class="blob-num js-line-number" data-line-number="1278"></td>
        <td id="LC1278" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1279" class="blob-num js-line-number" data-line-number="1279"></td>
        <td id="LC1279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1280" class="blob-num js-line-number" data-line-number="1280"></td>
        <td id="LC1280" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">alignMemory</span>(<span class="pl-smi">size</span>, <span class="pl-smi">factor</span>) {</td>
      </tr>
      <tr>
        <td id="L1281" class="blob-num js-line-number" data-line-number="1281"></td>
        <td id="LC1281" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>factor) factor <span class="pl-k">=</span> <span class="pl-c1">STACK_ALIGN</span>; <span class="pl-c"><span class="pl-c">//</span> stack alignment (16-byte) by default</span></td>
      </tr>
      <tr>
        <td id="L1282" class="blob-num js-line-number" data-line-number="1282"></td>
        <td id="LC1282" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(size <span class="pl-k">/</span> factor) <span class="pl-k">*</span> factor;</td>
      </tr>
      <tr>
        <td id="L1283" class="blob-num js-line-number" data-line-number="1283"></td>
        <td id="LC1283" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1284" class="blob-num js-line-number" data-line-number="1284"></td>
        <td id="LC1284" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1285" class="blob-num js-line-number" data-line-number="1285"></td>
        <td id="LC1285" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getNativeTypeSize</span>(<span class="pl-smi">type</span>) {</td>
      </tr>
      <tr>
        <td id="L1286" class="blob-num js-line-number" data-line-number="1286"></td>
        <td id="LC1286" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">switch</span> (type) {</td>
      </tr>
      <tr>
        <td id="L1287" class="blob-num js-line-number" data-line-number="1287"></td>
        <td id="LC1287" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i1<span class="pl-pds">&#39;</span></span>: <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1288" class="blob-num js-line-number" data-line-number="1288"></td>
        <td id="LC1288" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i16<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L1289" class="blob-num js-line-number" data-line-number="1289"></td>
        <td id="LC1289" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L1290" class="blob-num js-line-number" data-line-number="1290"></td>
        <td id="LC1290" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i64<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L1291" class="blob-num js-line-number" data-line-number="1291"></td>
        <td id="LC1291" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>float<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L1292" class="blob-num js-line-number" data-line-number="1292"></td>
        <td id="LC1292" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>double<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L1293" class="blob-num js-line-number" data-line-number="1293"></td>
        <td id="LC1293" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">default</span>: {</td>
      </tr>
      <tr>
        <td id="L1294" class="blob-num js-line-number" data-line-number="1294"></td>
        <td id="LC1294" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (type[<span class="pl-smi">type</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>*<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1295" class="blob-num js-line-number" data-line-number="1295"></td>
        <td id="LC1295" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">4</span>; <span class="pl-c"><span class="pl-c">//</span> A pointer</span></td>
      </tr>
      <tr>
        <td id="L1296" class="blob-num js-line-number" data-line-number="1296"></td>
        <td id="LC1296" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> <span class="pl-k">if</span> (type[<span class="pl-c1">0</span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1297" class="blob-num js-line-number" data-line-number="1297"></td>
        <td id="LC1297" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> bits <span class="pl-k">=</span> <span class="pl-c1">parseInt</span>(<span class="pl-smi">type</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L1298" class="blob-num js-line-number" data-line-number="1298"></td>
        <td id="LC1298" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(bits <span class="pl-k">%</span> <span class="pl-c1">8</span> <span class="pl-k">===</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>getNativeTypeSize invalid bits <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> bits <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>, type <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> type);</td>
      </tr>
      <tr>
        <td id="L1299" class="blob-num js-line-number" data-line-number="1299"></td>
        <td id="LC1299" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> bits <span class="pl-k">/</span> <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L1300" class="blob-num js-line-number" data-line-number="1300"></td>
        <td id="LC1300" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1301" class="blob-num js-line-number" data-line-number="1301"></td>
        <td id="LC1301" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1302" class="blob-num js-line-number" data-line-number="1302"></td>
        <td id="LC1302" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1303" class="blob-num js-line-number" data-line-number="1303"></td>
        <td id="LC1303" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1304" class="blob-num js-line-number" data-line-number="1304"></td>
        <td id="LC1304" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1305" class="blob-num js-line-number" data-line-number="1305"></td>
        <td id="LC1305" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1306" class="blob-num js-line-number" data-line-number="1306"></td>
        <td id="LC1306" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1307" class="blob-num js-line-number" data-line-number="1307"></td>
        <td id="LC1307" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">warnOnce</span>(<span class="pl-smi">text</span>) {</td>
      </tr>
      <tr>
        <td id="L1308" class="blob-num js-line-number" data-line-number="1308"></td>
        <td id="LC1308" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">warnOnce</span>.<span class="pl-smi">shown</span>) <span class="pl-smi">warnOnce</span>.<span class="pl-smi">shown</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L1309" class="blob-num js-line-number" data-line-number="1309"></td>
        <td id="LC1309" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">warnOnce</span>.<span class="pl-smi">shown</span>[text]) {</td>
      </tr>
      <tr>
        <td id="L1310" class="blob-num js-line-number" data-line-number="1310"></td>
        <td id="LC1310" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">warnOnce</span>.<span class="pl-smi">shown</span>[text] <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1311" class="blob-num js-line-number" data-line-number="1311"></td>
        <td id="LC1311" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">err</span>(text);</td>
      </tr>
      <tr>
        <td id="L1312" class="blob-num js-line-number" data-line-number="1312"></td>
        <td id="LC1312" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1313" class="blob-num js-line-number" data-line-number="1313"></td>
        <td id="LC1313" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1314" class="blob-num js-line-number" data-line-number="1314"></td>
        <td id="LC1314" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1315" class="blob-num js-line-number" data-line-number="1315"></td>
        <td id="LC1315" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> asm2wasmImports <span class="pl-k">=</span> { <span class="pl-c"><span class="pl-c">//</span> special asm2wasm imports</span></td>
      </tr>
      <tr>
        <td id="L1316" class="blob-num js-line-number" data-line-number="1316"></td>
        <td id="LC1316" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">f64-rem</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">x</span>, <span class="pl-smi">y</span>) {</td>
      </tr>
      <tr>
        <td id="L1317" class="blob-num js-line-number" data-line-number="1317"></td>
        <td id="LC1317" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> x <span class="pl-k">%</span> y;</td>
      </tr>
      <tr>
        <td id="L1318" class="blob-num js-line-number" data-line-number="1318"></td>
        <td id="LC1318" class="blob-code blob-code-inner js-file-line">    },</td>
      </tr>
      <tr>
        <td id="L1319" class="blob-num js-line-number" data-line-number="1319"></td>
        <td id="LC1319" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-en">debugger</span><span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L1320" class="blob-num js-line-number" data-line-number="1320"></td>
        <td id="LC1320" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">debugger</span>;</td>
      </tr>
      <tr>
        <td id="L1321" class="blob-num js-line-number" data-line-number="1321"></td>
        <td id="LC1321" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1322" class="blob-num js-line-number" data-line-number="1322"></td>
        <td id="LC1322" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1323" class="blob-num js-line-number" data-line-number="1323"></td>
        <td id="LC1323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1324" class="blob-num js-line-number" data-line-number="1324"></td>
        <td id="LC1324" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1325" class="blob-num js-line-number" data-line-number="1325"></td>
        <td id="LC1325" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1326" class="blob-num js-line-number" data-line-number="1326"></td>
        <td id="LC1326" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> jsCallStartIndex <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1327" class="blob-num js-line-number" data-line-number="1327"></td>
        <td id="LC1327" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> functionPointers <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Array</span>(<span class="pl-c1">64</span>);</td>
      </tr>
      <tr>
        <td id="L1328" class="blob-num js-line-number" data-line-number="1328"></td>
        <td id="LC1328" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1329" class="blob-num js-line-number" data-line-number="1329"></td>
        <td id="LC1329" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Wraps a JS function as a wasm function with a given signature.</span></td>
      </tr>
      <tr>
        <td id="L1330" class="blob-num js-line-number" data-line-number="1330"></td>
        <td id="LC1330" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> In the future, we may get a WebAssembly.Function constructor. Until then,</span></td>
      </tr>
      <tr>
        <td id="L1331" class="blob-num js-line-number" data-line-number="1331"></td>
        <td id="LC1331" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> we create a wasm module that takes the JS function as an import with a given</span></td>
      </tr>
      <tr>
        <td id="L1332" class="blob-num js-line-number" data-line-number="1332"></td>
        <td id="LC1332" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> signature, and re-exports that as a wasm function.</span></td>
      </tr>
      <tr>
        <td id="L1333" class="blob-num js-line-number" data-line-number="1333"></td>
        <td id="LC1333" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">convertJsFunctionToWasm</span>(<span class="pl-smi">func</span>, <span class="pl-smi">sig</span>) {</td>
      </tr>
      <tr>
        <td id="L1334" class="blob-num js-line-number" data-line-number="1334"></td>
        <td id="LC1334" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1335" class="blob-num js-line-number" data-line-number="1335"></td>
        <td id="LC1335" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> The module is static, with the exception of the type section, which is</span></td>
      </tr>
      <tr>
        <td id="L1336" class="blob-num js-line-number" data-line-number="1336"></td>
        <td id="LC1336" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> generated based on the signature passed in.</span></td>
      </tr>
      <tr>
        <td id="L1337" class="blob-num js-line-number" data-line-number="1337"></td>
        <td id="LC1337" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> typeSection <span class="pl-k">=</span> [</td>
      </tr>
      <tr>
        <td id="L1338" class="blob-num js-line-number" data-line-number="1338"></td>
        <td id="LC1338" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x01</span>, <span class="pl-c"><span class="pl-c">//</span> id: section,</span></td>
      </tr>
      <tr>
        <td id="L1339" class="blob-num js-line-number" data-line-number="1339"></td>
        <td id="LC1339" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x00</span>, <span class="pl-c"><span class="pl-c">//</span> length: 0 (placeholder)</span></td>
      </tr>
      <tr>
        <td id="L1340" class="blob-num js-line-number" data-line-number="1340"></td>
        <td id="LC1340" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x01</span>, <span class="pl-c"><span class="pl-c">//</span> count: 1</span></td>
      </tr>
      <tr>
        <td id="L1341" class="blob-num js-line-number" data-line-number="1341"></td>
        <td id="LC1341" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x60</span>, <span class="pl-c"><span class="pl-c">//</span> form: func</span></td>
      </tr>
      <tr>
        <td id="L1342" class="blob-num js-line-number" data-line-number="1342"></td>
        <td id="LC1342" class="blob-code blob-code-inner js-file-line">  ];</td>
      </tr>
      <tr>
        <td id="L1343" class="blob-num js-line-number" data-line-number="1343"></td>
        <td id="LC1343" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> sigRet <span class="pl-k">=</span> <span class="pl-smi">sig</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1344" class="blob-num js-line-number" data-line-number="1344"></td>
        <td id="LC1344" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> sigParam <span class="pl-k">=</span> <span class="pl-smi">sig</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1345" class="blob-num js-line-number" data-line-number="1345"></td>
        <td id="LC1345" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> typeCodes <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L1346" class="blob-num js-line-number" data-line-number="1346"></td>
        <td id="LC1346" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>i<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">0x7f</span>, <span class="pl-c"><span class="pl-c">//</span> i32</span></td>
      </tr>
      <tr>
        <td id="L1347" class="blob-num js-line-number" data-line-number="1347"></td>
        <td id="LC1347" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>j<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">0x7e</span>, <span class="pl-c"><span class="pl-c">//</span> i64</span></td>
      </tr>
      <tr>
        <td id="L1348" class="blob-num js-line-number" data-line-number="1348"></td>
        <td id="LC1348" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>f<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">0x7d</span>, <span class="pl-c"><span class="pl-c">//</span> f32</span></td>
      </tr>
      <tr>
        <td id="L1349" class="blob-num js-line-number" data-line-number="1349"></td>
        <td id="LC1349" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>d<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">0x7c</span>, <span class="pl-c"><span class="pl-c">//</span> f64</span></td>
      </tr>
      <tr>
        <td id="L1350" class="blob-num js-line-number" data-line-number="1350"></td>
        <td id="LC1350" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1351" class="blob-num js-line-number" data-line-number="1351"></td>
        <td id="LC1351" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1352" class="blob-num js-line-number" data-line-number="1352"></td>
        <td id="LC1352" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Parameters, length + signatures</span></td>
      </tr>
      <tr>
        <td id="L1353" class="blob-num js-line-number" data-line-number="1353"></td>
        <td id="LC1353" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">typeSection</span>.<span class="pl-c1">push</span>(<span class="pl-smi">sigParam</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L1354" class="blob-num js-line-number" data-line-number="1354"></td>
        <td id="LC1354" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">sigParam</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L1355" class="blob-num js-line-number" data-line-number="1355"></td>
        <td id="LC1355" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">typeSection</span>.<span class="pl-c1">push</span>(typeCodes[sigParam[i]]);</td>
      </tr>
      <tr>
        <td id="L1356" class="blob-num js-line-number" data-line-number="1356"></td>
        <td id="LC1356" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1357" class="blob-num js-line-number" data-line-number="1357"></td>
        <td id="LC1357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1358" class="blob-num js-line-number" data-line-number="1358"></td>
        <td id="LC1358" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Return values, length + signatures</span></td>
      </tr>
      <tr>
        <td id="L1359" class="blob-num js-line-number" data-line-number="1359"></td>
        <td id="LC1359" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> With no multi-return in MVP, either 0 (void) or 1 (anything else)</span></td>
      </tr>
      <tr>
        <td id="L1360" class="blob-num js-line-number" data-line-number="1360"></td>
        <td id="LC1360" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (sigRet <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>v<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1361" class="blob-num js-line-number" data-line-number="1361"></td>
        <td id="LC1361" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">typeSection</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0x00</span>);</td>
      </tr>
      <tr>
        <td id="L1362" class="blob-num js-line-number" data-line-number="1362"></td>
        <td id="LC1362" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1363" class="blob-num js-line-number" data-line-number="1363"></td>
        <td id="LC1363" class="blob-code blob-code-inner js-file-line">    typeSection <span class="pl-k">=</span> <span class="pl-smi">typeSection</span>.<span class="pl-c1">concat</span>([<span class="pl-c1">0x01</span>, typeCodes[sigRet]]);</td>
      </tr>
      <tr>
        <td id="L1364" class="blob-num js-line-number" data-line-number="1364"></td>
        <td id="LC1364" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1365" class="blob-num js-line-number" data-line-number="1365"></td>
        <td id="LC1365" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1366" class="blob-num js-line-number" data-line-number="1366"></td>
        <td id="LC1366" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Write the overall length of the type section back into the section header</span></td>
      </tr>
      <tr>
        <td id="L1367" class="blob-num js-line-number" data-line-number="1367"></td>
        <td id="LC1367" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> (excepting the 2 bytes for the section id and length)</span></td>
      </tr>
      <tr>
        <td id="L1368" class="blob-num js-line-number" data-line-number="1368"></td>
        <td id="LC1368" class="blob-code blob-code-inner js-file-line">  typeSection[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-smi">typeSection</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L1369" class="blob-num js-line-number" data-line-number="1369"></td>
        <td id="LC1369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1370" class="blob-num js-line-number" data-line-number="1370"></td>
        <td id="LC1370" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Rest of the module is static</span></td>
      </tr>
      <tr>
        <td id="L1371" class="blob-num js-line-number" data-line-number="1371"></td>
        <td id="LC1371" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> bytes <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>([</td>
      </tr>
      <tr>
        <td id="L1372" class="blob-num js-line-number" data-line-number="1372"></td>
        <td id="LC1372" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x00</span>, <span class="pl-c1">0x61</span>, <span class="pl-c1">0x73</span>, <span class="pl-c1">0x6d</span>, <span class="pl-c"><span class="pl-c">//</span> magic (&quot;\0asm&quot;)</span></td>
      </tr>
      <tr>
        <td id="L1373" class="blob-num js-line-number" data-line-number="1373"></td>
        <td id="LC1373" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x01</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c"><span class="pl-c">//</span> version: 1</span></td>
      </tr>
      <tr>
        <td id="L1374" class="blob-num js-line-number" data-line-number="1374"></td>
        <td id="LC1374" class="blob-code blob-code-inner js-file-line">  ].<span class="pl-c1">concat</span>(typeSection, [</td>
      </tr>
      <tr>
        <td id="L1375" class="blob-num js-line-number" data-line-number="1375"></td>
        <td id="LC1375" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x02</span>, <span class="pl-c1">0x07</span>, <span class="pl-c"><span class="pl-c">//</span> import section</span></td>
      </tr>
      <tr>
        <td id="L1376" class="blob-num js-line-number" data-line-number="1376"></td>
        <td id="LC1376" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> (import &quot;e&quot; &quot;f&quot; (func 0 (type 0)))</span></td>
      </tr>
      <tr>
        <td id="L1377" class="blob-num js-line-number" data-line-number="1377"></td>
        <td id="LC1377" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">0x01</span>, <span class="pl-c1">0x01</span>, <span class="pl-c1">0x65</span>, <span class="pl-c1">0x01</span>, <span class="pl-c1">0x66</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>,</td>
      </tr>
      <tr>
        <td id="L1378" class="blob-num js-line-number" data-line-number="1378"></td>
        <td id="LC1378" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">0x07</span>, <span class="pl-c1">0x05</span>, <span class="pl-c"><span class="pl-c">//</span> export section</span></td>
      </tr>
      <tr>
        <td id="L1379" class="blob-num js-line-number" data-line-number="1379"></td>
        <td id="LC1379" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> (export &quot;f&quot; (func 0 (type 0)))</span></td>
      </tr>
      <tr>
        <td id="L1380" class="blob-num js-line-number" data-line-number="1380"></td>
        <td id="LC1380" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">0x01</span>, <span class="pl-c1">0x01</span>, <span class="pl-c1">0x66</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>,</td>
      </tr>
      <tr>
        <td id="L1381" class="blob-num js-line-number" data-line-number="1381"></td>
        <td id="LC1381" class="blob-code blob-code-inner js-file-line">  ]));</td>
      </tr>
      <tr>
        <td id="L1382" class="blob-num js-line-number" data-line-number="1382"></td>
        <td id="LC1382" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1383" class="blob-num js-line-number" data-line-number="1383"></td>
        <td id="LC1383" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> We can compile this wasm module synchronously because it is very small.</span></td>
      </tr>
      <tr>
        <td id="L1384" class="blob-num js-line-number" data-line-number="1384"></td>
        <td id="LC1384" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> This accepts an import (at &quot;e.f&quot;), that it reroutes to an export (at &quot;f&quot;)</span></td>
      </tr>
      <tr>
        <td id="L1385" class="blob-num js-line-number" data-line-number="1385"></td>
        <td id="LC1385" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">module</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">WebAssembly.Module</span>(bytes);</td>
      </tr>
      <tr>
        <td id="L1386" class="blob-num js-line-number" data-line-number="1386"></td>
        <td id="LC1386" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> instance <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">WebAssembly.Instance</span>(<span class="pl-c1">module</span>, {</td>
      </tr>
      <tr>
        <td id="L1387" class="blob-num js-line-number" data-line-number="1387"></td>
        <td id="LC1387" class="blob-code blob-code-inner js-file-line">    e<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L1388" class="blob-num js-line-number" data-line-number="1388"></td>
        <td id="LC1388" class="blob-code blob-code-inner js-file-line">      f<span class="pl-k">:</span> func</td>
      </tr>
      <tr>
        <td id="L1389" class="blob-num js-line-number" data-line-number="1389"></td>
        <td id="LC1389" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1390" class="blob-num js-line-number" data-line-number="1390"></td>
        <td id="LC1390" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="L1391" class="blob-num js-line-number" data-line-number="1391"></td>
        <td id="LC1391" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> wrappedFunc <span class="pl-k">=</span> <span class="pl-smi">instance</span>.<span class="pl-smi">exports</span>.<span class="pl-smi">f</span>;</td>
      </tr>
      <tr>
        <td id="L1392" class="blob-num js-line-number" data-line-number="1392"></td>
        <td id="LC1392" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> wrappedFunc;</td>
      </tr>
      <tr>
        <td id="L1393" class="blob-num js-line-number" data-line-number="1393"></td>
        <td id="LC1393" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1394" class="blob-num js-line-number" data-line-number="1394"></td>
        <td id="LC1394" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1395" class="blob-num js-line-number" data-line-number="1395"></td>
        <td id="LC1395" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Add a wasm function to the table.</span></td>
      </tr>
      <tr>
        <td id="L1396" class="blob-num js-line-number" data-line-number="1396"></td>
        <td id="LC1396" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addFunctionWasm</span>(<span class="pl-smi">func</span>, <span class="pl-smi">sig</span>) {</td>
      </tr>
      <tr>
        <td id="L1397" class="blob-num js-line-number" data-line-number="1397"></td>
        <td id="LC1397" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> table <span class="pl-k">=</span> wasmTable;</td>
      </tr>
      <tr>
        <td id="L1398" class="blob-num js-line-number" data-line-number="1398"></td>
        <td id="LC1398" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-smi">table</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L1399" class="blob-num js-line-number" data-line-number="1399"></td>
        <td id="LC1399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1400" class="blob-num js-line-number" data-line-number="1400"></td>
        <td id="LC1400" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Grow the table</span></td>
      </tr>
      <tr>
        <td id="L1401" class="blob-num js-line-number" data-line-number="1401"></td>
        <td id="LC1401" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L1402" class="blob-num js-line-number" data-line-number="1402"></td>
        <td id="LC1402" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">table</span>.<span class="pl-en">grow</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1403" class="blob-num js-line-number" data-line-number="1403"></td>
        <td id="LC1403" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">catch</span> (err) {</td>
      </tr>
      <tr>
        <td id="L1404" class="blob-num js-line-number" data-line-number="1404"></td>
        <td id="LC1404" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>err <span class="pl-k">instanceof</span> <span class="pl-c1">RangeError</span>) {</td>
      </tr>
      <tr>
        <td id="L1405" class="blob-num js-line-number" data-line-number="1405"></td>
        <td id="LC1405" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> err;</td>
      </tr>
      <tr>
        <td id="L1406" class="blob-num js-line-number" data-line-number="1406"></td>
        <td id="LC1406" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1407" class="blob-num js-line-number" data-line-number="1407"></td>
        <td id="LC1407" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1408" class="blob-num js-line-number" data-line-number="1408"></td>
        <td id="LC1408" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1409" class="blob-num js-line-number" data-line-number="1409"></td>
        <td id="LC1409" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1410" class="blob-num js-line-number" data-line-number="1410"></td>
        <td id="LC1410" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Insert new element</span></td>
      </tr>
      <tr>
        <td id="L1411" class="blob-num js-line-number" data-line-number="1411"></td>
        <td id="LC1411" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L1412" class="blob-num js-line-number" data-line-number="1412"></td>
        <td id="LC1412" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Attempting to call this with JS function will cause of table.set() to fail</span></td>
      </tr>
      <tr>
        <td id="L1413" class="blob-num js-line-number" data-line-number="1413"></td>
        <td id="LC1413" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">table</span>.<span class="pl-c1">set</span>(ret, func);</td>
      </tr>
      <tr>
        <td id="L1414" class="blob-num js-line-number" data-line-number="1414"></td>
        <td id="LC1414" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">catch</span> (err) {</td>
      </tr>
      <tr>
        <td id="L1415" class="blob-num js-line-number" data-line-number="1415"></td>
        <td id="LC1415" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>err <span class="pl-k">instanceof</span> <span class="pl-c1">TypeError</span>) {</td>
      </tr>
      <tr>
        <td id="L1416" class="blob-num js-line-number" data-line-number="1416"></td>
        <td id="LC1416" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> err;</td>
      </tr>
      <tr>
        <td id="L1417" class="blob-num js-line-number" data-line-number="1417"></td>
        <td id="LC1417" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1418" class="blob-num js-line-number" data-line-number="1418"></td>
        <td id="LC1418" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> sig <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Missing signature argument to addFunction<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1419" class="blob-num js-line-number" data-line-number="1419"></td>
        <td id="LC1419" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> wrapped <span class="pl-k">=</span> <span class="pl-en">convertJsFunctionToWasm</span>(func, sig);</td>
      </tr>
      <tr>
        <td id="L1420" class="blob-num js-line-number" data-line-number="1420"></td>
        <td id="LC1420" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">table</span>.<span class="pl-c1">set</span>(ret, wrapped);</td>
      </tr>
      <tr>
        <td id="L1421" class="blob-num js-line-number" data-line-number="1421"></td>
        <td id="LC1421" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1422" class="blob-num js-line-number" data-line-number="1422"></td>
        <td id="LC1422" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1423" class="blob-num js-line-number" data-line-number="1423"></td>
        <td id="LC1423" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1424" class="blob-num js-line-number" data-line-number="1424"></td>
        <td id="LC1424" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1425" class="blob-num js-line-number" data-line-number="1425"></td>
        <td id="LC1425" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1426" class="blob-num js-line-number" data-line-number="1426"></td>
        <td id="LC1426" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">removeFunctionWasm</span>(<span class="pl-smi">index</span>) {</td>
      </tr>
      <tr>
        <td id="L1427" class="blob-num js-line-number" data-line-number="1427"></td>
        <td id="LC1427" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> TODO(sbc): Look into implementing this to allow re-using of table slots</span></td>
      </tr>
      <tr>
        <td id="L1428" class="blob-num js-line-number" data-line-number="1428"></td>
        <td id="LC1428" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1429" class="blob-num js-line-number" data-line-number="1429"></td>
        <td id="LC1429" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1430" class="blob-num js-line-number" data-line-number="1430"></td>
        <td id="LC1430" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> &#39;sig&#39; parameter is required for the llvm backend but only when func is not</span></td>
      </tr>
      <tr>
        <td id="L1431" class="blob-num js-line-number" data-line-number="1431"></td>
        <td id="LC1431" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> already a WebAssembly function.</span></td>
      </tr>
      <tr>
        <td id="L1432" class="blob-num js-line-number" data-line-number="1432"></td>
        <td id="LC1432" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addFunction</span>(<span class="pl-smi">func</span>, <span class="pl-smi">sig</span>) {</td>
      </tr>
      <tr>
        <td id="L1433" class="blob-num js-line-number" data-line-number="1433"></td>
        <td id="LC1433" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> func <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1434" class="blob-num js-line-number" data-line-number="1434"></td>
        <td id="LC1434" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1435" class="blob-num js-line-number" data-line-number="1435"></td>
        <td id="LC1435" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1436" class="blob-num js-line-number" data-line-number="1436"></td>
        <td id="LC1436" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> base <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1437" class="blob-num js-line-number" data-line-number="1437"></td>
        <td id="LC1437" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> base; i <span class="pl-k">&lt;</span> base <span class="pl-k">+</span> <span class="pl-c1">64</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L1438" class="blob-num js-line-number" data-line-number="1438"></td>
        <td id="LC1438" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>functionPointers[i]) {</td>
      </tr>
      <tr>
        <td id="L1439" class="blob-num js-line-number" data-line-number="1439"></td>
        <td id="LC1439" class="blob-code blob-code-inner js-file-line">      functionPointers[i] <span class="pl-k">=</span> func;</td>
      </tr>
      <tr>
        <td id="L1440" class="blob-num js-line-number" data-line-number="1440"></td>
        <td id="LC1440" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> jsCallStartIndex <span class="pl-k">+</span> i;</td>
      </tr>
      <tr>
        <td id="L1441" class="blob-num js-line-number" data-line-number="1441"></td>
        <td id="LC1441" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1442" class="blob-num js-line-number" data-line-number="1442"></td>
        <td id="LC1442" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1443" class="blob-num js-line-number" data-line-number="1443"></td>
        <td id="LC1443" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1444" class="blob-num js-line-number" data-line-number="1444"></td>
        <td id="LC1444" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1445" class="blob-num js-line-number" data-line-number="1445"></td>
        <td id="LC1445" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1446" class="blob-num js-line-number" data-line-number="1446"></td>
        <td id="LC1446" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1447" class="blob-num js-line-number" data-line-number="1447"></td>
        <td id="LC1447" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">removeFunction</span>(<span class="pl-smi">index</span>) {</td>
      </tr>
      <tr>
        <td id="L1448" class="blob-num js-line-number" data-line-number="1448"></td>
        <td id="LC1448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1449" class="blob-num js-line-number" data-line-number="1449"></td>
        <td id="LC1449" class="blob-code blob-code-inner js-file-line">  functionPointers[index<span class="pl-k">-</span>jsCallStartIndex] <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L1450" class="blob-num js-line-number" data-line-number="1450"></td>
        <td id="LC1450" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1451" class="blob-num js-line-number" data-line-number="1451"></td>
        <td id="LC1451" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1452" class="blob-num js-line-number" data-line-number="1452"></td>
        <td id="LC1452" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> funcWrappers <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L1453" class="blob-num js-line-number" data-line-number="1453"></td>
        <td id="LC1453" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1454" class="blob-num js-line-number" data-line-number="1454"></td>
        <td id="LC1454" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getFuncWrapper</span>(<span class="pl-smi">func</span>, <span class="pl-smi">sig</span>) {</td>
      </tr>
      <tr>
        <td id="L1455" class="blob-num js-line-number" data-line-number="1455"></td>
        <td id="LC1455" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>func) <span class="pl-k">return</span>; <span class="pl-c"><span class="pl-c">//</span> on null pointer, return undefined</span></td>
      </tr>
      <tr>
        <td id="L1456" class="blob-num js-line-number" data-line-number="1456"></td>
        <td id="LC1456" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(sig);</td>
      </tr>
      <tr>
        <td id="L1457" class="blob-num js-line-number" data-line-number="1457"></td>
        <td id="LC1457" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>funcWrappers[sig]) {</td>
      </tr>
      <tr>
        <td id="L1458" class="blob-num js-line-number" data-line-number="1458"></td>
        <td id="LC1458" class="blob-code blob-code-inner js-file-line">    funcWrappers[sig] <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L1459" class="blob-num js-line-number" data-line-number="1459"></td>
        <td id="LC1459" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1460" class="blob-num js-line-number" data-line-number="1460"></td>
        <td id="LC1460" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> sigCache <span class="pl-k">=</span> funcWrappers[sig];</td>
      </tr>
      <tr>
        <td id="L1461" class="blob-num js-line-number" data-line-number="1461"></td>
        <td id="LC1461" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>sigCache[func]) {</td>
      </tr>
      <tr>
        <td id="L1462" class="blob-num js-line-number" data-line-number="1462"></td>
        <td id="LC1462" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> optimize away arguments usage in common cases</span></td>
      </tr>
      <tr>
        <td id="L1463" class="blob-num js-line-number" data-line-number="1463"></td>
        <td id="LC1463" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-smi">sig</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1464" class="blob-num js-line-number" data-line-number="1464"></td>
        <td id="LC1464" class="blob-code blob-code-inner js-file-line">      sigCache[func] <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">dynCall_wrapper</span>() {</td>
      </tr>
      <tr>
        <td id="L1465" class="blob-num js-line-number" data-line-number="1465"></td>
        <td id="LC1465" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-en">dynCall</span>(sig, func);</td>
      </tr>
      <tr>
        <td id="L1466" class="blob-num js-line-number" data-line-number="1466"></td>
        <td id="LC1466" class="blob-code blob-code-inner js-file-line">      };</td>
      </tr>
      <tr>
        <td id="L1467" class="blob-num js-line-number" data-line-number="1467"></td>
        <td id="LC1467" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">sig</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">2</span>) {</td>
      </tr>
      <tr>
        <td id="L1468" class="blob-num js-line-number" data-line-number="1468"></td>
        <td id="LC1468" class="blob-code blob-code-inner js-file-line">      sigCache[func] <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">dynCall_wrapper</span>(<span class="pl-smi">arg</span>) {</td>
      </tr>
      <tr>
        <td id="L1469" class="blob-num js-line-number" data-line-number="1469"></td>
        <td id="LC1469" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-en">dynCall</span>(sig, func, [arg]);</td>
      </tr>
      <tr>
        <td id="L1470" class="blob-num js-line-number" data-line-number="1470"></td>
        <td id="LC1470" class="blob-code blob-code-inner js-file-line">      };</td>
      </tr>
      <tr>
        <td id="L1471" class="blob-num js-line-number" data-line-number="1471"></td>
        <td id="LC1471" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1472" class="blob-num js-line-number" data-line-number="1472"></td>
        <td id="LC1472" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> general case</span></td>
      </tr>
      <tr>
        <td id="L1473" class="blob-num js-line-number" data-line-number="1473"></td>
        <td id="LC1473" class="blob-code blob-code-inner js-file-line">      sigCache[func] <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">dynCall_wrapper</span>() {</td>
      </tr>
      <tr>
        <td id="L1474" class="blob-num js-line-number" data-line-number="1474"></td>
        <td id="LC1474" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-en">dynCall</span>(sig, func, <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>));</td>
      </tr>
      <tr>
        <td id="L1475" class="blob-num js-line-number" data-line-number="1475"></td>
        <td id="LC1475" class="blob-code blob-code-inner js-file-line">      };</td>
      </tr>
      <tr>
        <td id="L1476" class="blob-num js-line-number" data-line-number="1476"></td>
        <td id="LC1476" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1477" class="blob-num js-line-number" data-line-number="1477"></td>
        <td id="LC1477" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1478" class="blob-num js-line-number" data-line-number="1478"></td>
        <td id="LC1478" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> sigCache[func];</td>
      </tr>
      <tr>
        <td id="L1479" class="blob-num js-line-number" data-line-number="1479"></td>
        <td id="LC1479" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1480" class="blob-num js-line-number" data-line-number="1480"></td>
        <td id="LC1480" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1481" class="blob-num js-line-number" data-line-number="1481"></td>
        <td id="LC1481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1482" class="blob-num js-line-number" data-line-number="1482"></td>
        <td id="LC1482" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">makeBigInt</span>(<span class="pl-smi">low</span>, <span class="pl-smi">high</span>, <span class="pl-smi">unsigned</span>) {</td>
      </tr>
      <tr>
        <td id="L1483" class="blob-num js-line-number" data-line-number="1483"></td>
        <td id="LC1483" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> unsigned <span class="pl-k">?</span> ((<span class="pl-k">+</span>((low<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>)))<span class="pl-k">+</span>((<span class="pl-k">+</span>((high<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>)))<span class="pl-k">*</span><span class="pl-c1">4294967296.0</span>)) <span class="pl-k">:</span> ((<span class="pl-k">+</span>((low<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>)))<span class="pl-k">+</span>((<span class="pl-k">+</span>((high<span class="pl-k">|</span><span class="pl-c1">0</span>)))<span class="pl-k">*</span><span class="pl-c1">4294967296.0</span>));</td>
      </tr>
      <tr>
        <td id="L1484" class="blob-num js-line-number" data-line-number="1484"></td>
        <td id="LC1484" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1485" class="blob-num js-line-number" data-line-number="1485"></td>
        <td id="LC1485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1486" class="blob-num js-line-number" data-line-number="1486"></td>
        <td id="LC1486" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">dynCall</span>(<span class="pl-smi">sig</span>, <span class="pl-smi">ptr</span>, <span class="pl-smi">args</span>) {</td>
      </tr>
      <tr>
        <td id="L1487" class="blob-num js-line-number" data-line-number="1487"></td>
        <td id="LC1487" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (args <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">args</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L1488" class="blob-num js-line-number" data-line-number="1488"></td>
        <td id="LC1488" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-smi">args</span>.<span class="pl-c1">length</span> <span class="pl-k">==</span> <span class="pl-smi">sig</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1489" class="blob-num js-line-number" data-line-number="1489"></td>
        <td id="LC1489" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>((<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig) <span class="pl-k">in</span> Module, <span class="pl-s"><span class="pl-pds">&#39;</span>bad function pointer type - no table for sig <span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1490" class="blob-num js-line-number" data-line-number="1490"></td>
        <td id="LC1490" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, [ptr].<span class="pl-c1">concat</span>(args));</td>
      </tr>
      <tr>
        <td id="L1491" class="blob-num js-line-number" data-line-number="1491"></td>
        <td id="LC1491" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1492" class="blob-num js-line-number" data-line-number="1492"></td>
        <td id="LC1492" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-smi">sig</span>.<span class="pl-c1">length</span> <span class="pl-k">==</span> <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1493" class="blob-num js-line-number" data-line-number="1493"></td>
        <td id="LC1493" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>((<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig) <span class="pl-k">in</span> Module, <span class="pl-s"><span class="pl-pds">&#39;</span>bad function pointer type - no table for sig <span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1494" class="blob-num js-line-number" data-line-number="1494"></td>
        <td id="LC1494" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> sig].<span class="pl-c1">call</span>(<span class="pl-c1">null</span>, ptr);</td>
      </tr>
      <tr>
        <td id="L1495" class="blob-num js-line-number" data-line-number="1495"></td>
        <td id="LC1495" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1496" class="blob-num js-line-number" data-line-number="1496"></td>
        <td id="LC1496" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1497" class="blob-num js-line-number" data-line-number="1497"></td>
        <td id="LC1497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1498" class="blob-num js-line-number" data-line-number="1498"></td>
        <td id="LC1498" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> tempRet0 <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1499" class="blob-num js-line-number" data-line-number="1499"></td>
        <td id="LC1499" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1500" class="blob-num js-line-number" data-line-number="1500"></td>
        <td id="LC1500" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-en">setTempRet0</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">value</span>) {</td>
      </tr>
      <tr>
        <td id="L1501" class="blob-num js-line-number" data-line-number="1501"></td>
        <td id="LC1501" class="blob-code blob-code-inner js-file-line">  tempRet0 <span class="pl-k">=</span> value;</td>
      </tr>
      <tr>
        <td id="L1502" class="blob-num js-line-number" data-line-number="1502"></td>
        <td id="LC1502" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1503" class="blob-num js-line-number" data-line-number="1503"></td>
        <td id="LC1503" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1504" class="blob-num js-line-number" data-line-number="1504"></td>
        <td id="LC1504" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-en">getTempRet0</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L1505" class="blob-num js-line-number" data-line-number="1505"></td>
        <td id="LC1505" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> tempRet0;</td>
      </tr>
      <tr>
        <td id="L1506" class="blob-num js-line-number" data-line-number="1506"></td>
        <td id="LC1506" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1507" class="blob-num js-line-number" data-line-number="1507"></td>
        <td id="LC1507" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1508" class="blob-num js-line-number" data-line-number="1508"></td>
        <td id="LC1508" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getCompilerSetting</span>(<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L1509" class="blob-num js-line-number" data-line-number="1509"></td>
        <td id="LC1509" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1510" class="blob-num js-line-number" data-line-number="1510"></td>
        <td id="LC1510" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1511" class="blob-num js-line-number" data-line-number="1511"></td>
        <td id="LC1511" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1512" class="blob-num js-line-number" data-line-number="1512"></td>
        <td id="LC1512" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Runtime <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L1513" class="blob-num js-line-number" data-line-number="1513"></td>
        <td id="LC1513" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> helpful errors</span></td>
      </tr>
      <tr>
        <td id="L1514" class="blob-num js-line-number" data-line-number="1514"></td>
        <td id="LC1514" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">getTempRet0</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>getTempRet0() is now a top-level function, after removing the Runtime object. Remove &quot;Runtime.&quot;<span class="pl-pds">&#39;</span></span>) },</td>
      </tr>
      <tr>
        <td id="L1515" class="blob-num js-line-number" data-line-number="1515"></td>
        <td id="LC1515" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">staticAlloc</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>staticAlloc() is now a top-level function, after removing the Runtime object. Remove &quot;Runtime.&quot;<span class="pl-pds">&#39;</span></span>) },</td>
      </tr>
      <tr>
        <td id="L1516" class="blob-num js-line-number" data-line-number="1516"></td>
        <td id="LC1516" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">stackAlloc</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>stackAlloc() is now a top-level function, after removing the Runtime object. Remove &quot;Runtime.&quot;<span class="pl-pds">&#39;</span></span>) },</td>
      </tr>
      <tr>
        <td id="L1517" class="blob-num js-line-number" data-line-number="1517"></td>
        <td id="LC1517" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1518" class="blob-num js-line-number" data-line-number="1518"></td>
        <td id="LC1518" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1519" class="blob-num js-line-number" data-line-number="1519"></td>
        <td id="LC1519" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> The address globals begin at. Very low in memory, for code size and optimization opportunities.</span></td>
      </tr>
      <tr>
        <td id="L1520" class="blob-num js-line-number" data-line-number="1520"></td>
        <td id="LC1520" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Above 0 is static memory, starting with globals.</span></td>
      </tr>
      <tr>
        <td id="L1521" class="blob-num js-line-number" data-line-number="1521"></td>
        <td id="LC1521" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Then the stack.</span></td>
      </tr>
      <tr>
        <td id="L1522" class="blob-num js-line-number" data-line-number="1522"></td>
        <td id="LC1522" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Then &#39;dynamic&#39; memory for sbrk.</span></td>
      </tr>
      <tr>
        <td id="L1523" class="blob-num js-line-number" data-line-number="1523"></td>
        <td id="LC1523" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">GLOBAL_BASE</span> <span class="pl-k">=</span> <span class="pl-c1">1024</span>;</td>
      </tr>
      <tr>
        <td id="L1524" class="blob-num js-line-number" data-line-number="1524"></td>
        <td id="LC1524" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1525" class="blob-num js-line-number" data-line-number="1525"></td>
        <td id="LC1525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1526" class="blob-num js-line-number" data-line-number="1526"></td>
        <td id="LC1526" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1527" class="blob-num js-line-number" data-line-number="1527"></td>
        <td id="LC1527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1528" class="blob-num js-line-number" data-line-number="1528"></td>
        <td id="LC1528" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> === Preamble library stuff ===</span></td>
      </tr>
      <tr>
        <td id="L1529" class="blob-num js-line-number" data-line-number="1529"></td>
        <td id="LC1529" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1530" class="blob-num js-line-number" data-line-number="1530"></td>
        <td id="LC1530" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Documentation for the public APIs defined in this file must be updated in:</span></td>
      </tr>
      <tr>
        <td id="L1531" class="blob-num js-line-number" data-line-number="1531"></td>
        <td id="LC1531" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>    site/source/docs/api_reference/preamble.js.rst</span></td>
      </tr>
      <tr>
        <td id="L1532" class="blob-num js-line-number" data-line-number="1532"></td>
        <td id="LC1532" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> A prebuilt local version of the documentation is available at:</span></td>
      </tr>
      <tr>
        <td id="L1533" class="blob-num js-line-number" data-line-number="1533"></td>
        <td id="LC1533" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>    site/build/text/docs/api_reference/preamble.js.txt</span></td>
      </tr>
      <tr>
        <td id="L1534" class="blob-num js-line-number" data-line-number="1534"></td>
        <td id="LC1534" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> You can also build docs locally as HTML or other formats in site/</span></td>
      </tr>
      <tr>
        <td id="L1535" class="blob-num js-line-number" data-line-number="1535"></td>
        <td id="LC1535" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> An online HTML version (which may be of a different version of Emscripten)</span></td>
      </tr>
      <tr>
        <td id="L1536" class="blob-num js-line-number" data-line-number="1536"></td>
        <td id="LC1536" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html</span></td>
      </tr>
      <tr>
        <td id="L1537" class="blob-num js-line-number" data-line-number="1537"></td>
        <td id="LC1537" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1538" class="blob-num js-line-number" data-line-number="1538"></td>
        <td id="LC1538" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1539" class="blob-num js-line-number" data-line-number="1539"></td>
        <td id="LC1539" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> wasmBinary;<span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>wasmBinary<span class="pl-pds">&#39;</span></span>]) wasmBinary <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>wasmBinary<span class="pl-pds">&#39;</span></span>];<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>wasmBinary<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>wasmBinary<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.wasmBinary has been replaced with plain wasmBinary<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1540" class="blob-num js-line-number" data-line-number="1540"></td>
        <td id="LC1540" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> noExitRuntime;<span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>noExitRuntime<span class="pl-pds">&#39;</span></span>]) noExitRuntime <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>noExitRuntime<span class="pl-pds">&#39;</span></span>];<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>noExitRuntime<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>noExitRuntime<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.noExitRuntime has been replaced with plain noExitRuntime<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L1541" class="blob-num js-line-number" data-line-number="1541"></td>
        <td id="LC1541" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1542" class="blob-num js-line-number" data-line-number="1542"></td>
        <td id="LC1542" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1543" class="blob-num js-line-number" data-line-number="1543"></td>
        <td id="LC1543" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">typeof</span> WebAssembly <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1544" class="blob-num js-line-number" data-line-number="1544"></td>
        <td id="LC1544" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1545" class="blob-num js-line-number" data-line-number="1545"></td>
        <td id="LC1545" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1546" class="blob-num js-line-number" data-line-number="1546"></td>
        <td id="LC1546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1547" class="blob-num js-line-number" data-line-number="1547"></td>
        <td id="LC1547" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1548" class="blob-num js-line-number" data-line-number="1548"></td>
        <td id="LC1548" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.</span></td>
      </tr>
      <tr>
        <td id="L1549" class="blob-num js-line-number" data-line-number="1549"></td>
        <td id="LC1549" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)</span></td>
      </tr>
      <tr>
        <td id="L1550" class="blob-num js-line-number" data-line-number="1550"></td>
        <td id="LC1550" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1551" class="blob-num js-line-number" data-line-number="1551"></td>
        <td id="LC1551" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(number, number, string, boolean=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1552" class="blob-num js-line-number" data-line-number="1552"></td>
        <td id="LC1552" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">setValue</span>(<span class="pl-smi">ptr</span>, <span class="pl-smi">value</span>, <span class="pl-smi">type</span>, <span class="pl-smi">noSafe</span>) {</td>
      </tr>
      <tr>
        <td id="L1553" class="blob-num js-line-number" data-line-number="1553"></td>
        <td id="LC1553" class="blob-code blob-code-inner js-file-line">  type <span class="pl-k">=</span> type <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1554" class="blob-num js-line-number" data-line-number="1554"></td>
        <td id="LC1554" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-smi">type</span>.<span class="pl-c1">charAt</span>(<span class="pl-smi">type</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>*<span class="pl-pds">&#39;</span></span>) type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>; <span class="pl-c"><span class="pl-c">//</span> pointers are 32-bit</span></td>
      </tr>
      <tr>
        <td id="L1555" class="blob-num js-line-number" data-line-number="1555"></td>
        <td id="LC1555" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">switch</span>(type) {</td>
      </tr>
      <tr>
        <td id="L1556" class="blob-num js-line-number" data-line-number="1556"></td>
        <td id="LC1556" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i1<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAP8</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1557" class="blob-num js-line-number" data-line-number="1557"></td>
        <td id="LC1557" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAP8</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1558" class="blob-num js-line-number" data-line-number="1558"></td>
        <td id="LC1558" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i16<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAP16</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1559" class="blob-num js-line-number" data-line-number="1559"></td>
        <td id="LC1559" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1560" class="blob-num js-line-number" data-line-number="1560"></td>
        <td id="LC1560" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i64<span class="pl-pds">&#39;</span></span>: (tempI64 <span class="pl-k">=</span> [value<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>,(tempDouble<span class="pl-k">=</span>value,(<span class="pl-k">+</span>(<span class="pl-en">Math_abs</span>(tempDouble))) <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span> <span class="pl-k">?</span> (tempDouble <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span> <span class="pl-k">?</span> ((<span class="pl-en">Math_min</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_floor</span>((tempDouble)<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>))), <span class="pl-c1">4294967295.0</span>))<span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span> <span class="pl-k">:</span> (<span class="pl-k">~~</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_ceil</span>((tempDouble <span class="pl-k">-</span> <span class="pl-k">+</span>(((<span class="pl-k">~~</span>(tempDouble)))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>)))))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>) <span class="pl-k">:</span> <span class="pl-c1">0</span>)],<span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">0</span>],<span class="pl-c1">HEAP32</span>[(((ptr)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">1</span>]); <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1561" class="blob-num js-line-number" data-line-number="1561"></td>
        <td id="LC1561" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>float<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAPF32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1562" class="blob-num js-line-number" data-line-number="1562"></td>
        <td id="LC1562" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>double<span class="pl-pds">&#39;</span></span>: <span class="pl-c1">HEAPF64</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">3</span>)]<span class="pl-k">=</span>value; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1563" class="blob-num js-line-number" data-line-number="1563"></td>
        <td id="LC1563" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">default</span>: <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>invalid type for setValue: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> type);</td>
      </tr>
      <tr>
        <td id="L1564" class="blob-num js-line-number" data-line-number="1564"></td>
        <td id="LC1564" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1565" class="blob-num js-line-number" data-line-number="1565"></td>
        <td id="LC1565" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1566" class="blob-num js-line-number" data-line-number="1566"></td>
        <td id="LC1566" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1567" class="blob-num js-line-number" data-line-number="1567"></td>
        <td id="LC1567" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(number, string, boolean=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1568" class="blob-num js-line-number" data-line-number="1568"></td>
        <td id="LC1568" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getValue</span>(<span class="pl-smi">ptr</span>, <span class="pl-smi">type</span>, <span class="pl-smi">noSafe</span>) {</td>
      </tr>
      <tr>
        <td id="L1569" class="blob-num js-line-number" data-line-number="1569"></td>
        <td id="LC1569" class="blob-code blob-code-inner js-file-line">  type <span class="pl-k">=</span> type <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1570" class="blob-num js-line-number" data-line-number="1570"></td>
        <td id="LC1570" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-smi">type</span>.<span class="pl-c1">charAt</span>(<span class="pl-smi">type</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>*<span class="pl-pds">&#39;</span></span>) type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>; <span class="pl-c"><span class="pl-c">//</span> pointers are 32-bit</span></td>
      </tr>
      <tr>
        <td id="L1571" class="blob-num js-line-number" data-line-number="1571"></td>
        <td id="LC1571" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">switch</span>(type) {</td>
      </tr>
      <tr>
        <td id="L1572" class="blob-num js-line-number" data-line-number="1572"></td>
        <td id="LC1572" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i1<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAP8</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)];</td>
      </tr>
      <tr>
        <td id="L1573" class="blob-num js-line-number" data-line-number="1573"></td>
        <td id="LC1573" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAP8</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)];</td>
      </tr>
      <tr>
        <td id="L1574" class="blob-num js-line-number" data-line-number="1574"></td>
        <td id="LC1574" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i16<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAP16</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)];</td>
      </tr>
      <tr>
        <td id="L1575" class="blob-num js-line-number" data-line-number="1575"></td>
        <td id="LC1575" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L1576" class="blob-num js-line-number" data-line-number="1576"></td>
        <td id="LC1576" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i64<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L1577" class="blob-num js-line-number" data-line-number="1577"></td>
        <td id="LC1577" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>float<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAPF32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L1578" class="blob-num js-line-number" data-line-number="1578"></td>
        <td id="LC1578" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>double<span class="pl-pds">&#39;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">HEAPF64</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">3</span>)];</td>
      </tr>
      <tr>
        <td id="L1579" class="blob-num js-line-number" data-line-number="1579"></td>
        <td id="LC1579" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">default</span>: <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>invalid type for getValue: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> type);</td>
      </tr>
      <tr>
        <td id="L1580" class="blob-num js-line-number" data-line-number="1580"></td>
        <td id="LC1580" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1581" class="blob-num js-line-number" data-line-number="1581"></td>
        <td id="LC1581" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L1582" class="blob-num js-line-number" data-line-number="1582"></td>
        <td id="LC1582" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1583" class="blob-num js-line-number" data-line-number="1583"></td>
        <td id="LC1583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1584" class="blob-num js-line-number" data-line-number="1584"></td>
        <td id="LC1584" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1585" class="blob-num js-line-number" data-line-number="1585"></td>
        <td id="LC1585" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1586" class="blob-num js-line-number" data-line-number="1586"></td>
        <td id="LC1586" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1587" class="blob-num js-line-number" data-line-number="1587"></td>
        <td id="LC1587" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1588" class="blob-num js-line-number" data-line-number="1588"></td>
        <td id="LC1588" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Wasm globals</span></td>
      </tr>
      <tr>
        <td id="L1589" class="blob-num js-line-number" data-line-number="1589"></td>
        <td id="LC1589" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1590" class="blob-num js-line-number" data-line-number="1590"></td>
        <td id="LC1590" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> wasmMemory;</td>
      </tr>
      <tr>
        <td id="L1591" class="blob-num js-line-number" data-line-number="1591"></td>
        <td id="LC1591" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1592" class="blob-num js-line-number" data-line-number="1592"></td>
        <td id="LC1592" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Potentially used for direct table calls.</span></td>
      </tr>
      <tr>
        <td id="L1593" class="blob-num js-line-number" data-line-number="1593"></td>
        <td id="LC1593" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> wasmTable;</td>
      </tr>
      <tr>
        <td id="L1594" class="blob-num js-line-number" data-line-number="1594"></td>
        <td id="LC1594" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1595" class="blob-num js-line-number" data-line-number="1595"></td>
        <td id="LC1595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1596" class="blob-num js-line-number" data-line-number="1596"></td>
        <td id="LC1596" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>========================================</span></td>
      </tr>
      <tr>
        <td id="L1597" class="blob-num js-line-number" data-line-number="1597"></td>
        <td id="LC1597" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Runtime essentials</span></td>
      </tr>
      <tr>
        <td id="L1598" class="blob-num js-line-number" data-line-number="1598"></td>
        <td id="LC1598" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>========================================</span></td>
      </tr>
      <tr>
        <td id="L1599" class="blob-num js-line-number" data-line-number="1599"></td>
        <td id="LC1599" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1600" class="blob-num js-line-number" data-line-number="1600"></td>
        <td id="LC1600" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> whether we are quitting the application. no code should run after this.</span></td>
      </tr>
      <tr>
        <td id="L1601" class="blob-num js-line-number" data-line-number="1601"></td>
        <td id="LC1601" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> set in exit() and abort()</span></td>
      </tr>
      <tr>
        <td id="L1602" class="blob-num js-line-number" data-line-number="1602"></td>
        <td id="LC1602" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ABORT</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1603" class="blob-num js-line-number" data-line-number="1603"></td>
        <td id="LC1603" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1604" class="blob-num js-line-number" data-line-number="1604"></td>
        <td id="LC1604" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> set by exit() and abort().  Passed to &#39;onExit&#39; handler.</span></td>
      </tr>
      <tr>
        <td id="L1605" class="blob-num js-line-number" data-line-number="1605"></td>
        <td id="LC1605" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> NOTE: This is also used as the process return code code in shell environments</span></td>
      </tr>
      <tr>
        <td id="L1606" class="blob-num js-line-number" data-line-number="1606"></td>
        <td id="LC1606" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> but only when noExitRuntime is false.</span></td>
      </tr>
      <tr>
        <td id="L1607" class="blob-num js-line-number" data-line-number="1607"></td>
        <td id="LC1607" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">EXITSTATUS</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1608" class="blob-num js-line-number" data-line-number="1608"></td>
        <td id="LC1608" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1609" class="blob-num js-line-number" data-line-number="1609"></td>
        <td id="LC1609" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(*, string=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1610" class="blob-num js-line-number" data-line-number="1610"></td>
        <td id="LC1610" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">assert</span>(<span class="pl-smi">condition</span>, <span class="pl-smi">text</span>) {</td>
      </tr>
      <tr>
        <td id="L1611" class="blob-num js-line-number" data-line-number="1611"></td>
        <td id="LC1611" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>condition) {</td>
      </tr>
      <tr>
        <td id="L1612" class="blob-num js-line-number" data-line-number="1612"></td>
        <td id="LC1612" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Assertion failed: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> text);</td>
      </tr>
      <tr>
        <td id="L1613" class="blob-num js-line-number" data-line-number="1613"></td>
        <td id="LC1613" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1614" class="blob-num js-line-number" data-line-number="1614"></td>
        <td id="LC1614" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1615" class="blob-num js-line-number" data-line-number="1615"></td>
        <td id="LC1615" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1616" class="blob-num js-line-number" data-line-number="1616"></td>
        <td id="LC1616" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the C function with a specified identifier (for C++, you need to do manual name mangling)</span></td>
      </tr>
      <tr>
        <td id="L1617" class="blob-num js-line-number" data-line-number="1617"></td>
        <td id="LC1617" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getCFunc</span>(<span class="pl-smi">ident</span>) {</td>
      </tr>
      <tr>
        <td id="L1618" class="blob-num js-line-number" data-line-number="1618"></td>
        <td id="LC1618" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> func <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> ident]; <span class="pl-c"><span class="pl-c">//</span> closure exported function</span></td>
      </tr>
      <tr>
        <td id="L1619" class="blob-num js-line-number" data-line-number="1619"></td>
        <td id="LC1619" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(func, <span class="pl-s"><span class="pl-pds">&#39;</span>Cannot call unknown function <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> ident <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>, make sure it is exported<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1620" class="blob-num js-line-number" data-line-number="1620"></td>
        <td id="LC1620" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> func;</td>
      </tr>
      <tr>
        <td id="L1621" class="blob-num js-line-number" data-line-number="1621"></td>
        <td id="LC1621" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1622" class="blob-num js-line-number" data-line-number="1622"></td>
        <td id="LC1622" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1623" class="blob-num js-line-number" data-line-number="1623"></td>
        <td id="LC1623" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> C calling interface.</span></td>
      </tr>
      <tr>
        <td id="L1624" class="blob-num js-line-number" data-line-number="1624"></td>
        <td id="LC1624" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">ccall</span>(<span class="pl-smi">ident</span>, <span class="pl-smi">returnType</span>, <span class="pl-smi">argTypes</span>, <span class="pl-smi">args</span>, <span class="pl-smi">opts</span>) {</td>
      </tr>
      <tr>
        <td id="L1625" class="blob-num js-line-number" data-line-number="1625"></td>
        <td id="LC1625" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> For fast lookup of conversion functions</span></td>
      </tr>
      <tr>
        <td id="L1626" class="blob-num js-line-number" data-line-number="1626"></td>
        <td id="LC1626" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> toC <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L1627" class="blob-num js-line-number" data-line-number="1627"></td>
        <td id="LC1627" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-en">string</span><span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L1628" class="blob-num js-line-number" data-line-number="1628"></td>
        <td id="LC1628" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1629" class="blob-num js-line-number" data-line-number="1629"></td>
        <td id="LC1629" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (str <span class="pl-k">!==</span> <span class="pl-c1">null</span> <span class="pl-k">&amp;&amp;</span> str <span class="pl-k">!==</span> <span class="pl-c1">undefined</span> <span class="pl-k">&amp;&amp;</span> str <span class="pl-k">!==</span> <span class="pl-c1">0</span>) { <span class="pl-c"><span class="pl-c">//</span> null string</span></td>
      </tr>
      <tr>
        <td id="L1630" class="blob-num js-line-number" data-line-number="1630"></td>
        <td id="LC1630" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> at most 4 bytes per UTF-8 code point, +1 for the trailing &#39;\0&#39;</span></td>
      </tr>
      <tr>
        <td id="L1631" class="blob-num js-line-number" data-line-number="1631"></td>
        <td id="LC1631" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> len <span class="pl-k">=</span> (<span class="pl-smi">str</span>.<span class="pl-c1">length</span> <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1632" class="blob-num js-line-number" data-line-number="1632"></td>
        <td id="LC1632" class="blob-code blob-code-inner js-file-line">        ret <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span>(len);</td>
      </tr>
      <tr>
        <td id="L1633" class="blob-num js-line-number" data-line-number="1633"></td>
        <td id="LC1633" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">stringToUTF8</span>(str, ret, len);</td>
      </tr>
      <tr>
        <td id="L1634" class="blob-num js-line-number" data-line-number="1634"></td>
        <td id="LC1634" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1635" class="blob-num js-line-number" data-line-number="1635"></td>
        <td id="LC1635" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1636" class="blob-num js-line-number" data-line-number="1636"></td>
        <td id="LC1636" class="blob-code blob-code-inner js-file-line">    },</td>
      </tr>
      <tr>
        <td id="L1637" class="blob-num js-line-number" data-line-number="1637"></td>
        <td id="LC1637" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-en">array</span><span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">arr</span>) {</td>
      </tr>
      <tr>
        <td id="L1638" class="blob-num js-line-number" data-line-number="1638"></td>
        <td id="LC1638" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span>(<span class="pl-smi">arr</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L1639" class="blob-num js-line-number" data-line-number="1639"></td>
        <td id="LC1639" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">writeArrayToMemory</span>(arr, ret);</td>
      </tr>
      <tr>
        <td id="L1640" class="blob-num js-line-number" data-line-number="1640"></td>
        <td id="LC1640" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1641" class="blob-num js-line-number" data-line-number="1641"></td>
        <td id="LC1641" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1642" class="blob-num js-line-number" data-line-number="1642"></td>
        <td id="LC1642" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L1643" class="blob-num js-line-number" data-line-number="1643"></td>
        <td id="LC1643" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1644" class="blob-num js-line-number" data-line-number="1644"></td>
        <td id="LC1644" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">convertReturnValue</span>(<span class="pl-smi">ret</span>) {</td>
      </tr>
      <tr>
        <td id="L1645" class="blob-num js-line-number" data-line-number="1645"></td>
        <td id="LC1645" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (returnType <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) <span class="pl-k">return</span> <span class="pl-en">UTF8ToString</span>(ret);</td>
      </tr>
      <tr>
        <td id="L1646" class="blob-num js-line-number" data-line-number="1646"></td>
        <td id="LC1646" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (returnType <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>boolean<span class="pl-pds">&#39;</span></span>) <span class="pl-k">return</span> <span class="pl-c1">Boolean</span>(ret);</td>
      </tr>
      <tr>
        <td id="L1647" class="blob-num js-line-number" data-line-number="1647"></td>
        <td id="LC1647" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1648" class="blob-num js-line-number" data-line-number="1648"></td>
        <td id="LC1648" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1649" class="blob-num js-line-number" data-line-number="1649"></td>
        <td id="LC1649" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1650" class="blob-num js-line-number" data-line-number="1650"></td>
        <td id="LC1650" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> func <span class="pl-k">=</span> <span class="pl-en">getCFunc</span>(ident);</td>
      </tr>
      <tr>
        <td id="L1651" class="blob-num js-line-number" data-line-number="1651"></td>
        <td id="LC1651" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> cArgs <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L1652" class="blob-num js-line-number" data-line-number="1652"></td>
        <td id="LC1652" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> stack <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1653" class="blob-num js-line-number" data-line-number="1653"></td>
        <td id="LC1653" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(returnType <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>array<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Return type should not be &quot;array&quot;.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1654" class="blob-num js-line-number" data-line-number="1654"></td>
        <td id="LC1654" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (args) {</td>
      </tr>
      <tr>
        <td id="L1655" class="blob-num js-line-number" data-line-number="1655"></td>
        <td id="LC1655" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">args</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L1656" class="blob-num js-line-number" data-line-number="1656"></td>
        <td id="LC1656" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> converter <span class="pl-k">=</span> toC[argTypes[i]];</td>
      </tr>
      <tr>
        <td id="L1657" class="blob-num js-line-number" data-line-number="1657"></td>
        <td id="LC1657" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (converter) {</td>
      </tr>
      <tr>
        <td id="L1658" class="blob-num js-line-number" data-line-number="1658"></td>
        <td id="LC1658" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (stack <span class="pl-k">===</span> <span class="pl-c1">0</span>) stack <span class="pl-k">=</span> <span class="pl-en">stackSave</span>();</td>
      </tr>
      <tr>
        <td id="L1659" class="blob-num js-line-number" data-line-number="1659"></td>
        <td id="LC1659" class="blob-code blob-code-inner js-file-line">        cArgs[i] <span class="pl-k">=</span> <span class="pl-en">converter</span>(args[i]);</td>
      </tr>
      <tr>
        <td id="L1660" class="blob-num js-line-number" data-line-number="1660"></td>
        <td id="LC1660" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1661" class="blob-num js-line-number" data-line-number="1661"></td>
        <td id="LC1661" class="blob-code blob-code-inner js-file-line">        cArgs[i] <span class="pl-k">=</span> args[i];</td>
      </tr>
      <tr>
        <td id="L1662" class="blob-num js-line-number" data-line-number="1662"></td>
        <td id="LC1662" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1663" class="blob-num js-line-number" data-line-number="1663"></td>
        <td id="LC1663" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1664" class="blob-num js-line-number" data-line-number="1664"></td>
        <td id="LC1664" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1665" class="blob-num js-line-number" data-line-number="1665"></td>
        <td id="LC1665" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-smi">func</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, cArgs);</td>
      </tr>
      <tr>
        <td id="L1666" class="blob-num js-line-number" data-line-number="1666"></td>
        <td id="LC1666" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1667" class="blob-num js-line-number" data-line-number="1667"></td>
        <td id="LC1667" class="blob-code blob-code-inner js-file-line">  ret <span class="pl-k">=</span> <span class="pl-en">convertReturnValue</span>(ret);</td>
      </tr>
      <tr>
        <td id="L1668" class="blob-num js-line-number" data-line-number="1668"></td>
        <td id="LC1668" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (stack <span class="pl-k">!==</span> <span class="pl-c1">0</span>) <span class="pl-en">stackRestore</span>(stack);</td>
      </tr>
      <tr>
        <td id="L1669" class="blob-num js-line-number" data-line-number="1669"></td>
        <td id="LC1669" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1670" class="blob-num js-line-number" data-line-number="1670"></td>
        <td id="LC1670" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1671" class="blob-num js-line-number" data-line-number="1671"></td>
        <td id="LC1671" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1672" class="blob-num js-line-number" data-line-number="1672"></td>
        <td id="LC1672" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">cwrap</span>(<span class="pl-smi">ident</span>, <span class="pl-smi">returnType</span>, <span class="pl-smi">argTypes</span>, <span class="pl-smi">opts</span>) {</td>
      </tr>
      <tr>
        <td id="L1673" class="blob-num js-line-number" data-line-number="1673"></td>
        <td id="LC1673" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L1674" class="blob-num js-line-number" data-line-number="1674"></td>
        <td id="LC1674" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">ccall</span>(ident, returnType, argTypes, <span class="pl-c1">arguments</span>, opts);</td>
      </tr>
      <tr>
        <td id="L1675" class="blob-num js-line-number" data-line-number="1675"></td>
        <td id="LC1675" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1676" class="blob-num js-line-number" data-line-number="1676"></td>
        <td id="LC1676" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1677" class="blob-num js-line-number" data-line-number="1677"></td>
        <td id="LC1677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1678" class="blob-num js-line-number" data-line-number="1678"></td>
        <td id="LC1678" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ALLOC_NORMAL</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> Tries to use _malloc()</span></td>
      </tr>
      <tr>
        <td id="L1679" class="blob-num js-line-number" data-line-number="1679"></td>
        <td id="LC1679" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ALLOC_STACK</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">//</span> Lives for the duration of the current function call</span></td>
      </tr>
      <tr>
        <td id="L1680" class="blob-num js-line-number" data-line-number="1680"></td>
        <td id="LC1680" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ALLOC_DYNAMIC</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">//</span> Cannot be freed except through sbrk</span></td>
      </tr>
      <tr>
        <td id="L1681" class="blob-num js-line-number" data-line-number="1681"></td>
        <td id="LC1681" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ALLOC_NONE</span> <span class="pl-k">=</span> <span class="pl-c1">3</span>; <span class="pl-c"><span class="pl-c">//</span> Do not allocate</span></td>
      </tr>
      <tr>
        <td id="L1682" class="blob-num js-line-number" data-line-number="1682"></td>
        <td id="LC1682" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1683" class="blob-num js-line-number" data-line-number="1683"></td>
        <td id="LC1683" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> allocate(): This is for internal use. You can use it yourself as well, but the interface</span></td>
      </tr>
      <tr>
        <td id="L1684" class="blob-num js-line-number" data-line-number="1684"></td>
        <td id="LC1684" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>             is a little tricky (see docs right below). The reason is that it is optimized</span></td>
      </tr>
      <tr>
        <td id="L1685" class="blob-num js-line-number" data-line-number="1685"></td>
        <td id="LC1685" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>             for multiple syntaxes to save space in generated code. So you should</span></td>
      </tr>
      <tr>
        <td id="L1686" class="blob-num js-line-number" data-line-number="1686"></td>
        <td id="LC1686" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>             normally not use allocate(), and instead allocate memory using _malloc(),</span></td>
      </tr>
      <tr>
        <td id="L1687" class="blob-num js-line-number" data-line-number="1687"></td>
        <td id="LC1687" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>             initialize it with setValue(), and so forth.</span></td>
      </tr>
      <tr>
        <td id="L1688" class="blob-num js-line-number" data-line-number="1688"></td>
        <td id="LC1688" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> @slab: An array of data, or a number. If a number, then the size of the block to allocate,</span></td>
      </tr>
      <tr>
        <td id="L1689" class="blob-num js-line-number" data-line-number="1689"></td>
        <td id="LC1689" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>        in *bytes* (note that this is sometimes confusing: the next parameter does not</span></td>
      </tr>
      <tr>
        <td id="L1690" class="blob-num js-line-number" data-line-number="1690"></td>
        <td id="LC1690" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>        affect this!)</span></td>
      </tr>
      <tr>
        <td id="L1691" class="blob-num js-line-number" data-line-number="1691"></td>
        <td id="LC1691" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> @types: Either an array of types, one for each byte (or 0 if no type at that position),</span></td>
      </tr>
      <tr>
        <td id="L1692" class="blob-num js-line-number" data-line-number="1692"></td>
        <td id="LC1692" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>         or a single type which is used for the entire block. This only matters if there</span></td>
      </tr>
      <tr>
        <td id="L1693" class="blob-num js-line-number" data-line-number="1693"></td>
        <td id="LC1693" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>         is initial data - if @slab is a number, then this does not matter at all and is</span></td>
      </tr>
      <tr>
        <td id="L1694" class="blob-num js-line-number" data-line-number="1694"></td>
        <td id="LC1694" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>         ignored.</span></td>
      </tr>
      <tr>
        <td id="L1695" class="blob-num js-line-number" data-line-number="1695"></td>
        <td id="LC1695" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> @allocator: How to allocate memory, see ALLOC_*</span></td>
      </tr>
      <tr>
        <td id="L1696" class="blob-num js-line-number" data-line-number="1696"></td>
        <td id="LC1696" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function((TypedArray|Array&lt;number&gt;|number), string, number, number=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1697" class="blob-num js-line-number" data-line-number="1697"></td>
        <td id="LC1697" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">allocate</span>(<span class="pl-smi">slab</span>, <span class="pl-smi">types</span>, <span class="pl-smi">allocator</span>, <span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L1698" class="blob-num js-line-number" data-line-number="1698"></td>
        <td id="LC1698" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> zeroinit, size;</td>
      </tr>
      <tr>
        <td id="L1699" class="blob-num js-line-number" data-line-number="1699"></td>
        <td id="LC1699" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> slab <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1700" class="blob-num js-line-number" data-line-number="1700"></td>
        <td id="LC1700" class="blob-code blob-code-inner js-file-line">    zeroinit <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L1701" class="blob-num js-line-number" data-line-number="1701"></td>
        <td id="LC1701" class="blob-code blob-code-inner js-file-line">    size <span class="pl-k">=</span> slab;</td>
      </tr>
      <tr>
        <td id="L1702" class="blob-num js-line-number" data-line-number="1702"></td>
        <td id="LC1702" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1703" class="blob-num js-line-number" data-line-number="1703"></td>
        <td id="LC1703" class="blob-code blob-code-inner js-file-line">    zeroinit <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L1704" class="blob-num js-line-number" data-line-number="1704"></td>
        <td id="LC1704" class="blob-code blob-code-inner js-file-line">    size <span class="pl-k">=</span> <span class="pl-smi">slab</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L1705" class="blob-num js-line-number" data-line-number="1705"></td>
        <td id="LC1705" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1706" class="blob-num js-line-number" data-line-number="1706"></td>
        <td id="LC1706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1707" class="blob-num js-line-number" data-line-number="1707"></td>
        <td id="LC1707" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> singleType <span class="pl-k">=</span> <span class="pl-k">typeof</span> types <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> types <span class="pl-k">:</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L1708" class="blob-num js-line-number" data-line-number="1708"></td>
        <td id="LC1708" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1709" class="blob-num js-line-number" data-line-number="1709"></td>
        <td id="LC1709" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret;</td>
      </tr>
      <tr>
        <td id="L1710" class="blob-num js-line-number" data-line-number="1710"></td>
        <td id="LC1710" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (allocator <span class="pl-k">==</span> <span class="pl-c1">ALLOC_NONE</span>) {</td>
      </tr>
      <tr>
        <td id="L1711" class="blob-num js-line-number" data-line-number="1711"></td>
        <td id="LC1711" class="blob-code blob-code-inner js-file-line">    ret <span class="pl-k">=</span> ptr;</td>
      </tr>
      <tr>
        <td id="L1712" class="blob-num js-line-number" data-line-number="1712"></td>
        <td id="LC1712" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1713" class="blob-num js-line-number" data-line-number="1713"></td>
        <td id="LC1713" class="blob-code blob-code-inner js-file-line">    ret <span class="pl-k">=</span> [_malloc,</td>
      </tr>
      <tr>
        <td id="L1714" class="blob-num js-line-number" data-line-number="1714"></td>
        <td id="LC1714" class="blob-code blob-code-inner js-file-line">    stackAlloc,</td>
      </tr>
      <tr>
        <td id="L1715" class="blob-num js-line-number" data-line-number="1715"></td>
        <td id="LC1715" class="blob-code blob-code-inner js-file-line">    dynamicAlloc][allocator](<span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(size, singleType <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-smi">types</span>.<span class="pl-c1">length</span>));</td>
      </tr>
      <tr>
        <td id="L1716" class="blob-num js-line-number" data-line-number="1716"></td>
        <td id="LC1716" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1717" class="blob-num js-line-number" data-line-number="1717"></td>
        <td id="LC1717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1718" class="blob-num js-line-number" data-line-number="1718"></td>
        <td id="LC1718" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (zeroinit) {</td>
      </tr>
      <tr>
        <td id="L1719" class="blob-num js-line-number" data-line-number="1719"></td>
        <td id="LC1719" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> stop;</td>
      </tr>
      <tr>
        <td id="L1720" class="blob-num js-line-number" data-line-number="1720"></td>
        <td id="LC1720" class="blob-code blob-code-inner js-file-line">    ptr <span class="pl-k">=</span> ret;</td>
      </tr>
      <tr>
        <td id="L1721" class="blob-num js-line-number" data-line-number="1721"></td>
        <td id="LC1721" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>((ret <span class="pl-k">&amp;</span> <span class="pl-c1">3</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L1722" class="blob-num js-line-number" data-line-number="1722"></td>
        <td id="LC1722" class="blob-code blob-code-inner js-file-line">    stop <span class="pl-k">=</span> ret <span class="pl-k">+</span> (size <span class="pl-k">&amp;</span> <span class="pl-k">~</span><span class="pl-c1">3</span>);</td>
      </tr>
      <tr>
        <td id="L1723" class="blob-num js-line-number" data-line-number="1723"></td>
        <td id="LC1723" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (; ptr <span class="pl-k">&lt;</span> stop; ptr <span class="pl-k">+=</span> <span class="pl-c1">4</span>) {</td>
      </tr>
      <tr>
        <td id="L1724" class="blob-num js-line-number" data-line-number="1724"></td>
        <td id="LC1724" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1725" class="blob-num js-line-number" data-line-number="1725"></td>
        <td id="LC1725" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1726" class="blob-num js-line-number" data-line-number="1726"></td>
        <td id="LC1726" class="blob-code blob-code-inner js-file-line">    stop <span class="pl-k">=</span> ret <span class="pl-k">+</span> size;</td>
      </tr>
      <tr>
        <td id="L1727" class="blob-num js-line-number" data-line-number="1727"></td>
        <td id="LC1727" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (ptr <span class="pl-k">&lt;</span> stop) {</td>
      </tr>
      <tr>
        <td id="L1728" class="blob-num js-line-number" data-line-number="1728"></td>
        <td id="LC1728" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP8</span>[((ptr<span class="pl-k">++</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1729" class="blob-num js-line-number" data-line-number="1729"></td>
        <td id="LC1729" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1730" class="blob-num js-line-number" data-line-number="1730"></td>
        <td id="LC1730" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1731" class="blob-num js-line-number" data-line-number="1731"></td>
        <td id="LC1731" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1732" class="blob-num js-line-number" data-line-number="1732"></td>
        <td id="LC1732" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1733" class="blob-num js-line-number" data-line-number="1733"></td>
        <td id="LC1733" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (singleType <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1734" class="blob-num js-line-number" data-line-number="1734"></td>
        <td id="LC1734" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-smi">slab</span>.<span class="pl-smi">subarray</span> <span class="pl-k">||</span> <span class="pl-smi">slab</span>.<span class="pl-smi">slice</span>) {</td>
      </tr>
      <tr>
        <td id="L1735" class="blob-num js-line-number" data-line-number="1735"></td>
        <td id="LC1735" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAPU8</span>.<span class="pl-c1">set</span>(<span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{!Uint8Array}</span> <span class="pl-c">*/</span></span> (slab), ret);</td>
      </tr>
      <tr>
        <td id="L1736" class="blob-num js-line-number" data-line-number="1736"></td>
        <td id="LC1736" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1737" class="blob-num js-line-number" data-line-number="1737"></td>
        <td id="LC1737" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAPU8</span>.<span class="pl-c1">set</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(slab), ret);</td>
      </tr>
      <tr>
        <td id="L1738" class="blob-num js-line-number" data-line-number="1738"></td>
        <td id="LC1738" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1739" class="blob-num js-line-number" data-line-number="1739"></td>
        <td id="LC1739" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1740" class="blob-num js-line-number" data-line-number="1740"></td>
        <td id="LC1740" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1741" class="blob-num js-line-number" data-line-number="1741"></td>
        <td id="LC1741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1742" class="blob-num js-line-number" data-line-number="1742"></td>
        <td id="LC1742" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, type, typeSize, previousType;</td>
      </tr>
      <tr>
        <td id="L1743" class="blob-num js-line-number" data-line-number="1743"></td>
        <td id="LC1743" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (i <span class="pl-k">&lt;</span> size) {</td>
      </tr>
      <tr>
        <td id="L1744" class="blob-num js-line-number" data-line-number="1744"></td>
        <td id="LC1744" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> curr <span class="pl-k">=</span> slab[i];</td>
      </tr>
      <tr>
        <td id="L1745" class="blob-num js-line-number" data-line-number="1745"></td>
        <td id="LC1745" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1746" class="blob-num js-line-number" data-line-number="1746"></td>
        <td id="LC1746" class="blob-code blob-code-inner js-file-line">    type <span class="pl-k">=</span> singleType <span class="pl-k">||</span> types[i];</td>
      </tr>
      <tr>
        <td id="L1747" class="blob-num js-line-number" data-line-number="1747"></td>
        <td id="LC1747" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (type <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L1748" class="blob-num js-line-number" data-line-number="1748"></td>
        <td id="LC1748" class="blob-code blob-code-inner js-file-line">      i<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L1749" class="blob-num js-line-number" data-line-number="1749"></td>
        <td id="LC1749" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L1750" class="blob-num js-line-number" data-line-number="1750"></td>
        <td id="LC1750" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1751" class="blob-num js-line-number" data-line-number="1751"></td>
        <td id="LC1751" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(type, <span class="pl-s"><span class="pl-pds">&#39;</span>Must know what type to store in allocate!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1752" class="blob-num js-line-number" data-line-number="1752"></td>
        <td id="LC1752" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1753" class="blob-num js-line-number" data-line-number="1753"></td>
        <td id="LC1753" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (type <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i64<span class="pl-pds">&#39;</span></span>) type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>i32<span class="pl-pds">&#39;</span></span>; <span class="pl-c"><span class="pl-c">//</span> special case: we have one i32 here, and one i32 later</span></td>
      </tr>
      <tr>
        <td id="L1754" class="blob-num js-line-number" data-line-number="1754"></td>
        <td id="LC1754" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1755" class="blob-num js-line-number" data-line-number="1755"></td>
        <td id="LC1755" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">setValue</span>(ret<span class="pl-k">+</span>i, curr, type);</td>
      </tr>
      <tr>
        <td id="L1756" class="blob-num js-line-number" data-line-number="1756"></td>
        <td id="LC1756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1757" class="blob-num js-line-number" data-line-number="1757"></td>
        <td id="LC1757" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> no need to look up size unless type changes, so cache it</span></td>
      </tr>
      <tr>
        <td id="L1758" class="blob-num js-line-number" data-line-number="1758"></td>
        <td id="LC1758" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (previousType <span class="pl-k">!==</span> type) {</td>
      </tr>
      <tr>
        <td id="L1759" class="blob-num js-line-number" data-line-number="1759"></td>
        <td id="LC1759" class="blob-code blob-code-inner js-file-line">      typeSize <span class="pl-k">=</span> <span class="pl-en">getNativeTypeSize</span>(type);</td>
      </tr>
      <tr>
        <td id="L1760" class="blob-num js-line-number" data-line-number="1760"></td>
        <td id="LC1760" class="blob-code blob-code-inner js-file-line">      previousType <span class="pl-k">=</span> type;</td>
      </tr>
      <tr>
        <td id="L1761" class="blob-num js-line-number" data-line-number="1761"></td>
        <td id="LC1761" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1762" class="blob-num js-line-number" data-line-number="1762"></td>
        <td id="LC1762" class="blob-code blob-code-inner js-file-line">    i <span class="pl-k">+=</span> typeSize;</td>
      </tr>
      <tr>
        <td id="L1763" class="blob-num js-line-number" data-line-number="1763"></td>
        <td id="LC1763" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1764" class="blob-num js-line-number" data-line-number="1764"></td>
        <td id="LC1764" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1765" class="blob-num js-line-number" data-line-number="1765"></td>
        <td id="LC1765" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L1766" class="blob-num js-line-number" data-line-number="1766"></td>
        <td id="LC1766" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1767" class="blob-num js-line-number" data-line-number="1767"></td>
        <td id="LC1767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1768" class="blob-num js-line-number" data-line-number="1768"></td>
        <td id="LC1768" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready</span></td>
      </tr>
      <tr>
        <td id="L1769" class="blob-num js-line-number" data-line-number="1769"></td>
        <td id="LC1769" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getMemory</span>(<span class="pl-smi">size</span>) {</td>
      </tr>
      <tr>
        <td id="L1770" class="blob-num js-line-number" data-line-number="1770"></td>
        <td id="LC1770" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>runtimeInitialized) <span class="pl-k">return</span> <span class="pl-en">dynamicAlloc</span>(size);</td>
      </tr>
      <tr>
        <td id="L1771" class="blob-num js-line-number" data-line-number="1771"></td>
        <td id="LC1771" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-en">_malloc</span>(size);</td>
      </tr>
      <tr>
        <td id="L1772" class="blob-num js-line-number" data-line-number="1772"></td>
        <td id="LC1772" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1773" class="blob-num js-line-number" data-line-number="1773"></td>
        <td id="LC1773" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1774" class="blob-num js-line-number" data-line-number="1774"></td>
        <td id="LC1774" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1775" class="blob-num js-line-number" data-line-number="1775"></td>
        <td id="LC1775" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1776" class="blob-num js-line-number" data-line-number="1776"></td>
        <td id="LC1776" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1777" class="blob-num js-line-number" data-line-number="1777"></td>
        <td id="LC1777" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(number, number=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1778" class="blob-num js-line-number" data-line-number="1778"></td>
        <td id="LC1778" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">Pointer_stringify</span>(<span class="pl-smi">ptr</span>, <span class="pl-smi">length</span>) {</td>
      </tr>
      <tr>
        <td id="L1779" class="blob-num js-line-number" data-line-number="1779"></td>
        <td id="LC1779" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1780" class="blob-num js-line-number" data-line-number="1780"></td>
        <td id="LC1780" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1781" class="blob-num js-line-number" data-line-number="1781"></td>
        <td id="LC1781" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1782" class="blob-num js-line-number" data-line-number="1782"></td>
        <td id="LC1782" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Given a pointer &#39;ptr&#39; to a null-terminated ASCII-encoded string in the emscripten HEAP, returns</span></td>
      </tr>
      <tr>
        <td id="L1783" class="blob-num js-line-number" data-line-number="1783"></td>
        <td id="LC1783" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> a copy of that string as a Javascript String object.</span></td>
      </tr>
      <tr>
        <td id="L1784" class="blob-num js-line-number" data-line-number="1784"></td>
        <td id="LC1784" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1785" class="blob-num js-line-number" data-line-number="1785"></td>
        <td id="LC1785" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">AsciiToString</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L1786" class="blob-num js-line-number" data-line-number="1786"></td>
        <td id="LC1786" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1787" class="blob-num js-line-number" data-line-number="1787"></td>
        <td id="LC1787" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (<span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1788" class="blob-num js-line-number" data-line-number="1788"></td>
        <td id="LC1788" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> ch <span class="pl-k">=</span> <span class="pl-c1">HEAPU8</span>[((ptr<span class="pl-k">++</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)];</td>
      </tr>
      <tr>
        <td id="L1789" class="blob-num js-line-number" data-line-number="1789"></td>
        <td id="LC1789" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>ch) <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L1790" class="blob-num js-line-number" data-line-number="1790"></td>
        <td id="LC1790" class="blob-code blob-code-inner js-file-line">    str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(ch);</td>
      </tr>
      <tr>
        <td id="L1791" class="blob-num js-line-number" data-line-number="1791"></td>
        <td id="LC1791" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1792" class="blob-num js-line-number" data-line-number="1792"></td>
        <td id="LC1792" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1793" class="blob-num js-line-number" data-line-number="1793"></td>
        <td id="LC1793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1794" class="blob-num js-line-number" data-line-number="1794"></td>
        <td id="LC1794" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copies the given Javascript String object &#39;str&#39; to the emscripten HEAP at address &#39;outPtr&#39;,</span></td>
      </tr>
      <tr>
        <td id="L1795" class="blob-num js-line-number" data-line-number="1795"></td>
        <td id="LC1795" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L1796" class="blob-num js-line-number" data-line-number="1796"></td>
        <td id="LC1796" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1797" class="blob-num js-line-number" data-line-number="1797"></td>
        <td id="LC1797" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">stringToAscii</span>(<span class="pl-smi">str</span>, <span class="pl-smi">outPtr</span>) {</td>
      </tr>
      <tr>
        <td id="L1798" class="blob-num js-line-number" data-line-number="1798"></td>
        <td id="LC1798" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-en">writeAsciiToMemory</span>(str, outPtr, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L1799" class="blob-num js-line-number" data-line-number="1799"></td>
        <td id="LC1799" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1800" class="blob-num js-line-number" data-line-number="1800"></td>
        <td id="LC1800" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1801" class="blob-num js-line-number" data-line-number="1801"></td>
        <td id="LC1801" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1802" class="blob-num js-line-number" data-line-number="1802"></td>
        <td id="LC1802" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Given a pointer &#39;ptr&#39; to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns</span></td>
      </tr>
      <tr>
        <td id="L1803" class="blob-num js-line-number" data-line-number="1803"></td>
        <td id="LC1803" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> a copy of that string as a Javascript String object.</span></td>
      </tr>
      <tr>
        <td id="L1804" class="blob-num js-line-number" data-line-number="1804"></td>
        <td id="LC1804" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1805" class="blob-num js-line-number" data-line-number="1805"></td>
        <td id="LC1805" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> UTF8Decoder <span class="pl-k">=</span> <span class="pl-k">typeof</span> TextDecoder <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> <span class="pl-k">new</span> <span class="pl-en">TextDecoder</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>utf8<span class="pl-pds">&#39;</span></span>) <span class="pl-k">:</span> <span class="pl-c1">undefined</span>;</td>
      </tr>
      <tr>
        <td id="L1806" class="blob-num js-line-number" data-line-number="1806"></td>
        <td id="LC1806" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1807" class="blob-num js-line-number" data-line-number="1807"></td>
        <td id="LC1807" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span></span></td>
      </tr>
      <tr>
        <td id="L1808" class="blob-num js-line-number" data-line-number="1808"></td>
        <td id="LC1808" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{number}</span> <span class="pl-smi">idx</span></span></td>
      </tr>
      <tr>
        <td id="L1809" class="blob-num js-line-number" data-line-number="1809"></td>
        <td id="LC1809" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{number=}</span> <span class="pl-smi">maxBytesToRead</span></span></td>
      </tr>
      <tr>
        <td id="L1810" class="blob-num js-line-number" data-line-number="1810"></td>
        <td id="LC1810" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@return</span> <span class="pl-en">{string}</span></span></td>
      </tr>
      <tr>
        <td id="L1811" class="blob-num js-line-number" data-line-number="1811"></td>
        <td id="LC1811" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1812" class="blob-num js-line-number" data-line-number="1812"></td>
        <td id="LC1812" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">UTF8ArrayToString</span>(<span class="pl-smi">u8Array</span>, <span class="pl-smi">idx</span>, <span class="pl-smi">maxBytesToRead</span>) {</td>
      </tr>
      <tr>
        <td id="L1813" class="blob-num js-line-number" data-line-number="1813"></td>
        <td id="LC1813" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> endIdx <span class="pl-k">=</span> idx <span class="pl-k">+</span> maxBytesToRead;</td>
      </tr>
      <tr>
        <td id="L1814" class="blob-num js-line-number" data-line-number="1814"></td>
        <td id="LC1814" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> endPtr <span class="pl-k">=</span> idx;</td>
      </tr>
      <tr>
        <td id="L1815" class="blob-num js-line-number" data-line-number="1815"></td>
        <td id="LC1815" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> TextDecoder needs to know the byte length in advance, it doesn&#39;t stop on null terminator by itself.</span></td>
      </tr>
      <tr>
        <td id="L1816" class="blob-num js-line-number" data-line-number="1816"></td>
        <td id="LC1816" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.</span></td>
      </tr>
      <tr>
        <td id="L1817" class="blob-num js-line-number" data-line-number="1817"></td>
        <td id="LC1817" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)</span></td>
      </tr>
      <tr>
        <td id="L1818" class="blob-num js-line-number" data-line-number="1818"></td>
        <td id="LC1818" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (u8Array[endPtr] <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>(endPtr <span class="pl-k">&gt;=</span> endIdx)) <span class="pl-k">++</span>endPtr;</td>
      </tr>
      <tr>
        <td id="L1819" class="blob-num js-line-number" data-line-number="1819"></td>
        <td id="LC1819" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1820" class="blob-num js-line-number" data-line-number="1820"></td>
        <td id="LC1820" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (endPtr <span class="pl-k">-</span> idx <span class="pl-k">&gt;</span> <span class="pl-c1">16</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">u8Array</span>.<span class="pl-smi">subarray</span> <span class="pl-k">&amp;&amp;</span> UTF8Decoder) {</td>
      </tr>
      <tr>
        <td id="L1821" class="blob-num js-line-number" data-line-number="1821"></td>
        <td id="LC1821" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-smi">UTF8Decoder</span>.<span class="pl-en">decode</span>(<span class="pl-smi">u8Array</span>.<span class="pl-en">subarray</span>(idx, endPtr));</td>
      </tr>
      <tr>
        <td id="L1822" class="blob-num js-line-number" data-line-number="1822"></td>
        <td id="LC1822" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1823" class="blob-num js-line-number" data-line-number="1823"></td>
        <td id="LC1823" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1824" class="blob-num js-line-number" data-line-number="1824"></td>
        <td id="LC1824" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> If building with TextDecoder, we have already computed the string length above, so test loop end condition against that</span></td>
      </tr>
      <tr>
        <td id="L1825" class="blob-num js-line-number" data-line-number="1825"></td>
        <td id="LC1825" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (idx <span class="pl-k">&lt;</span> endPtr) {</td>
      </tr>
      <tr>
        <td id="L1826" class="blob-num js-line-number" data-line-number="1826"></td>
        <td id="LC1826" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> For UTF8 byte structure, see:</span></td>
      </tr>
      <tr>
        <td id="L1827" class="blob-num js-line-number" data-line-number="1827"></td>
        <td id="LC1827" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> http://en.wikipedia.org/wiki/UTF-8#Description</span></td>
      </tr>
      <tr>
        <td id="L1828" class="blob-num js-line-number" data-line-number="1828"></td>
        <td id="LC1828" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> https://www.ietf.org/rfc/rfc2279.txt</span></td>
      </tr>
      <tr>
        <td id="L1829" class="blob-num js-line-number" data-line-number="1829"></td>
        <td id="LC1829" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> https://tools.ietf.org/html/rfc3629</span></td>
      </tr>
      <tr>
        <td id="L1830" class="blob-num js-line-number" data-line-number="1830"></td>
        <td id="LC1830" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> u0 <span class="pl-k">=</span> u8Array[idx<span class="pl-k">++</span>];</td>
      </tr>
      <tr>
        <td id="L1831" class="blob-num js-line-number" data-line-number="1831"></td>
        <td id="LC1831" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>(u0 <span class="pl-k">&amp;</span> <span class="pl-c1">0x80</span>)) { str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(u0); <span class="pl-k">continue</span>; }</td>
      </tr>
      <tr>
        <td id="L1832" class="blob-num js-line-number" data-line-number="1832"></td>
        <td id="LC1832" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> u1 <span class="pl-k">=</span> u8Array[idx<span class="pl-k">++</span>] <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>;</td>
      </tr>
      <tr>
        <td id="L1833" class="blob-num js-line-number" data-line-number="1833"></td>
        <td id="LC1833" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> ((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">0xE0</span>) <span class="pl-k">==</span> <span class="pl-c1">0xC0</span>) { str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">31</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">6</span>) <span class="pl-k">|</span> u1); <span class="pl-k">continue</span>; }</td>
      </tr>
      <tr>
        <td id="L1834" class="blob-num js-line-number" data-line-number="1834"></td>
        <td id="LC1834" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> u2 <span class="pl-k">=</span> u8Array[idx<span class="pl-k">++</span>] <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>;</td>
      </tr>
      <tr>
        <td id="L1835" class="blob-num js-line-number" data-line-number="1835"></td>
        <td id="LC1835" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> ((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">0xF0</span>) <span class="pl-k">==</span> <span class="pl-c1">0xE0</span>) {</td>
      </tr>
      <tr>
        <td id="L1836" class="blob-num js-line-number" data-line-number="1836"></td>
        <td id="LC1836" class="blob-code blob-code-inner js-file-line">        u0 <span class="pl-k">=</span> ((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">15</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">12</span>) <span class="pl-k">|</span> (u1 <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">6</span>) <span class="pl-k">|</span> u2;</td>
      </tr>
      <tr>
        <td id="L1837" class="blob-num js-line-number" data-line-number="1837"></td>
        <td id="LC1837" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1838" class="blob-num js-line-number" data-line-number="1838"></td>
        <td id="LC1838" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">0xF8</span>) <span class="pl-k">!=</span> <span class="pl-c1">0xF0</span>) <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Invalid UTF-8 leading byte 0x<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">u0</span>.<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1839" class="blob-num js-line-number" data-line-number="1839"></td>
        <td id="LC1839" class="blob-code blob-code-inner js-file-line">        u0 <span class="pl-k">=</span> ((u0 <span class="pl-k">&amp;</span> <span class="pl-c1">7</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">18</span>) <span class="pl-k">|</span> (u1 <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">12</span>) <span class="pl-k">|</span> (u2 <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">6</span>) <span class="pl-k">|</span> (u8Array[idx<span class="pl-k">++</span>] <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1840" class="blob-num js-line-number" data-line-number="1840"></td>
        <td id="LC1840" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1841" class="blob-num js-line-number" data-line-number="1841"></td>
        <td id="LC1841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1842" class="blob-num js-line-number" data-line-number="1842"></td>
        <td id="LC1842" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (u0 <span class="pl-k">&lt;</span> <span class="pl-c1">0x10000</span>) {</td>
      </tr>
      <tr>
        <td id="L1843" class="blob-num js-line-number" data-line-number="1843"></td>
        <td id="LC1843" class="blob-code blob-code-inner js-file-line">        str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(u0);</td>
      </tr>
      <tr>
        <td id="L1844" class="blob-num js-line-number" data-line-number="1844"></td>
        <td id="LC1844" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1845" class="blob-num js-line-number" data-line-number="1845"></td>
        <td id="LC1845" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ch <span class="pl-k">=</span> u0 <span class="pl-k">-</span> <span class="pl-c1">0x10000</span>;</td>
      </tr>
      <tr>
        <td id="L1846" class="blob-num js-line-number" data-line-number="1846"></td>
        <td id="LC1846" class="blob-code blob-code-inner js-file-line">        str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(<span class="pl-c1">0xD800</span> <span class="pl-k">|</span> (ch <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">10</span>), <span class="pl-c1">0xDC00</span> <span class="pl-k">|</span> (ch <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>));</td>
      </tr>
      <tr>
        <td id="L1847" class="blob-num js-line-number" data-line-number="1847"></td>
        <td id="LC1847" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L1848" class="blob-num js-line-number" data-line-number="1848"></td>
        <td id="LC1848" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1849" class="blob-num js-line-number" data-line-number="1849"></td>
        <td id="LC1849" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1850" class="blob-num js-line-number" data-line-number="1850"></td>
        <td id="LC1850" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L1851" class="blob-num js-line-number" data-line-number="1851"></td>
        <td id="LC1851" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1852" class="blob-num js-line-number" data-line-number="1852"></td>
        <td id="LC1852" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1853" class="blob-num js-line-number" data-line-number="1853"></td>
        <td id="LC1853" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Given a pointer &#39;ptr&#39; to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a</span></td>
      </tr>
      <tr>
        <td id="L1854" class="blob-num js-line-number" data-line-number="1854"></td>
        <td id="LC1854" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> copy of that string as a Javascript String object.</span></td>
      </tr>
      <tr>
        <td id="L1855" class="blob-num js-line-number" data-line-number="1855"></td>
        <td id="LC1855" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit</span></td>
      </tr>
      <tr>
        <td id="L1856" class="blob-num js-line-number" data-line-number="1856"></td>
        <td id="LC1856" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is</span></td>
      </tr>
      <tr>
        <td id="L1857" class="blob-num js-line-number" data-line-number="1857"></td>
        <td id="LC1857" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the</span></td>
      </tr>
      <tr>
        <td id="L1858" class="blob-num js-line-number" data-line-number="1858"></td>
        <td id="LC1858" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will</span></td>
      </tr>
      <tr>
        <td id="L1859" class="blob-num js-line-number" data-line-number="1859"></td>
        <td id="LC1859" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)</span></td>
      </tr>
      <tr>
        <td id="L1860" class="blob-num js-line-number" data-line-number="1860"></td>
        <td id="LC1860" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may</span></td>
      </tr>
      <tr>
        <td id="L1861" class="blob-num js-line-number" data-line-number="1861"></td>
        <td id="LC1861" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 throw JS JIT optimizations off, so it is worth to consider consistently using one</span></td>
      </tr>
      <tr>
        <td id="L1862" class="blob-num js-line-number" data-line-number="1862"></td>
        <td id="LC1862" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                 style or the other.</span></td>
      </tr>
      <tr>
        <td id="L1863" class="blob-num js-line-number" data-line-number="1863"></td>
        <td id="LC1863" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span></span></td>
      </tr>
      <tr>
        <td id="L1864" class="blob-num js-line-number" data-line-number="1864"></td>
        <td id="LC1864" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{number}</span> <span class="pl-smi">ptr</span></span></td>
      </tr>
      <tr>
        <td id="L1865" class="blob-num js-line-number" data-line-number="1865"></td>
        <td id="LC1865" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{number=}</span> <span class="pl-smi">maxBytesToRead</span></span></td>
      </tr>
      <tr>
        <td id="L1866" class="blob-num js-line-number" data-line-number="1866"></td>
        <td id="LC1866" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@return</span> <span class="pl-en">{string}</span></span></td>
      </tr>
      <tr>
        <td id="L1867" class="blob-num js-line-number" data-line-number="1867"></td>
        <td id="LC1867" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1868" class="blob-num js-line-number" data-line-number="1868"></td>
        <td id="LC1868" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">UTF8ToString</span>(<span class="pl-smi">ptr</span>, <span class="pl-smi">maxBytesToRead</span>) {</td>
      </tr>
      <tr>
        <td id="L1869" class="blob-num js-line-number" data-line-number="1869"></td>
        <td id="LC1869" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ptr <span class="pl-k">?</span> <span class="pl-en">UTF8ArrayToString</span>(<span class="pl-c1">HEAPU8</span>, ptr, maxBytesToRead) <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1870" class="blob-num js-line-number" data-line-number="1870"></td>
        <td id="LC1870" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1871" class="blob-num js-line-number" data-line-number="1871"></td>
        <td id="LC1871" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1872" class="blob-num js-line-number" data-line-number="1872"></td>
        <td id="LC1872" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copies the given Javascript String object &#39;str&#39; to the given byte array at address &#39;outIdx&#39;,</span></td>
      </tr>
      <tr>
        <td id="L1873" class="blob-num js-line-number" data-line-number="1873"></td>
        <td id="LC1873" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L1874" class="blob-num js-line-number" data-line-number="1874"></td>
        <td id="LC1874" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.</span></td>
      </tr>
      <tr>
        <td id="L1875" class="blob-num js-line-number" data-line-number="1875"></td>
        <td id="LC1875" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Parameters:</span></td>
      </tr>
      <tr>
        <td id="L1876" class="blob-num js-line-number" data-line-number="1876"></td>
        <td id="LC1876" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   str: the Javascript string to copy.</span></td>
      </tr>
      <tr>
        <td id="L1877" class="blob-num js-line-number" data-line-number="1877"></td>
        <td id="LC1877" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.</span></td>
      </tr>
      <tr>
        <td id="L1878" class="blob-num js-line-number" data-line-number="1878"></td>
        <td id="LC1878" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   outIdx: The starting offset in the array to begin the copying.</span></td>
      </tr>
      <tr>
        <td id="L1879" class="blob-num js-line-number" data-line-number="1879"></td>
        <td id="LC1879" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   maxBytesToWrite: The maximum number of bytes this function can write to the array.</span></td>
      </tr>
      <tr>
        <td id="L1880" class="blob-num js-line-number" data-line-number="1880"></td>
        <td id="LC1880" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    This count should include the null terminator,</span></td>
      </tr>
      <tr>
        <td id="L1881" class="blob-num js-line-number" data-line-number="1881"></td>
        <td id="LC1881" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.</span></td>
      </tr>
      <tr>
        <td id="L1882" class="blob-num js-line-number" data-line-number="1882"></td>
        <td id="LC1882" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1883" class="blob-num js-line-number" data-line-number="1883"></td>
        <td id="LC1883" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes written, EXCLUDING the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1884" class="blob-num js-line-number" data-line-number="1884"></td>
        <td id="LC1884" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1885" class="blob-num js-line-number" data-line-number="1885"></td>
        <td id="LC1885" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">stringToUTF8Array</span>(<span class="pl-smi">str</span>, <span class="pl-smi">outU8Array</span>, <span class="pl-smi">outIdx</span>, <span class="pl-smi">maxBytesToWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L1886" class="blob-num js-line-number" data-line-number="1886"></td>
        <td id="LC1886" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>(maxBytesToWrite <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>)) <span class="pl-c"><span class="pl-c">//</span> Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don&#39;t write out any bytes.</span></td>
      </tr>
      <tr>
        <td id="L1887" class="blob-num js-line-number" data-line-number="1887"></td>
        <td id="LC1887" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1888" class="blob-num js-line-number" data-line-number="1888"></td>
        <td id="LC1888" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1889" class="blob-num js-line-number" data-line-number="1889"></td>
        <td id="LC1889" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> startIdx <span class="pl-k">=</span> outIdx;</td>
      </tr>
      <tr>
        <td id="L1890" class="blob-num js-line-number" data-line-number="1890"></td>
        <td id="LC1890" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> endIdx <span class="pl-k">=</span> outIdx <span class="pl-k">+</span> maxBytesToWrite <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">//</span> -1 for string null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1891" class="blob-num js-line-number" data-line-number="1891"></td>
        <td id="LC1891" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L1892" class="blob-num js-line-number" data-line-number="1892"></td>
        <td id="LC1892" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16-&gt;UTF32-&gt;UTF8.</span></td>
      </tr>
      <tr>
        <td id="L1893" class="blob-num js-line-number" data-line-number="1893"></td>
        <td id="LC1893" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> See http://unicode.org/faq/utf_bom.html#utf16-3</span></td>
      </tr>
      <tr>
        <td id="L1894" class="blob-num js-line-number" data-line-number="1894"></td>
        <td id="LC1894" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629</span></td>
      </tr>
      <tr>
        <td id="L1895" class="blob-num js-line-number" data-line-number="1895"></td>
        <td id="LC1895" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> u <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i); <span class="pl-c"><span class="pl-c">//</span> possibly a lead surrogate</span></td>
      </tr>
      <tr>
        <td id="L1896" class="blob-num js-line-number" data-line-number="1896"></td>
        <td id="LC1896" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (u <span class="pl-k">&gt;=</span> <span class="pl-c1">0xD800</span> <span class="pl-k">&amp;&amp;</span> u <span class="pl-k">&lt;=</span> <span class="pl-c1">0xDFFF</span>) {</td>
      </tr>
      <tr>
        <td id="L1897" class="blob-num js-line-number" data-line-number="1897"></td>
        <td id="LC1897" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> u1 <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-k">++</span>i);</td>
      </tr>
      <tr>
        <td id="L1898" class="blob-num js-line-number" data-line-number="1898"></td>
        <td id="LC1898" class="blob-code blob-code-inner js-file-line">      u <span class="pl-k">=</span> <span class="pl-c1">0x10000</span> <span class="pl-k">+</span> ((u <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">10</span>) <span class="pl-k">|</span> (u1 <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>);</td>
      </tr>
      <tr>
        <td id="L1899" class="blob-num js-line-number" data-line-number="1899"></td>
        <td id="LC1899" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1900" class="blob-num js-line-number" data-line-number="1900"></td>
        <td id="LC1900" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0x7F</span>) {</td>
      </tr>
      <tr>
        <td id="L1901" class="blob-num js-line-number" data-line-number="1901"></td>
        <td id="LC1901" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (outIdx <span class="pl-k">&gt;=</span> endIdx) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1902" class="blob-num js-line-number" data-line-number="1902"></td>
        <td id="LC1902" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> u;</td>
      </tr>
      <tr>
        <td id="L1903" class="blob-num js-line-number" data-line-number="1903"></td>
        <td id="LC1903" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0x7FF</span>) {</td>
      </tr>
      <tr>
        <td id="L1904" class="blob-num js-line-number" data-line-number="1904"></td>
        <td id="LC1904" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (outIdx <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">&gt;=</span> endIdx) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1905" class="blob-num js-line-number" data-line-number="1905"></td>
        <td id="LC1905" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0xC0</span> <span class="pl-k">|</span> (u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">6</span>);</td>
      </tr>
      <tr>
        <td id="L1906" class="blob-num js-line-number" data-line-number="1906"></td>
        <td id="LC1906" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> (u <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1907" class="blob-num js-line-number" data-line-number="1907"></td>
        <td id="LC1907" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0xFFFF</span>) {</td>
      </tr>
      <tr>
        <td id="L1908" class="blob-num js-line-number" data-line-number="1908"></td>
        <td id="LC1908" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (outIdx <span class="pl-k">+</span> <span class="pl-c1">2</span> <span class="pl-k">&gt;=</span> endIdx) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1909" class="blob-num js-line-number" data-line-number="1909"></td>
        <td id="LC1909" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0xE0</span> <span class="pl-k">|</span> (u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">12</span>);</td>
      </tr>
      <tr>
        <td id="L1910" class="blob-num js-line-number" data-line-number="1910"></td>
        <td id="LC1910" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> ((u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">6</span>) <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1911" class="blob-num js-line-number" data-line-number="1911"></td>
        <td id="LC1911" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> (u <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1912" class="blob-num js-line-number" data-line-number="1912"></td>
        <td id="LC1912" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1913" class="blob-num js-line-number" data-line-number="1913"></td>
        <td id="LC1913" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (outIdx <span class="pl-k">+</span> <span class="pl-c1">3</span> <span class="pl-k">&gt;=</span> endIdx) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1914" class="blob-num js-line-number" data-line-number="1914"></td>
        <td id="LC1914" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (u <span class="pl-k">&gt;=</span> <span class="pl-c1">0x200000</span>) <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Invalid Unicode code point 0x<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">u</span>.<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1915" class="blob-num js-line-number" data-line-number="1915"></td>
        <td id="LC1915" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0xF0</span> <span class="pl-k">|</span> (u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">18</span>);</td>
      </tr>
      <tr>
        <td id="L1916" class="blob-num js-line-number" data-line-number="1916"></td>
        <td id="LC1916" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> ((u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">12</span>) <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1917" class="blob-num js-line-number" data-line-number="1917"></td>
        <td id="LC1917" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> ((u <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">6</span>) <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1918" class="blob-num js-line-number" data-line-number="1918"></td>
        <td id="LC1918" class="blob-code blob-code-inner js-file-line">      outU8Array[outIdx<span class="pl-k">++</span>] <span class="pl-k">=</span> <span class="pl-c1">0x80</span> <span class="pl-k">|</span> (u <span class="pl-k">&amp;</span> <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L1919" class="blob-num js-line-number" data-line-number="1919"></td>
        <td id="LC1919" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1920" class="blob-num js-line-number" data-line-number="1920"></td>
        <td id="LC1920" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1921" class="blob-num js-line-number" data-line-number="1921"></td>
        <td id="LC1921" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Null-terminate the pointer to the buffer.</span></td>
      </tr>
      <tr>
        <td id="L1922" class="blob-num js-line-number" data-line-number="1922"></td>
        <td id="LC1922" class="blob-code blob-code-inner js-file-line">  outU8Array[outIdx] <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1923" class="blob-num js-line-number" data-line-number="1923"></td>
        <td id="LC1923" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> outIdx <span class="pl-k">-</span> startIdx;</td>
      </tr>
      <tr>
        <td id="L1924" class="blob-num js-line-number" data-line-number="1924"></td>
        <td id="LC1924" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1925" class="blob-num js-line-number" data-line-number="1925"></td>
        <td id="LC1925" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1926" class="blob-num js-line-number" data-line-number="1926"></td>
        <td id="LC1926" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copies the given Javascript String object &#39;str&#39; to the emscripten HEAP at address &#39;outPtr&#39;,</span></td>
      </tr>
      <tr>
        <td id="L1927" class="blob-num js-line-number" data-line-number="1927"></td>
        <td id="LC1927" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L1928" class="blob-num js-line-number" data-line-number="1928"></td>
        <td id="LC1928" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.</span></td>
      </tr>
      <tr>
        <td id="L1929" class="blob-num js-line-number" data-line-number="1929"></td>
        <td id="LC1929" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes written, EXCLUDING the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1930" class="blob-num js-line-number" data-line-number="1930"></td>
        <td id="LC1930" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1931" class="blob-num js-line-number" data-line-number="1931"></td>
        <td id="LC1931" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">stringToUTF8</span>(<span class="pl-smi">str</span>, <span class="pl-smi">outPtr</span>, <span class="pl-smi">maxBytesToWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L1932" class="blob-num js-line-number" data-line-number="1932"></td>
        <td id="LC1932" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> maxBytesToWrite <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1933" class="blob-num js-line-number" data-line-number="1933"></td>
        <td id="LC1933" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-en">stringToUTF8Array</span>(str, <span class="pl-c1">HEAPU8</span>,outPtr, maxBytesToWrite);</td>
      </tr>
      <tr>
        <td id="L1934" class="blob-num js-line-number" data-line-number="1934"></td>
        <td id="LC1934" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1935" class="blob-num js-line-number" data-line-number="1935"></td>
        <td id="LC1935" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1936" class="blob-num js-line-number" data-line-number="1936"></td>
        <td id="LC1936" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.</span></td>
      </tr>
      <tr>
        <td id="L1937" class="blob-num js-line-number" data-line-number="1937"></td>
        <td id="LC1937" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">lengthBytesUTF8</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L1938" class="blob-num js-line-number" data-line-number="1938"></td>
        <td id="LC1938" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1939" class="blob-num js-line-number" data-line-number="1939"></td>
        <td id="LC1939" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L1940" class="blob-num js-line-number" data-line-number="1940"></td>
        <td id="LC1940" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16-&gt;UTF32-&gt;UTF8.</span></td>
      </tr>
      <tr>
        <td id="L1941" class="blob-num js-line-number" data-line-number="1941"></td>
        <td id="LC1941" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> See http://unicode.org/faq/utf_bom.html#utf16-3</span></td>
      </tr>
      <tr>
        <td id="L1942" class="blob-num js-line-number" data-line-number="1942"></td>
        <td id="LC1942" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> u <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i); <span class="pl-c"><span class="pl-c">//</span> possibly a lead surrogate</span></td>
      </tr>
      <tr>
        <td id="L1943" class="blob-num js-line-number" data-line-number="1943"></td>
        <td id="LC1943" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (u <span class="pl-k">&gt;=</span> <span class="pl-c1">0xD800</span> <span class="pl-k">&amp;&amp;</span> u <span class="pl-k">&lt;=</span> <span class="pl-c1">0xDFFF</span>) u <span class="pl-k">=</span> <span class="pl-c1">0x10000</span> <span class="pl-k">+</span> ((u <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">10</span>) <span class="pl-k">|</span> (<span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-k">++</span>i) <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>);</td>
      </tr>
      <tr>
        <td id="L1944" class="blob-num js-line-number" data-line-number="1944"></td>
        <td id="LC1944" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0x7F</span>) <span class="pl-k">++</span>len;</td>
      </tr>
      <tr>
        <td id="L1945" class="blob-num js-line-number" data-line-number="1945"></td>
        <td id="LC1945" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0x7FF</span>) len <span class="pl-k">+=</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L1946" class="blob-num js-line-number" data-line-number="1946"></td>
        <td id="LC1946" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> <span class="pl-k">if</span> (u <span class="pl-k">&lt;=</span> <span class="pl-c1">0xFFFF</span>) len <span class="pl-k">+=</span> <span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L1947" class="blob-num js-line-number" data-line-number="1947"></td>
        <td id="LC1947" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> len <span class="pl-k">+=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L1948" class="blob-num js-line-number" data-line-number="1948"></td>
        <td id="LC1948" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1949" class="blob-num js-line-number" data-line-number="1949"></td>
        <td id="LC1949" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1950" class="blob-num js-line-number" data-line-number="1950"></td>
        <td id="LC1950" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1951" class="blob-num js-line-number" data-line-number="1951"></td>
        <td id="LC1951" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1952" class="blob-num js-line-number" data-line-number="1952"></td>
        <td id="LC1952" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1953" class="blob-num js-line-number" data-line-number="1953"></td>
        <td id="LC1953" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Given a pointer &#39;ptr&#39; to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns</span></td>
      </tr>
      <tr>
        <td id="L1954" class="blob-num js-line-number" data-line-number="1954"></td>
        <td id="LC1954" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> a copy of that string as a Javascript String object.</span></td>
      </tr>
      <tr>
        <td id="L1955" class="blob-num js-line-number" data-line-number="1955"></td>
        <td id="LC1955" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1956" class="blob-num js-line-number" data-line-number="1956"></td>
        <td id="LC1956" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> UTF16Decoder <span class="pl-k">=</span> <span class="pl-k">typeof</span> TextDecoder <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> <span class="pl-k">new</span> <span class="pl-en">TextDecoder</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>utf-16le<span class="pl-pds">&#39;</span></span>) <span class="pl-k">:</span> <span class="pl-c1">undefined</span>;</td>
      </tr>
      <tr>
        <td id="L1957" class="blob-num js-line-number" data-line-number="1957"></td>
        <td id="LC1957" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">UTF16ToString</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L1958" class="blob-num js-line-number" data-line-number="1958"></td>
        <td id="LC1958" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(ptr <span class="pl-k">%</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Pointer passed to UTF16ToString must be aligned to two bytes!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1959" class="blob-num js-line-number" data-line-number="1959"></td>
        <td id="LC1959" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> endPtr <span class="pl-k">=</span> ptr;</td>
      </tr>
      <tr>
        <td id="L1960" class="blob-num js-line-number" data-line-number="1960"></td>
        <td id="LC1960" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> TextDecoder needs to know the byte length in advance, it doesn&#39;t stop on null terminator by itself.</span></td>
      </tr>
      <tr>
        <td id="L1961" class="blob-num js-line-number" data-line-number="1961"></td>
        <td id="LC1961" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.</span></td>
      </tr>
      <tr>
        <td id="L1962" class="blob-num js-line-number" data-line-number="1962"></td>
        <td id="LC1962" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> idx <span class="pl-k">=</span> endPtr <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1963" class="blob-num js-line-number" data-line-number="1963"></td>
        <td id="LC1963" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (<span class="pl-c1">HEAP16</span>[idx]) <span class="pl-k">++</span>idx;</td>
      </tr>
      <tr>
        <td id="L1964" class="blob-num js-line-number" data-line-number="1964"></td>
        <td id="LC1964" class="blob-code blob-code-inner js-file-line">  endPtr <span class="pl-k">=</span> idx <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1965" class="blob-num js-line-number" data-line-number="1965"></td>
        <td id="LC1965" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1966" class="blob-num js-line-number" data-line-number="1966"></td>
        <td id="LC1966" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (endPtr <span class="pl-k">-</span> ptr <span class="pl-k">&gt;</span> <span class="pl-c1">32</span> <span class="pl-k">&amp;&amp;</span> UTF16Decoder) {</td>
      </tr>
      <tr>
        <td id="L1967" class="blob-num js-line-number" data-line-number="1967"></td>
        <td id="LC1967" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-smi">UTF16Decoder</span>.<span class="pl-en">decode</span>(<span class="pl-c1">HEAPU8</span>.<span class="pl-en">subarray</span>(ptr, endPtr));</td>
      </tr>
      <tr>
        <td id="L1968" class="blob-num js-line-number" data-line-number="1968"></td>
        <td id="LC1968" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1969" class="blob-num js-line-number" data-line-number="1969"></td>
        <td id="LC1969" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1970" class="blob-num js-line-number" data-line-number="1970"></td>
        <td id="LC1970" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1971" class="blob-num js-line-number" data-line-number="1971"></td>
        <td id="LC1971" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1972" class="blob-num js-line-number" data-line-number="1972"></td>
        <td id="LC1972" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (<span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1973" class="blob-num js-line-number" data-line-number="1973"></td>
        <td id="LC1973" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> codeUnit <span class="pl-k">=</span> <span class="pl-c1">HEAP16</span>[(((ptr)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">2</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)];</td>
      </tr>
      <tr>
        <td id="L1974" class="blob-num js-line-number" data-line-number="1974"></td>
        <td id="LC1974" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (codeUnit <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L1975" class="blob-num js-line-number" data-line-number="1975"></td>
        <td id="LC1975" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">++</span>i;</td>
      </tr>
      <tr>
        <td id="L1976" class="blob-num js-line-number" data-line-number="1976"></td>
        <td id="LC1976" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.</span></td>
      </tr>
      <tr>
        <td id="L1977" class="blob-num js-line-number" data-line-number="1977"></td>
        <td id="LC1977" class="blob-code blob-code-inner js-file-line">      str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(codeUnit);</td>
      </tr>
      <tr>
        <td id="L1978" class="blob-num js-line-number" data-line-number="1978"></td>
        <td id="LC1978" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1979" class="blob-num js-line-number" data-line-number="1979"></td>
        <td id="LC1979" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L1980" class="blob-num js-line-number" data-line-number="1980"></td>
        <td id="LC1980" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1981" class="blob-num js-line-number" data-line-number="1981"></td>
        <td id="LC1981" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1982" class="blob-num js-line-number" data-line-number="1982"></td>
        <td id="LC1982" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copies the given Javascript String object &#39;str&#39; to the emscripten HEAP at address &#39;outPtr&#39;,</span></td>
      </tr>
      <tr>
        <td id="L1983" class="blob-num js-line-number" data-line-number="1983"></td>
        <td id="LC1983" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L1984" class="blob-num js-line-number" data-line-number="1984"></td>
        <td id="LC1984" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.</span></td>
      </tr>
      <tr>
        <td id="L1985" class="blob-num js-line-number" data-line-number="1985"></td>
        <td id="LC1985" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Parameters:</span></td>
      </tr>
      <tr>
        <td id="L1986" class="blob-num js-line-number" data-line-number="1986"></td>
        <td id="LC1986" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   str: the Javascript string to copy.</span></td>
      </tr>
      <tr>
        <td id="L1987" class="blob-num js-line-number" data-line-number="1987"></td>
        <td id="LC1987" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   outPtr: Byte address in Emscripten HEAP where to write the string to.</span></td>
      </tr>
      <tr>
        <td id="L1988" class="blob-num js-line-number" data-line-number="1988"></td>
        <td id="LC1988" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null</span></td>
      </tr>
      <tr>
        <td id="L1989" class="blob-num js-line-number" data-line-number="1989"></td>
        <td id="LC1989" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.</span></td>
      </tr>
      <tr>
        <td id="L1990" class="blob-num js-line-number" data-line-number="1990"></td>
        <td id="LC1990" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    maxBytesToWrite&lt;2 does not write any bytes to the output, not even the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1991" class="blob-num js-line-number" data-line-number="1991"></td>
        <td id="LC1991" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes written, EXCLUDING the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L1992" class="blob-num js-line-number" data-line-number="1992"></td>
        <td id="LC1992" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1993" class="blob-num js-line-number" data-line-number="1993"></td>
        <td id="LC1993" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">stringToUTF16</span>(<span class="pl-smi">str</span>, <span class="pl-smi">outPtr</span>, <span class="pl-smi">maxBytesToWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L1994" class="blob-num js-line-number" data-line-number="1994"></td>
        <td id="LC1994" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(outPtr <span class="pl-k">%</span> <span class="pl-c1">2</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Pointer passed to stringToUTF16 must be aligned to two bytes!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1995" class="blob-num js-line-number" data-line-number="1995"></td>
        <td id="LC1995" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> maxBytesToWrite <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1996" class="blob-num js-line-number" data-line-number="1996"></td>
        <td id="LC1996" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.</span></td>
      </tr>
      <tr>
        <td id="L1997" class="blob-num js-line-number" data-line-number="1997"></td>
        <td id="LC1997" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (maxBytesToWrite <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L1998" class="blob-num js-line-number" data-line-number="1998"></td>
        <td id="LC1998" class="blob-code blob-code-inner js-file-line">    maxBytesToWrite <span class="pl-k">=</span> <span class="pl-c1">0x7FFFFFFF</span>;</td>
      </tr>
      <tr>
        <td id="L1999" class="blob-num js-line-number" data-line-number="1999"></td>
        <td id="LC1999" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2000" class="blob-num js-line-number" data-line-number="2000"></td>
        <td id="LC2000" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (maxBytesToWrite <span class="pl-k">&lt;</span> <span class="pl-c1">2</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2001" class="blob-num js-line-number" data-line-number="2001"></td>
        <td id="LC2001" class="blob-code blob-code-inner js-file-line">  maxBytesToWrite <span class="pl-k">-=</span> <span class="pl-c1">2</span>; <span class="pl-c"><span class="pl-c">//</span> Null terminator.</span></td>
      </tr>
      <tr>
        <td id="L2002" class="blob-num js-line-number" data-line-number="2002"></td>
        <td id="LC2002" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> startPtr <span class="pl-k">=</span> outPtr;</td>
      </tr>
      <tr>
        <td id="L2003" class="blob-num js-line-number" data-line-number="2003"></td>
        <td id="LC2003" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> numCharsToWrite <span class="pl-k">=</span> (maxBytesToWrite <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span><span class="pl-k">*</span><span class="pl-c1">2</span>) <span class="pl-k">?</span> (maxBytesToWrite <span class="pl-k">/</span> <span class="pl-c1">2</span>) <span class="pl-k">:</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L2004" class="blob-num js-line-number" data-line-number="2004"></td>
        <td id="LC2004" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> numCharsToWrite; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L2005" class="blob-num js-line-number" data-line-number="2005"></td>
        <td id="LC2005" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L2006" class="blob-num js-line-number" data-line-number="2006"></td>
        <td id="LC2006" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> codeUnit <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i); <span class="pl-c"><span class="pl-c">//</span> possibly a lead surrogate</span></td>
      </tr>
      <tr>
        <td id="L2007" class="blob-num js-line-number" data-line-number="2007"></td>
        <td id="LC2007" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">HEAP16</span>[((outPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)]<span class="pl-k">=</span>codeUnit;</td>
      </tr>
      <tr>
        <td id="L2008" class="blob-num js-line-number" data-line-number="2008"></td>
        <td id="LC2008" class="blob-code blob-code-inner js-file-line">    outPtr <span class="pl-k">+=</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L2009" class="blob-num js-line-number" data-line-number="2009"></td>
        <td id="LC2009" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2010" class="blob-num js-line-number" data-line-number="2010"></td>
        <td id="LC2010" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Null-terminate the pointer to the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L2011" class="blob-num js-line-number" data-line-number="2011"></td>
        <td id="LC2011" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP16</span>[((outPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2012" class="blob-num js-line-number" data-line-number="2012"></td>
        <td id="LC2012" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> outPtr <span class="pl-k">-</span> startPtr;</td>
      </tr>
      <tr>
        <td id="L2013" class="blob-num js-line-number" data-line-number="2013"></td>
        <td id="LC2013" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2014" class="blob-num js-line-number" data-line-number="2014"></td>
        <td id="LC2014" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2015" class="blob-num js-line-number" data-line-number="2015"></td>
        <td id="LC2015" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.</span></td>
      </tr>
      <tr>
        <td id="L2016" class="blob-num js-line-number" data-line-number="2016"></td>
        <td id="LC2016" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2017" class="blob-num js-line-number" data-line-number="2017"></td>
        <td id="LC2017" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">lengthBytesUTF16</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L2018" class="blob-num js-line-number" data-line-number="2018"></td>
        <td id="LC2018" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span><span class="pl-k">*</span><span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L2019" class="blob-num js-line-number" data-line-number="2019"></td>
        <td id="LC2019" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2020" class="blob-num js-line-number" data-line-number="2020"></td>
        <td id="LC2020" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2021" class="blob-num js-line-number" data-line-number="2021"></td>
        <td id="LC2021" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">UTF32ToString</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2022" class="blob-num js-line-number" data-line-number="2022"></td>
        <td id="LC2022" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(ptr <span class="pl-k">%</span> <span class="pl-c1">4</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Pointer passed to UTF32ToString must be aligned to four bytes!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2023" class="blob-num js-line-number" data-line-number="2023"></td>
        <td id="LC2023" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2024" class="blob-num js-line-number" data-line-number="2024"></td>
        <td id="LC2024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2025" class="blob-num js-line-number" data-line-number="2025"></td>
        <td id="LC2025" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2026" class="blob-num js-line-number" data-line-number="2026"></td>
        <td id="LC2026" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (<span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2027" class="blob-num js-line-number" data-line-number="2027"></td>
        <td id="LC2027" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> utf32 <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((ptr)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L2028" class="blob-num js-line-number" data-line-number="2028"></td>
        <td id="LC2028" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (utf32 <span class="pl-k">==</span> <span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L2029" class="blob-num js-line-number" data-line-number="2029"></td>
        <td id="LC2029" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L2030" class="blob-num js-line-number" data-line-number="2030"></td>
        <td id="LC2030" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">++</span>i;</td>
      </tr>
      <tr>
        <td id="L2031" class="blob-num js-line-number" data-line-number="2031"></td>
        <td id="LC2031" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.</span></td>
      </tr>
      <tr>
        <td id="L2032" class="blob-num js-line-number" data-line-number="2032"></td>
        <td id="LC2032" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> See http://unicode.org/faq/utf_bom.html#utf16-3</span></td>
      </tr>
      <tr>
        <td id="L2033" class="blob-num js-line-number" data-line-number="2033"></td>
        <td id="LC2033" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (utf32 <span class="pl-k">&gt;=</span> <span class="pl-c1">0x10000</span>) {</td>
      </tr>
      <tr>
        <td id="L2034" class="blob-num js-line-number" data-line-number="2034"></td>
        <td id="LC2034" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ch <span class="pl-k">=</span> utf32 <span class="pl-k">-</span> <span class="pl-c1">0x10000</span>;</td>
      </tr>
      <tr>
        <td id="L2035" class="blob-num js-line-number" data-line-number="2035"></td>
        <td id="LC2035" class="blob-code blob-code-inner js-file-line">      str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(<span class="pl-c1">0xD800</span> <span class="pl-k">|</span> (ch <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">10</span>), <span class="pl-c1">0xDC00</span> <span class="pl-k">|</span> (ch <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>));</td>
      </tr>
      <tr>
        <td id="L2036" class="blob-num js-line-number" data-line-number="2036"></td>
        <td id="LC2036" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2037" class="blob-num js-line-number" data-line-number="2037"></td>
        <td id="LC2037" class="blob-code blob-code-inner js-file-line">      str <span class="pl-k">+=</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(utf32);</td>
      </tr>
      <tr>
        <td id="L2038" class="blob-num js-line-number" data-line-number="2038"></td>
        <td id="LC2038" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2039" class="blob-num js-line-number" data-line-number="2039"></td>
        <td id="LC2039" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2040" class="blob-num js-line-number" data-line-number="2040"></td>
        <td id="LC2040" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2041" class="blob-num js-line-number" data-line-number="2041"></td>
        <td id="LC2041" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2042" class="blob-num js-line-number" data-line-number="2042"></td>
        <td id="LC2042" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copies the given Javascript String object &#39;str&#39; to the emscripten HEAP at address &#39;outPtr&#39;,</span></td>
      </tr>
      <tr>
        <td id="L2043" class="blob-num js-line-number" data-line-number="2043"></td>
        <td id="LC2043" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L2044" class="blob-num js-line-number" data-line-number="2044"></td>
        <td id="LC2044" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.</span></td>
      </tr>
      <tr>
        <td id="L2045" class="blob-num js-line-number" data-line-number="2045"></td>
        <td id="LC2045" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Parameters:</span></td>
      </tr>
      <tr>
        <td id="L2046" class="blob-num js-line-number" data-line-number="2046"></td>
        <td id="LC2046" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   str: the Javascript string to copy.</span></td>
      </tr>
      <tr>
        <td id="L2047" class="blob-num js-line-number" data-line-number="2047"></td>
        <td id="LC2047" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   outPtr: Byte address in Emscripten HEAP where to write the string to.</span></td>
      </tr>
      <tr>
        <td id="L2048" class="blob-num js-line-number" data-line-number="2048"></td>
        <td id="LC2048" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null</span></td>
      </tr>
      <tr>
        <td id="L2049" class="blob-num js-line-number" data-line-number="2049"></td>
        <td id="LC2049" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.</span></td>
      </tr>
      <tr>
        <td id="L2050" class="blob-num js-line-number" data-line-number="2050"></td>
        <td id="LC2050" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>                    maxBytesToWrite&lt;4 does not write any bytes to the output, not even the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L2051" class="blob-num js-line-number" data-line-number="2051"></td>
        <td id="LC2051" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes written, EXCLUDING the null terminator.</span></td>
      </tr>
      <tr>
        <td id="L2052" class="blob-num js-line-number" data-line-number="2052"></td>
        <td id="LC2052" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2053" class="blob-num js-line-number" data-line-number="2053"></td>
        <td id="LC2053" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">stringToUTF32</span>(<span class="pl-smi">str</span>, <span class="pl-smi">outPtr</span>, <span class="pl-smi">maxBytesToWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L2054" class="blob-num js-line-number" data-line-number="2054"></td>
        <td id="LC2054" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(outPtr <span class="pl-k">%</span> <span class="pl-c1">4</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Pointer passed to stringToUTF32 must be aligned to four bytes!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2055" class="blob-num js-line-number" data-line-number="2055"></td>
        <td id="LC2055" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">typeof</span> maxBytesToWrite <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2056" class="blob-num js-line-number" data-line-number="2056"></td>
        <td id="LC2056" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.</span></td>
      </tr>
      <tr>
        <td id="L2057" class="blob-num js-line-number" data-line-number="2057"></td>
        <td id="LC2057" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (maxBytesToWrite <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L2058" class="blob-num js-line-number" data-line-number="2058"></td>
        <td id="LC2058" class="blob-code blob-code-inner js-file-line">    maxBytesToWrite <span class="pl-k">=</span> <span class="pl-c1">0x7FFFFFFF</span>;</td>
      </tr>
      <tr>
        <td id="L2059" class="blob-num js-line-number" data-line-number="2059"></td>
        <td id="LC2059" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2060" class="blob-num js-line-number" data-line-number="2060"></td>
        <td id="LC2060" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (maxBytesToWrite <span class="pl-k">&lt;</span> <span class="pl-c1">4</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2061" class="blob-num js-line-number" data-line-number="2061"></td>
        <td id="LC2061" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> startPtr <span class="pl-k">=</span> outPtr;</td>
      </tr>
      <tr>
        <td id="L2062" class="blob-num js-line-number" data-line-number="2062"></td>
        <td id="LC2062" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> endPtr <span class="pl-k">=</span> startPtr <span class="pl-k">+</span> maxBytesToWrite <span class="pl-k">-</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L2063" class="blob-num js-line-number" data-line-number="2063"></td>
        <td id="LC2063" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L2064" class="blob-num js-line-number" data-line-number="2064"></td>
        <td id="LC2064" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.</span></td>
      </tr>
      <tr>
        <td id="L2065" class="blob-num js-line-number" data-line-number="2065"></td>
        <td id="LC2065" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> See http://unicode.org/faq/utf_bom.html#utf16-3</span></td>
      </tr>
      <tr>
        <td id="L2066" class="blob-num js-line-number" data-line-number="2066"></td>
        <td id="LC2066" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> codeUnit <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i); <span class="pl-c"><span class="pl-c">//</span> possibly a lead surrogate</span></td>
      </tr>
      <tr>
        <td id="L2067" class="blob-num js-line-number" data-line-number="2067"></td>
        <td id="LC2067" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (codeUnit <span class="pl-k">&gt;=</span> <span class="pl-c1">0xD800</span> <span class="pl-k">&amp;&amp;</span> codeUnit <span class="pl-k">&lt;=</span> <span class="pl-c1">0xDFFF</span>) {</td>
      </tr>
      <tr>
        <td id="L2068" class="blob-num js-line-number" data-line-number="2068"></td>
        <td id="LC2068" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> trailSurrogate <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-k">++</span>i);</td>
      </tr>
      <tr>
        <td id="L2069" class="blob-num js-line-number" data-line-number="2069"></td>
        <td id="LC2069" class="blob-code blob-code-inner js-file-line">      codeUnit <span class="pl-k">=</span> <span class="pl-c1">0x10000</span> <span class="pl-k">+</span> ((codeUnit <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">10</span>) <span class="pl-k">|</span> (trailSurrogate <span class="pl-k">&amp;</span> <span class="pl-c1">0x3FF</span>);</td>
      </tr>
      <tr>
        <td id="L2070" class="blob-num js-line-number" data-line-number="2070"></td>
        <td id="LC2070" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2071" class="blob-num js-line-number" data-line-number="2071"></td>
        <td id="LC2071" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">HEAP32</span>[((outPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>codeUnit;</td>
      </tr>
      <tr>
        <td id="L2072" class="blob-num js-line-number" data-line-number="2072"></td>
        <td id="LC2072" class="blob-code blob-code-inner js-file-line">    outPtr <span class="pl-k">+=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L2073" class="blob-num js-line-number" data-line-number="2073"></td>
        <td id="LC2073" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (outPtr <span class="pl-k">+</span> <span class="pl-c1">4</span> <span class="pl-k">&gt;</span> endPtr) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2074" class="blob-num js-line-number" data-line-number="2074"></td>
        <td id="LC2074" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2075" class="blob-num js-line-number" data-line-number="2075"></td>
        <td id="LC2075" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Null-terminate the pointer to the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L2076" class="blob-num js-line-number" data-line-number="2076"></td>
        <td id="LC2076" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP32</span>[((outPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2077" class="blob-num js-line-number" data-line-number="2077"></td>
        <td id="LC2077" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> outPtr <span class="pl-k">-</span> startPtr;</td>
      </tr>
      <tr>
        <td id="L2078" class="blob-num js-line-number" data-line-number="2078"></td>
        <td id="LC2078" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2079" class="blob-num js-line-number" data-line-number="2079"></td>
        <td id="LC2079" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2080" class="blob-num js-line-number" data-line-number="2080"></td>
        <td id="LC2080" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.</span></td>
      </tr>
      <tr>
        <td id="L2081" class="blob-num js-line-number" data-line-number="2081"></td>
        <td id="LC2081" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2082" class="blob-num js-line-number" data-line-number="2082"></td>
        <td id="LC2082" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">lengthBytesUTF32</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L2083" class="blob-num js-line-number" data-line-number="2083"></td>
        <td id="LC2083" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2084" class="blob-num js-line-number" data-line-number="2084"></td>
        <td id="LC2084" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L2085" class="blob-num js-line-number" data-line-number="2085"></td>
        <td id="LC2085" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.</span></td>
      </tr>
      <tr>
        <td id="L2086" class="blob-num js-line-number" data-line-number="2086"></td>
        <td id="LC2086" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> See http://unicode.org/faq/utf_bom.html#utf16-3</span></td>
      </tr>
      <tr>
        <td id="L2087" class="blob-num js-line-number" data-line-number="2087"></td>
        <td id="LC2087" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> codeUnit <span class="pl-k">=</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i);</td>
      </tr>
      <tr>
        <td id="L2088" class="blob-num js-line-number" data-line-number="2088"></td>
        <td id="LC2088" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (codeUnit <span class="pl-k">&gt;=</span> <span class="pl-c1">0xD800</span> <span class="pl-k">&amp;&amp;</span> codeUnit <span class="pl-k">&lt;=</span> <span class="pl-c1">0xDFFF</span>) <span class="pl-k">++</span>i; <span class="pl-c"><span class="pl-c">//</span> possibly a lead surrogate, so skip over the tail surrogate.</span></td>
      </tr>
      <tr>
        <td id="L2089" class="blob-num js-line-number" data-line-number="2089"></td>
        <td id="LC2089" class="blob-code blob-code-inner js-file-line">    len <span class="pl-k">+=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L2090" class="blob-num js-line-number" data-line-number="2090"></td>
        <td id="LC2090" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2091" class="blob-num js-line-number" data-line-number="2091"></td>
        <td id="LC2091" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2092" class="blob-num js-line-number" data-line-number="2092"></td>
        <td id="LC2092" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L2093" class="blob-num js-line-number" data-line-number="2093"></td>
        <td id="LC2093" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2094" class="blob-num js-line-number" data-line-number="2094"></td>
        <td id="LC2094" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2095" class="blob-num js-line-number" data-line-number="2095"></td>
        <td id="LC2095" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Allocate heap space for a JS string, and write it there.</span></td>
      </tr>
      <tr>
        <td id="L2096" class="blob-num js-line-number" data-line-number="2096"></td>
        <td id="LC2096" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> It is the responsibility of the caller to free() that memory.</span></td>
      </tr>
      <tr>
        <td id="L2097" class="blob-num js-line-number" data-line-number="2097"></td>
        <td id="LC2097" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">allocateUTF8</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L2098" class="blob-num js-line-number" data-line-number="2098"></td>
        <td id="LC2098" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> size <span class="pl-k">=</span> <span class="pl-en">lengthBytesUTF8</span>(str) <span class="pl-k">+</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2099" class="blob-num js-line-number" data-line-number="2099"></td>
        <td id="LC2099" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-en">_malloc</span>(size);</td>
      </tr>
      <tr>
        <td id="L2100" class="blob-num js-line-number" data-line-number="2100"></td>
        <td id="LC2100" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (ret) <span class="pl-en">stringToUTF8Array</span>(str, <span class="pl-c1">HEAP8</span>, ret, size);</td>
      </tr>
      <tr>
        <td id="L2101" class="blob-num js-line-number" data-line-number="2101"></td>
        <td id="LC2101" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L2102" class="blob-num js-line-number" data-line-number="2102"></td>
        <td id="LC2102" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2103" class="blob-num js-line-number" data-line-number="2103"></td>
        <td id="LC2103" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2104" class="blob-num js-line-number" data-line-number="2104"></td>
        <td id="LC2104" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Allocate stack space for a JS string, and write it there.</span></td>
      </tr>
      <tr>
        <td id="L2105" class="blob-num js-line-number" data-line-number="2105"></td>
        <td id="LC2105" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">allocateUTF8OnStack</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L2106" class="blob-num js-line-number" data-line-number="2106"></td>
        <td id="LC2106" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> size <span class="pl-k">=</span> <span class="pl-en">lengthBytesUTF8</span>(str) <span class="pl-k">+</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2107" class="blob-num js-line-number" data-line-number="2107"></td>
        <td id="LC2107" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-en">stackAlloc</span>(size);</td>
      </tr>
      <tr>
        <td id="L2108" class="blob-num js-line-number" data-line-number="2108"></td>
        <td id="LC2108" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">stringToUTF8Array</span>(str, <span class="pl-c1">HEAP8</span>, ret, size);</td>
      </tr>
      <tr>
        <td id="L2109" class="blob-num js-line-number" data-line-number="2109"></td>
        <td id="LC2109" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L2110" class="blob-num js-line-number" data-line-number="2110"></td>
        <td id="LC2110" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2111" class="blob-num js-line-number" data-line-number="2111"></td>
        <td id="LC2111" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2112" class="blob-num js-line-number" data-line-number="2112"></td>
        <td id="LC2112" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Deprecated: This function should not be called because it is unsafe and does not provide</span></td>
      </tr>
      <tr>
        <td id="L2113" class="blob-num js-line-number" data-line-number="2113"></td>
        <td id="LC2113" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> a maximum length limit of how many bytes it is allowed to write. Prefer calling the</span></td>
      </tr>
      <tr>
        <td id="L2114" class="blob-num js-line-number" data-line-number="2114"></td>
        <td id="LC2114" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> function stringToUTF8Array() instead, which takes in a maximum length that can be used</span></td>
      </tr>
      <tr>
        <td id="L2115" class="blob-num js-line-number" data-line-number="2115"></td>
        <td id="LC2115" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> to be secure from out of bounds writes.</span></td>
      </tr>
      <tr>
        <td id="L2116" class="blob-num js-line-number" data-line-number="2116"></td>
        <td id="LC2116" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@deprecated</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2117" class="blob-num js-line-number" data-line-number="2117"></td>
        <td id="LC2117" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">writeStringToMemory</span>(<span class="pl-smi">string</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">dontAddNull</span>) {</td>
      </tr>
      <tr>
        <td id="L2118" class="blob-num js-line-number" data-line-number="2118"></td>
        <td id="LC2118" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2119" class="blob-num js-line-number" data-line-number="2119"></td>
        <td id="LC2119" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2120" class="blob-num js-line-number" data-line-number="2120"></td>
        <td id="LC2120" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{number}</span> <span class="pl-c">*/</span></span> lastChar, <span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{number}</span> <span class="pl-c">*/</span></span> end;</td>
      </tr>
      <tr>
        <td id="L2121" class="blob-num js-line-number" data-line-number="2121"></td>
        <td id="LC2121" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (dontAddNull) {</td>
      </tr>
      <tr>
        <td id="L2122" class="blob-num js-line-number" data-line-number="2122"></td>
        <td id="LC2122" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> stringToUTF8Array always appends null. If we don&#39;t want to do that, remember the</span></td>
      </tr>
      <tr>
        <td id="L2123" class="blob-num js-line-number" data-line-number="2123"></td>
        <td id="LC2123" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> character that existed at the location where the null will be placed, and restore</span></td>
      </tr>
      <tr>
        <td id="L2124" class="blob-num js-line-number" data-line-number="2124"></td>
        <td id="LC2124" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> that after the write (below).</span></td>
      </tr>
      <tr>
        <td id="L2125" class="blob-num js-line-number" data-line-number="2125"></td>
        <td id="LC2125" class="blob-code blob-code-inner js-file-line">    end <span class="pl-k">=</span> buffer <span class="pl-k">+</span> <span class="pl-en">lengthBytesUTF8</span>(string);</td>
      </tr>
      <tr>
        <td id="L2126" class="blob-num js-line-number" data-line-number="2126"></td>
        <td id="LC2126" class="blob-code blob-code-inner js-file-line">    lastChar <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[end];</td>
      </tr>
      <tr>
        <td id="L2127" class="blob-num js-line-number" data-line-number="2127"></td>
        <td id="LC2127" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2128" class="blob-num js-line-number" data-line-number="2128"></td>
        <td id="LC2128" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">stringToUTF8</span>(string, buffer, <span class="pl-c1">Infinity</span>);</td>
      </tr>
      <tr>
        <td id="L2129" class="blob-num js-line-number" data-line-number="2129"></td>
        <td id="LC2129" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (dontAddNull) <span class="pl-c1">HEAP8</span>[end] <span class="pl-k">=</span> lastChar; <span class="pl-c"><span class="pl-c">//</span> Restore the value under the null character.</span></td>
      </tr>
      <tr>
        <td id="L2130" class="blob-num js-line-number" data-line-number="2130"></td>
        <td id="LC2130" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2131" class="blob-num js-line-number" data-line-number="2131"></td>
        <td id="LC2131" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2132" class="blob-num js-line-number" data-line-number="2132"></td>
        <td id="LC2132" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">writeArrayToMemory</span>(<span class="pl-smi">array</span>, <span class="pl-smi">buffer</span>) {</td>
      </tr>
      <tr>
        <td id="L2133" class="blob-num js-line-number" data-line-number="2133"></td>
        <td id="LC2133" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-smi">array</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>writeArrayToMemory array must have a length (should be an array or typed array)<span class="pl-pds">&#39;</span></span>)</td>
      </tr>
      <tr>
        <td id="L2134" class="blob-num js-line-number" data-line-number="2134"></td>
        <td id="LC2134" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>.<span class="pl-c1">set</span>(array, buffer);</td>
      </tr>
      <tr>
        <td id="L2135" class="blob-num js-line-number" data-line-number="2135"></td>
        <td id="LC2135" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2136" class="blob-num js-line-number" data-line-number="2136"></td>
        <td id="LC2136" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2137" class="blob-num js-line-number" data-line-number="2137"></td>
        <td id="LC2137" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">writeAsciiToMemory</span>(<span class="pl-smi">str</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">dontAddNull</span>) {</td>
      </tr>
      <tr>
        <td id="L2138" class="blob-num js-line-number" data-line-number="2138"></td>
        <td id="LC2138" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">str</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L2139" class="blob-num js-line-number" data-line-number="2139"></td>
        <td id="LC2139" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i) <span class="pl-k">===</span> <span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i)<span class="pl-k">&amp;</span><span class="pl-c1">0xff</span>);</td>
      </tr>
      <tr>
        <td id="L2140" class="blob-num js-line-number" data-line-number="2140"></td>
        <td id="LC2140" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">HEAP8</span>[((buffer<span class="pl-k">++</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)]<span class="pl-k">=</span><span class="pl-smi">str</span>.<span class="pl-c1">charCodeAt</span>(i);</td>
      </tr>
      <tr>
        <td id="L2141" class="blob-num js-line-number" data-line-number="2141"></td>
        <td id="LC2141" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2142" class="blob-num js-line-number" data-line-number="2142"></td>
        <td id="LC2142" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Null-terminate the pointer to the HEAP.</span></td>
      </tr>
      <tr>
        <td id="L2143" class="blob-num js-line-number" data-line-number="2143"></td>
        <td id="LC2143" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>dontAddNull) <span class="pl-c1">HEAP8</span>[((buffer)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">0</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2144" class="blob-num js-line-number" data-line-number="2144"></td>
        <td id="LC2144" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2145" class="blob-num js-line-number" data-line-number="2145"></td>
        <td id="LC2145" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2146" class="blob-num js-line-number" data-line-number="2146"></td>
        <td id="LC2146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2147" class="blob-num js-line-number" data-line-number="2147"></td>
        <td id="LC2147" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2148" class="blob-num js-line-number" data-line-number="2148"></td>
        <td id="LC2148" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2149" class="blob-num js-line-number" data-line-number="2149"></td>
        <td id="LC2149" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Memory management</span></td>
      </tr>
      <tr>
        <td id="L2150" class="blob-num js-line-number" data-line-number="2150"></td>
        <td id="LC2150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2151" class="blob-num js-line-number" data-line-number="2151"></td>
        <td id="LC2151" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">PAGE_SIZE</span> <span class="pl-k">=</span> <span class="pl-c1">16384</span>;</td>
      </tr>
      <tr>
        <td id="L2152" class="blob-num js-line-number" data-line-number="2152"></td>
        <td id="LC2152" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">WASM_PAGE_SIZE</span> <span class="pl-k">=</span> <span class="pl-c1">65536</span>;</td>
      </tr>
      <tr>
        <td id="L2153" class="blob-num js-line-number" data-line-number="2153"></td>
        <td id="LC2153" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ASMJS_PAGE_SIZE</span> <span class="pl-k">=</span> <span class="pl-c1">16777216</span>;</td>
      </tr>
      <tr>
        <td id="L2154" class="blob-num js-line-number" data-line-number="2154"></td>
        <td id="LC2154" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2155" class="blob-num js-line-number" data-line-number="2155"></td>
        <td id="LC2155" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">alignUp</span>(<span class="pl-smi">x</span>, <span class="pl-smi">multiple</span>) {</td>
      </tr>
      <tr>
        <td id="L2156" class="blob-num js-line-number" data-line-number="2156"></td>
        <td id="LC2156" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (x <span class="pl-k">%</span> multiple <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2157" class="blob-num js-line-number" data-line-number="2157"></td>
        <td id="LC2157" class="blob-code blob-code-inner js-file-line">    x <span class="pl-k">+=</span> multiple <span class="pl-k">-</span> (x <span class="pl-k">%</span> multiple);</td>
      </tr>
      <tr>
        <td id="L2158" class="blob-num js-line-number" data-line-number="2158"></td>
        <td id="LC2158" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2159" class="blob-num js-line-number" data-line-number="2159"></td>
        <td id="LC2159" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> x;</td>
      </tr>
      <tr>
        <td id="L2160" class="blob-num js-line-number" data-line-number="2160"></td>
        <td id="LC2160" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2161" class="blob-num js-line-number" data-line-number="2161"></td>
        <td id="LC2161" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2162" class="blob-num js-line-number" data-line-number="2162"></td>
        <td id="LC2162" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">HEAP</span>,</td>
      </tr>
      <tr>
        <td id="L2163" class="blob-num js-line-number" data-line-number="2163"></td>
        <td id="LC2163" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{ArrayBuffer}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2164" class="blob-num js-line-number" data-line-number="2164"></td>
        <td id="LC2164" class="blob-code blob-code-inner js-file-line">  buffer,</td>
      </tr>
      <tr>
        <td id="L2165" class="blob-num js-line-number" data-line-number="2165"></td>
        <td id="LC2165" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Int8Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2166" class="blob-num js-line-number" data-line-number="2166"></td>
        <td id="LC2166" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>,</td>
      </tr>
      <tr>
        <td id="L2167" class="blob-num js-line-number" data-line-number="2167"></td>
        <td id="LC2167" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Uint8Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2168" class="blob-num js-line-number" data-line-number="2168"></td>
        <td id="LC2168" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPU8</span>,</td>
      </tr>
      <tr>
        <td id="L2169" class="blob-num js-line-number" data-line-number="2169"></td>
        <td id="LC2169" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Int16Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2170" class="blob-num js-line-number" data-line-number="2170"></td>
        <td id="LC2170" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP16</span>,</td>
      </tr>
      <tr>
        <td id="L2171" class="blob-num js-line-number" data-line-number="2171"></td>
        <td id="LC2171" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Uint16Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2172" class="blob-num js-line-number" data-line-number="2172"></td>
        <td id="LC2172" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPU16</span>,</td>
      </tr>
      <tr>
        <td id="L2173" class="blob-num js-line-number" data-line-number="2173"></td>
        <td id="LC2173" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Int32Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2174" class="blob-num js-line-number" data-line-number="2174"></td>
        <td id="LC2174" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP32</span>,</td>
      </tr>
      <tr>
        <td id="L2175" class="blob-num js-line-number" data-line-number="2175"></td>
        <td id="LC2175" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Uint32Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2176" class="blob-num js-line-number" data-line-number="2176"></td>
        <td id="LC2176" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPU32</span>,</td>
      </tr>
      <tr>
        <td id="L2177" class="blob-num js-line-number" data-line-number="2177"></td>
        <td id="LC2177" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Float32Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2178" class="blob-num js-line-number" data-line-number="2178"></td>
        <td id="LC2178" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPF32</span>,</td>
      </tr>
      <tr>
        <td id="L2179" class="blob-num js-line-number" data-line-number="2179"></td>
        <td id="LC2179" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{Float64Array}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2180" class="blob-num js-line-number" data-line-number="2180"></td>
        <td id="LC2180" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPF64</span>;</td>
      </tr>
      <tr>
        <td id="L2181" class="blob-num js-line-number" data-line-number="2181"></td>
        <td id="LC2181" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2182" class="blob-num js-line-number" data-line-number="2182"></td>
        <td id="LC2182" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">updateGlobalBufferAndViews</span>(<span class="pl-smi">buf</span>) {</td>
      </tr>
      <tr>
        <td id="L2183" class="blob-num js-line-number" data-line-number="2183"></td>
        <td id="LC2183" class="blob-code blob-code-inner js-file-line">  buffer <span class="pl-k">=</span> buf;</td>
      </tr>
      <tr>
        <td id="L2184" class="blob-num js-line-number" data-line-number="2184"></td>
        <td id="LC2184" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAP8<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Int8Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2185" class="blob-num js-line-number" data-line-number="2185"></td>
        <td id="LC2185" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAP16<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP16</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Int16Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2186" class="blob-num js-line-number" data-line-number="2186"></td>
        <td id="LC2186" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAP32<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Int32Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2187" class="blob-num js-line-number" data-line-number="2187"></td>
        <td id="LC2187" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAPU8<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAPU8</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2188" class="blob-num js-line-number" data-line-number="2188"></td>
        <td id="LC2188" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAPU16<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAPU16</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint16Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2189" class="blob-num js-line-number" data-line-number="2189"></td>
        <td id="LC2189" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAPU32<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAPU32</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint32Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2190" class="blob-num js-line-number" data-line-number="2190"></td>
        <td id="LC2190" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAPF32<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAPF32</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Float32Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2191" class="blob-num js-line-number" data-line-number="2191"></td>
        <td id="LC2191" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&#39;</span>HEAPF64<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">HEAPF64</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Float64Array</span>(buf);</td>
      </tr>
      <tr>
        <td id="L2192" class="blob-num js-line-number" data-line-number="2192"></td>
        <td id="LC2192" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2193" class="blob-num js-line-number" data-line-number="2193"></td>
        <td id="LC2193" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2194" class="blob-num js-line-number" data-line-number="2194"></td>
        <td id="LC2194" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2195" class="blob-num js-line-number" data-line-number="2195"></td>
        <td id="LC2195" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">STATIC_BASE</span> <span class="pl-k">=</span> <span class="pl-c1">1024</span>,</td>
      </tr>
      <tr>
        <td id="L2196" class="blob-num js-line-number" data-line-number="2196"></td>
        <td id="LC2196" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">STACK_BASE</span> <span class="pl-k">=</span> <span class="pl-c1">61536</span>,</td>
      </tr>
      <tr>
        <td id="L2197" class="blob-num js-line-number" data-line-number="2197"></td>
        <td id="LC2197" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">STACKTOP</span> <span class="pl-k">=</span> <span class="pl-c1">STACK_BASE</span>,</td>
      </tr>
      <tr>
        <td id="L2198" class="blob-num js-line-number" data-line-number="2198"></td>
        <td id="LC2198" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">STACK_MAX</span> <span class="pl-k">=</span> <span class="pl-c1">5304416</span>,</td>
      </tr>
      <tr>
        <td id="L2199" class="blob-num js-line-number" data-line-number="2199"></td>
        <td id="LC2199" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">DYNAMIC_BASE</span> <span class="pl-k">=</span> <span class="pl-c1">5304416</span>,</td>
      </tr>
      <tr>
        <td id="L2200" class="blob-num js-line-number" data-line-number="2200"></td>
        <td id="LC2200" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">DYNAMICTOP_PTR</span> <span class="pl-k">=</span> <span class="pl-c1">61504</span>;</td>
      </tr>
      <tr>
        <td id="L2201" class="blob-num js-line-number" data-line-number="2201"></td>
        <td id="LC2201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2202" class="blob-num js-line-number" data-line-number="2202"></td>
        <td id="LC2202" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">STACK_BASE</span> <span class="pl-k">%</span> <span class="pl-c1">16</span> <span class="pl-k">===</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stack must start aligned<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2203" class="blob-num js-line-number" data-line-number="2203"></td>
        <td id="LC2203" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">DYNAMIC_BASE</span> <span class="pl-k">%</span> <span class="pl-c1">16</span> <span class="pl-k">===</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>heap must start aligned<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2204" class="blob-num js-line-number" data-line-number="2204"></td>
        <td id="LC2204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2205" class="blob-num js-line-number" data-line-number="2205"></td>
        <td id="LC2205" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2206" class="blob-num js-line-number" data-line-number="2206"></td>
        <td id="LC2206" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2207" class="blob-num js-line-number" data-line-number="2207"></td>
        <td id="LC2207" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">TOTAL_STACK</span> <span class="pl-k">=</span> <span class="pl-c1">5242880</span>;</td>
      </tr>
      <tr>
        <td id="L2208" class="blob-num js-line-number" data-line-number="2208"></td>
        <td id="LC2208" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_STACK<span class="pl-pds">&#39;</span></span>]) <span class="pl-en">assert</span>(<span class="pl-c1">TOTAL_STACK</span> <span class="pl-k">===</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_STACK<span class="pl-pds">&#39;</span></span>], <span class="pl-s"><span class="pl-pds">&#39;</span>the stack size can no longer be determined at runtime<span class="pl-pds">&#39;</span></span>)</td>
      </tr>
      <tr>
        <td id="L2209" class="blob-num js-line-number" data-line-number="2209"></td>
        <td id="LC2209" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2210" class="blob-num js-line-number" data-line-number="2210"></td>
        <td id="LC2210" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_MEMORY<span class="pl-pds">&#39;</span></span>] <span class="pl-k">||</span> <span class="pl-c1">16777216</span>;<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_MEMORY<span class="pl-pds">&#39;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_MEMORY<span class="pl-pds">&#39;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY<span class="pl-pds">&#39;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L2211" class="blob-num js-line-number" data-line-number="2211"></td>
        <td id="LC2211" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2212" class="blob-num js-line-number" data-line-number="2212"></td>
        <td id="LC2212" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">TOTAL_STACK</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>TOTAL_MEMORY should be larger than TOTAL_STACK, was <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>! (TOTAL_STACK=<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">TOTAL_STACK</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2213" class="blob-num js-line-number" data-line-number="2213"></td>
        <td id="LC2213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2214" class="blob-num js-line-number" data-line-number="2214"></td>
        <td id="LC2214" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> check for full engine support (use string &#39;subarray&#39; to avoid closure compiler confusion)</span></td>
      </tr>
      <tr>
        <td id="L2215" class="blob-num js-line-number" data-line-number="2215"></td>
        <td id="LC2215" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-k">typeof</span> <span class="pl-c1">Int32Array</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> <span class="pl-c1">Float64Array</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">Int32Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">subarray</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">Int32Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">set</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>,</td>
      </tr>
      <tr>
        <td id="L2216" class="blob-num js-line-number" data-line-number="2216"></td>
        <td id="LC2216" class="blob-code blob-code-inner js-file-line">       <span class="pl-s"><span class="pl-pds">&#39;</span>JS engine does not provide full typed array support<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2217" class="blob-num js-line-number" data-line-number="2217"></td>
        <td id="LC2217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2218" class="blob-num js-line-number" data-line-number="2218"></td>
        <td id="LC2218" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2219" class="blob-num js-line-number" data-line-number="2219"></td>
        <td id="LC2219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2220" class="blob-num js-line-number" data-line-number="2220"></td>
        <td id="LC2220" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2221" class="blob-num js-line-number" data-line-number="2221"></td>
        <td id="LC2221" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2222" class="blob-num js-line-number" data-line-number="2222"></td>
        <td id="LC2222" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2223" class="blob-num js-line-number" data-line-number="2223"></td>
        <td id="LC2223" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2224" class="blob-num js-line-number" data-line-number="2224"></td>
        <td id="LC2224" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>wasmMemory<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2225" class="blob-num js-line-number" data-line-number="2225"></td>
        <td id="LC2225" class="blob-code blob-code-inner js-file-line">    wasmMemory <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>wasmMemory<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L2226" class="blob-num js-line-number" data-line-number="2226"></td>
        <td id="LC2226" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L2227" class="blob-num js-line-number" data-line-number="2227"></td>
        <td id="LC2227" class="blob-code blob-code-inner js-file-line">  {</td>
      </tr>
      <tr>
        <td id="L2228" class="blob-num js-line-number" data-line-number="2228"></td>
        <td id="LC2228" class="blob-code blob-code-inner js-file-line">    wasmMemory <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">WebAssembly.Memory</span>({</td>
      </tr>
      <tr>
        <td id="L2229" class="blob-num js-line-number" data-line-number="2229"></td>
        <td id="LC2229" class="blob-code blob-code-inner js-file-line">      <span class="pl-s"><span class="pl-pds">&#39;</span>initial<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">/</span> <span class="pl-c1">WASM_PAGE_SIZE</span></td>
      </tr>
      <tr>
        <td id="L2230" class="blob-num js-line-number" data-line-number="2230"></td>
        <td id="LC2230" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L2231" class="blob-num js-line-number" data-line-number="2231"></td>
        <td id="LC2231" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2232" class="blob-num js-line-number" data-line-number="2232"></td>
        <td id="LC2232" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2233" class="blob-num js-line-number" data-line-number="2233"></td>
        <td id="LC2233" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2234" class="blob-num js-line-number" data-line-number="2234"></td>
        <td id="LC2234" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (wasmMemory) {</td>
      </tr>
      <tr>
        <td id="L2235" class="blob-num js-line-number" data-line-number="2235"></td>
        <td id="LC2235" class="blob-code blob-code-inner js-file-line">  buffer <span class="pl-k">=</span> <span class="pl-smi">wasmMemory</span>.<span class="pl-smi">buffer</span>;</td>
      </tr>
      <tr>
        <td id="L2236" class="blob-num js-line-number" data-line-number="2236"></td>
        <td id="LC2236" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2237" class="blob-num js-line-number" data-line-number="2237"></td>
        <td id="LC2237" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2238" class="blob-num js-line-number" data-line-number="2238"></td>
        <td id="LC2238" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> If the user provides an incorrect length, just use that length instead rather than providing the user to</span></td>
      </tr>
      <tr>
        <td id="L2239" class="blob-num js-line-number" data-line-number="2239"></td>
        <td id="LC2239" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> specifically provide the memory length with Module[&#39;TOTAL_MEMORY&#39;].</span></td>
      </tr>
      <tr>
        <td id="L2240" class="blob-num js-line-number" data-line-number="2240"></td>
        <td id="LC2240" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">=</span> <span class="pl-smi">buffer</span>.<span class="pl-smi">byteLength</span>;</td>
      </tr>
      <tr>
        <td id="L2241" class="blob-num js-line-number" data-line-number="2241"></td>
        <td id="LC2241" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">INITIAL_TOTAL_MEMORY</span> <span class="pl-k">%</span> <span class="pl-c1">WASM_PAGE_SIZE</span> <span class="pl-k">===</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L2242" class="blob-num js-line-number" data-line-number="2242"></td>
        <td id="LC2242" class="blob-code blob-code-inner js-file-line"><span class="pl-en">updateGlobalBufferAndViews</span>(buffer);</td>
      </tr>
      <tr>
        <td id="L2243" class="blob-num js-line-number" data-line-number="2243"></td>
        <td id="LC2243" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2244" class="blob-num js-line-number" data-line-number="2244"></td>
        <td id="LC2244" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">HEAP32</span>[<span class="pl-c1">DYNAMICTOP_PTR</span><span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">DYNAMIC_BASE</span>;</td>
      </tr>
      <tr>
        <td id="L2245" class="blob-num js-line-number" data-line-number="2245"></td>
        <td id="LC2245" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2246" class="blob-num js-line-number" data-line-number="2246"></td>
        <td id="LC2246" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2247" class="blob-num js-line-number" data-line-number="2247"></td>
        <td id="LC2247" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.</span></td>
      </tr>
      <tr>
        <td id="L2248" class="blob-num js-line-number" data-line-number="2248"></td>
        <td id="LC2248" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">writeStackCookie</span>() {</td>
      </tr>
      <tr>
        <td id="L2249" class="blob-num js-line-number" data-line-number="2249"></td>
        <td id="LC2249" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>((<span class="pl-c1">STACK_MAX</span> <span class="pl-k">&amp;</span> <span class="pl-c1">3</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L2250" class="blob-num js-line-number" data-line-number="2250"></td>
        <td id="LC2250" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPU32</span>[(<span class="pl-c1">STACK_MAX</span> <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">2</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0x02135467</span>;</td>
      </tr>
      <tr>
        <td id="L2251" class="blob-num js-line-number" data-line-number="2251"></td>
        <td id="LC2251" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAPU32</span>[(<span class="pl-c1">STACK_MAX</span> <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">2</span>)<span class="pl-k">-</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">0x89BACDFE</span>;</td>
      </tr>
      <tr>
        <td id="L2252" class="blob-num js-line-number" data-line-number="2252"></td>
        <td id="LC2252" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2253" class="blob-num js-line-number" data-line-number="2253"></td>
        <td id="LC2253" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2254" class="blob-num js-line-number" data-line-number="2254"></td>
        <td id="LC2254" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">checkStackCookie</span>() {</td>
      </tr>
      <tr>
        <td id="L2255" class="blob-num js-line-number" data-line-number="2255"></td>
        <td id="LC2255" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> cookie1 <span class="pl-k">=</span> <span class="pl-c1">HEAPU32</span>[(<span class="pl-c1">STACK_MAX</span> <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">2</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L2256" class="blob-num js-line-number" data-line-number="2256"></td>
        <td id="LC2256" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> cookie2 <span class="pl-k">=</span> <span class="pl-c1">HEAPU32</span>[(<span class="pl-c1">STACK_MAX</span> <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">2</span>)<span class="pl-k">-</span><span class="pl-c1">2</span>];</td>
      </tr>
      <tr>
        <td id="L2257" class="blob-num js-line-number" data-line-number="2257"></td>
        <td id="LC2257" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (cookie1 <span class="pl-k">!=</span> <span class="pl-c1">0x02135467</span> <span class="pl-k">||</span> cookie2 <span class="pl-k">!=</span> <span class="pl-c1">0x89BACDFE</span>) {</td>
      </tr>
      <tr>
        <td id="L2258" class="blob-num js-line-number" data-line-number="2258"></td>
        <td id="LC2258" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">cookie2</span>.<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">cookie1</span>.<span class="pl-c1">toString</span>(<span class="pl-c1">16</span>));</td>
      </tr>
      <tr>
        <td id="L2259" class="blob-num js-line-number" data-line-number="2259"></td>
        <td id="LC2259" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2260" class="blob-num js-line-number" data-line-number="2260"></td>
        <td id="LC2260" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Also test the global address 0 for integrity.</span></td>
      </tr>
      <tr>
        <td id="L2261" class="blob-num js-line-number" data-line-number="2261"></td>
        <td id="LC2261" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> We don&#39;t do this with ASan because ASan does its own checks for this.</span></td>
      </tr>
      <tr>
        <td id="L2262" class="blob-num js-line-number" data-line-number="2262"></td>
        <td id="LC2262" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-c1">HEAP32</span>[<span class="pl-c1">0</span>] <span class="pl-k">!==</span> <span class="pl-c1">0x63736d65</span> <span class="pl-c"><span class="pl-c">/*</span> &#39;emsc&#39; <span class="pl-c">*/</span></span>) <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Runtime error: The application has corrupted its heap memory area (address zero)!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2263" class="blob-num js-line-number" data-line-number="2263"></td>
        <td id="LC2263" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2264" class="blob-num js-line-number" data-line-number="2264"></td>
        <td id="LC2264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2265" class="blob-num js-line-number" data-line-number="2265"></td>
        <td id="LC2265" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">abortStackOverflow</span>(<span class="pl-smi">allocSize</span>) {</td>
      </tr>
      <tr>
        <td id="L2266" class="blob-num js-line-number" data-line-number="2266"></td>
        <td id="LC2266" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Stack overflow! Attempted to allocate <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> allocSize <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes on the stack, but stack has only <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> (<span class="pl-c1">STACK_MAX</span> <span class="pl-k">-</span> <span class="pl-en">stackSave</span>() <span class="pl-k">+</span> allocSize) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes available!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2267" class="blob-num js-line-number" data-line-number="2267"></td>
        <td id="LC2267" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2268" class="blob-num js-line-number" data-line-number="2268"></td>
        <td id="LC2268" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2269" class="blob-num js-line-number" data-line-number="2269"></td>
        <td id="LC2269" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2270" class="blob-num js-line-number" data-line-number="2270"></td>
        <td id="LC2270" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP32</span>[<span class="pl-c1">0</span>] <span class="pl-k">=</span> <span class="pl-c1">0x63736d65</span>; <span class="pl-c"><span class="pl-c">/*</span> &#39;emsc&#39; <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2271" class="blob-num js-line-number" data-line-number="2271"></td>
        <td id="LC2271" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2272" class="blob-num js-line-number" data-line-number="2272"></td>
        <td id="LC2272" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2273" class="blob-num js-line-number" data-line-number="2273"></td>
        <td id="LC2273" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2274" class="blob-num js-line-number" data-line-number="2274"></td>
        <td id="LC2274" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Endianness check (note: assumes compiler arch was little-endian)</span></td>
      </tr>
      <tr>
        <td id="L2275" class="blob-num js-line-number" data-line-number="2275"></td>
        <td id="LC2275" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">HEAP16</span>[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0x6373</span>;</td>
      </tr>
      <tr>
        <td id="L2276" class="blob-num js-line-number" data-line-number="2276"></td>
        <td id="LC2276" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-c1">HEAPU8</span>[<span class="pl-c1">2</span>] <span class="pl-k">!==</span> <span class="pl-c1">0x73</span> <span class="pl-k">||</span> <span class="pl-c1">HEAPU8</span>[<span class="pl-c1">3</span>] <span class="pl-k">!==</span> <span class="pl-c1">0x63</span>) <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Runtime error: expected the system to be little-endian!<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2277" class="blob-num js-line-number" data-line-number="2277"></td>
        <td id="LC2277" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2278" class="blob-num js-line-number" data-line-number="2278"></td>
        <td id="LC2278" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">abortFnPtrError</span>(<span class="pl-smi">ptr</span>, <span class="pl-smi">sig</span>) {</td>
      </tr>
      <tr>
        <td id="L2279" class="blob-num js-line-number" data-line-number="2279"></td>
        <td id="LC2279" class="blob-code blob-code-inner js-file-line">	<span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Invalid function pointer <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> ptr <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> called with signature &#39;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> sig <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2280" class="blob-num js-line-number" data-line-number="2280"></td>
        <td id="LC2280" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2281" class="blob-num js-line-number" data-line-number="2281"></td>
        <td id="LC2281" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2282" class="blob-num js-line-number" data-line-number="2282"></td>
        <td id="LC2282" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2283" class="blob-num js-line-number" data-line-number="2283"></td>
        <td id="LC2283" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2284" class="blob-num js-line-number" data-line-number="2284"></td>
        <td id="LC2284" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">callRuntimeCallbacks</span>(<span class="pl-smi">callbacks</span>) {</td>
      </tr>
      <tr>
        <td id="L2285" class="blob-num js-line-number" data-line-number="2285"></td>
        <td id="LC2285" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span>(<span class="pl-smi">callbacks</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2286" class="blob-num js-line-number" data-line-number="2286"></td>
        <td id="LC2286" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> callback <span class="pl-k">=</span> <span class="pl-smi">callbacks</span>.<span class="pl-c1">shift</span>();</td>
      </tr>
      <tr>
        <td id="L2287" class="blob-num js-line-number" data-line-number="2287"></td>
        <td id="LC2287" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> callback <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2288" class="blob-num js-line-number" data-line-number="2288"></td>
        <td id="LC2288" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">callback</span>();</td>
      </tr>
      <tr>
        <td id="L2289" class="blob-num js-line-number" data-line-number="2289"></td>
        <td id="LC2289" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L2290" class="blob-num js-line-number" data-line-number="2290"></td>
        <td id="LC2290" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2291" class="blob-num js-line-number" data-line-number="2291"></td>
        <td id="LC2291" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> func <span class="pl-k">=</span> <span class="pl-smi">callback</span>.<span class="pl-smi">func</span>;</td>
      </tr>
      <tr>
        <td id="L2292" class="blob-num js-line-number" data-line-number="2292"></td>
        <td id="LC2292" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> func <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>number<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2293" class="blob-num js-line-number" data-line-number="2293"></td>
        <td id="LC2293" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">callback</span>.<span class="pl-smi">arg</span> <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L2294" class="blob-num js-line-number" data-line-number="2294"></td>
        <td id="LC2294" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_v<span class="pl-pds">&#39;</span></span>](func);</td>
      </tr>
      <tr>
        <td id="L2295" class="blob-num js-line-number" data-line-number="2295"></td>
        <td id="LC2295" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2296" class="blob-num js-line-number" data-line-number="2296"></td>
        <td id="LC2296" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>dynCall_vi<span class="pl-pds">&#39;</span></span>](func, <span class="pl-smi">callback</span>.<span class="pl-smi">arg</span>);</td>
      </tr>
      <tr>
        <td id="L2297" class="blob-num js-line-number" data-line-number="2297"></td>
        <td id="LC2297" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2298" class="blob-num js-line-number" data-line-number="2298"></td>
        <td id="LC2298" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2299" class="blob-num js-line-number" data-line-number="2299"></td>
        <td id="LC2299" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">func</span>(<span class="pl-smi">callback</span>.<span class="pl-smi">arg</span> <span class="pl-k">===</span> <span class="pl-c1">undefined</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> <span class="pl-smi">callback</span>.<span class="pl-smi">arg</span>);</td>
      </tr>
      <tr>
        <td id="L2300" class="blob-num js-line-number" data-line-number="2300"></td>
        <td id="LC2300" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2301" class="blob-num js-line-number" data-line-number="2301"></td>
        <td id="LC2301" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2302" class="blob-num js-line-number" data-line-number="2302"></td>
        <td id="LC2302" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2303" class="blob-num js-line-number" data-line-number="2303"></td>
        <td id="LC2303" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2304" class="blob-num js-line-number" data-line-number="2304"></td>
        <td id="LC2304" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">__ATPRERUN__</span>  <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> functions called before the runtime is initialized</span></td>
      </tr>
      <tr>
        <td id="L2305" class="blob-num js-line-number" data-line-number="2305"></td>
        <td id="LC2305" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">__ATINIT__</span>    <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> functions called during startup</span></td>
      </tr>
      <tr>
        <td id="L2306" class="blob-num js-line-number" data-line-number="2306"></td>
        <td id="LC2306" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">__ATMAIN__</span>    <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> functions called when main() is to be run</span></td>
      </tr>
      <tr>
        <td id="L2307" class="blob-num js-line-number" data-line-number="2307"></td>
        <td id="LC2307" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">__ATEXIT__</span>    <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> functions called during shutdown</span></td>
      </tr>
      <tr>
        <td id="L2308" class="blob-num js-line-number" data-line-number="2308"></td>
        <td id="LC2308" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">__ATPOSTRUN__</span> <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> functions called after the main() is called</span></td>
      </tr>
      <tr>
        <td id="L2309" class="blob-num js-line-number" data-line-number="2309"></td>
        <td id="LC2309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2310" class="blob-num js-line-number" data-line-number="2310"></td>
        <td id="LC2310" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runtimeInitialized <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2311" class="blob-num js-line-number" data-line-number="2311"></td>
        <td id="LC2311" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runtimeExited <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2312" class="blob-num js-line-number" data-line-number="2312"></td>
        <td id="LC2312" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2313" class="blob-num js-line-number" data-line-number="2313"></td>
        <td id="LC2313" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2314" class="blob-num js-line-number" data-line-number="2314"></td>
        <td id="LC2314" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">preRun</span>() {</td>
      </tr>
      <tr>
        <td id="L2315" class="blob-num js-line-number" data-line-number="2315"></td>
        <td id="LC2315" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2316" class="blob-num js-line-number" data-line-number="2316"></td>
        <td id="LC2316" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2317" class="blob-num js-line-number" data-line-number="2317"></td>
        <td id="LC2317" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> [Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>]];</td>
      </tr>
      <tr>
        <td id="L2318" class="blob-num js-line-number" data-line-number="2318"></td>
        <td id="LC2318" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L2319" class="blob-num js-line-number" data-line-number="2319"></td>
        <td id="LC2319" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">addOnPreRun</span>(Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preRun<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">shift</span>());</td>
      </tr>
      <tr>
        <td id="L2320" class="blob-num js-line-number" data-line-number="2320"></td>
        <td id="LC2320" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2321" class="blob-num js-line-number" data-line-number="2321"></td>
        <td id="LC2321" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2322" class="blob-num js-line-number" data-line-number="2322"></td>
        <td id="LC2322" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2323" class="blob-num js-line-number" data-line-number="2323"></td>
        <td id="LC2323" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">callRuntimeCallbacks</span>(<span class="pl-c1">__ATPRERUN__</span>);</td>
      </tr>
      <tr>
        <td id="L2324" class="blob-num js-line-number" data-line-number="2324"></td>
        <td id="LC2324" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2325" class="blob-num js-line-number" data-line-number="2325"></td>
        <td id="LC2325" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2326" class="blob-num js-line-number" data-line-number="2326"></td>
        <td id="LC2326" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">initRuntime</span>() {</td>
      </tr>
      <tr>
        <td id="L2327" class="blob-num js-line-number" data-line-number="2327"></td>
        <td id="LC2327" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L2328" class="blob-num js-line-number" data-line-number="2328"></td>
        <td id="LC2328" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeInitialized);</td>
      </tr>
      <tr>
        <td id="L2329" class="blob-num js-line-number" data-line-number="2329"></td>
        <td id="LC2329" class="blob-code blob-code-inner js-file-line">  runtimeInitialized <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2330" class="blob-num js-line-number" data-line-number="2330"></td>
        <td id="LC2330" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>Module[<span class="pl-s"><span class="pl-pds">&quot;</span>noFSInit<span class="pl-pds">&quot;</span></span>] <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">init</span>.<span class="pl-smi">initialized</span>) <span class="pl-c1">FS</span>.<span class="pl-en">init</span>();</td>
      </tr>
      <tr>
        <td id="L2331" class="blob-num js-line-number" data-line-number="2331"></td>
        <td id="LC2331" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">TTY</span>.<span class="pl-en">init</span>();</td>
      </tr>
      <tr>
        <td id="L2332" class="blob-num js-line-number" data-line-number="2332"></td>
        <td id="LC2332" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">callRuntimeCallbacks</span>(<span class="pl-c1">__ATINIT__</span>);</td>
      </tr>
      <tr>
        <td id="L2333" class="blob-num js-line-number" data-line-number="2333"></td>
        <td id="LC2333" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2334" class="blob-num js-line-number" data-line-number="2334"></td>
        <td id="LC2334" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2335" class="blob-num js-line-number" data-line-number="2335"></td>
        <td id="LC2335" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">preMain</span>() {</td>
      </tr>
      <tr>
        <td id="L2336" class="blob-num js-line-number" data-line-number="2336"></td>
        <td id="LC2336" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L2337" class="blob-num js-line-number" data-line-number="2337"></td>
        <td id="LC2337" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">FS</span>.<span class="pl-smi">ignorePermissions</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2338" class="blob-num js-line-number" data-line-number="2338"></td>
        <td id="LC2338" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">callRuntimeCallbacks</span>(<span class="pl-c1">__ATMAIN__</span>);</td>
      </tr>
      <tr>
        <td id="L2339" class="blob-num js-line-number" data-line-number="2339"></td>
        <td id="LC2339" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2340" class="blob-num js-line-number" data-line-number="2340"></td>
        <td id="LC2340" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2341" class="blob-num js-line-number" data-line-number="2341"></td>
        <td id="LC2341" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">exitRuntime</span>() {</td>
      </tr>
      <tr>
        <td id="L2342" class="blob-num js-line-number" data-line-number="2342"></td>
        <td id="LC2342" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L2343" class="blob-num js-line-number" data-line-number="2343"></td>
        <td id="LC2343" class="blob-code blob-code-inner js-file-line">  runtimeExited <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2344" class="blob-num js-line-number" data-line-number="2344"></td>
        <td id="LC2344" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2345" class="blob-num js-line-number" data-line-number="2345"></td>
        <td id="LC2345" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2346" class="blob-num js-line-number" data-line-number="2346"></td>
        <td id="LC2346" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">postRun</span>() {</td>
      </tr>
      <tr>
        <td id="L2347" class="blob-num js-line-number" data-line-number="2347"></td>
        <td id="LC2347" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L2348" class="blob-num js-line-number" data-line-number="2348"></td>
        <td id="LC2348" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2349" class="blob-num js-line-number" data-line-number="2349"></td>
        <td id="LC2349" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2350" class="blob-num js-line-number" data-line-number="2350"></td>
        <td id="LC2350" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> [Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>]];</td>
      </tr>
      <tr>
        <td id="L2351" class="blob-num js-line-number" data-line-number="2351"></td>
        <td id="LC2351" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L2352" class="blob-num js-line-number" data-line-number="2352"></td>
        <td id="LC2352" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">addOnPostRun</span>(Module[<span class="pl-s"><span class="pl-pds">&#39;</span>postRun<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">shift</span>());</td>
      </tr>
      <tr>
        <td id="L2353" class="blob-num js-line-number" data-line-number="2353"></td>
        <td id="LC2353" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2354" class="blob-num js-line-number" data-line-number="2354"></td>
        <td id="LC2354" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2355" class="blob-num js-line-number" data-line-number="2355"></td>
        <td id="LC2355" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2356" class="blob-num js-line-number" data-line-number="2356"></td>
        <td id="LC2356" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">callRuntimeCallbacks</span>(<span class="pl-c1">__ATPOSTRUN__</span>);</td>
      </tr>
      <tr>
        <td id="L2357" class="blob-num js-line-number" data-line-number="2357"></td>
        <td id="LC2357" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2358" class="blob-num js-line-number" data-line-number="2358"></td>
        <td id="LC2358" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2359" class="blob-num js-line-number" data-line-number="2359"></td>
        <td id="LC2359" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addOnPreRun</span>(<span class="pl-smi">cb</span>) {</td>
      </tr>
      <tr>
        <td id="L2360" class="blob-num js-line-number" data-line-number="2360"></td>
        <td id="LC2360" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">__ATPRERUN__</span>.<span class="pl-c1">unshift</span>(cb);</td>
      </tr>
      <tr>
        <td id="L2361" class="blob-num js-line-number" data-line-number="2361"></td>
        <td id="LC2361" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2362" class="blob-num js-line-number" data-line-number="2362"></td>
        <td id="LC2362" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2363" class="blob-num js-line-number" data-line-number="2363"></td>
        <td id="LC2363" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addOnInit</span>(<span class="pl-smi">cb</span>) {</td>
      </tr>
      <tr>
        <td id="L2364" class="blob-num js-line-number" data-line-number="2364"></td>
        <td id="LC2364" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">__ATINIT__</span>.<span class="pl-c1">unshift</span>(cb);</td>
      </tr>
      <tr>
        <td id="L2365" class="blob-num js-line-number" data-line-number="2365"></td>
        <td id="LC2365" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2366" class="blob-num js-line-number" data-line-number="2366"></td>
        <td id="LC2366" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2367" class="blob-num js-line-number" data-line-number="2367"></td>
        <td id="LC2367" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addOnPreMain</span>(<span class="pl-smi">cb</span>) {</td>
      </tr>
      <tr>
        <td id="L2368" class="blob-num js-line-number" data-line-number="2368"></td>
        <td id="LC2368" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">__ATMAIN__</span>.<span class="pl-c1">unshift</span>(cb);</td>
      </tr>
      <tr>
        <td id="L2369" class="blob-num js-line-number" data-line-number="2369"></td>
        <td id="LC2369" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2370" class="blob-num js-line-number" data-line-number="2370"></td>
        <td id="LC2370" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2371" class="blob-num js-line-number" data-line-number="2371"></td>
        <td id="LC2371" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addOnExit</span>(<span class="pl-smi">cb</span>) {</td>
      </tr>
      <tr>
        <td id="L2372" class="blob-num js-line-number" data-line-number="2372"></td>
        <td id="LC2372" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2373" class="blob-num js-line-number" data-line-number="2373"></td>
        <td id="LC2373" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2374" class="blob-num js-line-number" data-line-number="2374"></td>
        <td id="LC2374" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addOnPostRun</span>(<span class="pl-smi">cb</span>) {</td>
      </tr>
      <tr>
        <td id="L2375" class="blob-num js-line-number" data-line-number="2375"></td>
        <td id="LC2375" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">__ATPOSTRUN__</span>.<span class="pl-c1">unshift</span>(cb);</td>
      </tr>
      <tr>
        <td id="L2376" class="blob-num js-line-number" data-line-number="2376"></td>
        <td id="LC2376" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2377" class="blob-num js-line-number" data-line-number="2377"></td>
        <td id="LC2377" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2378" class="blob-num js-line-number" data-line-number="2378"></td>
        <td id="LC2378" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">unSign</span>(<span class="pl-smi">value</span>, <span class="pl-smi">bits</span>, <span class="pl-smi">ignore</span>) {</td>
      </tr>
      <tr>
        <td id="L2379" class="blob-num js-line-number" data-line-number="2379"></td>
        <td id="LC2379" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (value <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2380" class="blob-num js-line-number" data-line-number="2380"></td>
        <td id="LC2380" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> value;</td>
      </tr>
      <tr>
        <td id="L2381" class="blob-num js-line-number" data-line-number="2381"></td>
        <td id="LC2381" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2382" class="blob-num js-line-number" data-line-number="2382"></td>
        <td id="LC2382" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> bits <span class="pl-k">&lt;=</span> <span class="pl-c1">32</span> <span class="pl-k">?</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">1</span> <span class="pl-k">&lt;&lt;</span> (bits<span class="pl-k">-</span><span class="pl-c1">1</span>)) <span class="pl-k">+</span> value <span class="pl-c"><span class="pl-c">//</span> Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts</span></td>
      </tr>
      <tr>
        <td id="L2383" class="blob-num js-line-number" data-line-number="2383"></td>
        <td id="LC2383" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>, bits)         <span class="pl-k">+</span> value;</td>
      </tr>
      <tr>
        <td id="L2384" class="blob-num js-line-number" data-line-number="2384"></td>
        <td id="LC2384" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2385" class="blob-num js-line-number" data-line-number="2385"></td>
        <td id="LC2385" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">reSign</span>(<span class="pl-smi">value</span>, <span class="pl-smi">bits</span>, <span class="pl-smi">ignore</span>) {</td>
      </tr>
      <tr>
        <td id="L2386" class="blob-num js-line-number" data-line-number="2386"></td>
        <td id="LC2386" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (value <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2387" class="blob-num js-line-number" data-line-number="2387"></td>
        <td id="LC2387" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> value;</td>
      </tr>
      <tr>
        <td id="L2388" class="blob-num js-line-number" data-line-number="2388"></td>
        <td id="LC2388" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2389" class="blob-num js-line-number" data-line-number="2389"></td>
        <td id="LC2389" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> half <span class="pl-k">=</span> bits <span class="pl-k">&lt;=</span> <span class="pl-c1">32</span> <span class="pl-k">?</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">1</span> <span class="pl-k">&lt;&lt;</span> (bits<span class="pl-k">-</span><span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">//</span> abs is needed if bits == 32</span></td>
      </tr>
      <tr>
        <td id="L2390" class="blob-num js-line-number" data-line-number="2390"></td>
        <td id="LC2390" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(<span class="pl-c1">2</span>, bits<span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2391" class="blob-num js-line-number" data-line-number="2391"></td>
        <td id="LC2391" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (value <span class="pl-k">&gt;=</span> half <span class="pl-k">&amp;&amp;</span> (bits <span class="pl-k">&lt;=</span> <span class="pl-c1">32</span> <span class="pl-k">||</span> value <span class="pl-k">&gt;</span> half)) { <span class="pl-c"><span class="pl-c">//</span> for huge values, we can hit the precision limit and always get true here. so don&#39;t do that</span></td>
      </tr>
      <tr>
        <td id="L2392" class="blob-num js-line-number" data-line-number="2392"></td>
        <td id="LC2392" class="blob-code blob-code-inner js-file-line">                                                       <span class="pl-c"><span class="pl-c">//</span> but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors</span></td>
      </tr>
      <tr>
        <td id="L2393" class="blob-num js-line-number" data-line-number="2393"></td>
        <td id="LC2393" class="blob-code blob-code-inner js-file-line">                                                       <span class="pl-c"><span class="pl-c">//</span> TODO: In i64 mode 1, resign the two parts separately and safely</span></td>
      </tr>
      <tr>
        <td id="L2394" class="blob-num js-line-number" data-line-number="2394"></td>
        <td id="LC2394" class="blob-code blob-code-inner js-file-line">    value <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>half <span class="pl-k">+</span> value; <span class="pl-c"><span class="pl-c">//</span> Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts</span></td>
      </tr>
      <tr>
        <td id="L2395" class="blob-num js-line-number" data-line-number="2395"></td>
        <td id="LC2395" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2396" class="blob-num js-line-number" data-line-number="2396"></td>
        <td id="LC2396" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> value;</td>
      </tr>
      <tr>
        <td id="L2397" class="blob-num js-line-number" data-line-number="2397"></td>
        <td id="LC2397" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2398" class="blob-num js-line-number" data-line-number="2398"></td>
        <td id="LC2398" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2399" class="blob-num js-line-number" data-line-number="2399"></td>
        <td id="LC2399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2400" class="blob-num js-line-number" data-line-number="2400"></td>
        <td id="LC2400" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">Math</span>.<span class="pl-smi">imul</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2401" class="blob-num js-line-number" data-line-number="2401"></td>
        <td id="LC2401" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">Math</span>.<span class="pl-smi">fround</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2402" class="blob-num js-line-number" data-line-number="2402"></td>
        <td id="LC2402" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">Math</span>.<span class="pl-smi">clz32</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2403" class="blob-num js-line-number" data-line-number="2403"></td>
        <td id="LC2403" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(<span class="pl-c1">Math</span>.<span class="pl-smi">trunc</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2404" class="blob-num js-line-number" data-line-number="2404"></td>
        <td id="LC2404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2405" class="blob-num js-line-number" data-line-number="2405"></td>
        <td id="LC2405" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_abs <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">abs</span>;</td>
      </tr>
      <tr>
        <td id="L2406" class="blob-num js-line-number" data-line-number="2406"></td>
        <td id="LC2406" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_cos <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">cos</span>;</td>
      </tr>
      <tr>
        <td id="L2407" class="blob-num js-line-number" data-line-number="2407"></td>
        <td id="LC2407" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_sin <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">sin</span>;</td>
      </tr>
      <tr>
        <td id="L2408" class="blob-num js-line-number" data-line-number="2408"></td>
        <td id="LC2408" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_tan <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">tan</span>;</td>
      </tr>
      <tr>
        <td id="L2409" class="blob-num js-line-number" data-line-number="2409"></td>
        <td id="LC2409" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_acos <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">acos</span>;</td>
      </tr>
      <tr>
        <td id="L2410" class="blob-num js-line-number" data-line-number="2410"></td>
        <td id="LC2410" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_asin <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">asin</span>;</td>
      </tr>
      <tr>
        <td id="L2411" class="blob-num js-line-number" data-line-number="2411"></td>
        <td id="LC2411" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_atan <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">atan</span>;</td>
      </tr>
      <tr>
        <td id="L2412" class="blob-num js-line-number" data-line-number="2412"></td>
        <td id="LC2412" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_atan2 <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">atan2</span>;</td>
      </tr>
      <tr>
        <td id="L2413" class="blob-num js-line-number" data-line-number="2413"></td>
        <td id="LC2413" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_exp <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">exp</span>;</td>
      </tr>
      <tr>
        <td id="L2414" class="blob-num js-line-number" data-line-number="2414"></td>
        <td id="LC2414" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_log <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">log</span>;</td>
      </tr>
      <tr>
        <td id="L2415" class="blob-num js-line-number" data-line-number="2415"></td>
        <td id="LC2415" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_sqrt <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">sqrt</span>;</td>
      </tr>
      <tr>
        <td id="L2416" class="blob-num js-line-number" data-line-number="2416"></td>
        <td id="LC2416" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_ceil <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">ceil</span>;</td>
      </tr>
      <tr>
        <td id="L2417" class="blob-num js-line-number" data-line-number="2417"></td>
        <td id="LC2417" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_floor <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">floor</span>;</td>
      </tr>
      <tr>
        <td id="L2418" class="blob-num js-line-number" data-line-number="2418"></td>
        <td id="LC2418" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_pow <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">pow</span>;</td>
      </tr>
      <tr>
        <td id="L2419" class="blob-num js-line-number" data-line-number="2419"></td>
        <td id="LC2419" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_imul <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">imul</span>;</td>
      </tr>
      <tr>
        <td id="L2420" class="blob-num js-line-number" data-line-number="2420"></td>
        <td id="LC2420" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_fround <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">fround</span>;</td>
      </tr>
      <tr>
        <td id="L2421" class="blob-num js-line-number" data-line-number="2421"></td>
        <td id="LC2421" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_round <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">round</span>;</td>
      </tr>
      <tr>
        <td id="L2422" class="blob-num js-line-number" data-line-number="2422"></td>
        <td id="LC2422" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_min <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">min</span>;</td>
      </tr>
      <tr>
        <td id="L2423" class="blob-num js-line-number" data-line-number="2423"></td>
        <td id="LC2423" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_max <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">max</span>;</td>
      </tr>
      <tr>
        <td id="L2424" class="blob-num js-line-number" data-line-number="2424"></td>
        <td id="LC2424" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_clz32 <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">clz32</span>;</td>
      </tr>
      <tr>
        <td id="L2425" class="blob-num js-line-number" data-line-number="2425"></td>
        <td id="LC2425" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Math_trunc <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-smi">trunc</span>;</td>
      </tr>
      <tr>
        <td id="L2426" class="blob-num js-line-number" data-line-number="2426"></td>
        <td id="LC2426" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2427" class="blob-num js-line-number" data-line-number="2427"></td>
        <td id="LC2427" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2428" class="blob-num js-line-number" data-line-number="2428"></td>
        <td id="LC2428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2429" class="blob-num js-line-number" data-line-number="2429"></td>
        <td id="LC2429" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> A counter of dependencies for calling run(). If we need to</span></td>
      </tr>
      <tr>
        <td id="L2430" class="blob-num js-line-number" data-line-number="2430"></td>
        <td id="LC2430" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> do asynchronous work before running, increment this and</span></td>
      </tr>
      <tr>
        <td id="L2431" class="blob-num js-line-number" data-line-number="2431"></td>
        <td id="LC2431" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> decrement it. Incrementing must happen in a place like</span></td>
      </tr>
      <tr>
        <td id="L2432" class="blob-num js-line-number" data-line-number="2432"></td>
        <td id="LC2432" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Module.preRun (used by emcc to add file preloading).</span></td>
      </tr>
      <tr>
        <td id="L2433" class="blob-num js-line-number" data-line-number="2433"></td>
        <td id="LC2433" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Note that you can add dependencies in preRun, even though</span></td>
      </tr>
      <tr>
        <td id="L2434" class="blob-num js-line-number" data-line-number="2434"></td>
        <td id="LC2434" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> it happens right before run - run will be postponed until</span></td>
      </tr>
      <tr>
        <td id="L2435" class="blob-num js-line-number" data-line-number="2435"></td>
        <td id="LC2435" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> the dependencies are met.</span></td>
      </tr>
      <tr>
        <td id="L2436" class="blob-num js-line-number" data-line-number="2436"></td>
        <td id="LC2436" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runDependencies <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2437" class="blob-num js-line-number" data-line-number="2437"></td>
        <td id="LC2437" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runDependencyWatcher <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2438" class="blob-num js-line-number" data-line-number="2438"></td>
        <td id="LC2438" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dependenciesFulfilled <span class="pl-k">=</span> <span class="pl-c1">null</span>; <span class="pl-c"><span class="pl-c">//</span> overridden to take different actions when all run dependencies are fulfilled</span></td>
      </tr>
      <tr>
        <td id="L2439" class="blob-num js-line-number" data-line-number="2439"></td>
        <td id="LC2439" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> runDependencyTracking <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L2440" class="blob-num js-line-number" data-line-number="2440"></td>
        <td id="LC2440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2441" class="blob-num js-line-number" data-line-number="2441"></td>
        <td id="LC2441" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getUniqueRunDependency</span>(<span class="pl-smi">id</span>) {</td>
      </tr>
      <tr>
        <td id="L2442" class="blob-num js-line-number" data-line-number="2442"></td>
        <td id="LC2442" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> orig <span class="pl-k">=</span> id;</td>
      </tr>
      <tr>
        <td id="L2443" class="blob-num js-line-number" data-line-number="2443"></td>
        <td id="LC2443" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (<span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2444" class="blob-num js-line-number" data-line-number="2444"></td>
        <td id="LC2444" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>runDependencyTracking[id]) <span class="pl-k">return</span> id;</td>
      </tr>
      <tr>
        <td id="L2445" class="blob-num js-line-number" data-line-number="2445"></td>
        <td id="LC2445" class="blob-code blob-code-inner js-file-line">    id <span class="pl-k">=</span> orig <span class="pl-k">+</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>();</td>
      </tr>
      <tr>
        <td id="L2446" class="blob-num js-line-number" data-line-number="2446"></td>
        <td id="LC2446" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2447" class="blob-num js-line-number" data-line-number="2447"></td>
        <td id="LC2447" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> id;</td>
      </tr>
      <tr>
        <td id="L2448" class="blob-num js-line-number" data-line-number="2448"></td>
        <td id="LC2448" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2449" class="blob-num js-line-number" data-line-number="2449"></td>
        <td id="LC2449" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2450" class="blob-num js-line-number" data-line-number="2450"></td>
        <td id="LC2450" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">addRunDependency</span>(<span class="pl-smi">id</span>) {</td>
      </tr>
      <tr>
        <td id="L2451" class="blob-num js-line-number" data-line-number="2451"></td>
        <td id="LC2451" class="blob-code blob-code-inner js-file-line">  runDependencies<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L2452" class="blob-num js-line-number" data-line-number="2452"></td>
        <td id="LC2452" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2453" class="blob-num js-line-number" data-line-number="2453"></td>
        <td id="LC2453" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>monitorRunDependencies<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2454" class="blob-num js-line-number" data-line-number="2454"></td>
        <td id="LC2454" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>monitorRunDependencies<span class="pl-pds">&#39;</span></span>](runDependencies);</td>
      </tr>
      <tr>
        <td id="L2455" class="blob-num js-line-number" data-line-number="2455"></td>
        <td id="LC2455" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2456" class="blob-num js-line-number" data-line-number="2456"></td>
        <td id="LC2456" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2457" class="blob-num js-line-number" data-line-number="2457"></td>
        <td id="LC2457" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (id) {</td>
      </tr>
      <tr>
        <td id="L2458" class="blob-num js-line-number" data-line-number="2458"></td>
        <td id="LC2458" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-k">!</span>runDependencyTracking[id]);</td>
      </tr>
      <tr>
        <td id="L2459" class="blob-num js-line-number" data-line-number="2459"></td>
        <td id="LC2459" class="blob-code blob-code-inner js-file-line">    runDependencyTracking[id] <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2460" class="blob-num js-line-number" data-line-number="2460"></td>
        <td id="LC2460" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (runDependencyWatcher <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> setInterval <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2461" class="blob-num js-line-number" data-line-number="2461"></td>
        <td id="LC2461" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Check for missing dependencies every few seconds</span></td>
      </tr>
      <tr>
        <td id="L2462" class="blob-num js-line-number" data-line-number="2462"></td>
        <td id="LC2462" class="blob-code blob-code-inner js-file-line">      runDependencyWatcher <span class="pl-k">=</span> <span class="pl-c1">setInterval</span>(<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L2463" class="blob-num js-line-number" data-line-number="2463"></td>
        <td id="LC2463" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">ABORT</span>) {</td>
      </tr>
      <tr>
        <td id="L2464" class="blob-num js-line-number" data-line-number="2464"></td>
        <td id="LC2464" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">clearInterval</span>(runDependencyWatcher);</td>
      </tr>
      <tr>
        <td id="L2465" class="blob-num js-line-number" data-line-number="2465"></td>
        <td id="LC2465" class="blob-code blob-code-inner js-file-line">          runDependencyWatcher <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2466" class="blob-num js-line-number" data-line-number="2466"></td>
        <td id="LC2466" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L2467" class="blob-num js-line-number" data-line-number="2467"></td>
        <td id="LC2467" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2468" class="blob-num js-line-number" data-line-number="2468"></td>
        <td id="LC2468" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> shown <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2469" class="blob-num js-line-number" data-line-number="2469"></td>
        <td id="LC2469" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> dep <span class="pl-k">in</span> runDependencyTracking) {</td>
      </tr>
      <tr>
        <td id="L2470" class="blob-num js-line-number" data-line-number="2470"></td>
        <td id="LC2470" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>shown) {</td>
      </tr>
      <tr>
        <td id="L2471" class="blob-num js-line-number" data-line-number="2471"></td>
        <td id="LC2471" class="blob-code blob-code-inner js-file-line">            shown <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2472" class="blob-num js-line-number" data-line-number="2472"></td>
        <td id="LC2472" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>still waiting on run dependencies:<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2473" class="blob-num js-line-number" data-line-number="2473"></td>
        <td id="LC2473" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2474" class="blob-num js-line-number" data-line-number="2474"></td>
        <td id="LC2474" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>dependency: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> dep);</td>
      </tr>
      <tr>
        <td id="L2475" class="blob-num js-line-number" data-line-number="2475"></td>
        <td id="LC2475" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2476" class="blob-num js-line-number" data-line-number="2476"></td>
        <td id="LC2476" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (shown) {</td>
      </tr>
      <tr>
        <td id="L2477" class="blob-num js-line-number" data-line-number="2477"></td>
        <td id="LC2477" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>(end of list)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2478" class="blob-num js-line-number" data-line-number="2478"></td>
        <td id="LC2478" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2479" class="blob-num js-line-number" data-line-number="2479"></td>
        <td id="LC2479" class="blob-code blob-code-inner js-file-line">      }, <span class="pl-c1">10000</span>);</td>
      </tr>
      <tr>
        <td id="L2480" class="blob-num js-line-number" data-line-number="2480"></td>
        <td id="LC2480" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2481" class="blob-num js-line-number" data-line-number="2481"></td>
        <td id="LC2481" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2482" class="blob-num js-line-number" data-line-number="2482"></td>
        <td id="LC2482" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>warning: run dependency added without ID<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2483" class="blob-num js-line-number" data-line-number="2483"></td>
        <td id="LC2483" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2484" class="blob-num js-line-number" data-line-number="2484"></td>
        <td id="LC2484" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2485" class="blob-num js-line-number" data-line-number="2485"></td>
        <td id="LC2485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2486" class="blob-num js-line-number" data-line-number="2486"></td>
        <td id="LC2486" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">removeRunDependency</span>(<span class="pl-smi">id</span>) {</td>
      </tr>
      <tr>
        <td id="L2487" class="blob-num js-line-number" data-line-number="2487"></td>
        <td id="LC2487" class="blob-code blob-code-inner js-file-line">  runDependencies<span class="pl-k">--</span>;</td>
      </tr>
      <tr>
        <td id="L2488" class="blob-num js-line-number" data-line-number="2488"></td>
        <td id="LC2488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2489" class="blob-num js-line-number" data-line-number="2489"></td>
        <td id="LC2489" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>monitorRunDependencies<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2490" class="blob-num js-line-number" data-line-number="2490"></td>
        <td id="LC2490" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>monitorRunDependencies<span class="pl-pds">&#39;</span></span>](runDependencies);</td>
      </tr>
      <tr>
        <td id="L2491" class="blob-num js-line-number" data-line-number="2491"></td>
        <td id="LC2491" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2492" class="blob-num js-line-number" data-line-number="2492"></td>
        <td id="LC2492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2493" class="blob-num js-line-number" data-line-number="2493"></td>
        <td id="LC2493" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (id) {</td>
      </tr>
      <tr>
        <td id="L2494" class="blob-num js-line-number" data-line-number="2494"></td>
        <td id="LC2494" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(runDependencyTracking[id]);</td>
      </tr>
      <tr>
        <td id="L2495" class="blob-num js-line-number" data-line-number="2495"></td>
        <td id="LC2495" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">delete</span> runDependencyTracking[id];</td>
      </tr>
      <tr>
        <td id="L2496" class="blob-num js-line-number" data-line-number="2496"></td>
        <td id="LC2496" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2497" class="blob-num js-line-number" data-line-number="2497"></td>
        <td id="LC2497" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>warning: run dependency removed without ID<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2498" class="blob-num js-line-number" data-line-number="2498"></td>
        <td id="LC2498" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2499" class="blob-num js-line-number" data-line-number="2499"></td>
        <td id="LC2499" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (runDependencies <span class="pl-k">==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2500" class="blob-num js-line-number" data-line-number="2500"></td>
        <td id="LC2500" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (runDependencyWatcher <span class="pl-k">!==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L2501" class="blob-num js-line-number" data-line-number="2501"></td>
        <td id="LC2501" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">clearInterval</span>(runDependencyWatcher);</td>
      </tr>
      <tr>
        <td id="L2502" class="blob-num js-line-number" data-line-number="2502"></td>
        <td id="LC2502" class="blob-code blob-code-inner js-file-line">      runDependencyWatcher <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2503" class="blob-num js-line-number" data-line-number="2503"></td>
        <td id="LC2503" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2504" class="blob-num js-line-number" data-line-number="2504"></td>
        <td id="LC2504" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (dependenciesFulfilled) {</td>
      </tr>
      <tr>
        <td id="L2505" class="blob-num js-line-number" data-line-number="2505"></td>
        <td id="LC2505" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> callback <span class="pl-k">=</span> dependenciesFulfilled;</td>
      </tr>
      <tr>
        <td id="L2506" class="blob-num js-line-number" data-line-number="2506"></td>
        <td id="LC2506" class="blob-code blob-code-inner js-file-line">      dependenciesFulfilled <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2507" class="blob-num js-line-number" data-line-number="2507"></td>
        <td id="LC2507" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">callback</span>(); <span class="pl-c"><span class="pl-c">//</span> can add another dependenciesFulfilled</span></td>
      </tr>
      <tr>
        <td id="L2508" class="blob-num js-line-number" data-line-number="2508"></td>
        <td id="LC2508" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2509" class="blob-num js-line-number" data-line-number="2509"></td>
        <td id="LC2509" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2510" class="blob-num js-line-number" data-line-number="2510"></td>
        <td id="LC2510" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2511" class="blob-num js-line-number" data-line-number="2511"></td>
        <td id="LC2511" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2512" class="blob-num js-line-number" data-line-number="2512"></td>
        <td id="LC2512" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>preloadedImages<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> {}; <span class="pl-c"><span class="pl-c">//</span> maps url to image data</span></td>
      </tr>
      <tr>
        <td id="L2513" class="blob-num js-line-number" data-line-number="2513"></td>
        <td id="LC2513" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>preloadedAudios<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> {}; <span class="pl-c"><span class="pl-c">//</span> maps url to audio data</span></td>
      </tr>
      <tr>
        <td id="L2514" class="blob-num js-line-number" data-line-number="2514"></td>
        <td id="LC2514" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2515" class="blob-num js-line-number" data-line-number="2515"></td>
        <td id="LC2515" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2516" class="blob-num js-line-number" data-line-number="2516"></td>
        <td id="LC2516" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> memoryInitializer <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2517" class="blob-num js-line-number" data-line-number="2517"></td>
        <td id="LC2517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2518" class="blob-num js-line-number" data-line-number="2518"></td>
        <td id="LC2518" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2519" class="blob-num js-line-number" data-line-number="2519"></td>
        <td id="LC2519" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2520" class="blob-num js-line-number" data-line-number="2520"></td>
        <td id="LC2520" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2521" class="blob-num js-line-number" data-line-number="2521"></td>
        <td id="LC2521" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2522" class="blob-num js-line-number" data-line-number="2522"></td>
        <td id="LC2522" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2523" class="blob-num js-line-number" data-line-number="2523"></td>
        <td id="LC2523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2524" class="blob-num js-line-number" data-line-number="2524"></td>
        <td id="LC2524" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copyright 2017 The Emscripten Authors.  All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L2525" class="blob-num js-line-number" data-line-number="2525"></td>
        <td id="LC2525" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Emscripten is available under two separate licenses, the MIT license and the</span></td>
      </tr>
      <tr>
        <td id="L2526" class="blob-num js-line-number" data-line-number="2526"></td>
        <td id="LC2526" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> University of Illinois/NCSA Open Source License.  Both these licenses can be</span></td>
      </tr>
      <tr>
        <td id="L2527" class="blob-num js-line-number" data-line-number="2527"></td>
        <td id="LC2527" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> found in the LICENSE file.</span></td>
      </tr>
      <tr>
        <td id="L2528" class="blob-num js-line-number" data-line-number="2528"></td>
        <td id="LC2528" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2529" class="blob-num js-line-number" data-line-number="2529"></td>
        <td id="LC2529" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Prefix of data URIs emitted by SINGLE_FILE and related options.</span></td>
      </tr>
      <tr>
        <td id="L2530" class="blob-num js-line-number" data-line-number="2530"></td>
        <td id="LC2530" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dataURIPrefix <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>data:application/octet-stream;base64,<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2531" class="blob-num js-line-number" data-line-number="2531"></td>
        <td id="LC2531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2532" class="blob-num js-line-number" data-line-number="2532"></td>
        <td id="LC2532" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Indicates whether filename is a base64 data URI.</span></td>
      </tr>
      <tr>
        <td id="L2533" class="blob-num js-line-number" data-line-number="2533"></td>
        <td id="LC2533" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">isDataURI</span>(<span class="pl-smi">filename</span>) {</td>
      </tr>
      <tr>
        <td id="L2534" class="blob-num js-line-number" data-line-number="2534"></td>
        <td id="LC2534" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">startsWith</span> <span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L2535" class="blob-num js-line-number" data-line-number="2535"></td>
        <td id="LC2535" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">filename</span>.<span class="pl-en">startsWith</span>(dataURIPrefix) <span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L2536" class="blob-num js-line-number" data-line-number="2536"></td>
        <td id="LC2536" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">filename</span>.<span class="pl-c1">indexOf</span>(dataURIPrefix) <span class="pl-k">===</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2537" class="blob-num js-line-number" data-line-number="2537"></td>
        <td id="LC2537" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2538" class="blob-num js-line-number" data-line-number="2538"></td>
        <td id="LC2538" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2539" class="blob-num js-line-number" data-line-number="2539"></td>
        <td id="LC2539" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2540" class="blob-num js-line-number" data-line-number="2540"></td>
        <td id="LC2540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2541" class="blob-num js-line-number" data-line-number="2541"></td>
        <td id="LC2541" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2542" class="blob-num js-line-number" data-line-number="2542"></td>
        <td id="LC2542" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> wasmBinaryFile <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>sql-wasm-debug.wasm<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2543" class="blob-num js-line-number" data-line-number="2543"></td>
        <td id="LC2543" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-en">isDataURI</span>(wasmBinaryFile)) {</td>
      </tr>
      <tr>
        <td id="L2544" class="blob-num js-line-number" data-line-number="2544"></td>
        <td id="LC2544" class="blob-code blob-code-inner js-file-line">  wasmBinaryFile <span class="pl-k">=</span> <span class="pl-en">locateFile</span>(wasmBinaryFile);</td>
      </tr>
      <tr>
        <td id="L2545" class="blob-num js-line-number" data-line-number="2545"></td>
        <td id="LC2545" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2546" class="blob-num js-line-number" data-line-number="2546"></td>
        <td id="LC2546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2547" class="blob-num js-line-number" data-line-number="2547"></td>
        <td id="LC2547" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getBinary</span>() {</td>
      </tr>
      <tr>
        <td id="L2548" class="blob-num js-line-number" data-line-number="2548"></td>
        <td id="LC2548" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L2549" class="blob-num js-line-number" data-line-number="2549"></td>
        <td id="LC2549" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (wasmBinary) {</td>
      </tr>
      <tr>
        <td id="L2550" class="blob-num js-line-number" data-line-number="2550"></td>
        <td id="LC2550" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(wasmBinary);</td>
      </tr>
      <tr>
        <td id="L2551" class="blob-num js-line-number" data-line-number="2551"></td>
        <td id="LC2551" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2552" class="blob-num js-line-number" data-line-number="2552"></td>
        <td id="LC2552" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2553" class="blob-num js-line-number" data-line-number="2553"></td>
        <td id="LC2553" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (readBinary) {</td>
      </tr>
      <tr>
        <td id="L2554" class="blob-num js-line-number" data-line-number="2554"></td>
        <td id="LC2554" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">readBinary</span>(wasmBinaryFile);</td>
      </tr>
      <tr>
        <td id="L2555" class="blob-num js-line-number" data-line-number="2555"></td>
        <td id="LC2555" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2556" class="blob-num js-line-number" data-line-number="2556"></td>
        <td id="LC2556" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>both async and sync fetching of the wasm failed<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2557" class="blob-num js-line-number" data-line-number="2557"></td>
        <td id="LC2557" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2558" class="blob-num js-line-number" data-line-number="2558"></td>
        <td id="LC2558" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2559" class="blob-num js-line-number" data-line-number="2559"></td>
        <td id="LC2559" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">catch</span> (err) {</td>
      </tr>
      <tr>
        <td id="L2560" class="blob-num js-line-number" data-line-number="2560"></td>
        <td id="LC2560" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">abort</span>(err);</td>
      </tr>
      <tr>
        <td id="L2561" class="blob-num js-line-number" data-line-number="2561"></td>
        <td id="LC2561" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2562" class="blob-num js-line-number" data-line-number="2562"></td>
        <td id="LC2562" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2563" class="blob-num js-line-number" data-line-number="2563"></td>
        <td id="LC2563" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2564" class="blob-num js-line-number" data-line-number="2564"></td>
        <td id="LC2564" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">getBinaryPromise</span>() {</td>
      </tr>
      <tr>
        <td id="L2565" class="blob-num js-line-number" data-line-number="2565"></td>
        <td id="LC2565" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> if we don&#39;t have the binary yet, and have the Fetch api, use that</span></td>
      </tr>
      <tr>
        <td id="L2566" class="blob-num js-line-number" data-line-number="2566"></td>
        <td id="LC2566" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> in some environments, like Electron&#39;s render process, Fetch api may be present, but have a different context than expected, let&#39;s only use it on the Web</span></td>
      </tr>
      <tr>
        <td id="L2567" class="blob-num js-line-number" data-line-number="2567"></td>
        <td id="LC2567" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>wasmBinary <span class="pl-k">&amp;&amp;</span> (<span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">||</span> <span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> fetch <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2568" class="blob-num js-line-number" data-line-number="2568"></td>
        <td id="LC2568" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">fetch</span>(wasmBinaryFile, { credentials<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>same-origin<span class="pl-pds">&#39;</span></span> }).<span class="pl-c1">then</span>(<span class="pl-k">function</span>(<span class="pl-smi">response</span>) {</td>
      </tr>
      <tr>
        <td id="L2569" class="blob-num js-line-number" data-line-number="2569"></td>
        <td id="LC2569" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>response[<span class="pl-s"><span class="pl-pds">&#39;</span>ok<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2570" class="blob-num js-line-number" data-line-number="2570"></td>
        <td id="LC2570" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&quot;</span>failed to load wasm binary file at &#39;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> wasmBinaryFile <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2571" class="blob-num js-line-number" data-line-number="2571"></td>
        <td id="LC2571" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2572" class="blob-num js-line-number" data-line-number="2572"></td>
        <td id="LC2572" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> response[<span class="pl-s"><span class="pl-pds">&#39;</span>arrayBuffer<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L2573" class="blob-num js-line-number" data-line-number="2573"></td>
        <td id="LC2573" class="blob-code blob-code-inner js-file-line">    }).<span class="pl-c1">catch</span>(<span class="pl-k">function</span> () {</td>
      </tr>
      <tr>
        <td id="L2574" class="blob-num js-line-number" data-line-number="2574"></td>
        <td id="LC2574" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">getBinary</span>();</td>
      </tr>
      <tr>
        <td id="L2575" class="blob-num js-line-number" data-line-number="2575"></td>
        <td id="LC2575" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L2576" class="blob-num js-line-number" data-line-number="2576"></td>
        <td id="LC2576" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2577" class="blob-num js-line-number" data-line-number="2577"></td>
        <td id="LC2577" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Otherwise, getBinary should be able to get it synchronously</span></td>
      </tr>
      <tr>
        <td id="L2578" class="blob-num js-line-number" data-line-number="2578"></td>
        <td id="LC2578" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Promise</span>(<span class="pl-k">function</span>(<span class="pl-smi">resolve</span>, <span class="pl-smi">reject</span>) {</td>
      </tr>
      <tr>
        <td id="L2579" class="blob-num js-line-number" data-line-number="2579"></td>
        <td id="LC2579" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">resolve</span>(<span class="pl-en">getBinary</span>());</td>
      </tr>
      <tr>
        <td id="L2580" class="blob-num js-line-number" data-line-number="2580"></td>
        <td id="LC2580" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="L2581" class="blob-num js-line-number" data-line-number="2581"></td>
        <td id="LC2581" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2582" class="blob-num js-line-number" data-line-number="2582"></td>
        <td id="LC2582" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2583" class="blob-num js-line-number" data-line-number="2583"></td>
        <td id="LC2583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2584" class="blob-num js-line-number" data-line-number="2584"></td>
        <td id="LC2584" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2585" class="blob-num js-line-number" data-line-number="2585"></td>
        <td id="LC2585" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Create the wasm instance.</span></td>
      </tr>
      <tr>
        <td id="L2586" class="blob-num js-line-number" data-line-number="2586"></td>
        <td id="LC2586" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Receives the wasm imports, returns the exports.</span></td>
      </tr>
      <tr>
        <td id="L2587" class="blob-num js-line-number" data-line-number="2587"></td>
        <td id="LC2587" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">createWasm</span>(<span class="pl-smi">env</span>) {</td>
      </tr>
      <tr>
        <td id="L2588" class="blob-num js-line-number" data-line-number="2588"></td>
        <td id="LC2588" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2589" class="blob-num js-line-number" data-line-number="2589"></td>
        <td id="LC2589" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> prepare imports</span></td>
      </tr>
      <tr>
        <td id="L2590" class="blob-num js-line-number" data-line-number="2590"></td>
        <td id="LC2590" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> info <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L2591" class="blob-num js-line-number" data-line-number="2591"></td>
        <td id="LC2591" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>env<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> env,</td>
      </tr>
      <tr>
        <td id="L2592" class="blob-num js-line-number" data-line-number="2592"></td>
        <td id="LC2592" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>wasi_unstable<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> env</td>
      </tr>
      <tr>
        <td id="L2593" class="blob-num js-line-number" data-line-number="2593"></td>
        <td id="LC2593" class="blob-code blob-code-inner js-file-line">    ,</td>
      </tr>
      <tr>
        <td id="L2594" class="blob-num js-line-number" data-line-number="2594"></td>
        <td id="LC2594" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>global<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L2595" class="blob-num js-line-number" data-line-number="2595"></td>
        <td id="LC2595" class="blob-code blob-code-inner js-file-line">      <span class="pl-s"><span class="pl-pds">&#39;</span>NaN<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">NaN</span>,</td>
      </tr>
      <tr>
        <td id="L2596" class="blob-num js-line-number" data-line-number="2596"></td>
        <td id="LC2596" class="blob-code blob-code-inner js-file-line">      <span class="pl-s"><span class="pl-pds">&#39;</span>Infinity<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">Infinity</span></td>
      </tr>
      <tr>
        <td id="L2597" class="blob-num js-line-number" data-line-number="2597"></td>
        <td id="LC2597" class="blob-code blob-code-inner js-file-line">    },</td>
      </tr>
      <tr>
        <td id="L2598" class="blob-num js-line-number" data-line-number="2598"></td>
        <td id="LC2598" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>global.Math<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">Math</span>,</td>
      </tr>
      <tr>
        <td id="L2599" class="blob-num js-line-number" data-line-number="2599"></td>
        <td id="LC2599" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>asm2wasm<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> asm2wasmImports</td>
      </tr>
      <tr>
        <td id="L2600" class="blob-num js-line-number" data-line-number="2600"></td>
        <td id="LC2600" class="blob-code blob-code-inner js-file-line">  };</td>
      </tr>
      <tr>
        <td id="L2601" class="blob-num js-line-number" data-line-number="2601"></td>
        <td id="LC2601" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Load the wasm module and create an instance of using native support in the JS engine.</span></td>
      </tr>
      <tr>
        <td id="L2602" class="blob-num js-line-number" data-line-number="2602"></td>
        <td id="LC2602" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> handle a generated wasm instance, receiving its exports and</span></td>
      </tr>
      <tr>
        <td id="L2603" class="blob-num js-line-number" data-line-number="2603"></td>
        <td id="LC2603" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> performing other necessary setup</span></td>
      </tr>
      <tr>
        <td id="L2604" class="blob-num js-line-number" data-line-number="2604"></td>
        <td id="LC2604" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">receiveInstance</span>(<span class="pl-smi">instance</span>, <span class="pl-c1">module</span>) {</td>
      </tr>
      <tr>
        <td id="L2605" class="blob-num js-line-number" data-line-number="2605"></td>
        <td id="LC2605" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> <span class="pl-smi">instance</span>.<span class="pl-smi">exports</span>;</td>
      </tr>
      <tr>
        <td id="L2606" class="blob-num js-line-number" data-line-number="2606"></td>
        <td id="LC2606" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>asm<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">exports</span>;</td>
      </tr>
      <tr>
        <td id="L2607" class="blob-num js-line-number" data-line-number="2607"></td>
        <td id="LC2607" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">removeRunDependency</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>wasm-instantiate<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2608" class="blob-num js-line-number" data-line-number="2608"></td>
        <td id="LC2608" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2609" class="blob-num js-line-number" data-line-number="2609"></td>
        <td id="LC2609" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> we can&#39;t run yet (except in a pthread, where we have a custom sync instantiator)</span></td>
      </tr>
      <tr>
        <td id="L2610" class="blob-num js-line-number" data-line-number="2610"></td>
        <td id="LC2610" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">addRunDependency</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>wasm-instantiate<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2611" class="blob-num js-line-number" data-line-number="2611"></td>
        <td id="LC2611" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2612" class="blob-num js-line-number" data-line-number="2612"></td>
        <td id="LC2612" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2613" class="blob-num js-line-number" data-line-number="2613"></td>
        <td id="LC2613" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Async compilation can be confusing when an error on the page overwrites Module</span></td>
      </tr>
      <tr>
        <td id="L2614" class="blob-num js-line-number" data-line-number="2614"></td>
        <td id="LC2614" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> (for example, if the order of elements is wrong, and the one defining Module is</span></td>
      </tr>
      <tr>
        <td id="L2615" class="blob-num js-line-number" data-line-number="2615"></td>
        <td id="LC2615" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> later), so we save Module and check it later.</span></td>
      </tr>
      <tr>
        <td id="L2616" class="blob-num js-line-number" data-line-number="2616"></td>
        <td id="LC2616" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> trueModule <span class="pl-k">=</span> Module;</td>
      </tr>
      <tr>
        <td id="L2617" class="blob-num js-line-number" data-line-number="2617"></td>
        <td id="LC2617" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">receiveInstantiatedSource</span>(<span class="pl-smi">output</span>) {</td>
      </tr>
      <tr>
        <td id="L2618" class="blob-num js-line-number" data-line-number="2618"></td>
        <td id="LC2618" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> &#39;output&#39; is a WebAssemblyInstantiatedSource object which has both the module and instance.</span></td>
      </tr>
      <tr>
        <td id="L2619" class="blob-num js-line-number" data-line-number="2619"></td>
        <td id="LC2619" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> receiveInstance() will swap in the exports (to Module.asm) so they can be called</span></td>
      </tr>
      <tr>
        <td id="L2620" class="blob-num js-line-number" data-line-number="2620"></td>
        <td id="LC2620" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(Module <span class="pl-k">===</span> trueModule, <span class="pl-s"><span class="pl-pds">&#39;</span>the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2621" class="blob-num js-line-number" data-line-number="2621"></td>
        <td id="LC2621" class="blob-code blob-code-inner js-file-line">    trueModule <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L2622" class="blob-num js-line-number" data-line-number="2622"></td>
        <td id="LC2622" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.</span></td>
      </tr>
      <tr>
        <td id="L2623" class="blob-num js-line-number" data-line-number="2623"></td>
        <td id="LC2623" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> When the regression is fixed, can restore the above USE_PTHREADS-enabled path.</span></td>
      </tr>
      <tr>
        <td id="L2624" class="blob-num js-line-number" data-line-number="2624"></td>
        <td id="LC2624" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">receiveInstance</span>(output[<span class="pl-s"><span class="pl-pds">&#39;</span>instance<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2625" class="blob-num js-line-number" data-line-number="2625"></td>
        <td id="LC2625" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2626" class="blob-num js-line-number" data-line-number="2626"></td>
        <td id="LC2626" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2627" class="blob-num js-line-number" data-line-number="2627"></td>
        <td id="LC2627" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2628" class="blob-num js-line-number" data-line-number="2628"></td>
        <td id="LC2628" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">instantiateArrayBuffer</span>(<span class="pl-smi">receiver</span>) {</td>
      </tr>
      <tr>
        <td id="L2629" class="blob-num js-line-number" data-line-number="2629"></td>
        <td id="LC2629" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-en">getBinaryPromise</span>().<span class="pl-c1">then</span>(<span class="pl-k">function</span>(<span class="pl-smi">binary</span>) {</td>
      </tr>
      <tr>
        <td id="L2630" class="blob-num js-line-number" data-line-number="2630"></td>
        <td id="LC2630" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">WebAssembly</span>.<span class="pl-en">instantiate</span>(binary, info);</td>
      </tr>
      <tr>
        <td id="L2631" class="blob-num js-line-number" data-line-number="2631"></td>
        <td id="LC2631" class="blob-code blob-code-inner js-file-line">    }).<span class="pl-c1">then</span>(receiver, <span class="pl-k">function</span>(<span class="pl-smi">reason</span>) {</td>
      </tr>
      <tr>
        <td id="L2632" class="blob-num js-line-number" data-line-number="2632"></td>
        <td id="LC2632" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>failed to asynchronously prepare wasm: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> reason);</td>
      </tr>
      <tr>
        <td id="L2633" class="blob-num js-line-number" data-line-number="2633"></td>
        <td id="LC2633" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">abort</span>(reason);</td>
      </tr>
      <tr>
        <td id="L2634" class="blob-num js-line-number" data-line-number="2634"></td>
        <td id="LC2634" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L2635" class="blob-num js-line-number" data-line-number="2635"></td>
        <td id="LC2635" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2636" class="blob-num js-line-number" data-line-number="2636"></td>
        <td id="LC2636" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2637" class="blob-num js-line-number" data-line-number="2637"></td>
        <td id="LC2637" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Prefer streaming instantiation if available.</span></td>
      </tr>
      <tr>
        <td id="L2638" class="blob-num js-line-number" data-line-number="2638"></td>
        <td id="LC2638" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">instantiateAsync</span>() {</td>
      </tr>
      <tr>
        <td id="L2639" class="blob-num js-line-number" data-line-number="2639"></td>
        <td id="LC2639" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>wasmBinary <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L2640" class="blob-num js-line-number" data-line-number="2640"></td>
        <td id="LC2640" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typeof</span> <span class="pl-smi">WebAssembly</span>.<span class="pl-smi">instantiateStreaming</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L2641" class="blob-num js-line-number" data-line-number="2641"></td>
        <td id="LC2641" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">!</span><span class="pl-en">isDataURI</span>(wasmBinaryFile) <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L2642" class="blob-num js-line-number" data-line-number="2642"></td>
        <td id="LC2642" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typeof</span> fetch <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2643" class="blob-num js-line-number" data-line-number="2643"></td>
        <td id="LC2643" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">fetch</span>(wasmBinaryFile, { credentials<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>same-origin<span class="pl-pds">&#39;</span></span> }).<span class="pl-c1">then</span>(<span class="pl-k">function</span> (<span class="pl-smi">response</span>) {</td>
      </tr>
      <tr>
        <td id="L2644" class="blob-num js-line-number" data-line-number="2644"></td>
        <td id="LC2644" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> result <span class="pl-k">=</span> <span class="pl-smi">WebAssembly</span>.<span class="pl-en">instantiateStreaming</span>(response, info);</td>
      </tr>
      <tr>
        <td id="L2645" class="blob-num js-line-number" data-line-number="2645"></td>
        <td id="LC2645" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">result</span>.<span class="pl-c1">then</span>(receiveInstantiatedSource, <span class="pl-k">function</span>(<span class="pl-smi">reason</span>) {</td>
      </tr>
      <tr>
        <td id="L2646" class="blob-num js-line-number" data-line-number="2646"></td>
        <td id="LC2646" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> We expect the most common failure cause to be a bad MIME type for the binary,</span></td>
      </tr>
      <tr>
        <td id="L2647" class="blob-num js-line-number" data-line-number="2647"></td>
        <td id="LC2647" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> in which case falling back to ArrayBuffer instantiation should work.</span></td>
      </tr>
      <tr>
        <td id="L2648" class="blob-num js-line-number" data-line-number="2648"></td>
        <td id="LC2648" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>wasm streaming compile failed: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> reason);</td>
      </tr>
      <tr>
        <td id="L2649" class="blob-num js-line-number" data-line-number="2649"></td>
        <td id="LC2649" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>falling back to ArrayBuffer instantiation<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2650" class="blob-num js-line-number" data-line-number="2650"></td>
        <td id="LC2650" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">instantiateArrayBuffer</span>(receiveInstantiatedSource);</td>
      </tr>
      <tr>
        <td id="L2651" class="blob-num js-line-number" data-line-number="2651"></td>
        <td id="LC2651" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L2652" class="blob-num js-line-number" data-line-number="2652"></td>
        <td id="LC2652" class="blob-code blob-code-inner js-file-line">      });</td>
      </tr>
      <tr>
        <td id="L2653" class="blob-num js-line-number" data-line-number="2653"></td>
        <td id="LC2653" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2654" class="blob-num js-line-number" data-line-number="2654"></td>
        <td id="LC2654" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">instantiateArrayBuffer</span>(receiveInstantiatedSource);</td>
      </tr>
      <tr>
        <td id="L2655" class="blob-num js-line-number" data-line-number="2655"></td>
        <td id="LC2655" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2656" class="blob-num js-line-number" data-line-number="2656"></td>
        <td id="LC2656" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2657" class="blob-num js-line-number" data-line-number="2657"></td>
        <td id="LC2657" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback</span></td>
      </tr>
      <tr>
        <td id="L2658" class="blob-num js-line-number" data-line-number="2658"></td>
        <td id="LC2658" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel</span></td>
      </tr>
      <tr>
        <td id="L2659" class="blob-num js-line-number" data-line-number="2659"></td>
        <td id="LC2659" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> to any other async startup actions they are performing.</span></td>
      </tr>
      <tr>
        <td id="L2660" class="blob-num js-line-number" data-line-number="2660"></td>
        <td id="LC2660" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>instantiateWasm<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L2661" class="blob-num js-line-number" data-line-number="2661"></td>
        <td id="LC2661" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L2662" class="blob-num js-line-number" data-line-number="2662"></td>
        <td id="LC2662" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>instantiateWasm<span class="pl-pds">&#39;</span></span>](info, receiveInstance);</td>
      </tr>
      <tr>
        <td id="L2663" class="blob-num js-line-number" data-line-number="2663"></td>
        <td id="LC2663" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">exports</span>;</td>
      </tr>
      <tr>
        <td id="L2664" class="blob-num js-line-number" data-line-number="2664"></td>
        <td id="LC2664" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L2665" class="blob-num js-line-number" data-line-number="2665"></td>
        <td id="LC2665" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Module.instantiateWasm callback failed with error: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> e);</td>
      </tr>
      <tr>
        <td id="L2666" class="blob-num js-line-number" data-line-number="2666"></td>
        <td id="LC2666" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2667" class="blob-num js-line-number" data-line-number="2667"></td>
        <td id="LC2667" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2668" class="blob-num js-line-number" data-line-number="2668"></td>
        <td id="LC2668" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L2669" class="blob-num js-line-number" data-line-number="2669"></td>
        <td id="LC2669" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2670" class="blob-num js-line-number" data-line-number="2670"></td>
        <td id="LC2670" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">instantiateAsync</span>();</td>
      </tr>
      <tr>
        <td id="L2671" class="blob-num js-line-number" data-line-number="2671"></td>
        <td id="LC2671" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> {}; <span class="pl-c"><span class="pl-c">//</span> no exports yet; we&#39;ll fill them in later</span></td>
      </tr>
      <tr>
        <td id="L2672" class="blob-num js-line-number" data-line-number="2672"></td>
        <td id="LC2672" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2673" class="blob-num js-line-number" data-line-number="2673"></td>
        <td id="LC2673" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2674" class="blob-num js-line-number" data-line-number="2674"></td>
        <td id="LC2674" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Provide an &quot;asm.js function&quot; for the application, called to &quot;link&quot; the asm.js module. We instantiate</span></td>
      </tr>
      <tr>
        <td id="L2675" class="blob-num js-line-number" data-line-number="2675"></td>
        <td id="LC2675" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> the wasm module at that time, and it receives imports and provides exports and so forth, the app</span></td>
      </tr>
      <tr>
        <td id="L2676" class="blob-num js-line-number" data-line-number="2676"></td>
        <td id="LC2676" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> doesn&#39;t need to care that it is wasm or asm.js.</span></td>
      </tr>
      <tr>
        <td id="L2677" class="blob-num js-line-number" data-line-number="2677"></td>
        <td id="LC2677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2678" class="blob-num js-line-number" data-line-number="2678"></td>
        <td id="LC2678" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&#39;</span>asm<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-c1">global</span>, <span class="pl-smi">env</span>, <span class="pl-smi">providedBuffer</span>) {</td>
      </tr>
      <tr>
        <td id="L2679" class="blob-num js-line-number" data-line-number="2679"></td>
        <td id="LC2679" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> memory was already allocated (so js could use the buffer)</span></td>
      </tr>
      <tr>
        <td id="L2680" class="blob-num js-line-number" data-line-number="2680"></td>
        <td id="LC2680" class="blob-code blob-code-inner js-file-line">  env[<span class="pl-s"><span class="pl-pds">&#39;</span>memory<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> wasmMemory</td>
      </tr>
      <tr>
        <td id="L2681" class="blob-num js-line-number" data-line-number="2681"></td>
        <td id="LC2681" class="blob-code blob-code-inner js-file-line">  ;</td>
      </tr>
      <tr>
        <td id="L2682" class="blob-num js-line-number" data-line-number="2682"></td>
        <td id="LC2682" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> import table</span></td>
      </tr>
      <tr>
        <td id="L2683" class="blob-num js-line-number" data-line-number="2683"></td>
        <td id="LC2683" class="blob-code blob-code-inner js-file-line">  env[<span class="pl-s"><span class="pl-pds">&#39;</span>table<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> wasmTable <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">WebAssembly.Table</span>({</td>
      </tr>
      <tr>
        <td id="L2684" class="blob-num js-line-number" data-line-number="2684"></td>
        <td id="LC2684" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>initial<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">2816</span>,</td>
      </tr>
      <tr>
        <td id="L2685" class="blob-num js-line-number" data-line-number="2685"></td>
        <td id="LC2685" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>maximum<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">2816</span>,</td>
      </tr>
      <tr>
        <td id="L2686" class="blob-num js-line-number" data-line-number="2686"></td>
        <td id="LC2686" class="blob-code blob-code-inner js-file-line">    <span class="pl-s"><span class="pl-pds">&#39;</span>element<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>anyfunc<span class="pl-pds">&#39;</span></span></td>
      </tr>
      <tr>
        <td id="L2687" class="blob-num js-line-number" data-line-number="2687"></td>
        <td id="LC2687" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="L2688" class="blob-num js-line-number" data-line-number="2688"></td>
        <td id="LC2688" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> With the wasm backend __memory_base and __table_base and only needed for</span></td>
      </tr>
      <tr>
        <td id="L2689" class="blob-num js-line-number" data-line-number="2689"></td>
        <td id="LC2689" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> relocatable output.</span></td>
      </tr>
      <tr>
        <td id="L2690" class="blob-num js-line-number" data-line-number="2690"></td>
        <td id="LC2690" class="blob-code blob-code-inner js-file-line">  env[<span class="pl-s"><span class="pl-pds">&#39;</span>__memory_base<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">1024</span>; <span class="pl-c"><span class="pl-c">//</span> tell the memory segments where to place themselves</span></td>
      </tr>
      <tr>
        <td id="L2691" class="blob-num js-line-number" data-line-number="2691"></td>
        <td id="LC2691" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> table starts at 0 by default (even in dynamic linking, for the main module)</span></td>
      </tr>
      <tr>
        <td id="L2692" class="blob-num js-line-number" data-line-number="2692"></td>
        <td id="LC2692" class="blob-code blob-code-inner js-file-line">  env[<span class="pl-s"><span class="pl-pds">&#39;</span>__table_base<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2693" class="blob-num js-line-number" data-line-number="2693"></td>
        <td id="LC2693" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2694" class="blob-num js-line-number" data-line-number="2694"></td>
        <td id="LC2694" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">exports</span> <span class="pl-k">=</span> <span class="pl-en">createWasm</span>(env);</td>
      </tr>
      <tr>
        <td id="L2695" class="blob-num js-line-number" data-line-number="2695"></td>
        <td id="LC2695" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-c1">exports</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>binaryen setup failed (no wasm support?)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2696" class="blob-num js-line-number" data-line-number="2696"></td>
        <td id="LC2696" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-c1">exports</span>;</td>
      </tr>
      <tr>
        <td id="L2697" class="blob-num js-line-number" data-line-number="2697"></td>
        <td id="LC2697" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L2698" class="blob-num js-line-number" data-line-number="2698"></td>
        <td id="LC2698" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2699" class="blob-num js-line-number" data-line-number="2699"></td>
        <td id="LC2699" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Globals used by JS i64 conversions</span></td>
      </tr>
      <tr>
        <td id="L2700" class="blob-num js-line-number" data-line-number="2700"></td>
        <td id="LC2700" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> tempDouble;</td>
      </tr>
      <tr>
        <td id="L2701" class="blob-num js-line-number" data-line-number="2701"></td>
        <td id="LC2701" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> tempI64;</td>
      </tr>
      <tr>
        <td id="L2702" class="blob-num js-line-number" data-line-number="2702"></td>
        <td id="LC2702" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2703" class="blob-num js-line-number" data-line-number="2703"></td>
        <td id="LC2703" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> === Body ===</span></td>
      </tr>
      <tr>
        <td id="L2704" class="blob-num js-line-number" data-line-number="2704"></td>
        <td id="LC2704" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2705" class="blob-num js-line-number" data-line-number="2705"></td>
        <td id="LC2705" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ASM_CONSTS</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L2706" class="blob-num js-line-number" data-line-number="2706"></td>
        <td id="LC2706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2707" class="blob-num js-line-number" data-line-number="2707"></td>
        <td id="LC2707" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2708" class="blob-num js-line-number" data-line-number="2708"></td>
        <td id="LC2708" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2709" class="blob-num js-line-number" data-line-number="2709"></td>
        <td id="LC2709" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2710" class="blob-num js-line-number" data-line-number="2710"></td>
        <td id="LC2710" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2711" class="blob-num js-line-number" data-line-number="2711"></td>
        <td id="LC2711" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> STATICTOP = STATIC_BASE + 60512;</span></td>
      </tr>
      <tr>
        <td id="L2712" class="blob-num js-line-number" data-line-number="2712"></td>
        <td id="LC2712" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span> global initializers <span class="pl-c">*/</span></span>  <span class="pl-smi">__ATINIT__</span>.<span class="pl-c1">push</span>({ <span class="pl-en">func</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">___emscripten_environ_constructor</span>() } });</td>
      </tr>
      <tr>
        <td id="L2713" class="blob-num js-line-number" data-line-number="2713"></td>
        <td id="LC2713" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2714" class="blob-num js-line-number" data-line-number="2714"></td>
        <td id="LC2714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2715" class="blob-num js-line-number" data-line-number="2715"></td>
        <td id="LC2715" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2716" class="blob-num js-line-number" data-line-number="2716"></td>
        <td id="LC2716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2717" class="blob-num js-line-number" data-line-number="2717"></td>
        <td id="LC2717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2718" class="blob-num js-line-number" data-line-number="2718"></td>
        <td id="LC2718" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2719" class="blob-num js-line-number" data-line-number="2719"></td>
        <td id="LC2719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2720" class="blob-num js-line-number" data-line-number="2720"></td>
        <td id="LC2720" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2721" class="blob-num js-line-number" data-line-number="2721"></td>
        <td id="LC2721" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span> no memory initializer <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2722" class="blob-num js-line-number" data-line-number="2722"></td>
        <td id="LC2722" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> tempDoublePtr <span class="pl-k">=</span> <span class="pl-c1">61520</span></td>
      </tr>
      <tr>
        <td id="L2723" class="blob-num js-line-number" data-line-number="2723"></td>
        <td id="LC2723" class="blob-code blob-code-inner js-file-line"><span class="pl-en">assert</span>(tempDoublePtr <span class="pl-k">%</span> <span class="pl-c1">8</span> <span class="pl-k">==</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L2724" class="blob-num js-line-number" data-line-number="2724"></td>
        <td id="LC2724" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2725" class="blob-num js-line-number" data-line-number="2725"></td>
        <td id="LC2725" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">copyTempFloat</span>(<span class="pl-smi">ptr</span>) { <span class="pl-c"><span class="pl-c">//</span> functions, because inlining this code increases code size too much</span></td>
      </tr>
      <tr>
        <td id="L2726" class="blob-num js-line-number" data-line-number="2726"></td>
        <td id="LC2726" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr];</td>
      </tr>
      <tr>
        <td id="L2727" class="blob-num js-line-number" data-line-number="2727"></td>
        <td id="LC2727" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L2728" class="blob-num js-line-number" data-line-number="2728"></td>
        <td id="LC2728" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">2</span>];</td>
      </tr>
      <tr>
        <td id="L2729" class="blob-num js-line-number" data-line-number="2729"></td>
        <td id="LC2729" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">3</span>];</td>
      </tr>
      <tr>
        <td id="L2730" class="blob-num js-line-number" data-line-number="2730"></td>
        <td id="LC2730" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2731" class="blob-num js-line-number" data-line-number="2731"></td>
        <td id="LC2731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2732" class="blob-num js-line-number" data-line-number="2732"></td>
        <td id="LC2732" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">copyTempDouble</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2733" class="blob-num js-line-number" data-line-number="2733"></td>
        <td id="LC2733" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr];</td>
      </tr>
      <tr>
        <td id="L2734" class="blob-num js-line-number" data-line-number="2734"></td>
        <td id="LC2734" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L2735" class="blob-num js-line-number" data-line-number="2735"></td>
        <td id="LC2735" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">2</span>];</td>
      </tr>
      <tr>
        <td id="L2736" class="blob-num js-line-number" data-line-number="2736"></td>
        <td id="LC2736" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">3</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">3</span>];</td>
      </tr>
      <tr>
        <td id="L2737" class="blob-num js-line-number" data-line-number="2737"></td>
        <td id="LC2737" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">4</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">4</span>];</td>
      </tr>
      <tr>
        <td id="L2738" class="blob-num js-line-number" data-line-number="2738"></td>
        <td id="LC2738" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">5</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">5</span>];</td>
      </tr>
      <tr>
        <td id="L2739" class="blob-num js-line-number" data-line-number="2739"></td>
        <td id="LC2739" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">6</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">6</span>];</td>
      </tr>
      <tr>
        <td id="L2740" class="blob-num js-line-number" data-line-number="2740"></td>
        <td id="LC2740" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">HEAP8</span>[tempDoublePtr<span class="pl-k">+</span><span class="pl-c1">7</span>] <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[ptr<span class="pl-k">+</span><span class="pl-c1">7</span>];</td>
      </tr>
      <tr>
        <td id="L2741" class="blob-num js-line-number" data-line-number="2741"></td>
        <td id="LC2741" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2742" class="blob-num js-line-number" data-line-number="2742"></td>
        <td id="LC2742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2743" class="blob-num js-line-number" data-line-number="2743"></td>
        <td id="LC2743" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> {{PRE_LIBRARY}}</span></td>
      </tr>
      <tr>
        <td id="L2744" class="blob-num js-line-number" data-line-number="2744"></td>
        <td id="LC2744" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2745" class="blob-num js-line-number" data-line-number="2745"></td>
        <td id="LC2745" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2746" class="blob-num js-line-number" data-line-number="2746"></td>
        <td id="LC2746" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">demangle</span>(<span class="pl-smi">func</span>) {</td>
      </tr>
      <tr>
        <td id="L2747" class="blob-num js-line-number" data-line-number="2747"></td>
        <td id="LC2747" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2748" class="blob-num js-line-number" data-line-number="2748"></td>
        <td id="LC2748" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> func;</td>
      </tr>
      <tr>
        <td id="L2749" class="blob-num js-line-number" data-line-number="2749"></td>
        <td id="LC2749" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2750" class="blob-num js-line-number" data-line-number="2750"></td>
        <td id="LC2750" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2751" class="blob-num js-line-number" data-line-number="2751"></td>
        <td id="LC2751" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">demangleAll</span>(<span class="pl-smi">text</span>) {</td>
      </tr>
      <tr>
        <td id="L2752" class="blob-num js-line-number" data-line-number="2752"></td>
        <td id="LC2752" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> regex <span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L2753" class="blob-num js-line-number" data-line-number="2753"></td>
        <td id="LC2753" class="blob-code blob-code-inner js-file-line"><span class="pl-sr">        <span class="pl-pds">/</span><span class="pl-k">\b</span>__Z<span class="pl-c1">[<span class="pl-c1">\w\d</span>_]</span><span class="pl-k">+</span><span class="pl-pds">/</span>g</span>;</td>
      </tr>
      <tr>
        <td id="L2754" class="blob-num js-line-number" data-line-number="2754"></td>
        <td id="LC2754" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">text</span>.<span class="pl-c1">replace</span>(regex,</td>
      </tr>
      <tr>
        <td id="L2755" class="blob-num js-line-number" data-line-number="2755"></td>
        <td id="LC2755" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span>(<span class="pl-smi">x</span>) {</td>
      </tr>
      <tr>
        <td id="L2756" class="blob-num js-line-number" data-line-number="2756"></td>
        <td id="LC2756" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> y <span class="pl-k">=</span> <span class="pl-en">demangle</span>(x);</td>
      </tr>
      <tr>
        <td id="L2757" class="blob-num js-line-number" data-line-number="2757"></td>
        <td id="LC2757" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> x <span class="pl-k">===</span> y <span class="pl-k">?</span> x <span class="pl-k">:</span> (y <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> [<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> x <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>]<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2758" class="blob-num js-line-number" data-line-number="2758"></td>
        <td id="LC2758" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L2759" class="blob-num js-line-number" data-line-number="2759"></td>
        <td id="LC2759" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2760" class="blob-num js-line-number" data-line-number="2760"></td>
        <td id="LC2760" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2761" class="blob-num js-line-number" data-line-number="2761"></td>
        <td id="LC2761" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">jsStackTrace</span>() {</td>
      </tr>
      <tr>
        <td id="L2762" class="blob-num js-line-number" data-line-number="2762"></td>
        <td id="LC2762" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>();</td>
      </tr>
      <tr>
        <td id="L2763" class="blob-num js-line-number" data-line-number="2763"></td>
        <td id="LC2763" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">err</span>.<span class="pl-smi">stack</span>) {</td>
      </tr>
      <tr>
        <td id="L2764" class="blob-num js-line-number" data-line-number="2764"></td>
        <td id="LC2764" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,</span></td>
      </tr>
      <tr>
        <td id="L2765" class="blob-num js-line-number" data-line-number="2765"></td>
        <td id="LC2765" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> so try that as a special-case.</span></td>
      </tr>
      <tr>
        <td id="L2766" class="blob-num js-line-number" data-line-number="2766"></td>
        <td id="LC2766" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L2767" class="blob-num js-line-number" data-line-number="2767"></td>
        <td id="LC2767" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L2768" class="blob-num js-line-number" data-line-number="2768"></td>
        <td id="LC2768" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L2769" class="blob-num js-line-number" data-line-number="2769"></td>
        <td id="LC2769" class="blob-code blob-code-inner js-file-line">          err <span class="pl-k">=</span> e;</td>
      </tr>
      <tr>
        <td id="L2770" class="blob-num js-line-number" data-line-number="2770"></td>
        <td id="LC2770" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2771" class="blob-num js-line-number" data-line-number="2771"></td>
        <td id="LC2771" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">err</span>.<span class="pl-smi">stack</span>) {</td>
      </tr>
      <tr>
        <td id="L2772" class="blob-num js-line-number" data-line-number="2772"></td>
        <td id="LC2772" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>(no stack trace available)<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2773" class="blob-num js-line-number" data-line-number="2773"></td>
        <td id="LC2773" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2774" class="blob-num js-line-number" data-line-number="2774"></td>
        <td id="LC2774" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2775" class="blob-num js-line-number" data-line-number="2775"></td>
        <td id="LC2775" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">err</span>.<span class="pl-smi">stack</span>.<span class="pl-c1">toString</span>();</td>
      </tr>
      <tr>
        <td id="L2776" class="blob-num js-line-number" data-line-number="2776"></td>
        <td id="LC2776" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2777" class="blob-num js-line-number" data-line-number="2777"></td>
        <td id="LC2777" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2778" class="blob-num js-line-number" data-line-number="2778"></td>
        <td id="LC2778" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">stackTrace</span>() {</td>
      </tr>
      <tr>
        <td id="L2779" class="blob-num js-line-number" data-line-number="2779"></td>
        <td id="LC2779" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> js <span class="pl-k">=</span> <span class="pl-en">jsStackTrace</span>();</td>
      </tr>
      <tr>
        <td id="L2780" class="blob-num js-line-number" data-line-number="2780"></td>
        <td id="LC2780" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>extraStackTrace<span class="pl-pds">&#39;</span></span>]) js <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>extraStackTrace<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L2781" class="blob-num js-line-number" data-line-number="2781"></td>
        <td id="LC2781" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">demangleAll</span>(js);</td>
      </tr>
      <tr>
        <td id="L2782" class="blob-num js-line-number" data-line-number="2782"></td>
        <td id="LC2782" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2783" class="blob-num js-line-number" data-line-number="2783"></td>
        <td id="LC2783" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2784" class="blob-num js-line-number" data-line-number="2784"></td>
        <td id="LC2784" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___assert_fail</span>(<span class="pl-smi">condition</span>, <span class="pl-smi">filename</span>, <span class="pl-smi">line</span>, <span class="pl-smi">func</span>) {</td>
      </tr>
      <tr>
        <td id="L2785" class="blob-num js-line-number" data-line-number="2785"></td>
        <td id="LC2785" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Assertion failed: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-en">UTF8ToString</span>(condition) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>, at: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> [filename <span class="pl-k">?</span> <span class="pl-en">UTF8ToString</span>(filename) <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>unknown filename<span class="pl-pds">&#39;</span></span>, line, func <span class="pl-k">?</span> <span class="pl-en">UTF8ToString</span>(func) <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>unknown function<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2786" class="blob-num js-line-number" data-line-number="2786"></td>
        <td id="LC2786" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2787" class="blob-num js-line-number" data-line-number="2787"></td>
        <td id="LC2787" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2788" class="blob-num js-line-number" data-line-number="2788"></td>
        <td id="LC2788" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2789" class="blob-num js-line-number" data-line-number="2789"></td>
        <td id="LC2789" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">ENV</span><span class="pl-k">=</span>{};<span class="pl-k">function</span> <span class="pl-en">___buildEnvironment</span>(<span class="pl-smi">environ</span>) {</td>
      </tr>
      <tr>
        <td id="L2790" class="blob-num js-line-number" data-line-number="2790"></td>
        <td id="LC2790" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> WARNING: Arbitrary limit!</span></td>
      </tr>
      <tr>
        <td id="L2791" class="blob-num js-line-number" data-line-number="2791"></td>
        <td id="LC2791" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">MAX_ENV_VALUES</span> <span class="pl-k">=</span> <span class="pl-c1">64</span>;</td>
      </tr>
      <tr>
        <td id="L2792" class="blob-num js-line-number" data-line-number="2792"></td>
        <td id="LC2792" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">TOTAL_ENV_SIZE</span> <span class="pl-k">=</span> <span class="pl-c1">1024</span>;</td>
      </tr>
      <tr>
        <td id="L2793" class="blob-num js-line-number" data-line-number="2793"></td>
        <td id="LC2793" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2794" class="blob-num js-line-number" data-line-number="2794"></td>
        <td id="LC2794" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Statically allocate memory for the environment.</span></td>
      </tr>
      <tr>
        <td id="L2795" class="blob-num js-line-number" data-line-number="2795"></td>
        <td id="LC2795" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> poolPtr;</td>
      </tr>
      <tr>
        <td id="L2796" class="blob-num js-line-number" data-line-number="2796"></td>
        <td id="LC2796" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> envPtr;</td>
      </tr>
      <tr>
        <td id="L2797" class="blob-num js-line-number" data-line-number="2797"></td>
        <td id="LC2797" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">___buildEnvironment</span>.<span class="pl-smi">called</span>) {</td>
      </tr>
      <tr>
        <td id="L2798" class="blob-num js-line-number" data-line-number="2798"></td>
        <td id="LC2798" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">___buildEnvironment</span>.<span class="pl-smi">called</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2799" class="blob-num js-line-number" data-line-number="2799"></td>
        <td id="LC2799" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Set default values. Use string keys for Closure Compiler compatibility.</span></td>
      </tr>
      <tr>
        <td id="L2800" class="blob-num js-line-number" data-line-number="2800"></td>
        <td id="LC2800" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>USER<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>LOGNAME<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>web_user<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2801" class="blob-num js-line-number" data-line-number="2801"></td>
        <td id="LC2801" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>PATH<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2802" class="blob-num js-line-number" data-line-number="2802"></td>
        <td id="LC2802" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>PWD<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2803" class="blob-num js-line-number" data-line-number="2803"></td>
        <td id="LC2803" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>HOME<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/home/web_user<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2804" class="blob-num js-line-number" data-line-number="2804"></td>
        <td id="LC2804" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Browser language detection #8751</span></td>
      </tr>
      <tr>
        <td id="L2805" class="blob-num js-line-number" data-line-number="2805"></td>
        <td id="LC2805" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>LANG<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> ((<span class="pl-k">typeof</span> <span class="pl-c1">navigator</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">navigator</span>.<span class="pl-smi">languages</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">navigator</span>.<span class="pl-smi">languages</span>[<span class="pl-c1">0</span>]) <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>C<span class="pl-pds">&#39;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>-<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.UTF-8<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2806" class="blob-num js-line-number" data-line-number="2806"></td>
        <td id="LC2806" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> thisProgram;</td>
      </tr>
      <tr>
        <td id="L2807" class="blob-num js-line-number" data-line-number="2807"></td>
        <td id="LC2807" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Allocate memory.</span></td>
      </tr>
      <tr>
        <td id="L2808" class="blob-num js-line-number" data-line-number="2808"></td>
        <td id="LC2808" class="blob-code blob-code-inner js-file-line">        poolPtr <span class="pl-k">=</span> <span class="pl-en">getMemory</span>(<span class="pl-c1">TOTAL_ENV_SIZE</span>);</td>
      </tr>
      <tr>
        <td id="L2809" class="blob-num js-line-number" data-line-number="2809"></td>
        <td id="LC2809" class="blob-code blob-code-inner js-file-line">        envPtr <span class="pl-k">=</span> <span class="pl-en">getMemory</span>(<span class="pl-c1">MAX_ENV_VALUES</span> <span class="pl-k">*</span> <span class="pl-c1">4</span>);</td>
      </tr>
      <tr>
        <td id="L2810" class="blob-num js-line-number" data-line-number="2810"></td>
        <td id="LC2810" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((envPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>poolPtr;</td>
      </tr>
      <tr>
        <td id="L2811" class="blob-num js-line-number" data-line-number="2811"></td>
        <td id="LC2811" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((environ)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>envPtr;</td>
      </tr>
      <tr>
        <td id="L2812" class="blob-num js-line-number" data-line-number="2812"></td>
        <td id="LC2812" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2813" class="blob-num js-line-number" data-line-number="2813"></td>
        <td id="LC2813" class="blob-code blob-code-inner js-file-line">        envPtr <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[((environ)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L2814" class="blob-num js-line-number" data-line-number="2814"></td>
        <td id="LC2814" class="blob-code blob-code-inner js-file-line">        poolPtr <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[((envPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L2815" class="blob-num js-line-number" data-line-number="2815"></td>
        <td id="LC2815" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2816" class="blob-num js-line-number" data-line-number="2816"></td>
        <td id="LC2816" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2817" class="blob-num js-line-number" data-line-number="2817"></td>
        <td id="LC2817" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Collect key=value lines.</span></td>
      </tr>
      <tr>
        <td id="L2818" class="blob-num js-line-number" data-line-number="2818"></td>
        <td id="LC2818" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> strings <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L2819" class="blob-num js-line-number" data-line-number="2819"></td>
        <td id="LC2819" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> totalSize <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2820" class="blob-num js-line-number" data-line-number="2820"></td>
        <td id="LC2820" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> <span class="pl-c1">ENV</span>) {</td>
      </tr>
      <tr>
        <td id="L2821" class="blob-num js-line-number" data-line-number="2821"></td>
        <td id="LC2821" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">ENV</span>[key] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2822" class="blob-num js-line-number" data-line-number="2822"></td>
        <td id="LC2822" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> line <span class="pl-k">=</span> key <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>=<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">ENV</span>[key];</td>
      </tr>
      <tr>
        <td id="L2823" class="blob-num js-line-number" data-line-number="2823"></td>
        <td id="LC2823" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">strings</span>.<span class="pl-c1">push</span>(line);</td>
      </tr>
      <tr>
        <td id="L2824" class="blob-num js-line-number" data-line-number="2824"></td>
        <td id="LC2824" class="blob-code blob-code-inner js-file-line">          totalSize <span class="pl-k">+=</span> <span class="pl-smi">line</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L2825" class="blob-num js-line-number" data-line-number="2825"></td>
        <td id="LC2825" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2826" class="blob-num js-line-number" data-line-number="2826"></td>
        <td id="LC2826" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2827" class="blob-num js-line-number" data-line-number="2827"></td>
        <td id="LC2827" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (totalSize <span class="pl-k">&gt;</span> <span class="pl-c1">TOTAL_ENV_SIZE</span>) {</td>
      </tr>
      <tr>
        <td id="L2828" class="blob-num js-line-number" data-line-number="2828"></td>
        <td id="LC2828" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Environment size exceeded TOTAL_ENV_SIZE!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2829" class="blob-num js-line-number" data-line-number="2829"></td>
        <td id="LC2829" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2830" class="blob-num js-line-number" data-line-number="2830"></td>
        <td id="LC2830" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2831" class="blob-num js-line-number" data-line-number="2831"></td>
        <td id="LC2831" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Make new.</span></td>
      </tr>
      <tr>
        <td id="L2832" class="blob-num js-line-number" data-line-number="2832"></td>
        <td id="LC2832" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ptrSize <span class="pl-k">=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L2833" class="blob-num js-line-number" data-line-number="2833"></td>
        <td id="LC2833" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">strings</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L2834" class="blob-num js-line-number" data-line-number="2834"></td>
        <td id="LC2834" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> line <span class="pl-k">=</span> strings[i];</td>
      </tr>
      <tr>
        <td id="L2835" class="blob-num js-line-number" data-line-number="2835"></td>
        <td id="LC2835" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">writeAsciiToMemory</span>(line, poolPtr);</td>
      </tr>
      <tr>
        <td id="L2836" class="blob-num js-line-number" data-line-number="2836"></td>
        <td id="LC2836" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((envPtr)<span class="pl-k">+</span>(i <span class="pl-k">*</span> ptrSize))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>poolPtr;</td>
      </tr>
      <tr>
        <td id="L2837" class="blob-num js-line-number" data-line-number="2837"></td>
        <td id="LC2837" class="blob-code blob-code-inner js-file-line">        poolPtr <span class="pl-k">+=</span> <span class="pl-smi">line</span>.<span class="pl-c1">length</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2838" class="blob-num js-line-number" data-line-number="2838"></td>
        <td id="LC2838" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L2839" class="blob-num js-line-number" data-line-number="2839"></td>
        <td id="LC2839" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((envPtr)<span class="pl-k">+</span>(<span class="pl-smi">strings</span>.<span class="pl-c1">length</span> <span class="pl-k">*</span> ptrSize))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2840" class="blob-num js-line-number" data-line-number="2840"></td>
        <td id="LC2840" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2841" class="blob-num js-line-number" data-line-number="2841"></td>
        <td id="LC2841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2842" class="blob-num js-line-number" data-line-number="2842"></td>
        <td id="LC2842" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___lock</span>() {}</td>
      </tr>
      <tr>
        <td id="L2843" class="blob-num js-line-number" data-line-number="2843"></td>
        <td id="LC2843" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2844" class="blob-num js-line-number" data-line-number="2844"></td>
        <td id="LC2844" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2845" class="blob-num js-line-number" data-line-number="2845"></td>
        <td id="LC2845" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2846" class="blob-num js-line-number" data-line-number="2846"></td>
        <td id="LC2846" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">PATH</span><span class="pl-k">=</span>{<span class="pl-en">splitPath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">filename</span>) {</td>
      </tr>
      <tr>
        <td id="L2847" class="blob-num js-line-number" data-line-number="2847"></td>
        <td id="LC2847" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> splitPathRe <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-cce">\/</span><span class="pl-k">?</span><span class="pl-k">|</span>)(<span class="pl-c1">[<span class="pl-c1">\s\S</span>]</span><span class="pl-k">*?</span>)((?:<span class="pl-cce">\.</span><span class="pl-k">{1,2}</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\/</span>]</span><span class="pl-k">+?</span><span class="pl-k">|</span>)(<span class="pl-cce">\.</span><span class="pl-c1">[<span class="pl-k">^</span><span class="pl-c1">.</span><span class="pl-cce">\/</span>]</span><span class="pl-k">*</span><span class="pl-k">|</span>))(?:<span class="pl-c1">[<span class="pl-cce">\/</span>]</span><span class="pl-k">*</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>;</td>
      </tr>
      <tr>
        <td id="L2848" class="blob-num js-line-number" data-line-number="2848"></td>
        <td id="LC2848" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">splitPathRe</span>.<span class="pl-c1">exec</span>(filename).<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2849" class="blob-num js-line-number" data-line-number="2849"></td>
        <td id="LC2849" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">normalizeArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parts</span>, <span class="pl-smi">allowAboveRoot</span>) {</td>
      </tr>
      <tr>
        <td id="L2850" class="blob-num js-line-number" data-line-number="2850"></td>
        <td id="LC2850" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if the path tries to go above the root, `up` ends up &gt; 0</span></td>
      </tr>
      <tr>
        <td id="L2851" class="blob-num js-line-number" data-line-number="2851"></td>
        <td id="LC2851" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> up <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2852" class="blob-num js-line-number" data-line-number="2852"></td>
        <td id="LC2852" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-smi">parts</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>; i <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>; i<span class="pl-k">--</span>) {</td>
      </tr>
      <tr>
        <td id="L2853" class="blob-num js-line-number" data-line-number="2853"></td>
        <td id="LC2853" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> last <span class="pl-k">=</span> parts[i];</td>
      </tr>
      <tr>
        <td id="L2854" class="blob-num js-line-number" data-line-number="2854"></td>
        <td id="LC2854" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (last <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2855" class="blob-num js-line-number" data-line-number="2855"></td>
        <td id="LC2855" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">parts</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2856" class="blob-num js-line-number" data-line-number="2856"></td>
        <td id="LC2856" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (last <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2857" class="blob-num js-line-number" data-line-number="2857"></td>
        <td id="LC2857" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">parts</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2858" class="blob-num js-line-number" data-line-number="2858"></td>
        <td id="LC2858" class="blob-code blob-code-inner js-file-line">            up<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L2859" class="blob-num js-line-number" data-line-number="2859"></td>
        <td id="LC2859" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (up) {</td>
      </tr>
      <tr>
        <td id="L2860" class="blob-num js-line-number" data-line-number="2860"></td>
        <td id="LC2860" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">parts</span>.<span class="pl-c1">splice</span>(i, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2861" class="blob-num js-line-number" data-line-number="2861"></td>
        <td id="LC2861" class="blob-code blob-code-inner js-file-line">            up<span class="pl-k">--</span>;</td>
      </tr>
      <tr>
        <td id="L2862" class="blob-num js-line-number" data-line-number="2862"></td>
        <td id="LC2862" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2863" class="blob-num js-line-number" data-line-number="2863"></td>
        <td id="LC2863" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2864" class="blob-num js-line-number" data-line-number="2864"></td>
        <td id="LC2864" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if the path is allowed to go above the root, restore leading ..s</span></td>
      </tr>
      <tr>
        <td id="L2865" class="blob-num js-line-number" data-line-number="2865"></td>
        <td id="LC2865" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (allowAboveRoot) {</td>
      </tr>
      <tr>
        <td id="L2866" class="blob-num js-line-number" data-line-number="2866"></td>
        <td id="LC2866" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (; up; up<span class="pl-k">--</span>) {</td>
      </tr>
      <tr>
        <td id="L2867" class="blob-num js-line-number" data-line-number="2867"></td>
        <td id="LC2867" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">parts</span>.<span class="pl-c1">unshift</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2868" class="blob-num js-line-number" data-line-number="2868"></td>
        <td id="LC2868" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2869" class="blob-num js-line-number" data-line-number="2869"></td>
        <td id="LC2869" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2870" class="blob-num js-line-number" data-line-number="2870"></td>
        <td id="LC2870" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> parts;</td>
      </tr>
      <tr>
        <td id="L2871" class="blob-num js-line-number" data-line-number="2871"></td>
        <td id="LC2871" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">normalize</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L2872" class="blob-num js-line-number" data-line-number="2872"></td>
        <td id="LC2872" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> isAbsolute <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="L2873" class="blob-num js-line-number" data-line-number="2873"></td>
        <td id="LC2873" class="blob-code blob-code-inner js-file-line">            trailingSlash <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">substr</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2874" class="blob-num js-line-number" data-line-number="2874"></td>
        <td id="LC2874" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Normalize the path</span></td>
      </tr>
      <tr>
        <td id="L2875" class="blob-num js-line-number" data-line-number="2875"></td>
        <td id="LC2875" class="blob-code blob-code-inner js-file-line">        path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">normalizeArray</span>(<span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>).<span class="pl-en">filter</span>(<span class="pl-k">function</span>(<span class="pl-smi">p</span>) {</td>
      </tr>
      <tr>
        <td id="L2876" class="blob-num js-line-number" data-line-number="2876"></td>
        <td id="LC2876" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">!!</span>p;</td>
      </tr>
      <tr>
        <td id="L2877" class="blob-num js-line-number" data-line-number="2877"></td>
        <td id="LC2877" class="blob-code blob-code-inner js-file-line">        }), <span class="pl-k">!</span>isAbsolute).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2878" class="blob-num js-line-number" data-line-number="2878"></td>
        <td id="LC2878" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>path <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>isAbsolute) {</td>
      </tr>
      <tr>
        <td id="L2879" class="blob-num js-line-number" data-line-number="2879"></td>
        <td id="LC2879" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2880" class="blob-num js-line-number" data-line-number="2880"></td>
        <td id="LC2880" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2881" class="blob-num js-line-number" data-line-number="2881"></td>
        <td id="LC2881" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (path <span class="pl-k">&amp;&amp;</span> trailingSlash) {</td>
      </tr>
      <tr>
        <td id="L2882" class="blob-num js-line-number" data-line-number="2882"></td>
        <td id="LC2882" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2883" class="blob-num js-line-number" data-line-number="2883"></td>
        <td id="LC2883" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2884" class="blob-num js-line-number" data-line-number="2884"></td>
        <td id="LC2884" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (isAbsolute <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>) <span class="pl-k">+</span> path;</td>
      </tr>
      <tr>
        <td id="L2885" class="blob-num js-line-number" data-line-number="2885"></td>
        <td id="LC2885" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">dirname</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L2886" class="blob-num js-line-number" data-line-number="2886"></td>
        <td id="LC2886" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> result <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">splitPath</span>(path),</td>
      </tr>
      <tr>
        <td id="L2887" class="blob-num js-line-number" data-line-number="2887"></td>
        <td id="LC2887" class="blob-code blob-code-inner js-file-line">            root <span class="pl-k">=</span> result[<span class="pl-c1">0</span>],</td>
      </tr>
      <tr>
        <td id="L2888" class="blob-num js-line-number" data-line-number="2888"></td>
        <td id="LC2888" class="blob-code blob-code-inner js-file-line">            dir <span class="pl-k">=</span> result[<span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L2889" class="blob-num js-line-number" data-line-number="2889"></td>
        <td id="LC2889" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>root <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>dir) {</td>
      </tr>
      <tr>
        <td id="L2890" class="blob-num js-line-number" data-line-number="2890"></td>
        <td id="LC2890" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> No dirname whatsoever</span></td>
      </tr>
      <tr>
        <td id="L2891" class="blob-num js-line-number" data-line-number="2891"></td>
        <td id="LC2891" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2892" class="blob-num js-line-number" data-line-number="2892"></td>
        <td id="LC2892" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2893" class="blob-num js-line-number" data-line-number="2893"></td>
        <td id="LC2893" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (dir) {</td>
      </tr>
      <tr>
        <td id="L2894" class="blob-num js-line-number" data-line-number="2894"></td>
        <td id="LC2894" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> It has a dirname, strip trailing slash</span></td>
      </tr>
      <tr>
        <td id="L2895" class="blob-num js-line-number" data-line-number="2895"></td>
        <td id="LC2895" class="blob-code blob-code-inner js-file-line">          dir <span class="pl-k">=</span> <span class="pl-smi">dir</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-smi">dir</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2896" class="blob-num js-line-number" data-line-number="2896"></td>
        <td id="LC2896" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2897" class="blob-num js-line-number" data-line-number="2897"></td>
        <td id="LC2897" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> root <span class="pl-k">+</span> dir;</td>
      </tr>
      <tr>
        <td id="L2898" class="blob-num js-line-number" data-line-number="2898"></td>
        <td id="LC2898" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">basename</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L2899" class="blob-num js-line-number" data-line-number="2899"></td>
        <td id="LC2899" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> EMSCRIPTEN return &#39;/&#39;&#39; for &#39;/&#39;, not an empty string</span></td>
      </tr>
      <tr>
        <td id="L2900" class="blob-num js-line-number" data-line-number="2900"></td>
        <td id="LC2900" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>) <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2901" class="blob-num js-line-number" data-line-number="2901"></td>
        <td id="LC2901" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lastSlash <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2902" class="blob-num js-line-number" data-line-number="2902"></td>
        <td id="LC2902" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (lastSlash <span class="pl-k">===</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">return</span> path;</td>
      </tr>
      <tr>
        <td id="L2903" class="blob-num js-line-number" data-line-number="2903"></td>
        <td id="LC2903" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">path</span>.<span class="pl-c1">substr</span>(lastSlash<span class="pl-k">+</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2904" class="blob-num js-line-number" data-line-number="2904"></td>
        <td id="LC2904" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">extname</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L2905" class="blob-num js-line-number" data-line-number="2905"></td>
        <td id="LC2905" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-en">splitPath</span>(path)[<span class="pl-c1">3</span>];</td>
      </tr>
      <tr>
        <td id="L2906" class="blob-num js-line-number" data-line-number="2906"></td>
        <td id="LC2906" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">join</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L2907" class="blob-num js-line-number" data-line-number="2907"></td>
        <td id="LC2907" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> paths <span class="pl-k">=</span> <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(<span class="pl-c1">arguments</span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L2908" class="blob-num js-line-number" data-line-number="2908"></td>
        <td id="LC2908" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(<span class="pl-smi">paths</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L2909" class="blob-num js-line-number" data-line-number="2909"></td>
        <td id="LC2909" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">join2</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">l</span>, <span class="pl-smi">r</span>) {</td>
      </tr>
      <tr>
        <td id="L2910" class="blob-num js-line-number" data-line-number="2910"></td>
        <td id="LC2910" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(l <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> r);</td>
      </tr>
      <tr>
        <td id="L2911" class="blob-num js-line-number" data-line-number="2911"></td>
        <td id="LC2911" class="blob-code blob-code-inner js-file-line">      }};</td>
      </tr>
      <tr>
        <td id="L2912" class="blob-num js-line-number" data-line-number="2912"></td>
        <td id="LC2912" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2913" class="blob-num js-line-number" data-line-number="2913"></td>
        <td id="LC2913" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2914" class="blob-num js-line-number" data-line-number="2914"></td>
        <td id="LC2914" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___setErrNo</span>(<span class="pl-smi">value</span>) {</td>
      </tr>
      <tr>
        <td id="L2915" class="blob-num js-line-number" data-line-number="2915"></td>
        <td id="LC2915" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>___errno_location<span class="pl-pds">&#39;</span></span>]) <span class="pl-c1">HEAP32</span>[((Module[<span class="pl-s"><span class="pl-pds">&#39;</span>___errno_location<span class="pl-pds">&#39;</span></span>]())<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>value;</td>
      </tr>
      <tr>
        <td id="L2916" class="blob-num js-line-number" data-line-number="2916"></td>
        <td id="LC2916" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">else</span> <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>failed to set errno from JS<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2917" class="blob-num js-line-number" data-line-number="2917"></td>
        <td id="LC2917" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> value;</td>
      </tr>
      <tr>
        <td id="L2918" class="blob-num js-line-number" data-line-number="2918"></td>
        <td id="LC2918" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2919" class="blob-num js-line-number" data-line-number="2919"></td>
        <td id="LC2919" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2920" class="blob-num js-line-number" data-line-number="2920"></td>
        <td id="LC2920" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">PATH_FS</span><span class="pl-k">=</span>{<span class="pl-en">resolve</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L2921" class="blob-num js-line-number" data-line-number="2921"></td>
        <td id="LC2921" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> resolvedPath <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="L2922" class="blob-num js-line-number" data-line-number="2922"></td>
        <td id="LC2922" class="blob-code blob-code-inner js-file-line">          resolvedAbsolute <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2923" class="blob-num js-line-number" data-line-number="2923"></td>
        <td id="LC2923" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">arguments</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>; i <span class="pl-k">&gt;=</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>resolvedAbsolute; i<span class="pl-k">--</span>) {</td>
      </tr>
      <tr>
        <td id="L2924" class="blob-num js-line-number" data-line-number="2924"></td>
        <td id="LC2924" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> (i <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">?</span> <span class="pl-c1">arguments</span>[i] <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">cwd</span>();</td>
      </tr>
      <tr>
        <td id="L2925" class="blob-num js-line-number" data-line-number="2925"></td>
        <td id="LC2925" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Skip empty and invalid entries</span></td>
      </tr>
      <tr>
        <td id="L2926" class="blob-num js-line-number" data-line-number="2926"></td>
        <td id="LC2926" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">typeof</span> path <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2927" class="blob-num js-line-number" data-line-number="2927"></td>
        <td id="LC2927" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">TypeError</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Arguments to path.resolve must be strings<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2928" class="blob-num js-line-number" data-line-number="2928"></td>
        <td id="LC2928" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">!</span>path) {</td>
      </tr>
      <tr>
        <td id="L2929" class="blob-num js-line-number" data-line-number="2929"></td>
        <td id="LC2929" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>; <span class="pl-c"><span class="pl-c">//</span> an invalid portion invalidates the whole thing</span></td>
      </tr>
      <tr>
        <td id="L2930" class="blob-num js-line-number" data-line-number="2930"></td>
        <td id="LC2930" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2931" class="blob-num js-line-number" data-line-number="2931"></td>
        <td id="LC2931" class="blob-code blob-code-inner js-file-line">          resolvedPath <span class="pl-k">=</span> path <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> resolvedPath;</td>
      </tr>
      <tr>
        <td id="L2932" class="blob-num js-line-number" data-line-number="2932"></td>
        <td id="LC2932" class="blob-code blob-code-inner js-file-line">          resolvedAbsolute <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2933" class="blob-num js-line-number" data-line-number="2933"></td>
        <td id="LC2933" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2934" class="blob-num js-line-number" data-line-number="2934"></td>
        <td id="LC2934" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> At this point the path should be resolved to a full absolute path, but</span></td>
      </tr>
      <tr>
        <td id="L2935" class="blob-num js-line-number" data-line-number="2935"></td>
        <td id="LC2935" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> handle relative paths to be safe (might happen when process.cwd() fails)</span></td>
      </tr>
      <tr>
        <td id="L2936" class="blob-num js-line-number" data-line-number="2936"></td>
        <td id="LC2936" class="blob-code blob-code-inner js-file-line">        resolvedPath <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">normalizeArray</span>(<span class="pl-smi">resolvedPath</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>).<span class="pl-en">filter</span>(<span class="pl-k">function</span>(<span class="pl-smi">p</span>) {</td>
      </tr>
      <tr>
        <td id="L2937" class="blob-num js-line-number" data-line-number="2937"></td>
        <td id="LC2937" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">!!</span>p;</td>
      </tr>
      <tr>
        <td id="L2938" class="blob-num js-line-number" data-line-number="2938"></td>
        <td id="LC2938" class="blob-code blob-code-inner js-file-line">        }), <span class="pl-k">!</span>resolvedAbsolute).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2939" class="blob-num js-line-number" data-line-number="2939"></td>
        <td id="LC2939" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((resolvedAbsolute <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>) <span class="pl-k">+</span> resolvedPath) <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2940" class="blob-num js-line-number" data-line-number="2940"></td>
        <td id="LC2940" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">relative</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">from</span>, <span class="pl-smi">to</span>) {</td>
      </tr>
      <tr>
        <td id="L2941" class="blob-num js-line-number" data-line-number="2941"></td>
        <td id="LC2941" class="blob-code blob-code-inner js-file-line">        from <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(from).<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2942" class="blob-num js-line-number" data-line-number="2942"></td>
        <td id="LC2942" class="blob-code blob-code-inner js-file-line">        to <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(to).<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2943" class="blob-num js-line-number" data-line-number="2943"></td>
        <td id="LC2943" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">trim</span>(<span class="pl-smi">arr</span>) {</td>
      </tr>
      <tr>
        <td id="L2944" class="blob-num js-line-number" data-line-number="2944"></td>
        <td id="LC2944" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> start <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2945" class="blob-num js-line-number" data-line-number="2945"></td>
        <td id="LC2945" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (; start <span class="pl-k">&lt;</span> <span class="pl-smi">arr</span>.<span class="pl-c1">length</span>; start<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L2946" class="blob-num js-line-number" data-line-number="2946"></td>
        <td id="LC2946" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (arr[start] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2947" class="blob-num js-line-number" data-line-number="2947"></td>
        <td id="LC2947" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2948" class="blob-num js-line-number" data-line-number="2948"></td>
        <td id="LC2948" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> end <span class="pl-k">=</span> <span class="pl-smi">arr</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2949" class="blob-num js-line-number" data-line-number="2949"></td>
        <td id="LC2949" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (; end <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>; end<span class="pl-k">--</span>) {</td>
      </tr>
      <tr>
        <td id="L2950" class="blob-num js-line-number" data-line-number="2950"></td>
        <td id="LC2950" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (arr[end] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2951" class="blob-num js-line-number" data-line-number="2951"></td>
        <td id="LC2951" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2952" class="blob-num js-line-number" data-line-number="2952"></td>
        <td id="LC2952" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (start <span class="pl-k">&gt;</span> end) <span class="pl-k">return</span> [];</td>
      </tr>
      <tr>
        <td id="L2953" class="blob-num js-line-number" data-line-number="2953"></td>
        <td id="LC2953" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">arr</span>.<span class="pl-c1">slice</span>(start, end <span class="pl-k">-</span> start <span class="pl-k">+</span> <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2954" class="blob-num js-line-number" data-line-number="2954"></td>
        <td id="LC2954" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2955" class="blob-num js-line-number" data-line-number="2955"></td>
        <td id="LC2955" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> fromParts <span class="pl-k">=</span> <span class="pl-en">trim</span>(<span class="pl-smi">from</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L2956" class="blob-num js-line-number" data-line-number="2956"></td>
        <td id="LC2956" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> toParts <span class="pl-k">=</span> <span class="pl-en">trim</span>(<span class="pl-smi">to</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L2957" class="blob-num js-line-number" data-line-number="2957"></td>
        <td id="LC2957" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> length <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">fromParts</span>.<span class="pl-c1">length</span>, <span class="pl-smi">toParts</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L2958" class="blob-num js-line-number" data-line-number="2958"></td>
        <td id="LC2958" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> samePartsLength <span class="pl-k">=</span> length;</td>
      </tr>
      <tr>
        <td id="L2959" class="blob-num js-line-number" data-line-number="2959"></td>
        <td id="LC2959" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L2960" class="blob-num js-line-number" data-line-number="2960"></td>
        <td id="LC2960" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (fromParts[i] <span class="pl-k">!==</span> toParts[i]) {</td>
      </tr>
      <tr>
        <td id="L2961" class="blob-num js-line-number" data-line-number="2961"></td>
        <td id="LC2961" class="blob-code blob-code-inner js-file-line">            samePartsLength <span class="pl-k">=</span> i;</td>
      </tr>
      <tr>
        <td id="L2962" class="blob-num js-line-number" data-line-number="2962"></td>
        <td id="LC2962" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2963" class="blob-num js-line-number" data-line-number="2963"></td>
        <td id="LC2963" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L2964" class="blob-num js-line-number" data-line-number="2964"></td>
        <td id="LC2964" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2965" class="blob-num js-line-number" data-line-number="2965"></td>
        <td id="LC2965" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> outputParts <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L2966" class="blob-num js-line-number" data-line-number="2966"></td>
        <td id="LC2966" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> samePartsLength; i <span class="pl-k">&lt;</span> <span class="pl-smi">fromParts</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L2967" class="blob-num js-line-number" data-line-number="2967"></td>
        <td id="LC2967" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">outputParts</span>.<span class="pl-c1">push</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2968" class="blob-num js-line-number" data-line-number="2968"></td>
        <td id="LC2968" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2969" class="blob-num js-line-number" data-line-number="2969"></td>
        <td id="LC2969" class="blob-code blob-code-inner js-file-line">        outputParts <span class="pl-k">=</span> <span class="pl-smi">outputParts</span>.<span class="pl-c1">concat</span>(<span class="pl-smi">toParts</span>.<span class="pl-c1">slice</span>(samePartsLength));</td>
      </tr>
      <tr>
        <td id="L2970" class="blob-num js-line-number" data-line-number="2970"></td>
        <td id="LC2970" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">outputParts</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2971" class="blob-num js-line-number" data-line-number="2971"></td>
        <td id="LC2971" class="blob-code blob-code-inner js-file-line">      }};</td>
      </tr>
      <tr>
        <td id="L2972" class="blob-num js-line-number" data-line-number="2972"></td>
        <td id="LC2972" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L2973" class="blob-num js-line-number" data-line-number="2973"></td>
        <td id="LC2973" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">TTY</span><span class="pl-k">=</span>{ttys<span class="pl-k">:</span>[],<span class="pl-en">init</span><span class="pl-k">:</span><span class="pl-k">function</span> () {</td>
      </tr>
      <tr>
        <td id="L2974" class="blob-num js-line-number" data-line-number="2974"></td>
        <td id="LC2974" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> https://github.com/emscripten-core/emscripten/pull/1555</span></td>
      </tr>
      <tr>
        <td id="L2975" class="blob-num js-line-number" data-line-number="2975"></td>
        <td id="LC2975" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if (ENVIRONMENT_IS_NODE) {</span></td>
      </tr>
      <tr>
        <td id="L2976" class="blob-num js-line-number" data-line-number="2976"></td>
        <td id="LC2976" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // currently, FS.init does not distinguish if process.stdin is a file or TTY</span></td>
      </tr>
      <tr>
        <td id="L2977" class="blob-num js-line-number" data-line-number="2977"></td>
        <td id="LC2977" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // device, it always assumes it&#39;s a TTY device. because of this, we&#39;re forcing</span></td>
      </tr>
      <tr>
        <td id="L2978" class="blob-num js-line-number" data-line-number="2978"></td>
        <td id="LC2978" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // process.stdin to UTF8 encoding to at least make stdin reading compatible</span></td>
      </tr>
      <tr>
        <td id="L2979" class="blob-num js-line-number" data-line-number="2979"></td>
        <td id="LC2979" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // with text files until FS.init can be refactored.</span></td>
      </tr>
      <tr>
        <td id="L2980" class="blob-num js-line-number" data-line-number="2980"></td>
        <td id="LC2980" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   process[&#39;stdin&#39;][&#39;setEncoding&#39;](&#39;utf8&#39;);</span></td>
      </tr>
      <tr>
        <td id="L2981" class="blob-num js-line-number" data-line-number="2981"></td>
        <td id="LC2981" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> }</span></td>
      </tr>
      <tr>
        <td id="L2982" class="blob-num js-line-number" data-line-number="2982"></td>
        <td id="LC2982" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">shutdown</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L2983" class="blob-num js-line-number" data-line-number="2983"></td>
        <td id="LC2983" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> https://github.com/emscripten-core/emscripten/pull/1555</span></td>
      </tr>
      <tr>
        <td id="L2984" class="blob-num js-line-number" data-line-number="2984"></td>
        <td id="LC2984" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if (ENVIRONMENT_IS_NODE) {</span></td>
      </tr>
      <tr>
        <td id="L2985" class="blob-num js-line-number" data-line-number="2985"></td>
        <td id="LC2985" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // inolen: any idea as to why node -e &#39;process.stdin.read()&#39; wouldn&#39;t exit immediately (with process.stdin being a tty)?</span></td>
      </tr>
      <tr>
        <td id="L2986" class="blob-num js-line-number" data-line-number="2986"></td>
        <td id="LC2986" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // isaacs: because now it&#39;s reading from the stream, you&#39;ve expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation</span></td>
      </tr>
      <tr>
        <td id="L2987" class="blob-num js-line-number" data-line-number="2987"></td>
        <td id="LC2987" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?</span></td>
      </tr>
      <tr>
        <td id="L2988" class="blob-num js-line-number" data-line-number="2988"></td>
        <td id="LC2988" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle</span></td>
      </tr>
      <tr>
        <td id="L2989" class="blob-num js-line-number" data-line-number="2989"></td>
        <td id="LC2989" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   // isaacs: do process.stdin.pause() and i&#39;d think it&#39;d probably close the pending call</span></td>
      </tr>
      <tr>
        <td id="L2990" class="blob-num js-line-number" data-line-number="2990"></td>
        <td id="LC2990" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>   process[&#39;stdin&#39;][&#39;pause&#39;]();</span></td>
      </tr>
      <tr>
        <td id="L2991" class="blob-num js-line-number" data-line-number="2991"></td>
        <td id="LC2991" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> }</span></td>
      </tr>
      <tr>
        <td id="L2992" class="blob-num js-line-number" data-line-number="2992"></td>
        <td id="LC2992" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">register</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dev</span>, <span class="pl-smi">ops</span>) {</td>
      </tr>
      <tr>
        <td id="L2993" class="blob-num js-line-number" data-line-number="2993"></td>
        <td id="LC2993" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">TTY</span>.<span class="pl-smi">ttys</span>[dev] <span class="pl-k">=</span> { input<span class="pl-k">:</span> [], output<span class="pl-k">:</span> [], ops<span class="pl-k">:</span> ops };</td>
      </tr>
      <tr>
        <td id="L2994" class="blob-num js-line-number" data-line-number="2994"></td>
        <td id="LC2994" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">registerDevice</span>(dev, <span class="pl-c1">TTY</span>.<span class="pl-smi">stream_ops</span>);</td>
      </tr>
      <tr>
        <td id="L2995" class="blob-num js-line-number" data-line-number="2995"></td>
        <td id="LC2995" class="blob-code blob-code-inner js-file-line">      },stream_ops<span class="pl-k">:</span>{<span class="pl-en">open</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L2996" class="blob-num js-line-number" data-line-number="2996"></td>
        <td id="LC2996" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> tty <span class="pl-k">=</span> <span class="pl-c1">TTY</span>.<span class="pl-smi">ttys</span>[<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">rdev</span>];</td>
      </tr>
      <tr>
        <td id="L2997" class="blob-num js-line-number" data-line-number="2997"></td>
        <td id="LC2997" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>tty) {</td>
      </tr>
      <tr>
        <td id="L2998" class="blob-num js-line-number" data-line-number="2998"></td>
        <td id="LC2998" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">19</span>);</td>
      </tr>
      <tr>
        <td id="L2999" class="blob-num js-line-number" data-line-number="2999"></td>
        <td id="LC2999" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3000" class="blob-num js-line-number" data-line-number="3000"></td>
        <td id="LC3000" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">tty</span> <span class="pl-k">=</span> tty;</td>
      </tr>
      <tr>
        <td id="L3001" class="blob-num js-line-number" data-line-number="3001"></td>
        <td id="LC3001" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">seekable</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3002" class="blob-num js-line-number" data-line-number="3002"></td>
        <td id="LC3002" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">close</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L3003" class="blob-num js-line-number" data-line-number="3003"></td>
        <td id="LC3003" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> flush any pending line data</span></td>
      </tr>
      <tr>
        <td id="L3004" class="blob-num js-line-number" data-line-number="3004"></td>
        <td id="LC3004" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-en">flush</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>);</td>
      </tr>
      <tr>
        <td id="L3005" class="blob-num js-line-number" data-line-number="3005"></td>
        <td id="LC3005" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">flush</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L3006" class="blob-num js-line-number" data-line-number="3006"></td>
        <td id="LC3006" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-en">flush</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>);</td>
      </tr>
      <tr>
        <td id="L3007" class="blob-num js-line-number" data-line-number="3007"></td>
        <td id="LC3007" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">read</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">pos</span> <span class="pl-c"><span class="pl-c">/*</span> ignored <span class="pl-c">*/</span></span>) {</td>
      </tr>
      <tr>
        <td id="L3008" class="blob-num js-line-number" data-line-number="3008"></td>
        <td id="LC3008" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">tty</span> <span class="pl-k">||</span> <span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-smi">get_char</span>) {</td>
      </tr>
      <tr>
        <td id="L3009" class="blob-num js-line-number" data-line-number="3009"></td>
        <td id="LC3009" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">6</span>);</td>
      </tr>
      <tr>
        <td id="L3010" class="blob-num js-line-number" data-line-number="3010"></td>
        <td id="LC3010" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3011" class="blob-num js-line-number" data-line-number="3011"></td>
        <td id="LC3011" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> bytesRead <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3012" class="blob-num js-line-number" data-line-number="3012"></td>
        <td id="LC3012" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L3013" class="blob-num js-line-number" data-line-number="3013"></td>
        <td id="LC3013" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> result;</td>
      </tr>
      <tr>
        <td id="L3014" class="blob-num js-line-number" data-line-number="3014"></td>
        <td id="LC3014" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3015" class="blob-num js-line-number" data-line-number="3015"></td>
        <td id="LC3015" class="blob-code blob-code-inner js-file-line">              result <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-en">get_char</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>);</td>
      </tr>
      <tr>
        <td id="L3016" class="blob-num js-line-number" data-line-number="3016"></td>
        <td id="LC3016" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3017" class="blob-num js-line-number" data-line-number="3017"></td>
        <td id="LC3017" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L3018" class="blob-num js-line-number" data-line-number="3018"></td>
        <td id="LC3018" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3019" class="blob-num js-line-number" data-line-number="3019"></td>
        <td id="LC3019" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (result <span class="pl-k">===</span> <span class="pl-c1">undefined</span> <span class="pl-k">&amp;&amp;</span> bytesRead <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3020" class="blob-num js-line-number" data-line-number="3020"></td>
        <td id="LC3020" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">11</span>);</td>
      </tr>
      <tr>
        <td id="L3021" class="blob-num js-line-number" data-line-number="3021"></td>
        <td id="LC3021" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3022" class="blob-num js-line-number" data-line-number="3022"></td>
        <td id="LC3022" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (result <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> result <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L3023" class="blob-num js-line-number" data-line-number="3023"></td>
        <td id="LC3023" class="blob-code blob-code-inner js-file-line">            bytesRead<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L3024" class="blob-num js-line-number" data-line-number="3024"></td>
        <td id="LC3024" class="blob-code blob-code-inner js-file-line">            buffer[offset<span class="pl-k">+</span>i] <span class="pl-k">=</span> result;</td>
      </tr>
      <tr>
        <td id="L3025" class="blob-num js-line-number" data-line-number="3025"></td>
        <td id="LC3025" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3026" class="blob-num js-line-number" data-line-number="3026"></td>
        <td id="LC3026" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (bytesRead) {</td>
      </tr>
      <tr>
        <td id="L3027" class="blob-num js-line-number" data-line-number="3027"></td>
        <td id="LC3027" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L3028" class="blob-num js-line-number" data-line-number="3028"></td>
        <td id="LC3028" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3029" class="blob-num js-line-number" data-line-number="3029"></td>
        <td id="LC3029" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> bytesRead;</td>
      </tr>
      <tr>
        <td id="L3030" class="blob-num js-line-number" data-line-number="3030"></td>
        <td id="LC3030" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">write</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L3031" class="blob-num js-line-number" data-line-number="3031"></td>
        <td id="LC3031" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">tty</span> <span class="pl-k">||</span> <span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-smi">put_char</span>) {</td>
      </tr>
      <tr>
        <td id="L3032" class="blob-num js-line-number" data-line-number="3032"></td>
        <td id="LC3032" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">6</span>);</td>
      </tr>
      <tr>
        <td id="L3033" class="blob-num js-line-number" data-line-number="3033"></td>
        <td id="LC3033" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3034" class="blob-num js-line-number" data-line-number="3034"></td>
        <td id="LC3034" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3035" class="blob-num js-line-number" data-line-number="3035"></td>
        <td id="LC3035" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L3036" class="blob-num js-line-number" data-line-number="3036"></td>
        <td id="LC3036" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>.<span class="pl-smi">ops</span>.<span class="pl-en">put_char</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">tty</span>, buffer[offset<span class="pl-k">+</span>i]);</td>
      </tr>
      <tr>
        <td id="L3037" class="blob-num js-line-number" data-line-number="3037"></td>
        <td id="LC3037" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3038" class="blob-num js-line-number" data-line-number="3038"></td>
        <td id="LC3038" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3039" class="blob-num js-line-number" data-line-number="3039"></td>
        <td id="LC3039" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L3040" class="blob-num js-line-number" data-line-number="3040"></td>
        <td id="LC3040" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3041" class="blob-num js-line-number" data-line-number="3041"></td>
        <td id="LC3041" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (length) {</td>
      </tr>
      <tr>
        <td id="L3042" class="blob-num js-line-number" data-line-number="3042"></td>
        <td id="LC3042" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L3043" class="blob-num js-line-number" data-line-number="3043"></td>
        <td id="LC3043" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3044" class="blob-num js-line-number" data-line-number="3044"></td>
        <td id="LC3044" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L3045" class="blob-num js-line-number" data-line-number="3045"></td>
        <td id="LC3045" class="blob-code blob-code-inner js-file-line">        }},default_tty_ops<span class="pl-k">:</span>{<span class="pl-en">get_char</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">tty</span>) {</td>
      </tr>
      <tr>
        <td id="L3046" class="blob-num js-line-number" data-line-number="3046"></td>
        <td id="LC3046" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">tty</span>.<span class="pl-c1">input</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L3047" class="blob-num js-line-number" data-line-number="3047"></td>
        <td id="LC3047" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> result <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L3048" class="blob-num js-line-number" data-line-number="3048"></td>
        <td id="LC3048" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_NODE</span>) {</td>
      </tr>
      <tr>
        <td id="L3049" class="blob-num js-line-number" data-line-number="3049"></td>
        <td id="LC3049" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> we will read data by chunks of BUFSIZE</span></td>
      </tr>
      <tr>
        <td id="L3050" class="blob-num js-line-number" data-line-number="3050"></td>
        <td id="LC3050" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> <span class="pl-c1">BUFSIZE</span> <span class="pl-k">=</span> <span class="pl-c1">256</span>;</td>
      </tr>
      <tr>
        <td id="L3051" class="blob-num js-line-number" data-line-number="3051"></td>
        <td id="LC3051" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> buf <span class="pl-k">=</span> <span class="pl-smi">Buffer</span>.<span class="pl-smi">alloc</span> <span class="pl-k">?</span> <span class="pl-smi">Buffer</span>.<span class="pl-en">alloc</span>(<span class="pl-c1">BUFSIZE</span>) <span class="pl-k">:</span> <span class="pl-k">new</span> <span class="pl-en">Buffer</span>(<span class="pl-c1">BUFSIZE</span>);</td>
      </tr>
      <tr>
        <td id="L3052" class="blob-num js-line-number" data-line-number="3052"></td>
        <td id="LC3052" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> bytesRead <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3053" class="blob-num js-line-number" data-line-number="3053"></td>
        <td id="LC3053" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3054" class="blob-num js-line-number" data-line-number="3054"></td>
        <td id="LC3054" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> isPosixPlatform <span class="pl-k">=</span> (<span class="pl-c1">process</span>.<span class="pl-c1">platform</span> <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>win32<span class="pl-pds">&#39;</span></span>); <span class="pl-c"><span class="pl-c">//</span> Node doesn&#39;t offer a direct check, so test by exclusion</span></td>
      </tr>
      <tr>
        <td id="L3055" class="blob-num js-line-number" data-line-number="3055"></td>
        <td id="LC3055" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3056" class="blob-num js-line-number" data-line-number="3056"></td>
        <td id="LC3056" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-c1">process</span>.<span class="pl-smi">stdin</span>.<span class="pl-smi">fd</span>;</td>
      </tr>
      <tr>
        <td id="L3057" class="blob-num js-line-number" data-line-number="3057"></td>
        <td id="LC3057" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (isPosixPlatform) {</td>
      </tr>
      <tr>
        <td id="L3058" class="blob-num js-line-number" data-line-number="3058"></td>
        <td id="LC3058" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Linux and Mac cannot use process.stdin.fd (which isn&#39;t set up as sync)</span></td>
      </tr>
      <tr>
        <td id="L3059" class="blob-num js-line-number" data-line-number="3059"></td>
        <td id="LC3059" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> usingDevice <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3060" class="blob-num js-line-number" data-line-number="3060"></td>
        <td id="LC3060" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3061" class="blob-num js-line-number" data-line-number="3061"></td>
        <td id="LC3061" class="blob-code blob-code-inner js-file-line">                  fd <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">openSync</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stdin<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3062" class="blob-num js-line-number" data-line-number="3062"></td>
        <td id="LC3062" class="blob-code blob-code-inner js-file-line">                  usingDevice <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3063" class="blob-num js-line-number" data-line-number="3063"></td>
        <td id="LC3063" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (e) {}</td>
      </tr>
      <tr>
        <td id="L3064" class="blob-num js-line-number" data-line-number="3064"></td>
        <td id="LC3064" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3065" class="blob-num js-line-number" data-line-number="3065"></td>
        <td id="LC3065" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3066" class="blob-num js-line-number" data-line-number="3066"></td>
        <td id="LC3066" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3067" class="blob-num js-line-number" data-line-number="3067"></td>
        <td id="LC3067" class="blob-code blob-code-inner js-file-line">                bytesRead <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">readSync</span>(fd, buf, <span class="pl-c1">0</span>, <span class="pl-c1">BUFSIZE</span>, <span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L3068" class="blob-num js-line-number" data-line-number="3068"></td>
        <td id="LC3068" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L3069" class="blob-num js-line-number" data-line-number="3069"></td>
        <td id="LC3069" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,</span></td>
      </tr>
      <tr>
        <td id="L3070" class="blob-num js-line-number" data-line-number="3070"></td>
        <td id="LC3070" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.</span></td>
      </tr>
      <tr>
        <td id="L3071" class="blob-num js-line-number" data-line-number="3071"></td>
        <td id="LC3071" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-smi">e</span>.<span class="pl-c1">toString</span>().<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>EOF<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!=</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) bytesRead <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3072" class="blob-num js-line-number" data-line-number="3072"></td>
        <td id="LC3072" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">else</span> <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3073" class="blob-num js-line-number" data-line-number="3073"></td>
        <td id="LC3073" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3074" class="blob-num js-line-number" data-line-number="3074"></td>
        <td id="LC3074" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3075" class="blob-num js-line-number" data-line-number="3075"></td>
        <td id="LC3075" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (usingDevice) { <span class="pl-smi">fs</span>.<span class="pl-en">closeSync</span>(fd); }</td>
      </tr>
      <tr>
        <td id="L3076" class="blob-num js-line-number" data-line-number="3076"></td>
        <td id="LC3076" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (bytesRead <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3077" class="blob-num js-line-number" data-line-number="3077"></td>
        <td id="LC3077" class="blob-code blob-code-inner js-file-line">                result <span class="pl-k">=</span> <span class="pl-smi">buf</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>, bytesRead).<span class="pl-c1">toString</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>utf-8<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3078" class="blob-num js-line-number" data-line-number="3078"></td>
        <td id="LC3078" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3079" class="blob-num js-line-number" data-line-number="3079"></td>
        <td id="LC3079" class="blob-code blob-code-inner js-file-line">                result <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L3080" class="blob-num js-line-number" data-line-number="3080"></td>
        <td id="LC3080" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3081" class="blob-num js-line-number" data-line-number="3081"></td>
        <td id="LC3081" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3082" class="blob-num js-line-number" data-line-number="3082"></td>
        <td id="LC3082" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">window</span> <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L3083" class="blob-num js-line-number" data-line-number="3083"></td>
        <td id="LC3083" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">typeof</span> <span class="pl-c1">window</span>.<span class="pl-c1">prompt</span> <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L3084" class="blob-num js-line-number" data-line-number="3084"></td>
        <td id="LC3084" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> Browser.</span></td>
      </tr>
      <tr>
        <td id="L3085" class="blob-num js-line-number" data-line-number="3085"></td>
        <td id="LC3085" class="blob-code blob-code-inner js-file-line">              result <span class="pl-k">=</span> <span class="pl-c1">window</span>.<span class="pl-c1">prompt</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Input: <span class="pl-pds">&#39;</span></span>);  <span class="pl-c"><span class="pl-c">//</span> returns null on cancel</span></td>
      </tr>
      <tr>
        <td id="L3086" class="blob-num js-line-number" data-line-number="3086"></td>
        <td id="LC3086" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (result <span class="pl-k">!==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L3087" class="blob-num js-line-number" data-line-number="3087"></td>
        <td id="LC3087" class="blob-code blob-code-inner js-file-line">                result <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L3088" class="blob-num js-line-number" data-line-number="3088"></td>
        <td id="LC3088" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3089" class="blob-num js-line-number" data-line-number="3089"></td>
        <td id="LC3089" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">typeof</span> readline <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L3090" class="blob-num js-line-number" data-line-number="3090"></td>
        <td id="LC3090" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> Command line.</span></td>
      </tr>
      <tr>
        <td id="L3091" class="blob-num js-line-number" data-line-number="3091"></td>
        <td id="LC3091" class="blob-code blob-code-inner js-file-line">              result <span class="pl-k">=</span> <span class="pl-en">readline</span>();</td>
      </tr>
      <tr>
        <td id="L3092" class="blob-num js-line-number" data-line-number="3092"></td>
        <td id="LC3092" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (result <span class="pl-k">!==</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L3093" class="blob-num js-line-number" data-line-number="3093"></td>
        <td id="LC3093" class="blob-code blob-code-inner js-file-line">                result <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L3094" class="blob-num js-line-number" data-line-number="3094"></td>
        <td id="LC3094" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3095" class="blob-num js-line-number" data-line-number="3095"></td>
        <td id="LC3095" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3096" class="blob-num js-line-number" data-line-number="3096"></td>
        <td id="LC3096" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>result) {</td>
      </tr>
      <tr>
        <td id="L3097" class="blob-num js-line-number" data-line-number="3097"></td>
        <td id="LC3097" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L3098" class="blob-num js-line-number" data-line-number="3098"></td>
        <td id="LC3098" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3099" class="blob-num js-line-number" data-line-number="3099"></td>
        <td id="LC3099" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">tty</span>.<span class="pl-c1">input</span> <span class="pl-k">=</span> <span class="pl-en">intArrayFromString</span>(result, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L3100" class="blob-num js-line-number" data-line-number="3100"></td>
        <td id="LC3100" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3101" class="blob-num js-line-number" data-line-number="3101"></td>
        <td id="LC3101" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">tty</span>.<span class="pl-c1">input</span>.<span class="pl-c1">shift</span>();</td>
      </tr>
      <tr>
        <td id="L3102" class="blob-num js-line-number" data-line-number="3102"></td>
        <td id="LC3102" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">put_char</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">tty</span>, <span class="pl-smi">val</span>) {</td>
      </tr>
      <tr>
        <td id="L3103" class="blob-num js-line-number" data-line-number="3103"></td>
        <td id="LC3103" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (val <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> val <span class="pl-k">===</span> <span class="pl-c1">10</span>) {</td>
      </tr>
      <tr>
        <td id="L3104" class="blob-num js-line-number" data-line-number="3104"></td>
        <td id="LC3104" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">out</span>(<span class="pl-en">UTF8ArrayToString</span>(<span class="pl-smi">tty</span>.<span class="pl-smi">output</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L3105" class="blob-num js-line-number" data-line-number="3105"></td>
        <td id="LC3105" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3106" class="blob-num js-line-number" data-line-number="3106"></td>
        <td id="LC3106" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3107" class="blob-num js-line-number" data-line-number="3107"></td>
        <td id="LC3107" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (val <span class="pl-k">!=</span> <span class="pl-c1">0</span>) <span class="pl-smi">tty</span>.<span class="pl-smi">output</span>.<span class="pl-c1">push</span>(val); <span class="pl-c"><span class="pl-c">//</span> val == 0 would cut text output off in the middle.</span></td>
      </tr>
      <tr>
        <td id="L3108" class="blob-num js-line-number" data-line-number="3108"></td>
        <td id="LC3108" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3109" class="blob-num js-line-number" data-line-number="3109"></td>
        <td id="LC3109" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">flush</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">tty</span>) {</td>
      </tr>
      <tr>
        <td id="L3110" class="blob-num js-line-number" data-line-number="3110"></td>
        <td id="LC3110" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">tty</span>.<span class="pl-smi">output</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3111" class="blob-num js-line-number" data-line-number="3111"></td>
        <td id="LC3111" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">out</span>(<span class="pl-en">UTF8ArrayToString</span>(<span class="pl-smi">tty</span>.<span class="pl-smi">output</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L3112" class="blob-num js-line-number" data-line-number="3112"></td>
        <td id="LC3112" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3113" class="blob-num js-line-number" data-line-number="3113"></td>
        <td id="LC3113" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3114" class="blob-num js-line-number" data-line-number="3114"></td>
        <td id="LC3114" class="blob-code blob-code-inner js-file-line">        }},default_tty1_ops<span class="pl-k">:</span>{<span class="pl-en">put_char</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">tty</span>, <span class="pl-smi">val</span>) {</td>
      </tr>
      <tr>
        <td id="L3115" class="blob-num js-line-number" data-line-number="3115"></td>
        <td id="LC3115" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (val <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> val <span class="pl-k">===</span> <span class="pl-c1">10</span>) {</td>
      </tr>
      <tr>
        <td id="L3116" class="blob-num js-line-number" data-line-number="3116"></td>
        <td id="LC3116" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">err</span>(<span class="pl-en">UTF8ArrayToString</span>(<span class="pl-smi">tty</span>.<span class="pl-smi">output</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L3117" class="blob-num js-line-number" data-line-number="3117"></td>
        <td id="LC3117" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3118" class="blob-num js-line-number" data-line-number="3118"></td>
        <td id="LC3118" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3119" class="blob-num js-line-number" data-line-number="3119"></td>
        <td id="LC3119" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (val <span class="pl-k">!=</span> <span class="pl-c1">0</span>) <span class="pl-smi">tty</span>.<span class="pl-smi">output</span>.<span class="pl-c1">push</span>(val);</td>
      </tr>
      <tr>
        <td id="L3120" class="blob-num js-line-number" data-line-number="3120"></td>
        <td id="LC3120" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3121" class="blob-num js-line-number" data-line-number="3121"></td>
        <td id="LC3121" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">flush</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">tty</span>) {</td>
      </tr>
      <tr>
        <td id="L3122" class="blob-num js-line-number" data-line-number="3122"></td>
        <td id="LC3122" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">tty</span>.<span class="pl-smi">output</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3123" class="blob-num js-line-number" data-line-number="3123"></td>
        <td id="LC3123" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">err</span>(<span class="pl-en">UTF8ArrayToString</span>(<span class="pl-smi">tty</span>.<span class="pl-smi">output</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L3124" class="blob-num js-line-number" data-line-number="3124"></td>
        <td id="LC3124" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3125" class="blob-num js-line-number" data-line-number="3125"></td>
        <td id="LC3125" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3126" class="blob-num js-line-number" data-line-number="3126"></td>
        <td id="LC3126" class="blob-code blob-code-inner js-file-line">        }}};</td>
      </tr>
      <tr>
        <td id="L3127" class="blob-num js-line-number" data-line-number="3127"></td>
        <td id="LC3127" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3128" class="blob-num js-line-number" data-line-number="3128"></td>
        <td id="LC3128" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">MEMFS</span><span class="pl-k">=</span>{ops_table<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-en">mount</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L3129" class="blob-num js-line-number" data-line-number="3129"></td>
        <td id="LC3129" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">MEMFS</span>.<span class="pl-en">createNode</span>(<span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">16384</span> <span class="pl-k">|</span> <span class="pl-c1">511</span> <span class="pl-c"><span class="pl-c">/*</span> 0777 <span class="pl-c">*/</span></span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3130" class="blob-num js-line-number" data-line-number="3130"></td>
        <td id="LC3130" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L3131" class="blob-num js-line-number" data-line-number="3131"></td>
        <td id="LC3131" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isBlkdev</span>(mode) <span class="pl-k">||</span> <span class="pl-c1">FS</span>.<span class="pl-en">isFIFO</span>(mode)) {</td>
      </tr>
      <tr>
        <td id="L3132" class="blob-num js-line-number" data-line-number="3132"></td>
        <td id="LC3132" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> no supported</span></td>
      </tr>
      <tr>
        <td id="L3133" class="blob-num js-line-number" data-line-number="3133"></td>
        <td id="LC3133" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L3134" class="blob-num js-line-number" data-line-number="3134"></td>
        <td id="LC3134" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3135" class="blob-num js-line-number" data-line-number="3135"></td>
        <td id="LC3135" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>) {</td>
      </tr>
      <tr>
        <td id="L3136" class="blob-num js-line-number" data-line-number="3136"></td>
        <td id="LC3136" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span> <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L3137" class="blob-num js-line-number" data-line-number="3137"></td>
        <td id="LC3137" class="blob-code blob-code-inner js-file-line">            dir<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3138" class="blob-num js-line-number" data-line-number="3138"></td>
        <td id="LC3138" class="blob-code blob-code-inner js-file-line">              node<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3139" class="blob-num js-line-number" data-line-number="3139"></td>
        <td id="LC3139" class="blob-code blob-code-inner js-file-line">                getattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">getattr</span>,</td>
      </tr>
      <tr>
        <td id="L3140" class="blob-num js-line-number" data-line-number="3140"></td>
        <td id="LC3140" class="blob-code blob-code-inner js-file-line">                setattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span>,</td>
      </tr>
      <tr>
        <td id="L3141" class="blob-num js-line-number" data-line-number="3141"></td>
        <td id="LC3141" class="blob-code blob-code-inner js-file-line">                lookup<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">lookup</span>,</td>
      </tr>
      <tr>
        <td id="L3142" class="blob-num js-line-number" data-line-number="3142"></td>
        <td id="LC3142" class="blob-code blob-code-inner js-file-line">                mknod<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">mknod</span>,</td>
      </tr>
      <tr>
        <td id="L3143" class="blob-num js-line-number" data-line-number="3143"></td>
        <td id="LC3143" class="blob-code blob-code-inner js-file-line">                rename<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">rename</span>,</td>
      </tr>
      <tr>
        <td id="L3144" class="blob-num js-line-number" data-line-number="3144"></td>
        <td id="LC3144" class="blob-code blob-code-inner js-file-line">                unlink<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">unlink</span>,</td>
      </tr>
      <tr>
        <td id="L3145" class="blob-num js-line-number" data-line-number="3145"></td>
        <td id="LC3145" class="blob-code blob-code-inner js-file-line">                rmdir<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">rmdir</span>,</td>
      </tr>
      <tr>
        <td id="L3146" class="blob-num js-line-number" data-line-number="3146"></td>
        <td id="LC3146" class="blob-code blob-code-inner js-file-line">                readdir<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">readdir</span>,</td>
      </tr>
      <tr>
        <td id="L3147" class="blob-num js-line-number" data-line-number="3147"></td>
        <td id="LC3147" class="blob-code blob-code-inner js-file-line">                symlink<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">symlink</span></td>
      </tr>
      <tr>
        <td id="L3148" class="blob-num js-line-number" data-line-number="3148"></td>
        <td id="LC3148" class="blob-code blob-code-inner js-file-line">              },</td>
      </tr>
      <tr>
        <td id="L3149" class="blob-num js-line-number" data-line-number="3149"></td>
        <td id="LC3149" class="blob-code blob-code-inner js-file-line">              stream<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3150" class="blob-num js-line-number" data-line-number="3150"></td>
        <td id="LC3150" class="blob-code blob-code-inner js-file-line">                llseek<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">llseek</span></td>
      </tr>
      <tr>
        <td id="L3151" class="blob-num js-line-number" data-line-number="3151"></td>
        <td id="LC3151" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3152" class="blob-num js-line-number" data-line-number="3152"></td>
        <td id="LC3152" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L3153" class="blob-num js-line-number" data-line-number="3153"></td>
        <td id="LC3153" class="blob-code blob-code-inner js-file-line">            file<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3154" class="blob-num js-line-number" data-line-number="3154"></td>
        <td id="LC3154" class="blob-code blob-code-inner js-file-line">              node<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3155" class="blob-num js-line-number" data-line-number="3155"></td>
        <td id="LC3155" class="blob-code blob-code-inner js-file-line">                getattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">getattr</span>,</td>
      </tr>
      <tr>
        <td id="L3156" class="blob-num js-line-number" data-line-number="3156"></td>
        <td id="LC3156" class="blob-code blob-code-inner js-file-line">                setattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span></td>
      </tr>
      <tr>
        <td id="L3157" class="blob-num js-line-number" data-line-number="3157"></td>
        <td id="LC3157" class="blob-code blob-code-inner js-file-line">              },</td>
      </tr>
      <tr>
        <td id="L3158" class="blob-num js-line-number" data-line-number="3158"></td>
        <td id="LC3158" class="blob-code blob-code-inner js-file-line">              stream<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3159" class="blob-num js-line-number" data-line-number="3159"></td>
        <td id="LC3159" class="blob-code blob-code-inner js-file-line">                llseek<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">llseek</span>,</td>
      </tr>
      <tr>
        <td id="L3160" class="blob-num js-line-number" data-line-number="3160"></td>
        <td id="LC3160" class="blob-code blob-code-inner js-file-line">                read<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">read</span>,</td>
      </tr>
      <tr>
        <td id="L3161" class="blob-num js-line-number" data-line-number="3161"></td>
        <td id="LC3161" class="blob-code blob-code-inner js-file-line">                write<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">write</span>,</td>
      </tr>
      <tr>
        <td id="L3162" class="blob-num js-line-number" data-line-number="3162"></td>
        <td id="LC3162" class="blob-code blob-code-inner js-file-line">                allocate<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">allocate</span>,</td>
      </tr>
      <tr>
        <td id="L3163" class="blob-num js-line-number" data-line-number="3163"></td>
        <td id="LC3163" class="blob-code blob-code-inner js-file-line">                mmap<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">mmap</span>,</td>
      </tr>
      <tr>
        <td id="L3164" class="blob-num js-line-number" data-line-number="3164"></td>
        <td id="LC3164" class="blob-code blob-code-inner js-file-line">                msync<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">msync</span></td>
      </tr>
      <tr>
        <td id="L3165" class="blob-num js-line-number" data-line-number="3165"></td>
        <td id="LC3165" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3166" class="blob-num js-line-number" data-line-number="3166"></td>
        <td id="LC3166" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L3167" class="blob-num js-line-number" data-line-number="3167"></td>
        <td id="LC3167" class="blob-code blob-code-inner js-file-line">            link<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3168" class="blob-num js-line-number" data-line-number="3168"></td>
        <td id="LC3168" class="blob-code blob-code-inner js-file-line">              node<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3169" class="blob-num js-line-number" data-line-number="3169"></td>
        <td id="LC3169" class="blob-code blob-code-inner js-file-line">                getattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">getattr</span>,</td>
      </tr>
      <tr>
        <td id="L3170" class="blob-num js-line-number" data-line-number="3170"></td>
        <td id="LC3170" class="blob-code blob-code-inner js-file-line">                setattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span>,</td>
      </tr>
      <tr>
        <td id="L3171" class="blob-num js-line-number" data-line-number="3171"></td>
        <td id="LC3171" class="blob-code blob-code-inner js-file-line">                readlink<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">readlink</span></td>
      </tr>
      <tr>
        <td id="L3172" class="blob-num js-line-number" data-line-number="3172"></td>
        <td id="LC3172" class="blob-code blob-code-inner js-file-line">              },</td>
      </tr>
      <tr>
        <td id="L3173" class="blob-num js-line-number" data-line-number="3173"></td>
        <td id="LC3173" class="blob-code blob-code-inner js-file-line">              stream<span class="pl-k">:</span> {}</td>
      </tr>
      <tr>
        <td id="L3174" class="blob-num js-line-number" data-line-number="3174"></td>
        <td id="LC3174" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L3175" class="blob-num js-line-number" data-line-number="3175"></td>
        <td id="LC3175" class="blob-code blob-code-inner js-file-line">            chrdev<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3176" class="blob-num js-line-number" data-line-number="3176"></td>
        <td id="LC3176" class="blob-code blob-code-inner js-file-line">              node<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L3177" class="blob-num js-line-number" data-line-number="3177"></td>
        <td id="LC3177" class="blob-code blob-code-inner js-file-line">                getattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">getattr</span>,</td>
      </tr>
      <tr>
        <td id="L3178" class="blob-num js-line-number" data-line-number="3178"></td>
        <td id="LC3178" class="blob-code blob-code-inner js-file-line">                setattr<span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span></td>
      </tr>
      <tr>
        <td id="L3179" class="blob-num js-line-number" data-line-number="3179"></td>
        <td id="LC3179" class="blob-code blob-code-inner js-file-line">              },</td>
      </tr>
      <tr>
        <td id="L3180" class="blob-num js-line-number" data-line-number="3180"></td>
        <td id="LC3180" class="blob-code blob-code-inner js-file-line">              stream<span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-smi">chrdev_stream_ops</span></td>
      </tr>
      <tr>
        <td id="L3181" class="blob-num js-line-number" data-line-number="3181"></td>
        <td id="LC3181" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3182" class="blob-num js-line-number" data-line-number="3182"></td>
        <td id="LC3182" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L3183" class="blob-num js-line-number" data-line-number="3183"></td>
        <td id="LC3183" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3184" class="blob-num js-line-number" data-line-number="3184"></td>
        <td id="LC3184" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createNode</span>(parent, name, mode, dev);</td>
      </tr>
      <tr>
        <td id="L3185" class="blob-num js-line-number" data-line-number="3185"></td>
        <td id="LC3185" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3186" class="blob-num js-line-number" data-line-number="3186"></td>
        <td id="LC3186" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-c1">dir</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3187" class="blob-num js-line-number" data-line-number="3187"></td>
        <td id="LC3187" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-c1">dir</span>.<span class="pl-smi">stream</span>;</td>
      </tr>
      <tr>
        <td id="L3188" class="blob-num js-line-number" data-line-number="3188"></td>
        <td id="LC3188" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L3189" class="blob-num js-line-number" data-line-number="3189"></td>
        <td id="LC3189" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3190" class="blob-num js-line-number" data-line-number="3190"></td>
        <td id="LC3190" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-smi">file</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3191" class="blob-num js-line-number" data-line-number="3191"></td>
        <td id="LC3191" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-smi">file</span>.<span class="pl-smi">stream</span>;</td>
      </tr>
      <tr>
        <td id="L3192" class="blob-num js-line-number" data-line-number="3192"></td>
        <td id="LC3192" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.</span></td>
      </tr>
      <tr>
        <td id="L3193" class="blob-num js-line-number" data-line-number="3193"></td>
        <td id="LC3193" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred</span></td>
      </tr>
      <tr>
        <td id="L3194" class="blob-num js-line-number" data-line-number="3194"></td>
        <td id="LC3194" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size</span></td>
      </tr>
      <tr>
        <td id="L3195" class="blob-num js-line-number" data-line-number="3195"></td>
        <td id="LC3195" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.</span></td>
      </tr>
      <tr>
        <td id="L3196" class="blob-num js-line-number" data-line-number="3196"></td>
        <td id="LC3196" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>; </td>
      </tr>
      <tr>
        <td id="L3197" class="blob-num js-line-number" data-line-number="3197"></td>
        <td id="LC3197" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3198" class="blob-num js-line-number" data-line-number="3198"></td>
        <td id="LC3198" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-c1">link</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3199" class="blob-num js-line-number" data-line-number="3199"></td>
        <td id="LC3199" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-c1">link</span>.<span class="pl-smi">stream</span>;</td>
      </tr>
      <tr>
        <td id="L3200" class="blob-num js-line-number" data-line-number="3200"></td>
        <td id="LC3200" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isChrdev</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3201" class="blob-num js-line-number" data-line-number="3201"></td>
        <td id="LC3201" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-smi">chrdev</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3202" class="blob-num js-line-number" data-line-number="3202"></td>
        <td id="LC3202" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">ops_table</span>.<span class="pl-smi">chrdev</span>.<span class="pl-smi">stream</span>;</td>
      </tr>
      <tr>
        <td id="L3203" class="blob-num js-line-number" data-line-number="3203"></td>
        <td id="LC3203" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3204" class="blob-num js-line-number" data-line-number="3204"></td>
        <td id="LC3204" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L3205" class="blob-num js-line-number" data-line-number="3205"></td>
        <td id="LC3205" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> add the new node to the parent</span></td>
      </tr>
      <tr>
        <td id="L3206" class="blob-num js-line-number" data-line-number="3206"></td>
        <td id="LC3206" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (parent) {</td>
      </tr>
      <tr>
        <td id="L3207" class="blob-num js-line-number" data-line-number="3207"></td>
        <td id="LC3207" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">parent</span>.<span class="pl-smi">contents</span>[name] <span class="pl-k">=</span> node;</td>
      </tr>
      <tr>
        <td id="L3208" class="blob-num js-line-number" data-line-number="3208"></td>
        <td id="LC3208" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3209" class="blob-num js-line-number" data-line-number="3209"></td>
        <td id="LC3209" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L3210" class="blob-num js-line-number" data-line-number="3210"></td>
        <td id="LC3210" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getFileDataAsRegularArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3211" class="blob-num js-line-number" data-line-number="3211"></td>
        <td id="LC3211" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>) {</td>
      </tr>
      <tr>
        <td id="L3212" class="blob-num js-line-number" data-line-number="3212"></td>
        <td id="LC3212" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> arr <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3213" class="blob-num js-line-number" data-line-number="3213"></td>
        <td id="LC3213" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>; <span class="pl-k">++</span>i) <span class="pl-smi">arr</span>.<span class="pl-c1">push</span>(<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>[i]);</td>
      </tr>
      <tr>
        <td id="L3214" class="blob-num js-line-number" data-line-number="3214"></td>
        <td id="LC3214" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> arr; <span class="pl-c"><span class="pl-c">//</span> Returns a copy of the original data.</span></td>
      </tr>
      <tr>
        <td id="L3215" class="blob-num js-line-number" data-line-number="3215"></td>
        <td id="LC3215" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3216" class="blob-num js-line-number" data-line-number="3216"></td>
        <td id="LC3216" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>; <span class="pl-c"><span class="pl-c">//</span> No-op, the file contents are already in a JS array. Return as-is.</span></td>
      </tr>
      <tr>
        <td id="L3217" class="blob-num js-line-number" data-line-number="3217"></td>
        <td id="LC3217" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getFileDataAsTypedArray</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3218" class="blob-num js-line-number" data-line-number="3218"></td>
        <td id="LC3218" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span>) <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>;</td>
      </tr>
      <tr>
        <td id="L3219" class="blob-num js-line-number" data-line-number="3219"></td>
        <td id="LC3219" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>) <span class="pl-k">return</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-en">subarray</span>(<span class="pl-c1">0</span>, <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>); <span class="pl-c"><span class="pl-c">//</span> Make sure to not return excess unused bytes.</span></td>
      </tr>
      <tr>
        <td id="L3220" class="blob-num js-line-number" data-line-number="3220"></td>
        <td id="LC3220" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>);</td>
      </tr>
      <tr>
        <td id="L3221" class="blob-num js-line-number" data-line-number="3221"></td>
        <td id="LC3221" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">expandFileStorage</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">newCapacity</span>) {</td>
      </tr>
      <tr>
        <td id="L3222" class="blob-num js-line-number" data-line-number="3222"></td>
        <td id="LC3222" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> prevCapacity <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">?</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span> <span class="pl-k">:</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3223" class="blob-num js-line-number" data-line-number="3223"></td>
        <td id="LC3223" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (prevCapacity <span class="pl-k">&gt;=</span> newCapacity) <span class="pl-k">return</span>; <span class="pl-c"><span class="pl-c">//</span> No need to expand, the storage was already large enough.</span></td>
      </tr>
      <tr>
        <td id="L3224" class="blob-num js-line-number" data-line-number="3224"></td>
        <td id="LC3224" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Don&#39;t expand strictly to the given requested limit if it&#39;s only a very small increase, but instead geometrically grow capacity.</span></td>
      </tr>
      <tr>
        <td id="L3225" class="blob-num js-line-number" data-line-number="3225"></td>
        <td id="LC3225" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> For small filesizes (&lt;1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to</span></td>
      </tr>
      <tr>
        <td id="L3226" class="blob-num js-line-number" data-line-number="3226"></td>
        <td id="LC3226" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> avoid overshooting the allocation cap by a very large margin.</span></td>
      </tr>
      <tr>
        <td id="L3227" class="blob-num js-line-number" data-line-number="3227"></td>
        <td id="LC3227" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> <span class="pl-c1">CAPACITY_DOUBLING_MAX</span> <span class="pl-k">=</span> <span class="pl-c1">1024</span> <span class="pl-k">*</span> <span class="pl-c1">1024</span>;</td>
      </tr>
      <tr>
        <td id="L3228" class="blob-num js-line-number" data-line-number="3228"></td>
        <td id="LC3228" class="blob-code blob-code-inner js-file-line">        newCapacity <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(newCapacity, (prevCapacity <span class="pl-k">*</span> (prevCapacity <span class="pl-k">&lt;</span> <span class="pl-c1">CAPACITY_DOUBLING_MAX</span> <span class="pl-k">?</span> <span class="pl-c1">2.0</span> <span class="pl-k">:</span> <span class="pl-c1">1.125</span>)) <span class="pl-k">|</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3229" class="blob-num js-line-number" data-line-number="3229"></td>
        <td id="LC3229" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (prevCapacity <span class="pl-k">!=</span> <span class="pl-c1">0</span>) newCapacity <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(newCapacity, <span class="pl-c1">256</span>); <span class="pl-c"><span class="pl-c">//</span> At minimum allocate 256b for each file when expanding.</span></td>
      </tr>
      <tr>
        <td id="L3230" class="blob-num js-line-number" data-line-number="3230"></td>
        <td id="LC3230" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> oldContents <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L3231" class="blob-num js-line-number" data-line-number="3231"></td>
        <td id="LC3231" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(newCapacity); <span class="pl-c"><span class="pl-c">//</span> Allocate new storage.</span></td>
      </tr>
      <tr>
        <td id="L3232" class="blob-num js-line-number" data-line-number="3232"></td>
        <td id="LC3232" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">set</span>(<span class="pl-smi">oldContents</span>.<span class="pl-en">subarray</span>(<span class="pl-c1">0</span>, <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>), <span class="pl-c1">0</span>); <span class="pl-c"><span class="pl-c">//</span> Copy old data over to the new storage.</span></td>
      </tr>
      <tr>
        <td id="L3233" class="blob-num js-line-number" data-line-number="3233"></td>
        <td id="LC3233" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L3234" class="blob-num js-line-number" data-line-number="3234"></td>
        <td id="LC3234" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">resizeFileStorage</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">newSize</span>) {</td>
      </tr>
      <tr>
        <td id="L3235" class="blob-num js-line-number" data-line-number="3235"></td>
        <td id="LC3235" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">==</span> newSize) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L3236" class="blob-num js-line-number" data-line-number="3236"></td>
        <td id="LC3236" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (newSize <span class="pl-k">==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3237" class="blob-num js-line-number" data-line-number="3237"></td>
        <td id="LC3237" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>; <span class="pl-c"><span class="pl-c">//</span> Fully decommit when requesting a resize to zero.</span></td>
      </tr>
      <tr>
        <td id="L3238" class="blob-num js-line-number" data-line-number="3238"></td>
        <td id="LC3238" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3239" class="blob-num js-line-number" data-line-number="3239"></td>
        <td id="LC3239" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L3240" class="blob-num js-line-number" data-line-number="3240"></td>
        <td id="LC3240" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3241" class="blob-num js-line-number" data-line-number="3241"></td>
        <td id="LC3241" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">||</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>) { <span class="pl-c"><span class="pl-c">//</span> Resize a typed array if that is being used as the backing store.</span></td>
      </tr>
      <tr>
        <td id="L3242" class="blob-num js-line-number" data-line-number="3242"></td>
        <td id="LC3242" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> oldContents <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L3243" class="blob-num js-line-number" data-line-number="3243"></td>
        <td id="LC3243" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-k">new</span> <span class="pl-en">ArrayBuffer</span>(newSize)); <span class="pl-c"><span class="pl-c">//</span> Allocate new storage.</span></td>
      </tr>
      <tr>
        <td id="L3244" class="blob-num js-line-number" data-line-number="3244"></td>
        <td id="LC3244" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (oldContents) {</td>
      </tr>
      <tr>
        <td id="L3245" class="blob-num js-line-number" data-line-number="3245"></td>
        <td id="LC3245" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">set</span>(<span class="pl-smi">oldContents</span>.<span class="pl-en">subarray</span>(<span class="pl-c1">0</span>, <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(newSize, <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>))); <span class="pl-c"><span class="pl-c">//</span> Copy old data over to the new storage.</span></td>
      </tr>
      <tr>
        <td id="L3246" class="blob-num js-line-number" data-line-number="3246"></td>
        <td id="LC3246" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3247" class="blob-num js-line-number" data-line-number="3247"></td>
        <td id="LC3247" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> newSize;</td>
      </tr>
      <tr>
        <td id="L3248" class="blob-num js-line-number" data-line-number="3248"></td>
        <td id="LC3248" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L3249" class="blob-num js-line-number" data-line-number="3249"></td>
        <td id="LC3249" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3250" class="blob-num js-line-number" data-line-number="3250"></td>
        <td id="LC3250" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Backing with a JS array.</span></td>
      </tr>
      <tr>
        <td id="L3251" class="blob-num js-line-number" data-line-number="3251"></td>
        <td id="LC3251" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span>) <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3252" class="blob-num js-line-number" data-line-number="3252"></td>
        <td id="LC3252" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> newSize) <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span> <span class="pl-k">=</span> newSize;</td>
      </tr>
      <tr>
        <td id="L3253" class="blob-num js-line-number" data-line-number="3253"></td>
        <td id="LC3253" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">else</span> <span class="pl-k">while</span> (<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span> <span class="pl-k">&lt;</span> newSize) <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">push</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3254" class="blob-num js-line-number" data-line-number="3254"></td>
        <td id="LC3254" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> newSize;</td>
      </tr>
      <tr>
        <td id="L3255" class="blob-num js-line-number" data-line-number="3255"></td>
        <td id="LC3255" class="blob-code blob-code-inner js-file-line">      },node_ops<span class="pl-k">:</span>{<span class="pl-en">getattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3256" class="blob-num js-line-number" data-line-number="3256"></td>
        <td id="LC3256" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> attr <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L3257" class="blob-num js-line-number" data-line-number="3257"></td>
        <td id="LC3257" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> device numbers reuse inode numbers.</span></td>
      </tr>
      <tr>
        <td id="L3258" class="blob-num js-line-number" data-line-number="3258"></td>
        <td id="LC3258" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">dev</span> <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">isChrdev</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>) <span class="pl-k">?</span> <span class="pl-smi">node</span>.<span class="pl-c1">id</span> <span class="pl-k">:</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L3259" class="blob-num js-line-number" data-line-number="3259"></td>
        <td id="LC3259" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">ino</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-c1">id</span>;</td>
      </tr>
      <tr>
        <td id="L3260" class="blob-num js-line-number" data-line-number="3260"></td>
        <td id="LC3260" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L3261" class="blob-num js-line-number" data-line-number="3261"></td>
        <td id="LC3261" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">nlink</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L3262" class="blob-num js-line-number" data-line-number="3262"></td>
        <td id="LC3262" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">uid</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3263" class="blob-num js-line-number" data-line-number="3263"></td>
        <td id="LC3263" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">gid</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3264" class="blob-num js-line-number" data-line-number="3264"></td>
        <td id="LC3264" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">rdev</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">rdev</span>;</td>
      </tr>
      <tr>
        <td id="L3265" class="blob-num js-line-number" data-line-number="3265"></td>
        <td id="LC3265" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3266" class="blob-num js-line-number" data-line-number="3266"></td>
        <td id="LC3266" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L3267" class="blob-num js-line-number" data-line-number="3267"></td>
        <td id="LC3267" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3268" class="blob-num js-line-number" data-line-number="3268"></td>
        <td id="LC3268" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>;</td>
      </tr>
      <tr>
        <td id="L3269" class="blob-num js-line-number" data-line-number="3269"></td>
        <td id="LC3269" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3270" class="blob-num js-line-number" data-line-number="3270"></td>
        <td id="LC3270" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-c1">link</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L3271" class="blob-num js-line-number" data-line-number="3271"></td>
        <td id="LC3271" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3272" class="blob-num js-line-number" data-line-number="3272"></td>
        <td id="LC3272" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3273" class="blob-num js-line-number" data-line-number="3273"></td>
        <td id="LC3273" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3274" class="blob-num js-line-number" data-line-number="3274"></td>
        <td id="LC3274" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">atime</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>);</td>
      </tr>
      <tr>
        <td id="L3275" class="blob-num js-line-number" data-line-number="3275"></td>
        <td id="LC3275" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">mtime</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>);</td>
      </tr>
      <tr>
        <td id="L3276" class="blob-num js-line-number" data-line-number="3276"></td>
        <td id="LC3276" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">ctime</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>);</td>
      </tr>
      <tr>
        <td id="L3277" class="blob-num js-line-number" data-line-number="3277"></td>
        <td id="LC3277" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),</span></td>
      </tr>
      <tr>
        <td id="L3278" class="blob-num js-line-number" data-line-number="3278"></td>
        <td id="LC3278" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span>       but this is not required by the standard.</span></td>
      </tr>
      <tr>
        <td id="L3279" class="blob-num js-line-number" data-line-number="3279"></td>
        <td id="LC3279" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">blksize</span> <span class="pl-k">=</span> <span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L3280" class="blob-num js-line-number" data-line-number="3280"></td>
        <td id="LC3280" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">attr</span>.<span class="pl-smi">blocks</span> <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">/</span> <span class="pl-smi">attr</span>.<span class="pl-smi">blksize</span>);</td>
      </tr>
      <tr>
        <td id="L3281" class="blob-num js-line-number" data-line-number="3281"></td>
        <td id="LC3281" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> attr;</td>
      </tr>
      <tr>
        <td id="L3282" class="blob-num js-line-number" data-line-number="3282"></td>
        <td id="LC3282" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">setattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">attr</span>) {</td>
      </tr>
      <tr>
        <td id="L3283" class="blob-num js-line-number" data-line-number="3283"></td>
        <td id="LC3283" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">mode</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3284" class="blob-num js-line-number" data-line-number="3284"></td>
        <td id="LC3284" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> <span class="pl-smi">attr</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L3285" class="blob-num js-line-number" data-line-number="3285"></td>
        <td id="LC3285" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3286" class="blob-num js-line-number" data-line-number="3286"></td>
        <td id="LC3286" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3287" class="blob-num js-line-number" data-line-number="3287"></td>
        <td id="LC3287" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span>;</td>
      </tr>
      <tr>
        <td id="L3288" class="blob-num js-line-number" data-line-number="3288"></td>
        <td id="LC3288" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3289" class="blob-num js-line-number" data-line-number="3289"></td>
        <td id="LC3289" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3290" class="blob-num js-line-number" data-line-number="3290"></td>
        <td id="LC3290" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">MEMFS</span>.<span class="pl-en">resizeFileStorage</span>(node, <span class="pl-smi">attr</span>.<span class="pl-c1">size</span>);</td>
      </tr>
      <tr>
        <td id="L3291" class="blob-num js-line-number" data-line-number="3291"></td>
        <td id="LC3291" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3292" class="blob-num js-line-number" data-line-number="3292"></td>
        <td id="LC3292" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">lookup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3293" class="blob-num js-line-number" data-line-number="3293"></td>
        <td id="LC3293" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-c1">FS</span>.<span class="pl-smi">genericErrors</span>[<span class="pl-c1">2</span>];</td>
      </tr>
      <tr>
        <td id="L3294" class="blob-num js-line-number" data-line-number="3294"></td>
        <td id="LC3294" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">mknod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L3295" class="blob-num js-line-number" data-line-number="3295"></td>
        <td id="LC3295" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">MEMFS</span>.<span class="pl-en">createNode</span>(parent, name, mode, dev);</td>
      </tr>
      <tr>
        <td id="L3296" class="blob-num js-line-number" data-line-number="3296"></td>
        <td id="LC3296" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rename</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">old_node</span>, <span class="pl-smi">new_dir</span>, <span class="pl-smi">new_name</span>) {</td>
      </tr>
      <tr>
        <td id="L3297" class="blob-num js-line-number" data-line-number="3297"></td>
        <td id="LC3297" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> if we&#39;re overwriting a directory at new_name, make sure it&#39;s empty.</span></td>
      </tr>
      <tr>
        <td id="L3298" class="blob-num js-line-number" data-line-number="3298"></td>
        <td id="LC3298" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">old_node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3299" class="blob-num js-line-number" data-line-number="3299"></td>
        <td id="LC3299" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> new_node;</td>
      </tr>
      <tr>
        <td id="L3300" class="blob-num js-line-number" data-line-number="3300"></td>
        <td id="LC3300" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3301" class="blob-num js-line-number" data-line-number="3301"></td>
        <td id="LC3301" class="blob-code blob-code-inner js-file-line">              new_node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(new_dir, new_name);</td>
      </tr>
      <tr>
        <td id="L3302" class="blob-num js-line-number" data-line-number="3302"></td>
        <td id="LC3302" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3303" class="blob-num js-line-number" data-line-number="3303"></td>
        <td id="LC3303" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3304" class="blob-num js-line-number" data-line-number="3304"></td>
        <td id="LC3304" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (new_node) {</td>
      </tr>
      <tr>
        <td id="L3305" class="blob-num js-line-number" data-line-number="3305"></td>
        <td id="LC3305" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">in</span> <span class="pl-smi">new_node</span>.<span class="pl-smi">contents</span>) {</td>
      </tr>
      <tr>
        <td id="L3306" class="blob-num js-line-number" data-line-number="3306"></td>
        <td id="LC3306" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">39</span>);</td>
      </tr>
      <tr>
        <td id="L3307" class="blob-num js-line-number" data-line-number="3307"></td>
        <td id="LC3307" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3308" class="blob-num js-line-number" data-line-number="3308"></td>
        <td id="LC3308" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3309" class="blob-num js-line-number" data-line-number="3309"></td>
        <td id="LC3309" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3310" class="blob-num js-line-number" data-line-number="3310"></td>
        <td id="LC3310" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> do the internal rewiring</span></td>
      </tr>
      <tr>
        <td id="L3311" class="blob-num js-line-number" data-line-number="3311"></td>
        <td id="LC3311" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">delete</span> <span class="pl-smi">old_node</span>.<span class="pl-c1">parent</span>.<span class="pl-smi">contents</span>[<span class="pl-smi">old_node</span>.<span class="pl-c1">name</span>];</td>
      </tr>
      <tr>
        <td id="L3312" class="blob-num js-line-number" data-line-number="3312"></td>
        <td id="LC3312" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">old_node</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> new_name;</td>
      </tr>
      <tr>
        <td id="L3313" class="blob-num js-line-number" data-line-number="3313"></td>
        <td id="LC3313" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">new_dir</span>.<span class="pl-smi">contents</span>[new_name] <span class="pl-k">=</span> old_node;</td>
      </tr>
      <tr>
        <td id="L3314" class="blob-num js-line-number" data-line-number="3314"></td>
        <td id="LC3314" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">old_node</span>.<span class="pl-c1">parent</span> <span class="pl-k">=</span> new_dir;</td>
      </tr>
      <tr>
        <td id="L3315" class="blob-num js-line-number" data-line-number="3315"></td>
        <td id="LC3315" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">unlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3316" class="blob-num js-line-number" data-line-number="3316"></td>
        <td id="LC3316" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">delete</span> <span class="pl-smi">parent</span>.<span class="pl-smi">contents</span>[name];</td>
      </tr>
      <tr>
        <td id="L3317" class="blob-num js-line-number" data-line-number="3317"></td>
        <td id="LC3317" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rmdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3318" class="blob-num js-line-number" data-line-number="3318"></td>
        <td id="LC3318" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L3319" class="blob-num js-line-number" data-line-number="3319"></td>
        <td id="LC3319" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">in</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>) {</td>
      </tr>
      <tr>
        <td id="L3320" class="blob-num js-line-number" data-line-number="3320"></td>
        <td id="LC3320" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">39</span>);</td>
      </tr>
      <tr>
        <td id="L3321" class="blob-num js-line-number" data-line-number="3321"></td>
        <td id="LC3321" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3322" class="blob-num js-line-number" data-line-number="3322"></td>
        <td id="LC3322" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">delete</span> <span class="pl-smi">parent</span>.<span class="pl-smi">contents</span>[name];</td>
      </tr>
      <tr>
        <td id="L3323" class="blob-num js-line-number" data-line-number="3323"></td>
        <td id="LC3323" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3324" class="blob-num js-line-number" data-line-number="3324"></td>
        <td id="LC3324" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> entries <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L3325" class="blob-num js-line-number" data-line-number="3325"></td>
        <td id="LC3325" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>) {</td>
      </tr>
      <tr>
        <td id="L3326" class="blob-num js-line-number" data-line-number="3326"></td>
        <td id="LC3326" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-en">hasOwnProperty</span>(key)) {</td>
      </tr>
      <tr>
        <td id="L3327" class="blob-num js-line-number" data-line-number="3327"></td>
        <td id="LC3327" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L3328" class="blob-num js-line-number" data-line-number="3328"></td>
        <td id="LC3328" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3329" class="blob-num js-line-number" data-line-number="3329"></td>
        <td id="LC3329" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">entries</span>.<span class="pl-c1">push</span>(key);</td>
      </tr>
      <tr>
        <td id="L3330" class="blob-num js-line-number" data-line-number="3330"></td>
        <td id="LC3330" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3331" class="blob-num js-line-number" data-line-number="3331"></td>
        <td id="LC3331" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> entries;</td>
      </tr>
      <tr>
        <td id="L3332" class="blob-num js-line-number" data-line-number="3332"></td>
        <td id="LC3332" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">symlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">newname</span>, <span class="pl-smi">oldpath</span>) {</td>
      </tr>
      <tr>
        <td id="L3333" class="blob-num js-line-number" data-line-number="3333"></td>
        <td id="LC3333" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-en">createNode</span>(parent, newname, <span class="pl-c1">511</span> <span class="pl-c"><span class="pl-c">/*</span> 0777 <span class="pl-c">*/</span></span> <span class="pl-k">|</span> <span class="pl-c1">40960</span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3334" class="blob-num js-line-number" data-line-number="3334"></td>
        <td id="LC3334" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-c1">link</span> <span class="pl-k">=</span> oldpath;</td>
      </tr>
      <tr>
        <td id="L3335" class="blob-num js-line-number" data-line-number="3335"></td>
        <td id="LC3335" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L3336" class="blob-num js-line-number" data-line-number="3336"></td>
        <td id="LC3336" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3337" class="blob-num js-line-number" data-line-number="3337"></td>
        <td id="LC3337" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3338" class="blob-num js-line-number" data-line-number="3338"></td>
        <td id="LC3338" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L3339" class="blob-num js-line-number" data-line-number="3339"></td>
        <td id="LC3339" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3340" class="blob-num js-line-number" data-line-number="3340"></td>
        <td id="LC3340" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">node</span>.<span class="pl-c1">link</span>;</td>
      </tr>
      <tr>
        <td id="L3341" class="blob-num js-line-number" data-line-number="3341"></td>
        <td id="LC3341" class="blob-code blob-code-inner js-file-line">        }},stream_ops<span class="pl-k">:</span>{<span class="pl-en">read</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L3342" class="blob-num js-line-number" data-line-number="3342"></td>
        <td id="LC3342" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> contents <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L3343" class="blob-num js-line-number" data-line-number="3343"></td>
        <td id="LC3343" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&gt;=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3344" class="blob-num js-line-number" data-line-number="3344"></td>
        <td id="LC3344" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> size <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">-</span> position, length);</td>
      </tr>
      <tr>
        <td id="L3345" class="blob-num js-line-number" data-line-number="3345"></td>
        <td id="LC3345" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">assert</span>(size <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3346" class="blob-num js-line-number" data-line-number="3346"></td>
        <td id="LC3346" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (size <span class="pl-k">&gt;</span> <span class="pl-c1">8</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>) { <span class="pl-c"><span class="pl-c">//</span> non-trivial, and typed array</span></td>
      </tr>
      <tr>
        <td id="L3347" class="blob-num js-line-number" data-line-number="3347"></td>
        <td id="LC3347" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">buffer</span>.<span class="pl-c1">set</span>(<span class="pl-smi">contents</span>.<span class="pl-en">subarray</span>(position, position <span class="pl-k">+</span> size), offset);</td>
      </tr>
      <tr>
        <td id="L3348" class="blob-num js-line-number" data-line-number="3348"></td>
        <td id="LC3348" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3349" class="blob-num js-line-number" data-line-number="3349"></td>
        <td id="LC3349" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> size; i<span class="pl-k">++</span>) buffer[offset <span class="pl-k">+</span> i] <span class="pl-k">=</span> contents[position <span class="pl-k">+</span> i];</td>
      </tr>
      <tr>
        <td id="L3350" class="blob-num js-line-number" data-line-number="3350"></td>
        <td id="LC3350" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3351" class="blob-num js-line-number" data-line-number="3351"></td>
        <td id="LC3351" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> size;</td>
      </tr>
      <tr>
        <td id="L3352" class="blob-num js-line-number" data-line-number="3352"></td>
        <td id="LC3352" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">write</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>, <span class="pl-smi">canOwn</span>) {</td>
      </tr>
      <tr>
        <td id="L3353" class="blob-num js-line-number" data-line-number="3353"></td>
        <td id="LC3353" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> If memory can grow, we don&#39;t want to hold on to references of</span></td>
      </tr>
      <tr>
        <td id="L3354" class="blob-num js-line-number" data-line-number="3354"></td>
        <td id="LC3354" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> the memory Buffer, as they may get invalidated. That means</span></td>
      </tr>
      <tr>
        <td id="L3355" class="blob-num js-line-number" data-line-number="3355"></td>
        <td id="LC3355" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> we need to do a copy here.</span></td>
      </tr>
      <tr>
        <td id="L3356" class="blob-num js-line-number" data-line-number="3356"></td>
        <td id="LC3356" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> FIXME: this is inefficient as the file packager may have</span></td>
      </tr>
      <tr>
        <td id="L3357" class="blob-num js-line-number" data-line-number="3357"></td>
        <td id="LC3357" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span>        copied the data into memory already - we may want to</span></td>
      </tr>
      <tr>
        <td id="L3358" class="blob-num js-line-number" data-line-number="3358"></td>
        <td id="LC3358" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span>        integrate more there and let the file packager loading</span></td>
      </tr>
      <tr>
        <td id="L3359" class="blob-num js-line-number" data-line-number="3359"></td>
        <td id="LC3359" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span>        code be able to query if memory growth is on or off.</span></td>
      </tr>
      <tr>
        <td id="L3360" class="blob-num js-line-number" data-line-number="3360"></td>
        <td id="LC3360" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (canOwn) {</td>
      </tr>
      <tr>
        <td id="L3361" class="blob-num js-line-number" data-line-number="3361"></td>
        <td id="LC3361" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3362" class="blob-num js-line-number" data-line-number="3362"></td>
        <td id="LC3362" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3363" class="blob-num js-line-number" data-line-number="3363"></td>
        <td id="LC3363" class="blob-code blob-code-inner js-file-line">          canOwn <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3364" class="blob-num js-line-number" data-line-number="3364"></td>
        <td id="LC3364" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3365" class="blob-num js-line-number" data-line-number="3365"></td>
        <td id="LC3365" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>length) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3366" class="blob-num js-line-number" data-line-number="3366"></td>
        <td id="LC3366" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3367" class="blob-num js-line-number" data-line-number="3367"></td>
        <td id="LC3367" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L3368" class="blob-num js-line-number" data-line-number="3368"></td>
        <td id="LC3368" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3369" class="blob-num js-line-number" data-line-number="3369"></td>
        <td id="LC3369" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">buffer</span>.<span class="pl-smi">subarray</span> <span class="pl-k">&amp;&amp;</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">||</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>)) { <span class="pl-c"><span class="pl-c">//</span> This write is from a typed array to a typed array?</span></td>
      </tr>
      <tr>
        <td id="L3370" class="blob-num js-line-number" data-line-number="3370"></td>
        <td id="LC3370" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (canOwn) {</td>
      </tr>
      <tr>
        <td id="L3371" class="blob-num js-line-number" data-line-number="3371"></td>
        <td id="LC3371" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">assert</span>(position <span class="pl-k">===</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>canOwn must imply no weird position inside the file<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3372" class="blob-num js-line-number" data-line-number="3372"></td>
        <td id="LC3372" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-smi">buffer</span>.<span class="pl-en">subarray</span>(offset, offset <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L3373" class="blob-num js-line-number" data-line-number="3373"></td>
        <td id="LC3373" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> length;</td>
      </tr>
      <tr>
        <td id="L3374" class="blob-num js-line-number" data-line-number="3374"></td>
        <td id="LC3374" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> length;</td>
      </tr>
      <tr>
        <td id="L3375" class="blob-num js-line-number" data-line-number="3375"></td>
        <td id="LC3375" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">===</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> position <span class="pl-k">===</span> <span class="pl-c1">0</span>) { <span class="pl-c"><span class="pl-c">//</span> If this is a simple first write to an empty file, do a fast set since we don&#39;t need to care about old data.</span></td>
      </tr>
      <tr>
        <td id="L3376" class="blob-num js-line-number" data-line-number="3376"></td>
        <td id="LC3376" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-smi">buffer</span>.<span class="pl-en">subarray</span>(offset, offset <span class="pl-k">+</span> length));</td>
      </tr>
      <tr>
        <td id="L3377" class="blob-num js-line-number" data-line-number="3377"></td>
        <td id="LC3377" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> length;</td>
      </tr>
      <tr>
        <td id="L3378" class="blob-num js-line-number" data-line-number="3378"></td>
        <td id="LC3378" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> length;</td>
      </tr>
      <tr>
        <td id="L3379" class="blob-num js-line-number" data-line-number="3379"></td>
        <td id="LC3379" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (position <span class="pl-k">+</span> length <span class="pl-k">&lt;=</span> <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>) { <span class="pl-c"><span class="pl-c">//</span> Writing to an already allocated and used subrange of the file?</span></td>
      </tr>
      <tr>
        <td id="L3380" class="blob-num js-line-number" data-line-number="3380"></td>
        <td id="LC3380" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">set</span>(<span class="pl-smi">buffer</span>.<span class="pl-en">subarray</span>(offset, offset <span class="pl-k">+</span> length), position);</td>
      </tr>
      <tr>
        <td id="L3381" class="blob-num js-line-number" data-line-number="3381"></td>
        <td id="LC3381" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> length;</td>
      </tr>
      <tr>
        <td id="L3382" class="blob-num js-line-number" data-line-number="3382"></td>
        <td id="LC3382" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3383" class="blob-num js-line-number" data-line-number="3383"></td>
        <td id="LC3383" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3384" class="blob-num js-line-number" data-line-number="3384"></td>
        <td id="LC3384" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3385" class="blob-num js-line-number" data-line-number="3385"></td>
        <td id="LC3385" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Appending to an existing file and we need to reallocate, or source data did not come as a typed array.</span></td>
      </tr>
      <tr>
        <td id="L3386" class="blob-num js-line-number" data-line-number="3386"></td>
        <td id="LC3386" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">MEMFS</span>.<span class="pl-en">expandFileStorage</span>(node, position<span class="pl-k">+</span>length);</td>
      </tr>
      <tr>
        <td id="L3387" class="blob-num js-line-number" data-line-number="3387"></td>
        <td id="LC3387" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">buffer</span>.<span class="pl-smi">subarray</span>) <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">set</span>(<span class="pl-smi">buffer</span>.<span class="pl-en">subarray</span>(offset, offset <span class="pl-k">+</span> length), position); <span class="pl-c"><span class="pl-c">//</span> Use typed array write if available.</span></td>
      </tr>
      <tr>
        <td id="L3388" class="blob-num js-line-number" data-line-number="3388"></td>
        <td id="LC3388" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3389" class="blob-num js-line-number" data-line-number="3389"></td>
        <td id="LC3389" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L3390" class="blob-num js-line-number" data-line-number="3390"></td>
        <td id="LC3390" class="blob-code blob-code-inner js-file-line">             <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>[position <span class="pl-k">+</span> i] <span class="pl-k">=</span> buffer[offset <span class="pl-k">+</span> i]; <span class="pl-c"><span class="pl-c">//</span> Or fall back to manual write if not.</span></td>
      </tr>
      <tr>
        <td id="L3391" class="blob-num js-line-number" data-line-number="3391"></td>
        <td id="LC3391" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3392" class="blob-num js-line-number" data-line-number="3392"></td>
        <td id="LC3392" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3393" class="blob-num js-line-number" data-line-number="3393"></td>
        <td id="LC3393" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>, position<span class="pl-k">+</span>length);</td>
      </tr>
      <tr>
        <td id="L3394" class="blob-num js-line-number" data-line-number="3394"></td>
        <td id="LC3394" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> length;</td>
      </tr>
      <tr>
        <td id="L3395" class="blob-num js-line-number" data-line-number="3395"></td>
        <td id="LC3395" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">llseek</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">whence</span>) {</td>
      </tr>
      <tr>
        <td id="L3396" class="blob-num js-line-number" data-line-number="3396"></td>
        <td id="LC3396" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> position <span class="pl-k">=</span> offset;</td>
      </tr>
      <tr>
        <td id="L3397" class="blob-num js-line-number" data-line-number="3397"></td>
        <td id="LC3397" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">1</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_CUR.</span></td>
      </tr>
      <tr>
        <td id="L3398" class="blob-num js-line-number" data-line-number="3398"></td>
        <td id="LC3398" class="blob-code blob-code-inner js-file-line">            position <span class="pl-k">+=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L3399" class="blob-num js-line-number" data-line-number="3399"></td>
        <td id="LC3399" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">2</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_END.</span></td>
      </tr>
      <tr>
        <td id="L3400" class="blob-num js-line-number" data-line-number="3400"></td>
        <td id="LC3400" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3401" class="blob-num js-line-number" data-line-number="3401"></td>
        <td id="LC3401" class="blob-code blob-code-inner js-file-line">              position <span class="pl-k">+=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>;</td>
      </tr>
      <tr>
        <td id="L3402" class="blob-num js-line-number" data-line-number="3402"></td>
        <td id="LC3402" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3403" class="blob-num js-line-number" data-line-number="3403"></td>
        <td id="LC3403" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3404" class="blob-num js-line-number" data-line-number="3404"></td>
        <td id="LC3404" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3405" class="blob-num js-line-number" data-line-number="3405"></td>
        <td id="LC3405" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L3406" class="blob-num js-line-number" data-line-number="3406"></td>
        <td id="LC3406" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3407" class="blob-num js-line-number" data-line-number="3407"></td>
        <td id="LC3407" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> position;</td>
      </tr>
      <tr>
        <td id="L3408" class="blob-num js-line-number" data-line-number="3408"></td>
        <td id="LC3408" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">allocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>) {</td>
      </tr>
      <tr>
        <td id="L3409" class="blob-num js-line-number" data-line-number="3409"></td>
        <td id="LC3409" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">MEMFS</span>.<span class="pl-en">expandFileStorage</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>, offset <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L3410" class="blob-num js-line-number" data-line-number="3410"></td>
        <td id="LC3410" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>, offset <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L3411" class="blob-num js-line-number" data-line-number="3411"></td>
        <td id="LC3411" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">mmap</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>, <span class="pl-smi">prot</span>, <span class="pl-smi">flags</span>) {</td>
      </tr>
      <tr>
        <td id="L3412" class="blob-num js-line-number" data-line-number="3412"></td>
        <td id="LC3412" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3413" class="blob-num js-line-number" data-line-number="3413"></td>
        <td id="LC3413" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">19</span>);</td>
      </tr>
      <tr>
        <td id="L3414" class="blob-num js-line-number" data-line-number="3414"></td>
        <td id="LC3414" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3415" class="blob-num js-line-number" data-line-number="3415"></td>
        <td id="LC3415" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ptr;</td>
      </tr>
      <tr>
        <td id="L3416" class="blob-num js-line-number" data-line-number="3416"></td>
        <td id="LC3416" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> allocated;</td>
      </tr>
      <tr>
        <td id="L3417" class="blob-num js-line-number" data-line-number="3417"></td>
        <td id="LC3417" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> contents <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L3418" class="blob-num js-line-number" data-line-number="3418"></td>
        <td id="LC3418" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Only make a new copy when MAP_PRIVATE is specified.</span></td>
      </tr>
      <tr>
        <td id="L3419" class="blob-num js-line-number" data-line-number="3419"></td>
        <td id="LC3419" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> ( <span class="pl-k">!</span>(flags <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>) <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L3420" class="blob-num js-line-number" data-line-number="3420"></td>
        <td id="LC3420" class="blob-code blob-code-inner js-file-line">                (<span class="pl-smi">contents</span>.<span class="pl-smi">buffer</span> <span class="pl-k">===</span> buffer <span class="pl-k">||</span> <span class="pl-smi">contents</span>.<span class="pl-smi">buffer</span> <span class="pl-k">===</span> <span class="pl-smi">buffer</span>.<span class="pl-smi">buffer</span>) ) {</td>
      </tr>
      <tr>
        <td id="L3421" class="blob-num js-line-number" data-line-number="3421"></td>
        <td id="LC3421" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> We can&#39;t emulate MAP_SHARED when the file is not backed by the buffer</span></td>
      </tr>
      <tr>
        <td id="L3422" class="blob-num js-line-number" data-line-number="3422"></td>
        <td id="LC3422" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> we&#39;re mapping to (e.g. the HEAP buffer).</span></td>
      </tr>
      <tr>
        <td id="L3423" class="blob-num js-line-number" data-line-number="3423"></td>
        <td id="LC3423" class="blob-code blob-code-inner js-file-line">            allocated <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3424" class="blob-num js-line-number" data-line-number="3424"></td>
        <td id="LC3424" class="blob-code blob-code-inner js-file-line">            ptr <span class="pl-k">=</span> <span class="pl-smi">contents</span>.<span class="pl-smi">byteOffset</span>;</td>
      </tr>
      <tr>
        <td id="L3425" class="blob-num js-line-number" data-line-number="3425"></td>
        <td id="LC3425" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3426" class="blob-num js-line-number" data-line-number="3426"></td>
        <td id="LC3426" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Try to avoid unnecessary slices.</span></td>
      </tr>
      <tr>
        <td id="L3427" class="blob-num js-line-number" data-line-number="3427"></td>
        <td id="LC3427" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (position <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> position <span class="pl-k">+</span> length <span class="pl-k">&lt;</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">usedBytes</span>) {</td>
      </tr>
      <tr>
        <td id="L3428" class="blob-num js-line-number" data-line-number="3428"></td>
        <td id="LC3428" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (<span class="pl-smi">contents</span>.<span class="pl-smi">subarray</span>) {</td>
      </tr>
      <tr>
        <td id="L3429" class="blob-num js-line-number" data-line-number="3429"></td>
        <td id="LC3429" class="blob-code blob-code-inner js-file-line">                contents <span class="pl-k">=</span> <span class="pl-smi">contents</span>.<span class="pl-en">subarray</span>(position, position <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L3430" class="blob-num js-line-number" data-line-number="3430"></td>
        <td id="LC3430" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3431" class="blob-num js-line-number" data-line-number="3431"></td>
        <td id="LC3431" class="blob-code blob-code-inner js-file-line">                contents <span class="pl-k">=</span> <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>(contents, position, position <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L3432" class="blob-num js-line-number" data-line-number="3432"></td>
        <td id="LC3432" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3433" class="blob-num js-line-number" data-line-number="3433"></td>
        <td id="LC3433" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3434" class="blob-num js-line-number" data-line-number="3434"></td>
        <td id="LC3434" class="blob-code blob-code-inner js-file-line">            allocated <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3435" class="blob-num js-line-number" data-line-number="3435"></td>
        <td id="LC3435" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> malloc() can lead to growing the heap. If targeting the heap, we need to</span></td>
      </tr>
      <tr>
        <td id="L3436" class="blob-num js-line-number" data-line-number="3436"></td>
        <td id="LC3436" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> re-acquire the heap buffer object in case growth had occurred.</span></td>
      </tr>
      <tr>
        <td id="L3437" class="blob-num js-line-number" data-line-number="3437"></td>
        <td id="LC3437" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> fromHeap <span class="pl-k">=</span> (<span class="pl-smi">buffer</span>.<span class="pl-smi">buffer</span> <span class="pl-k">==</span> <span class="pl-c1">HEAP8</span>.<span class="pl-smi">buffer</span>);</td>
      </tr>
      <tr>
        <td id="L3438" class="blob-num js-line-number" data-line-number="3438"></td>
        <td id="LC3438" class="blob-code blob-code-inner js-file-line">            ptr <span class="pl-k">=</span> <span class="pl-en">_malloc</span>(length);</td>
      </tr>
      <tr>
        <td id="L3439" class="blob-num js-line-number" data-line-number="3439"></td>
        <td id="LC3439" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>ptr) {</td>
      </tr>
      <tr>
        <td id="L3440" class="blob-num js-line-number" data-line-number="3440"></td>
        <td id="LC3440" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">12</span>);</td>
      </tr>
      <tr>
        <td id="L3441" class="blob-num js-line-number" data-line-number="3441"></td>
        <td id="LC3441" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3442" class="blob-num js-line-number" data-line-number="3442"></td>
        <td id="LC3442" class="blob-code blob-code-inner js-file-line">            (fromHeap <span class="pl-k">?</span> <span class="pl-c1">HEAP8</span> <span class="pl-k">:</span> buffer).<span class="pl-c1">set</span>(contents, ptr);</td>
      </tr>
      <tr>
        <td id="L3443" class="blob-num js-line-number" data-line-number="3443"></td>
        <td id="LC3443" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3444" class="blob-num js-line-number" data-line-number="3444"></td>
        <td id="LC3444" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> { ptr<span class="pl-k">:</span> ptr, allocated<span class="pl-k">:</span> allocated };</td>
      </tr>
      <tr>
        <td id="L3445" class="blob-num js-line-number" data-line-number="3445"></td>
        <td id="LC3445" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">msync</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">mmapFlags</span>) {</td>
      </tr>
      <tr>
        <td id="L3446" class="blob-num js-line-number" data-line-number="3446"></td>
        <td id="LC3446" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3447" class="blob-num js-line-number" data-line-number="3447"></td>
        <td id="LC3447" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">19</span>);</td>
      </tr>
      <tr>
        <td id="L3448" class="blob-num js-line-number" data-line-number="3448"></td>
        <td id="LC3448" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3449" class="blob-num js-line-number" data-line-number="3449"></td>
        <td id="LC3449" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (mmapFlags <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>) {</td>
      </tr>
      <tr>
        <td id="L3450" class="blob-num js-line-number" data-line-number="3450"></td>
        <td id="LC3450" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> MAP_PRIVATE calls need not to be synced back to underlying fs</span></td>
      </tr>
      <tr>
        <td id="L3451" class="blob-num js-line-number" data-line-number="3451"></td>
        <td id="LC3451" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3452" class="blob-num js-line-number" data-line-number="3452"></td>
        <td id="LC3452" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3453" class="blob-num js-line-number" data-line-number="3453"></td>
        <td id="LC3453" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3454" class="blob-num js-line-number" data-line-number="3454"></td>
        <td id="LC3454" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> bytesWritten <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-c1">write</span>(stream, buffer, <span class="pl-c1">0</span>, length, offset, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L3455" class="blob-num js-line-number" data-line-number="3455"></td>
        <td id="LC3455" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> should we check if bytesWritten and length are the same?</span></td>
      </tr>
      <tr>
        <td id="L3456" class="blob-num js-line-number" data-line-number="3456"></td>
        <td id="LC3456" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3457" class="blob-num js-line-number" data-line-number="3457"></td>
        <td id="LC3457" class="blob-code blob-code-inner js-file-line">        }}};</td>
      </tr>
      <tr>
        <td id="L3458" class="blob-num js-line-number" data-line-number="3458"></td>
        <td id="LC3458" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3459" class="blob-num js-line-number" data-line-number="3459"></td>
        <td id="LC3459" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">IDBFS</span><span class="pl-k">=</span>{dbs<span class="pl-k">:</span>{},<span class="pl-en">indexedDB</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L3460" class="blob-num js-line-number" data-line-number="3460"></td>
        <td id="LC3460" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> indexedDB <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) <span class="pl-k">return</span> indexedDB;</td>
      </tr>
      <tr>
        <td id="L3461" class="blob-num js-line-number" data-line-number="3461"></td>
        <td id="LC3461" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L3462" class="blob-num js-line-number" data-line-number="3462"></td>
        <td id="LC3462" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">window</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>) ret <span class="pl-k">=</span> <span class="pl-c1">window</span>.<span class="pl-smi">indexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">mozIndexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">webkitIndexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">msIndexedDB</span>;</td>
      </tr>
      <tr>
        <td id="L3463" class="blob-num js-line-number" data-line-number="3463"></td>
        <td id="LC3463" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(ret, <span class="pl-s"><span class="pl-pds">&#39;</span>IDBFS used, but indexedDB not supported<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3464" class="blob-num js-line-number" data-line-number="3464"></td>
        <td id="LC3464" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3465" class="blob-num js-line-number" data-line-number="3465"></td>
        <td id="LC3465" class="blob-code blob-code-inner js-file-line">      },<span class="pl-c1">DB_VERSION</span><span class="pl-k">:</span><span class="pl-c1">21</span>,<span class="pl-c1">DB_STORE_NAME</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>FILE_DATA<span class="pl-pds">&quot;</span></span>,<span class="pl-en">mount</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L3466" class="blob-num js-line-number" data-line-number="3466"></td>
        <td id="LC3466" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> reuse all of the core MEMFS functionality</span></td>
      </tr>
      <tr>
        <td id="L3467" class="blob-num js-line-number" data-line-number="3467"></td>
        <td id="LC3467" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">MEMFS</span>.<span class="pl-smi">mount</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>);</td>
      </tr>
      <tr>
        <td id="L3468" class="blob-num js-line-number" data-line-number="3468"></td>
        <td id="LC3468" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">syncfs</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>, <span class="pl-smi">populate</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3469" class="blob-num js-line-number" data-line-number="3469"></td>
        <td id="LC3469" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">IDBFS</span>.<span class="pl-en">getLocalSet</span>(mount, <span class="pl-k">function</span>(<span class="pl-smi">err</span>, <span class="pl-smi">local</span>) {</td>
      </tr>
      <tr>
        <td id="L3470" class="blob-num js-line-number" data-line-number="3470"></td>
        <td id="LC3470" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err) <span class="pl-k">return</span> <span class="pl-en">callback</span>(err);</td>
      </tr>
      <tr>
        <td id="L3471" class="blob-num js-line-number" data-line-number="3471"></td>
        <td id="LC3471" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3472" class="blob-num js-line-number" data-line-number="3472"></td>
        <td id="LC3472" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">IDBFS</span>.<span class="pl-en">getRemoteSet</span>(mount, <span class="pl-k">function</span>(<span class="pl-smi">err</span>, <span class="pl-smi">remote</span>) {</td>
      </tr>
      <tr>
        <td id="L3473" class="blob-num js-line-number" data-line-number="3473"></td>
        <td id="LC3473" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (err) <span class="pl-k">return</span> <span class="pl-en">callback</span>(err);</td>
      </tr>
      <tr>
        <td id="L3474" class="blob-num js-line-number" data-line-number="3474"></td>
        <td id="LC3474" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3475" class="blob-num js-line-number" data-line-number="3475"></td>
        <td id="LC3475" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> src <span class="pl-k">=</span> populate <span class="pl-k">?</span> remote <span class="pl-k">:</span> local;</td>
      </tr>
      <tr>
        <td id="L3476" class="blob-num js-line-number" data-line-number="3476"></td>
        <td id="LC3476" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> dst <span class="pl-k">=</span> populate <span class="pl-k">?</span> local <span class="pl-k">:</span> remote;</td>
      </tr>
      <tr>
        <td id="L3477" class="blob-num js-line-number" data-line-number="3477"></td>
        <td id="LC3477" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3478" class="blob-num js-line-number" data-line-number="3478"></td>
        <td id="LC3478" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">IDBFS</span>.<span class="pl-en">reconcile</span>(src, dst, callback);</td>
      </tr>
      <tr>
        <td id="L3479" class="blob-num js-line-number" data-line-number="3479"></td>
        <td id="LC3479" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L3480" class="blob-num js-line-number" data-line-number="3480"></td>
        <td id="LC3480" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3481" class="blob-num js-line-number" data-line-number="3481"></td>
        <td id="LC3481" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getDB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">name</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3482" class="blob-num js-line-number" data-line-number="3482"></td>
        <td id="LC3482" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> check the cache first</span></td>
      </tr>
      <tr>
        <td id="L3483" class="blob-num js-line-number" data-line-number="3483"></td>
        <td id="LC3483" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-c1">IDBFS</span>.<span class="pl-smi">dbs</span>[name];</td>
      </tr>
      <tr>
        <td id="L3484" class="blob-num js-line-number" data-line-number="3484"></td>
        <td id="LC3484" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (db) {</td>
      </tr>
      <tr>
        <td id="L3485" class="blob-num js-line-number" data-line-number="3485"></td>
        <td id="LC3485" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, db);</td>
      </tr>
      <tr>
        <td id="L3486" class="blob-num js-line-number" data-line-number="3486"></td>
        <td id="LC3486" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3487" class="blob-num js-line-number" data-line-number="3487"></td>
        <td id="LC3487" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3488" class="blob-num js-line-number" data-line-number="3488"></td>
        <td id="LC3488" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> req;</td>
      </tr>
      <tr>
        <td id="L3489" class="blob-num js-line-number" data-line-number="3489"></td>
        <td id="LC3489" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3490" class="blob-num js-line-number" data-line-number="3490"></td>
        <td id="LC3490" class="blob-code blob-code-inner js-file-line">          req <span class="pl-k">=</span> <span class="pl-c1">IDBFS</span>.<span class="pl-en">indexedDB</span>().<span class="pl-c1">open</span>(name, <span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_VERSION</span>);</td>
      </tr>
      <tr>
        <td id="L3491" class="blob-num js-line-number" data-line-number="3491"></td>
        <td id="LC3491" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3492" class="blob-num js-line-number" data-line-number="3492"></td>
        <td id="LC3492" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3493" class="blob-num js-line-number" data-line-number="3493"></td>
        <td id="LC3493" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3494" class="blob-num js-line-number" data-line-number="3494"></td>
        <td id="LC3494" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>req) {</td>
      </tr>
      <tr>
        <td id="L3495" class="blob-num js-line-number" data-line-number="3495"></td>
        <td id="LC3495" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Unable to connect to IndexedDB<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3496" class="blob-num js-line-number" data-line-number="3496"></td>
        <td id="LC3496" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3497" class="blob-num js-line-number" data-line-number="3497"></td>
        <td id="LC3497" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onupgradeneeded</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3498" class="blob-num js-line-number" data-line-number="3498"></td>
        <td id="LC3498" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-smi">e</span>.<span class="pl-c1">target</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L3499" class="blob-num js-line-number" data-line-number="3499"></td>
        <td id="LC3499" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> transaction <span class="pl-k">=</span> <span class="pl-smi">e</span>.<span class="pl-c1">target</span>.<span class="pl-smi">transaction</span>;</td>
      </tr>
      <tr>
        <td id="L3500" class="blob-num js-line-number" data-line-number="3500"></td>
        <td id="LC3500" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3501" class="blob-num js-line-number" data-line-number="3501"></td>
        <td id="LC3501" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> fileStore;</td>
      </tr>
      <tr>
        <td id="L3502" class="blob-num js-line-number" data-line-number="3502"></td>
        <td id="LC3502" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3503" class="blob-num js-line-number" data-line-number="3503"></td>
        <td id="LC3503" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">db</span>.<span class="pl-smi">objectStoreNames</span>.<span class="pl-c1">contains</span>(<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>)) {</td>
      </tr>
      <tr>
        <td id="L3504" class="blob-num js-line-number" data-line-number="3504"></td>
        <td id="LC3504" class="blob-code blob-code-inner js-file-line">            fileStore <span class="pl-k">=</span> <span class="pl-smi">transaction</span>.<span class="pl-en">objectStore</span>(<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L3505" class="blob-num js-line-number" data-line-number="3505"></td>
        <td id="LC3505" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3506" class="blob-num js-line-number" data-line-number="3506"></td>
        <td id="LC3506" class="blob-code blob-code-inner js-file-line">            fileStore <span class="pl-k">=</span> <span class="pl-smi">db</span>.<span class="pl-en">createObjectStore</span>(<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L3507" class="blob-num js-line-number" data-line-number="3507"></td>
        <td id="LC3507" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3508" class="blob-num js-line-number" data-line-number="3508"></td>
        <td id="LC3508" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3509" class="blob-num js-line-number" data-line-number="3509"></td>
        <td id="LC3509" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">fileStore</span>.<span class="pl-smi">indexNames</span>.<span class="pl-c1">contains</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>timestamp<span class="pl-pds">&#39;</span></span>)) {</td>
      </tr>
      <tr>
        <td id="L3510" class="blob-num js-line-number" data-line-number="3510"></td>
        <td id="LC3510" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">fileStore</span>.<span class="pl-en">createIndex</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>timestamp<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>timestamp<span class="pl-pds">&#39;</span></span>, { unique<span class="pl-k">:</span> <span class="pl-c1">false</span> });</td>
      </tr>
      <tr>
        <td id="L3511" class="blob-num js-line-number" data-line-number="3511"></td>
        <td id="LC3511" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3512" class="blob-num js-line-number" data-line-number="3512"></td>
        <td id="LC3512" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3513" class="blob-num js-line-number" data-line-number="3513"></td>
        <td id="LC3513" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L3514" class="blob-num js-line-number" data-line-number="3514"></td>
        <td id="LC3514" class="blob-code blob-code-inner js-file-line">          db <span class="pl-k">=</span> <span class="pl-smi">req</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L3515" class="blob-num js-line-number" data-line-number="3515"></td>
        <td id="LC3515" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3516" class="blob-num js-line-number" data-line-number="3516"></td>
        <td id="LC3516" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> add to the cache</span></td>
      </tr>
      <tr>
        <td id="L3517" class="blob-num js-line-number" data-line-number="3517"></td>
        <td id="LC3517" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">IDBFS</span>.<span class="pl-smi">dbs</span>[name] <span class="pl-k">=</span> db;</td>
      </tr>
      <tr>
        <td id="L3518" class="blob-num js-line-number" data-line-number="3518"></td>
        <td id="LC3518" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, db);</td>
      </tr>
      <tr>
        <td id="L3519" class="blob-num js-line-number" data-line-number="3519"></td>
        <td id="LC3519" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3520" class="blob-num js-line-number" data-line-number="3520"></td>
        <td id="LC3520" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3521" class="blob-num js-line-number" data-line-number="3521"></td>
        <td id="LC3521" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">callback</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3522" class="blob-num js-line-number" data-line-number="3522"></td>
        <td id="LC3522" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3523" class="blob-num js-line-number" data-line-number="3523"></td>
        <td id="LC3523" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3524" class="blob-num js-line-number" data-line-number="3524"></td>
        <td id="LC3524" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getLocalSet</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3525" class="blob-num js-line-number" data-line-number="3525"></td>
        <td id="LC3525" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> entries <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L3526" class="blob-num js-line-number" data-line-number="3526"></td>
        <td id="LC3526" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3527" class="blob-num js-line-number" data-line-number="3527"></td>
        <td id="LC3527" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">isRealDir</span>(<span class="pl-smi">p</span>) {</td>
      </tr>
      <tr>
        <td id="L3528" class="blob-num js-line-number" data-line-number="3528"></td>
        <td id="LC3528" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> p <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> p <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L3529" class="blob-num js-line-number" data-line-number="3529"></td>
        <td id="LC3529" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3530" class="blob-num js-line-number" data-line-number="3530"></td>
        <td id="LC3530" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">toAbsolute</span>(<span class="pl-smi">root</span>) {</td>
      </tr>
      <tr>
        <td id="L3531" class="blob-num js-line-number" data-line-number="3531"></td>
        <td id="LC3531" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">function</span>(<span class="pl-smi">p</span>) {</td>
      </tr>
      <tr>
        <td id="L3532" class="blob-num js-line-number" data-line-number="3532"></td>
        <td id="LC3532" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(root, p);</td>
      </tr>
      <tr>
        <td id="L3533" class="blob-num js-line-number" data-line-number="3533"></td>
        <td id="LC3533" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3534" class="blob-num js-line-number" data-line-number="3534"></td>
        <td id="LC3534" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3535" class="blob-num js-line-number" data-line-number="3535"></td>
        <td id="LC3535" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3536" class="blob-num js-line-number" data-line-number="3536"></td>
        <td id="LC3536" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> check <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">readdir</span>(<span class="pl-smi">mount</span>.<span class="pl-smi">mountpoint</span>).<span class="pl-en">filter</span>(isRealDir).<span class="pl-en">map</span>(<span class="pl-en">toAbsolute</span>(<span class="pl-smi">mount</span>.<span class="pl-smi">mountpoint</span>));</td>
      </tr>
      <tr>
        <td id="L3537" class="blob-num js-line-number" data-line-number="3537"></td>
        <td id="LC3537" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3538" class="blob-num js-line-number" data-line-number="3538"></td>
        <td id="LC3538" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-smi">check</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L3539" class="blob-num js-line-number" data-line-number="3539"></td>
        <td id="LC3539" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-smi">check</span>.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L3540" class="blob-num js-line-number" data-line-number="3540"></td>
        <td id="LC3540" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stat;</td>
      </tr>
      <tr>
        <td id="L3541" class="blob-num js-line-number" data-line-number="3541"></td>
        <td id="LC3541" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3542" class="blob-num js-line-number" data-line-number="3542"></td>
        <td id="LC3542" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3543" class="blob-num js-line-number" data-line-number="3543"></td>
        <td id="LC3543" class="blob-code blob-code-inner js-file-line">            stat <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">stat</span>(path);</td>
      </tr>
      <tr>
        <td id="L3544" class="blob-num js-line-number" data-line-number="3544"></td>
        <td id="LC3544" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3545" class="blob-num js-line-number" data-line-number="3545"></td>
        <td id="LC3545" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3546" class="blob-num js-line-number" data-line-number="3546"></td>
        <td id="LC3546" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3547" class="blob-num js-line-number" data-line-number="3547"></td>
        <td id="LC3547" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3548" class="blob-num js-line-number" data-line-number="3548"></td>
        <td id="LC3548" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3549" class="blob-num js-line-number" data-line-number="3549"></td>
        <td id="LC3549" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">check</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(check, <span class="pl-c1">FS</span>.<span class="pl-en">readdir</span>(path).<span class="pl-en">filter</span>(isRealDir).<span class="pl-en">map</span>(<span class="pl-en">toAbsolute</span>(path)));</td>
      </tr>
      <tr>
        <td id="L3550" class="blob-num js-line-number" data-line-number="3550"></td>
        <td id="LC3550" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3551" class="blob-num js-line-number" data-line-number="3551"></td>
        <td id="LC3551" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3552" class="blob-num js-line-number" data-line-number="3552"></td>
        <td id="LC3552" class="blob-code blob-code-inner js-file-line">          entries[path] <span class="pl-k">=</span> { timestamp<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mtime</span> };</td>
      </tr>
      <tr>
        <td id="L3553" class="blob-num js-line-number" data-line-number="3553"></td>
        <td id="LC3553" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3554" class="blob-num js-line-number" data-line-number="3554"></td>
        <td id="LC3554" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3555" class="blob-num js-line-number" data-line-number="3555"></td>
        <td id="LC3555" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, { type<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>local<span class="pl-pds">&#39;</span></span>, entries<span class="pl-k">:</span> entries });</td>
      </tr>
      <tr>
        <td id="L3556" class="blob-num js-line-number" data-line-number="3556"></td>
        <td id="LC3556" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getRemoteSet</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3557" class="blob-num js-line-number" data-line-number="3557"></td>
        <td id="LC3557" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> entries <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L3558" class="blob-num js-line-number" data-line-number="3558"></td>
        <td id="LC3558" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3559" class="blob-num js-line-number" data-line-number="3559"></td>
        <td id="LC3559" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">IDBFS</span>.<span class="pl-en">getDB</span>(<span class="pl-smi">mount</span>.<span class="pl-smi">mountpoint</span>, <span class="pl-k">function</span>(<span class="pl-smi">err</span>, <span class="pl-smi">db</span>) {</td>
      </tr>
      <tr>
        <td id="L3560" class="blob-num js-line-number" data-line-number="3560"></td>
        <td id="LC3560" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err) <span class="pl-k">return</span> <span class="pl-en">callback</span>(err);</td>
      </tr>
      <tr>
        <td id="L3561" class="blob-num js-line-number" data-line-number="3561"></td>
        <td id="LC3561" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3562" class="blob-num js-line-number" data-line-number="3562"></td>
        <td id="LC3562" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3563" class="blob-num js-line-number" data-line-number="3563"></td>
        <td id="LC3563" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> transaction <span class="pl-k">=</span> <span class="pl-smi">db</span>.<span class="pl-en">transaction</span>([<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>], <span class="pl-s"><span class="pl-pds">&#39;</span>readonly<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3564" class="blob-num js-line-number" data-line-number="3564"></td>
        <td id="LC3564" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">transaction</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3565" class="blob-num js-line-number" data-line-number="3565"></td>
        <td id="LC3565" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">callback</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3566" class="blob-num js-line-number" data-line-number="3566"></td>
        <td id="LC3566" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3567" class="blob-num js-line-number" data-line-number="3567"></td>
        <td id="LC3567" class="blob-code blob-code-inner js-file-line">            };</td>
      </tr>
      <tr>
        <td id="L3568" class="blob-num js-line-number" data-line-number="3568"></td>
        <td id="LC3568" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3569" class="blob-num js-line-number" data-line-number="3569"></td>
        <td id="LC3569" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> store <span class="pl-k">=</span> <span class="pl-smi">transaction</span>.<span class="pl-en">objectStore</span>(<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L3570" class="blob-num js-line-number" data-line-number="3570"></td>
        <td id="LC3570" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> index <span class="pl-k">=</span> <span class="pl-smi">store</span>.<span class="pl-c1">index</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>timestamp<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3571" class="blob-num js-line-number" data-line-number="3571"></td>
        <td id="LC3571" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3572" class="blob-num js-line-number" data-line-number="3572"></td>
        <td id="LC3572" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">index</span>.<span class="pl-en">openKeyCursor</span>().<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-c1">event</span>) {</td>
      </tr>
      <tr>
        <td id="L3573" class="blob-num js-line-number" data-line-number="3573"></td>
        <td id="LC3573" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> cursor <span class="pl-k">=</span> <span class="pl-c1">event</span>.<span class="pl-c1">target</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L3574" class="blob-num js-line-number" data-line-number="3574"></td>
        <td id="LC3574" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3575" class="blob-num js-line-number" data-line-number="3575"></td>
        <td id="LC3575" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (<span class="pl-k">!</span>cursor) {</td>
      </tr>
      <tr>
        <td id="L3576" class="blob-num js-line-number" data-line-number="3576"></td>
        <td id="LC3576" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, { type<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>remote<span class="pl-pds">&#39;</span></span>, db<span class="pl-k">:</span> db, entries<span class="pl-k">:</span> entries });</td>
      </tr>
      <tr>
        <td id="L3577" class="blob-num js-line-number" data-line-number="3577"></td>
        <td id="LC3577" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3578" class="blob-num js-line-number" data-line-number="3578"></td>
        <td id="LC3578" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3579" class="blob-num js-line-number" data-line-number="3579"></td>
        <td id="LC3579" class="blob-code blob-code-inner js-file-line">              entries[<span class="pl-smi">cursor</span>.<span class="pl-smi">primaryKey</span>] <span class="pl-k">=</span> { timestamp<span class="pl-k">:</span> <span class="pl-smi">cursor</span>.<span class="pl-smi">key</span> };</td>
      </tr>
      <tr>
        <td id="L3580" class="blob-num js-line-number" data-line-number="3580"></td>
        <td id="LC3580" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3581" class="blob-num js-line-number" data-line-number="3581"></td>
        <td id="LC3581" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">cursor</span>.<span class="pl-en">continue</span>();</td>
      </tr>
      <tr>
        <td id="L3582" class="blob-num js-line-number" data-line-number="3582"></td>
        <td id="LC3582" class="blob-code blob-code-inner js-file-line">            };</td>
      </tr>
      <tr>
        <td id="L3583" class="blob-num js-line-number" data-line-number="3583"></td>
        <td id="LC3583" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3584" class="blob-num js-line-number" data-line-number="3584"></td>
        <td id="LC3584" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3585" class="blob-num js-line-number" data-line-number="3585"></td>
        <td id="LC3585" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3586" class="blob-num js-line-number" data-line-number="3586"></td>
        <td id="LC3586" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3587" class="blob-num js-line-number" data-line-number="3587"></td>
        <td id="LC3587" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">loadLocalEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3588" class="blob-num js-line-number" data-line-number="3588"></td>
        <td id="LC3588" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stat, node;</td>
      </tr>
      <tr>
        <td id="L3589" class="blob-num js-line-number" data-line-number="3589"></td>
        <td id="LC3589" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3590" class="blob-num js-line-number" data-line-number="3590"></td>
        <td id="LC3590" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3591" class="blob-num js-line-number" data-line-number="3591"></td>
        <td id="LC3591" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path);</td>
      </tr>
      <tr>
        <td id="L3592" class="blob-num js-line-number" data-line-number="3592"></td>
        <td id="LC3592" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L3593" class="blob-num js-line-number" data-line-number="3593"></td>
        <td id="LC3593" class="blob-code blob-code-inner js-file-line">          stat <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">stat</span>(path);</td>
      </tr>
      <tr>
        <td id="L3594" class="blob-num js-line-number" data-line-number="3594"></td>
        <td id="LC3594" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3595" class="blob-num js-line-number" data-line-number="3595"></td>
        <td id="LC3595" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3596" class="blob-num js-line-number" data-line-number="3596"></td>
        <td id="LC3596" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3597" class="blob-num js-line-number" data-line-number="3597"></td>
        <td id="LC3597" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3598" class="blob-num js-line-number" data-line-number="3598"></td>
        <td id="LC3598" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3599" class="blob-num js-line-number" data-line-number="3599"></td>
        <td id="LC3599" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, { timestamp<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mtime</span>, mode<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span> });</td>
      </tr>
      <tr>
        <td id="L3600" class="blob-num js-line-number" data-line-number="3600"></td>
        <td id="LC3600" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3601" class="blob-num js-line-number" data-line-number="3601"></td>
        <td id="LC3601" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.</span></td>
      </tr>
      <tr>
        <td id="L3602" class="blob-num js-line-number" data-line-number="3602"></td>
        <td id="LC3602" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.</span></td>
      </tr>
      <tr>
        <td id="L3603" class="blob-num js-line-number" data-line-number="3603"></td>
        <td id="LC3603" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-c1">MEMFS</span>.<span class="pl-en">getFileDataAsTypedArray</span>(node);</td>
      </tr>
      <tr>
        <td id="L3604" class="blob-num js-line-number" data-line-number="3604"></td>
        <td id="LC3604" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, { timestamp<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mtime</span>, mode<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>, contents<span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> });</td>
      </tr>
      <tr>
        <td id="L3605" class="blob-num js-line-number" data-line-number="3605"></td>
        <td id="LC3605" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3606" class="blob-num js-line-number" data-line-number="3606"></td>
        <td id="LC3606" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>node type not supported<span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L3607" class="blob-num js-line-number" data-line-number="3607"></td>
        <td id="LC3607" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3608" class="blob-num js-line-number" data-line-number="3608"></td>
        <td id="LC3608" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">storeLocalEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">entry</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3609" class="blob-num js-line-number" data-line-number="3609"></td>
        <td id="LC3609" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3610" class="blob-num js-line-number" data-line-number="3610"></td>
        <td id="LC3610" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">entry</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3611" class="blob-num js-line-number" data-line-number="3611"></td>
        <td id="LC3611" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(path, <span class="pl-smi">entry</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L3612" class="blob-num js-line-number" data-line-number="3612"></td>
        <td id="LC3612" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">entry</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3613" class="blob-num js-line-number" data-line-number="3613"></td>
        <td id="LC3613" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">writeFile</span>(path, <span class="pl-smi">entry</span>.<span class="pl-smi">contents</span>, { canOwn<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L3614" class="blob-num js-line-number" data-line-number="3614"></td>
        <td id="LC3614" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3615" class="blob-num js-line-number" data-line-number="3615"></td>
        <td id="LC3615" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>node type not supported<span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L3616" class="blob-num js-line-number" data-line-number="3616"></td>
        <td id="LC3616" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3617" class="blob-num js-line-number" data-line-number="3617"></td>
        <td id="LC3617" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3618" class="blob-num js-line-number" data-line-number="3618"></td>
        <td id="LC3618" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(path, <span class="pl-smi">entry</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L3619" class="blob-num js-line-number" data-line-number="3619"></td>
        <td id="LC3619" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">utime</span>(path, <span class="pl-smi">entry</span>.<span class="pl-smi">timestamp</span>, <span class="pl-smi">entry</span>.<span class="pl-smi">timestamp</span>);</td>
      </tr>
      <tr>
        <td id="L3620" class="blob-num js-line-number" data-line-number="3620"></td>
        <td id="LC3620" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3621" class="blob-num js-line-number" data-line-number="3621"></td>
        <td id="LC3621" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3622" class="blob-num js-line-number" data-line-number="3622"></td>
        <td id="LC3622" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3623" class="blob-num js-line-number" data-line-number="3623"></td>
        <td id="LC3623" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3624" class="blob-num js-line-number" data-line-number="3624"></td>
        <td id="LC3624" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">callback</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L3625" class="blob-num js-line-number" data-line-number="3625"></td>
        <td id="LC3625" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">removeLocalEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3626" class="blob-num js-line-number" data-line-number="3626"></td>
        <td id="LC3626" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3627" class="blob-num js-line-number" data-line-number="3627"></td>
        <td id="LC3627" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path);</td>
      </tr>
      <tr>
        <td id="L3628" class="blob-num js-line-number" data-line-number="3628"></td>
        <td id="LC3628" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stat <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">stat</span>(path);</td>
      </tr>
      <tr>
        <td id="L3629" class="blob-num js-line-number" data-line-number="3629"></td>
        <td id="LC3629" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3630" class="blob-num js-line-number" data-line-number="3630"></td>
        <td id="LC3630" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3631" class="blob-num js-line-number" data-line-number="3631"></td>
        <td id="LC3631" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">rmdir</span>(path);</td>
      </tr>
      <tr>
        <td id="L3632" class="blob-num js-line-number" data-line-number="3632"></td>
        <td id="LC3632" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3633" class="blob-num js-line-number" data-line-number="3633"></td>
        <td id="LC3633" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">unlink</span>(path);</td>
      </tr>
      <tr>
        <td id="L3634" class="blob-num js-line-number" data-line-number="3634"></td>
        <td id="LC3634" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3635" class="blob-num js-line-number" data-line-number="3635"></td>
        <td id="LC3635" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3636" class="blob-num js-line-number" data-line-number="3636"></td>
        <td id="LC3636" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(e);</td>
      </tr>
      <tr>
        <td id="L3637" class="blob-num js-line-number" data-line-number="3637"></td>
        <td id="LC3637" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3638" class="blob-num js-line-number" data-line-number="3638"></td>
        <td id="LC3638" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3639" class="blob-num js-line-number" data-line-number="3639"></td>
        <td id="LC3639" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">callback</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L3640" class="blob-num js-line-number" data-line-number="3640"></td>
        <td id="LC3640" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">loadRemoteEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">store</span>, <span class="pl-smi">path</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3641" class="blob-num js-line-number" data-line-number="3641"></td>
        <td id="LC3641" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> req <span class="pl-k">=</span> <span class="pl-smi">store</span>.<span class="pl-c1">get</span>(path);</td>
      </tr>
      <tr>
        <td id="L3642" class="blob-num js-line-number" data-line-number="3642"></td>
        <td id="LC3642" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-c1">event</span>) { <span class="pl-en">callback</span>(<span class="pl-c1">null</span>, <span class="pl-c1">event</span>.<span class="pl-c1">target</span>.<span class="pl-smi">result</span>); };</td>
      </tr>
      <tr>
        <td id="L3643" class="blob-num js-line-number" data-line-number="3643"></td>
        <td id="LC3643" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3644" class="blob-num js-line-number" data-line-number="3644"></td>
        <td id="LC3644" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">callback</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3645" class="blob-num js-line-number" data-line-number="3645"></td>
        <td id="LC3645" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3646" class="blob-num js-line-number" data-line-number="3646"></td>
        <td id="LC3646" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3647" class="blob-num js-line-number" data-line-number="3647"></td>
        <td id="LC3647" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">storeRemoteEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">store</span>, <span class="pl-smi">path</span>, <span class="pl-smi">entry</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3648" class="blob-num js-line-number" data-line-number="3648"></td>
        <td id="LC3648" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> req <span class="pl-k">=</span> <span class="pl-smi">store</span>.<span class="pl-en">put</span>(entry, path);</td>
      </tr>
      <tr>
        <td id="L3649" class="blob-num js-line-number" data-line-number="3649"></td>
        <td id="LC3649" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">callback</span>(<span class="pl-c1">null</span>); };</td>
      </tr>
      <tr>
        <td id="L3650" class="blob-num js-line-number" data-line-number="3650"></td>
        <td id="LC3650" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3651" class="blob-num js-line-number" data-line-number="3651"></td>
        <td id="LC3651" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">callback</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3652" class="blob-num js-line-number" data-line-number="3652"></td>
        <td id="LC3652" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3653" class="blob-num js-line-number" data-line-number="3653"></td>
        <td id="LC3653" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3654" class="blob-num js-line-number" data-line-number="3654"></td>
        <td id="LC3654" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">removeRemoteEntry</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">store</span>, <span class="pl-smi">path</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3655" class="blob-num js-line-number" data-line-number="3655"></td>
        <td id="LC3655" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> req <span class="pl-k">=</span> <span class="pl-smi">store</span>.<span class="pl-c1">delete</span>(path);</td>
      </tr>
      <tr>
        <td id="L3656" class="blob-num js-line-number" data-line-number="3656"></td>
        <td id="LC3656" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">callback</span>(<span class="pl-c1">null</span>); };</td>
      </tr>
      <tr>
        <td id="L3657" class="blob-num js-line-number" data-line-number="3657"></td>
        <td id="LC3657" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">req</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3658" class="blob-num js-line-number" data-line-number="3658"></td>
        <td id="LC3658" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">callback</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3659" class="blob-num js-line-number" data-line-number="3659"></td>
        <td id="LC3659" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3660" class="blob-num js-line-number" data-line-number="3660"></td>
        <td id="LC3660" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3661" class="blob-num js-line-number" data-line-number="3661"></td>
        <td id="LC3661" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">reconcile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">src</span>, <span class="pl-smi">dst</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L3662" class="blob-num js-line-number" data-line-number="3662"></td>
        <td id="LC3662" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> total <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3663" class="blob-num js-line-number" data-line-number="3663"></td>
        <td id="LC3663" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3664" class="blob-num js-line-number" data-line-number="3664"></td>
        <td id="LC3664" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> create <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3665" class="blob-num js-line-number" data-line-number="3665"></td>
        <td id="LC3665" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(<span class="pl-smi">src</span>.<span class="pl-smi">entries</span>).<span class="pl-c1">forEach</span>(<span class="pl-k">function</span> (<span class="pl-smi">key</span>) {</td>
      </tr>
      <tr>
        <td id="L3666" class="blob-num js-line-number" data-line-number="3666"></td>
        <td id="LC3666" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> e <span class="pl-k">=</span> <span class="pl-smi">src</span>.<span class="pl-smi">entries</span>[key];</td>
      </tr>
      <tr>
        <td id="L3667" class="blob-num js-line-number" data-line-number="3667"></td>
        <td id="LC3667" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> e2 <span class="pl-k">=</span> <span class="pl-smi">dst</span>.<span class="pl-smi">entries</span>[key];</td>
      </tr>
      <tr>
        <td id="L3668" class="blob-num js-line-number" data-line-number="3668"></td>
        <td id="LC3668" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>e2 <span class="pl-k">||</span> <span class="pl-smi">e</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">&gt;</span> <span class="pl-smi">e2</span>.<span class="pl-smi">timestamp</span>) {</td>
      </tr>
      <tr>
        <td id="L3669" class="blob-num js-line-number" data-line-number="3669"></td>
        <td id="LC3669" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">create</span>.<span class="pl-c1">push</span>(key);</td>
      </tr>
      <tr>
        <td id="L3670" class="blob-num js-line-number" data-line-number="3670"></td>
        <td id="LC3670" class="blob-code blob-code-inner js-file-line">            total<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L3671" class="blob-num js-line-number" data-line-number="3671"></td>
        <td id="LC3671" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3672" class="blob-num js-line-number" data-line-number="3672"></td>
        <td id="LC3672" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3673" class="blob-num js-line-number" data-line-number="3673"></td>
        <td id="LC3673" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3674" class="blob-num js-line-number" data-line-number="3674"></td>
        <td id="LC3674" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> remove <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3675" class="blob-num js-line-number" data-line-number="3675"></td>
        <td id="LC3675" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(<span class="pl-smi">dst</span>.<span class="pl-smi">entries</span>).<span class="pl-c1">forEach</span>(<span class="pl-k">function</span> (<span class="pl-smi">key</span>) {</td>
      </tr>
      <tr>
        <td id="L3676" class="blob-num js-line-number" data-line-number="3676"></td>
        <td id="LC3676" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> e <span class="pl-k">=</span> <span class="pl-smi">dst</span>.<span class="pl-smi">entries</span>[key];</td>
      </tr>
      <tr>
        <td id="L3677" class="blob-num js-line-number" data-line-number="3677"></td>
        <td id="LC3677" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> e2 <span class="pl-k">=</span> <span class="pl-smi">src</span>.<span class="pl-smi">entries</span>[key];</td>
      </tr>
      <tr>
        <td id="L3678" class="blob-num js-line-number" data-line-number="3678"></td>
        <td id="LC3678" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>e2) {</td>
      </tr>
      <tr>
        <td id="L3679" class="blob-num js-line-number" data-line-number="3679"></td>
        <td id="LC3679" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">remove</span>.<span class="pl-c1">push</span>(key);</td>
      </tr>
      <tr>
        <td id="L3680" class="blob-num js-line-number" data-line-number="3680"></td>
        <td id="LC3680" class="blob-code blob-code-inner js-file-line">            total<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L3681" class="blob-num js-line-number" data-line-number="3681"></td>
        <td id="LC3681" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3682" class="blob-num js-line-number" data-line-number="3682"></td>
        <td id="LC3682" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3683" class="blob-num js-line-number" data-line-number="3683"></td>
        <td id="LC3683" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3684" class="blob-num js-line-number" data-line-number="3684"></td>
        <td id="LC3684" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>total) {</td>
      </tr>
      <tr>
        <td id="L3685" class="blob-num js-line-number" data-line-number="3685"></td>
        <td id="LC3685" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L3686" class="blob-num js-line-number" data-line-number="3686"></td>
        <td id="LC3686" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3687" class="blob-num js-line-number" data-line-number="3687"></td>
        <td id="LC3687" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3688" class="blob-num js-line-number" data-line-number="3688"></td>
        <td id="LC3688" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> errored <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3689" class="blob-num js-line-number" data-line-number="3689"></td>
        <td id="LC3689" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-smi">src</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>remote<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> <span class="pl-smi">src</span>.<span class="pl-smi">db</span> <span class="pl-k">:</span> <span class="pl-smi">dst</span>.<span class="pl-smi">db</span>;</td>
      </tr>
      <tr>
        <td id="L3690" class="blob-num js-line-number" data-line-number="3690"></td>
        <td id="LC3690" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> transaction <span class="pl-k">=</span> <span class="pl-smi">db</span>.<span class="pl-en">transaction</span>([<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>], <span class="pl-s"><span class="pl-pds">&#39;</span>readwrite<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3691" class="blob-num js-line-number" data-line-number="3691"></td>
        <td id="LC3691" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> store <span class="pl-k">=</span> <span class="pl-smi">transaction</span>.<span class="pl-en">objectStore</span>(<span class="pl-c1">IDBFS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L3692" class="blob-num js-line-number" data-line-number="3692"></td>
        <td id="LC3692" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3693" class="blob-num js-line-number" data-line-number="3693"></td>
        <td id="LC3693" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">done</span>(<span class="pl-smi">err</span>) {</td>
      </tr>
      <tr>
        <td id="L3694" class="blob-num js-line-number" data-line-number="3694"></td>
        <td id="LC3694" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>errored) {</td>
      </tr>
      <tr>
        <td id="L3695" class="blob-num js-line-number" data-line-number="3695"></td>
        <td id="LC3695" class="blob-code blob-code-inner js-file-line">            errored <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3696" class="blob-num js-line-number" data-line-number="3696"></td>
        <td id="LC3696" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-en">callback</span>(err);</td>
      </tr>
      <tr>
        <td id="L3697" class="blob-num js-line-number" data-line-number="3697"></td>
        <td id="LC3697" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3698" class="blob-num js-line-number" data-line-number="3698"></td>
        <td id="LC3698" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3699" class="blob-num js-line-number" data-line-number="3699"></td>
        <td id="LC3699" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3700" class="blob-num js-line-number" data-line-number="3700"></td>
        <td id="LC3700" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">transaction</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3701" class="blob-num js-line-number" data-line-number="3701"></td>
        <td id="LC3701" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">done</span>(<span class="pl-c1">this</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L3702" class="blob-num js-line-number" data-line-number="3702"></td>
        <td id="LC3702" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">e</span>.<span class="pl-c1">preventDefault</span>();</td>
      </tr>
      <tr>
        <td id="L3703" class="blob-num js-line-number" data-line-number="3703"></td>
        <td id="LC3703" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3704" class="blob-num js-line-number" data-line-number="3704"></td>
        <td id="LC3704" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3705" class="blob-num js-line-number" data-line-number="3705"></td>
        <td id="LC3705" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">transaction</span>.<span class="pl-en">oncomplete</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">e</span>) {</td>
      </tr>
      <tr>
        <td id="L3706" class="blob-num js-line-number" data-line-number="3706"></td>
        <td id="LC3706" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>errored) {</td>
      </tr>
      <tr>
        <td id="L3707" class="blob-num js-line-number" data-line-number="3707"></td>
        <td id="LC3707" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">callback</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L3708" class="blob-num js-line-number" data-line-number="3708"></td>
        <td id="LC3708" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3709" class="blob-num js-line-number" data-line-number="3709"></td>
        <td id="LC3709" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3710" class="blob-num js-line-number" data-line-number="3710"></td>
        <td id="LC3710" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3711" class="blob-num js-line-number" data-line-number="3711"></td>
        <td id="LC3711" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> sort paths in ascending order so directory entries are created</span></td>
      </tr>
      <tr>
        <td id="L3712" class="blob-num js-line-number" data-line-number="3712"></td>
        <td id="LC3712" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> before the files inside them</span></td>
      </tr>
      <tr>
        <td id="L3713" class="blob-num js-line-number" data-line-number="3713"></td>
        <td id="LC3713" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">create</span>.<span class="pl-c1">sort</span>().<span class="pl-c1">forEach</span>(<span class="pl-k">function</span> (<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L3714" class="blob-num js-line-number" data-line-number="3714"></td>
        <td id="LC3714" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">dst</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>local<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L3715" class="blob-num js-line-number" data-line-number="3715"></td>
        <td id="LC3715" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">IDBFS</span>.<span class="pl-en">loadRemoteEntry</span>(store, path, <span class="pl-k">function</span> (<span class="pl-smi">err</span>, <span class="pl-smi">entry</span>) {</td>
      </tr>
      <tr>
        <td id="L3716" class="blob-num js-line-number" data-line-number="3716"></td>
        <td id="LC3716" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (err) <span class="pl-k">return</span> <span class="pl-en">done</span>(err);</td>
      </tr>
      <tr>
        <td id="L3717" class="blob-num js-line-number" data-line-number="3717"></td>
        <td id="LC3717" class="blob-code blob-code-inner js-file-line">              <span class="pl-c1">IDBFS</span>.<span class="pl-en">storeLocalEntry</span>(path, entry, done);</td>
      </tr>
      <tr>
        <td id="L3718" class="blob-num js-line-number" data-line-number="3718"></td>
        <td id="LC3718" class="blob-code blob-code-inner js-file-line">            });</td>
      </tr>
      <tr>
        <td id="L3719" class="blob-num js-line-number" data-line-number="3719"></td>
        <td id="LC3719" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3720" class="blob-num js-line-number" data-line-number="3720"></td>
        <td id="LC3720" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">IDBFS</span>.<span class="pl-en">loadLocalEntry</span>(path, <span class="pl-k">function</span> (<span class="pl-smi">err</span>, <span class="pl-smi">entry</span>) {</td>
      </tr>
      <tr>
        <td id="L3721" class="blob-num js-line-number" data-line-number="3721"></td>
        <td id="LC3721" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (err) <span class="pl-k">return</span> <span class="pl-en">done</span>(err);</td>
      </tr>
      <tr>
        <td id="L3722" class="blob-num js-line-number" data-line-number="3722"></td>
        <td id="LC3722" class="blob-code blob-code-inner js-file-line">              <span class="pl-c1">IDBFS</span>.<span class="pl-en">storeRemoteEntry</span>(store, path, entry, done);</td>
      </tr>
      <tr>
        <td id="L3723" class="blob-num js-line-number" data-line-number="3723"></td>
        <td id="LC3723" class="blob-code blob-code-inner js-file-line">            });</td>
      </tr>
      <tr>
        <td id="L3724" class="blob-num js-line-number" data-line-number="3724"></td>
        <td id="LC3724" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3725" class="blob-num js-line-number" data-line-number="3725"></td>
        <td id="LC3725" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3726" class="blob-num js-line-number" data-line-number="3726"></td>
        <td id="LC3726" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3727" class="blob-num js-line-number" data-line-number="3727"></td>
        <td id="LC3727" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> sort paths in descending order so files are deleted before their</span></td>
      </tr>
      <tr>
        <td id="L3728" class="blob-num js-line-number" data-line-number="3728"></td>
        <td id="LC3728" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> parent directories</span></td>
      </tr>
      <tr>
        <td id="L3729" class="blob-num js-line-number" data-line-number="3729"></td>
        <td id="LC3729" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">remove</span>.<span class="pl-c1">sort</span>().<span class="pl-c1">reverse</span>().<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L3730" class="blob-num js-line-number" data-line-number="3730"></td>
        <td id="LC3730" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">dst</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>local<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L3731" class="blob-num js-line-number" data-line-number="3731"></td>
        <td id="LC3731" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">IDBFS</span>.<span class="pl-en">removeLocalEntry</span>(path, done);</td>
      </tr>
      <tr>
        <td id="L3732" class="blob-num js-line-number" data-line-number="3732"></td>
        <td id="LC3732" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3733" class="blob-num js-line-number" data-line-number="3733"></td>
        <td id="LC3733" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">IDBFS</span>.<span class="pl-en">removeRemoteEntry</span>(store, path, done);</td>
      </tr>
      <tr>
        <td id="L3734" class="blob-num js-line-number" data-line-number="3734"></td>
        <td id="LC3734" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3735" class="blob-num js-line-number" data-line-number="3735"></td>
        <td id="LC3735" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L3736" class="blob-num js-line-number" data-line-number="3736"></td>
        <td id="LC3736" class="blob-code blob-code-inner js-file-line">      }};</td>
      </tr>
      <tr>
        <td id="L3737" class="blob-num js-line-number" data-line-number="3737"></td>
        <td id="LC3737" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3738" class="blob-num js-line-number" data-line-number="3738"></td>
        <td id="LC3738" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">NODEFS</span><span class="pl-k">=</span>{isWindows<span class="pl-k">:</span><span class="pl-c1">false</span>,<span class="pl-en">staticInit</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L3739" class="blob-num js-line-number" data-line-number="3739"></td>
        <td id="LC3739" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">NODEFS</span>.<span class="pl-smi">isWindows</span> <span class="pl-k">=</span> <span class="pl-k">!!</span><span class="pl-c1">process</span>.<span class="pl-c1">platform</span>.<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>win<span class="pl-pds">/</span></span>);</td>
      </tr>
      <tr>
        <td id="L3740" class="blob-num js-line-number" data-line-number="3740"></td>
        <td id="LC3740" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> flags <span class="pl-k">=</span> <span class="pl-c1">process</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>binding<span class="pl-pds">&quot;</span></span>](<span class="pl-s"><span class="pl-pds">&quot;</span>constants<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3741" class="blob-num js-line-number" data-line-number="3741"></td>
        <td id="LC3741" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Node.js 4 compatibility: it has no namespaces for constants</span></td>
      </tr>
      <tr>
        <td id="L3742" class="blob-num js-line-number" data-line-number="3742"></td>
        <td id="LC3742" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (flags[<span class="pl-s"><span class="pl-pds">&quot;</span>fs<span class="pl-pds">&quot;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L3743" class="blob-num js-line-number" data-line-number="3743"></td>
        <td id="LC3743" class="blob-code blob-code-inner js-file-line">          flags <span class="pl-k">=</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>fs<span class="pl-pds">&quot;</span></span>];</td>
      </tr>
      <tr>
        <td id="L3744" class="blob-num js-line-number" data-line-number="3744"></td>
        <td id="LC3744" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3745" class="blob-num js-line-number" data-line-number="3745"></td>
        <td id="LC3745" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">NODEFS</span>.<span class="pl-smi">flagsForNodeMap</span> <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L3746" class="blob-num js-line-number" data-line-number="3746"></td>
        <td id="LC3746" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>1024<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_APPEND<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3747" class="blob-num js-line-number" data-line-number="3747"></td>
        <td id="LC3747" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>64<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_CREAT<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3748" class="blob-num js-line-number" data-line-number="3748"></td>
        <td id="LC3748" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>128<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_EXCL<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3749" class="blob-num js-line-number" data-line-number="3749"></td>
        <td id="LC3749" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_RDONLY<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3750" class="blob-num js-line-number" data-line-number="3750"></td>
        <td id="LC3750" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_RDWR<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3751" class="blob-num js-line-number" data-line-number="3751"></td>
        <td id="LC3751" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>4096<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_SYNC<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3752" class="blob-num js-line-number" data-line-number="3752"></td>
        <td id="LC3752" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>512<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_TRUNC<span class="pl-pds">&quot;</span></span>],</td>
      </tr>
      <tr>
        <td id="L3753" class="blob-num js-line-number" data-line-number="3753"></td>
        <td id="LC3753" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&quot;</span>1<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> flags[<span class="pl-s"><span class="pl-pds">&quot;</span>O_WRONLY<span class="pl-pds">&quot;</span></span>]</td>
      </tr>
      <tr>
        <td id="L3754" class="blob-num js-line-number" data-line-number="3754"></td>
        <td id="LC3754" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3755" class="blob-num js-line-number" data-line-number="3755"></td>
        <td id="LC3755" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">bufferFrom</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">arrayBuffer</span>) {</td>
      </tr>
      <tr>
        <td id="L3756" class="blob-num js-line-number" data-line-number="3756"></td>
        <td id="LC3756" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Node.js &lt; 4.5 compatibility: Buffer.from does not support ArrayBuffer</span></td>
      </tr>
      <tr>
        <td id="L3757" class="blob-num js-line-number" data-line-number="3757"></td>
        <td id="LC3757" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Buffer.from before 4.5 was just a method inherited from Uint8Array</span></td>
      </tr>
      <tr>
        <td id="L3758" class="blob-num js-line-number" data-line-number="3758"></td>
        <td id="LC3758" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Buffer.alloc has been added with Buffer.from together, so check it instead</span></td>
      </tr>
      <tr>
        <td id="L3759" class="blob-num js-line-number" data-line-number="3759"></td>
        <td id="LC3759" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> Buffer[<span class="pl-s"><span class="pl-pds">&quot;</span>alloc<span class="pl-pds">&quot;</span></span>] <span class="pl-k">?</span> <span class="pl-smi">Buffer</span>.<span class="pl-en">from</span>(arrayBuffer) <span class="pl-k">:</span> <span class="pl-k">new</span> <span class="pl-en">Buffer</span>(arrayBuffer);</td>
      </tr>
      <tr>
        <td id="L3760" class="blob-num js-line-number" data-line-number="3760"></td>
        <td id="LC3760" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mount</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L3761" class="blob-num js-line-number" data-line-number="3761"></td>
        <td id="LC3761" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-c1">ENVIRONMENT_HAS_NODE</span>);</td>
      </tr>
      <tr>
        <td id="L3762" class="blob-num js-line-number" data-line-number="3762"></td>
        <td id="LC3762" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">createNode</span>(<span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">NODEFS</span>.<span class="pl-en">getMode</span>(<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>.<span class="pl-smi">root</span>), <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3763" class="blob-num js-line-number" data-line-number="3763"></td>
        <td id="LC3763" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createNode</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L3764" class="blob-num js-line-number" data-line-number="3764"></td>
        <td id="LC3764" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(mode) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(mode) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(mode)) {</td>
      </tr>
      <tr>
        <td id="L3765" class="blob-num js-line-number" data-line-number="3765"></td>
        <td id="LC3765" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L3766" class="blob-num js-line-number" data-line-number="3766"></td>
        <td id="LC3766" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3767" class="blob-num js-line-number" data-line-number="3767"></td>
        <td id="LC3767" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createNode</span>(parent, name, mode);</td>
      </tr>
      <tr>
        <td id="L3768" class="blob-num js-line-number" data-line-number="3768"></td>
        <td id="LC3768" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-smi">node_ops</span>;</td>
      </tr>
      <tr>
        <td id="L3769" class="blob-num js-line-number" data-line-number="3769"></td>
        <td id="LC3769" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-smi">stream_ops</span>;</td>
      </tr>
      <tr>
        <td id="L3770" class="blob-num js-line-number" data-line-number="3770"></td>
        <td id="LC3770" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L3771" class="blob-num js-line-number" data-line-number="3771"></td>
        <td id="LC3771" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getMode</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L3772" class="blob-num js-line-number" data-line-number="3772"></td>
        <td id="LC3772" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stat;</td>
      </tr>
      <tr>
        <td id="L3773" class="blob-num js-line-number" data-line-number="3773"></td>
        <td id="LC3773" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3774" class="blob-num js-line-number" data-line-number="3774"></td>
        <td id="LC3774" class="blob-code blob-code-inner js-file-line">          stat <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">lstatSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3775" class="blob-num js-line-number" data-line-number="3775"></td>
        <td id="LC3775" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">NODEFS</span>.<span class="pl-smi">isWindows</span>) {</td>
      </tr>
      <tr>
        <td id="L3776" class="blob-num js-line-number" data-line-number="3776"></td>
        <td id="LC3776" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Node.js on Windows never represents permission bit &#39;x&#39;, so</span></td>
      </tr>
      <tr>
        <td id="L3777" class="blob-num js-line-number" data-line-number="3777"></td>
        <td id="LC3777" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> propagate read bits to execute bits</span></td>
      </tr>
      <tr>
        <td id="L3778" class="blob-num js-line-number" data-line-number="3778"></td>
        <td id="LC3778" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span> <span class="pl-k">|</span> ((<span class="pl-smi">stat</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> <span class="pl-c1">292</span>) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L3779" class="blob-num js-line-number" data-line-number="3779"></td>
        <td id="LC3779" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3780" class="blob-num js-line-number" data-line-number="3780"></td>
        <td id="LC3780" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3781" class="blob-num js-line-number" data-line-number="3781"></td>
        <td id="LC3781" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3782" class="blob-num js-line-number" data-line-number="3782"></td>
        <td id="LC3782" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>); <span class="pl-c"><span class="pl-c">//</span> syscall errnos are negated, node&#39;s are not</span></td>
      </tr>
      <tr>
        <td id="L3783" class="blob-num js-line-number" data-line-number="3783"></td>
        <td id="LC3783" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3784" class="blob-num js-line-number" data-line-number="3784"></td>
        <td id="LC3784" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L3785" class="blob-num js-line-number" data-line-number="3785"></td>
        <td id="LC3785" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">realPath</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3786" class="blob-num js-line-number" data-line-number="3786"></td>
        <td id="LC3786" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parts <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L3787" class="blob-num js-line-number" data-line-number="3787"></td>
        <td id="LC3787" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-smi">node</span>.<span class="pl-c1">parent</span> <span class="pl-k">!==</span> node) {</td>
      </tr>
      <tr>
        <td id="L3788" class="blob-num js-line-number" data-line-number="3788"></td>
        <td id="LC3788" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">parts</span>.<span class="pl-c1">push</span>(<span class="pl-smi">node</span>.<span class="pl-c1">name</span>);</td>
      </tr>
      <tr>
        <td id="L3789" class="blob-num js-line-number" data-line-number="3789"></td>
        <td id="LC3789" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-c1">parent</span>;</td>
      </tr>
      <tr>
        <td id="L3790" class="blob-num js-line-number" data-line-number="3790"></td>
        <td id="LC3790" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3791" class="blob-num js-line-number" data-line-number="3791"></td>
        <td id="LC3791" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">parts</span>.<span class="pl-c1">push</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>.<span class="pl-smi">root</span>);</td>
      </tr>
      <tr>
        <td id="L3792" class="blob-num js-line-number" data-line-number="3792"></td>
        <td id="LC3792" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">parts</span>.<span class="pl-c1">reverse</span>();</td>
      </tr>
      <tr>
        <td id="L3793" class="blob-num js-line-number" data-line-number="3793"></td>
        <td id="LC3793" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-smi">join</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, parts);</td>
      </tr>
      <tr>
        <td id="L3794" class="blob-num js-line-number" data-line-number="3794"></td>
        <td id="LC3794" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">flagsForNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">flags</span>) {</td>
      </tr>
      <tr>
        <td id="L3795" class="blob-num js-line-number" data-line-number="3795"></td>
        <td id="LC3795" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span><span class="pl-c1">0x200000</span> <span class="pl-c"><span class="pl-c">/*</span>O_PATH<span class="pl-c">*/</span></span>; <span class="pl-c"><span class="pl-c">//</span> Ignore this flag from musl, otherwise node.js fails to open the file.</span></td>
      </tr>
      <tr>
        <td id="L3796" class="blob-num js-line-number" data-line-number="3796"></td>
        <td id="LC3796" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span><span class="pl-c1">0x800</span> <span class="pl-c"><span class="pl-c">/*</span>O_NONBLOCK<span class="pl-c">*/</span></span>; <span class="pl-c"><span class="pl-c">//</span> Ignore this flag from musl, otherwise node.js fails to open the file.</span></td>
      </tr>
      <tr>
        <td id="L3797" class="blob-num js-line-number" data-line-number="3797"></td>
        <td id="LC3797" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span><span class="pl-c1">0x8000</span> <span class="pl-c"><span class="pl-c">/*</span>O_LARGEFILE<span class="pl-c">*/</span></span>; <span class="pl-c"><span class="pl-c">//</span> Ignore this flag from musl, otherwise node.js fails to open the file.</span></td>
      </tr>
      <tr>
        <td id="L3798" class="blob-num js-line-number" data-line-number="3798"></td>
        <td id="LC3798" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span><span class="pl-c1">0x80000</span> <span class="pl-c"><span class="pl-c">/*</span>O_CLOEXEC<span class="pl-c">*/</span></span>; <span class="pl-c"><span class="pl-c">//</span> Some applications may pass it; it makes no sense for a single process.</span></td>
      </tr>
      <tr>
        <td id="L3799" class="blob-num js-line-number" data-line-number="3799"></td>
        <td id="LC3799" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> newFlags <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3800" class="blob-num js-line-number" data-line-number="3800"></td>
        <td id="LC3800" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> k <span class="pl-k">in</span> <span class="pl-c1">NODEFS</span>.<span class="pl-smi">flagsForNodeMap</span>) {</td>
      </tr>
      <tr>
        <td id="L3801" class="blob-num js-line-number" data-line-number="3801"></td>
        <td id="LC3801" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (flags <span class="pl-k">&amp;</span> k) {</td>
      </tr>
      <tr>
        <td id="L3802" class="blob-num js-line-number" data-line-number="3802"></td>
        <td id="LC3802" class="blob-code blob-code-inner js-file-line">            newFlags <span class="pl-k">|=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-smi">flagsForNodeMap</span>[k];</td>
      </tr>
      <tr>
        <td id="L3803" class="blob-num js-line-number" data-line-number="3803"></td>
        <td id="LC3803" class="blob-code blob-code-inner js-file-line">            flags <span class="pl-k">^=</span> k;</td>
      </tr>
      <tr>
        <td id="L3804" class="blob-num js-line-number" data-line-number="3804"></td>
        <td id="LC3804" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3805" class="blob-num js-line-number" data-line-number="3805"></td>
        <td id="LC3805" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3806" class="blob-num js-line-number" data-line-number="3806"></td>
        <td id="LC3806" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3807" class="blob-num js-line-number" data-line-number="3807"></td>
        <td id="LC3807" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>flags) {</td>
      </tr>
      <tr>
        <td id="L3808" class="blob-num js-line-number" data-line-number="3808"></td>
        <td id="LC3808" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> newFlags;</td>
      </tr>
      <tr>
        <td id="L3809" class="blob-num js-line-number" data-line-number="3809"></td>
        <td id="LC3809" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3810" class="blob-num js-line-number" data-line-number="3810"></td>
        <td id="LC3810" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L3811" class="blob-num js-line-number" data-line-number="3811"></td>
        <td id="LC3811" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3812" class="blob-num js-line-number" data-line-number="3812"></td>
        <td id="LC3812" class="blob-code blob-code-inner js-file-line">      },node_ops<span class="pl-k">:</span>{<span class="pl-en">getattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3813" class="blob-num js-line-number" data-line-number="3813"></td>
        <td id="LC3813" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(node);</td>
      </tr>
      <tr>
        <td id="L3814" class="blob-num js-line-number" data-line-number="3814"></td>
        <td id="LC3814" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stat;</td>
      </tr>
      <tr>
        <td id="L3815" class="blob-num js-line-number" data-line-number="3815"></td>
        <td id="LC3815" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3816" class="blob-num js-line-number" data-line-number="3816"></td>
        <td id="LC3816" class="blob-code blob-code-inner js-file-line">            stat <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">lstatSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3817" class="blob-num js-line-number" data-line-number="3817"></td>
        <td id="LC3817" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3818" class="blob-num js-line-number" data-line-number="3818"></td>
        <td id="LC3818" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3819" class="blob-num js-line-number" data-line-number="3819"></td>
        <td id="LC3819" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3820" class="blob-num js-line-number" data-line-number="3820"></td>
        <td id="LC3820" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3821" class="blob-num js-line-number" data-line-number="3821"></td>
        <td id="LC3821" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> node.js v0.10.20 doesn&#39;t report blksize and blocks on Windows. Fake them with default blksize of 4096.</span></td>
      </tr>
      <tr>
        <td id="L3822" class="blob-num js-line-number" data-line-number="3822"></td>
        <td id="LC3822" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> See http://support.microsoft.com/kb/140365</span></td>
      </tr>
      <tr>
        <td id="L3823" class="blob-num js-line-number" data-line-number="3823"></td>
        <td id="LC3823" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">NODEFS</span>.<span class="pl-smi">isWindows</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-smi">stat</span>.<span class="pl-smi">blksize</span>) {</td>
      </tr>
      <tr>
        <td id="L3824" class="blob-num js-line-number" data-line-number="3824"></td>
        <td id="LC3824" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stat</span>.<span class="pl-smi">blksize</span> <span class="pl-k">=</span> <span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L3825" class="blob-num js-line-number" data-line-number="3825"></td>
        <td id="LC3825" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3826" class="blob-num js-line-number" data-line-number="3826"></td>
        <td id="LC3826" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">NODEFS</span>.<span class="pl-smi">isWindows</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-smi">stat</span>.<span class="pl-smi">blocks</span>) {</td>
      </tr>
      <tr>
        <td id="L3827" class="blob-num js-line-number" data-line-number="3827"></td>
        <td id="LC3827" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stat</span>.<span class="pl-smi">blocks</span> <span class="pl-k">=</span> (<span class="pl-smi">stat</span>.<span class="pl-c1">size</span><span class="pl-k">+</span><span class="pl-smi">stat</span>.<span class="pl-smi">blksize</span><span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-smi">stat</span>.<span class="pl-smi">blksize</span><span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3828" class="blob-num js-line-number" data-line-number="3828"></td>
        <td id="LC3828" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3829" class="blob-num js-line-number" data-line-number="3829"></td>
        <td id="LC3829" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> {</td>
      </tr>
      <tr>
        <td id="L3830" class="blob-num js-line-number" data-line-number="3830"></td>
        <td id="LC3830" class="blob-code blob-code-inner js-file-line">            dev<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">dev</span>,</td>
      </tr>
      <tr>
        <td id="L3831" class="blob-num js-line-number" data-line-number="3831"></td>
        <td id="LC3831" class="blob-code blob-code-inner js-file-line">            ino<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">ino</span>,</td>
      </tr>
      <tr>
        <td id="L3832" class="blob-num js-line-number" data-line-number="3832"></td>
        <td id="LC3832" class="blob-code blob-code-inner js-file-line">            mode<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>,</td>
      </tr>
      <tr>
        <td id="L3833" class="blob-num js-line-number" data-line-number="3833"></td>
        <td id="LC3833" class="blob-code blob-code-inner js-file-line">            nlink<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">nlink</span>,</td>
      </tr>
      <tr>
        <td id="L3834" class="blob-num js-line-number" data-line-number="3834"></td>
        <td id="LC3834" class="blob-code blob-code-inner js-file-line">            uid<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">uid</span>,</td>
      </tr>
      <tr>
        <td id="L3835" class="blob-num js-line-number" data-line-number="3835"></td>
        <td id="LC3835" class="blob-code blob-code-inner js-file-line">            gid<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">gid</span>,</td>
      </tr>
      <tr>
        <td id="L3836" class="blob-num js-line-number" data-line-number="3836"></td>
        <td id="LC3836" class="blob-code blob-code-inner js-file-line">            rdev<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">rdev</span>,</td>
      </tr>
      <tr>
        <td id="L3837" class="blob-num js-line-number" data-line-number="3837"></td>
        <td id="LC3837" class="blob-code blob-code-inner js-file-line">            size<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-c1">size</span>,</td>
      </tr>
      <tr>
        <td id="L3838" class="blob-num js-line-number" data-line-number="3838"></td>
        <td id="LC3838" class="blob-code blob-code-inner js-file-line">            atime<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">atime</span>,</td>
      </tr>
      <tr>
        <td id="L3839" class="blob-num js-line-number" data-line-number="3839"></td>
        <td id="LC3839" class="blob-code blob-code-inner js-file-line">            mtime<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">mtime</span>,</td>
      </tr>
      <tr>
        <td id="L3840" class="blob-num js-line-number" data-line-number="3840"></td>
        <td id="LC3840" class="blob-code blob-code-inner js-file-line">            ctime<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">ctime</span>,</td>
      </tr>
      <tr>
        <td id="L3841" class="blob-num js-line-number" data-line-number="3841"></td>
        <td id="LC3841" class="blob-code blob-code-inner js-file-line">            blksize<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">blksize</span>,</td>
      </tr>
      <tr>
        <td id="L3842" class="blob-num js-line-number" data-line-number="3842"></td>
        <td id="LC3842" class="blob-code blob-code-inner js-file-line">            blocks<span class="pl-k">:</span> <span class="pl-smi">stat</span>.<span class="pl-smi">blocks</span></td>
      </tr>
      <tr>
        <td id="L3843" class="blob-num js-line-number" data-line-number="3843"></td>
        <td id="LC3843" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L3844" class="blob-num js-line-number" data-line-number="3844"></td>
        <td id="LC3844" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">setattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">attr</span>) {</td>
      </tr>
      <tr>
        <td id="L3845" class="blob-num js-line-number" data-line-number="3845"></td>
        <td id="LC3845" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(node);</td>
      </tr>
      <tr>
        <td id="L3846" class="blob-num js-line-number" data-line-number="3846"></td>
        <td id="LC3846" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3847" class="blob-num js-line-number" data-line-number="3847"></td>
        <td id="LC3847" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">mode</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3848" class="blob-num js-line-number" data-line-number="3848"></td>
        <td id="LC3848" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">chmodSync</span>(path, <span class="pl-smi">attr</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L3849" class="blob-num js-line-number" data-line-number="3849"></td>
        <td id="LC3849" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> update the common node structure mode as well</span></td>
      </tr>
      <tr>
        <td id="L3850" class="blob-num js-line-number" data-line-number="3850"></td>
        <td id="LC3850" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> <span class="pl-smi">attr</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L3851" class="blob-num js-line-number" data-line-number="3851"></td>
        <td id="LC3851" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3852" class="blob-num js-line-number" data-line-number="3852"></td>
        <td id="LC3852" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3853" class="blob-num js-line-number" data-line-number="3853"></td>
        <td id="LC3853" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> date <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span>);</td>
      </tr>
      <tr>
        <td id="L3854" class="blob-num js-line-number" data-line-number="3854"></td>
        <td id="LC3854" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">utimesSync</span>(path, date, date);</td>
      </tr>
      <tr>
        <td id="L3855" class="blob-num js-line-number" data-line-number="3855"></td>
        <td id="LC3855" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3856" class="blob-num js-line-number" data-line-number="3856"></td>
        <td id="LC3856" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-c1">size</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L3857" class="blob-num js-line-number" data-line-number="3857"></td>
        <td id="LC3857" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">truncateSync</span>(path, <span class="pl-smi">attr</span>.<span class="pl-c1">size</span>);</td>
      </tr>
      <tr>
        <td id="L3858" class="blob-num js-line-number" data-line-number="3858"></td>
        <td id="LC3858" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3859" class="blob-num js-line-number" data-line-number="3859"></td>
        <td id="LC3859" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3860" class="blob-num js-line-number" data-line-number="3860"></td>
        <td id="LC3860" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3861" class="blob-num js-line-number" data-line-number="3861"></td>
        <td id="LC3861" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3862" class="blob-num js-line-number" data-line-number="3862"></td>
        <td id="LC3862" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3863" class="blob-num js-line-number" data-line-number="3863"></td>
        <td id="LC3863" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">lookup</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3864" class="blob-num js-line-number" data-line-number="3864"></td>
        <td id="LC3864" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L3865" class="blob-num js-line-number" data-line-number="3865"></td>
        <td id="LC3865" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">getMode</span>(path);</td>
      </tr>
      <tr>
        <td id="L3866" class="blob-num js-line-number" data-line-number="3866"></td>
        <td id="LC3866" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">createNode</span>(parent, name, mode);</td>
      </tr>
      <tr>
        <td id="L3867" class="blob-num js-line-number" data-line-number="3867"></td>
        <td id="LC3867" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">mknod</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L3868" class="blob-num js-line-number" data-line-number="3868"></td>
        <td id="LC3868" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">createNode</span>(parent, name, mode, dev);</td>
      </tr>
      <tr>
        <td id="L3869" class="blob-num js-line-number" data-line-number="3869"></td>
        <td id="LC3869" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> create the backing node for this in the fs root as well</span></td>
      </tr>
      <tr>
        <td id="L3870" class="blob-num js-line-number" data-line-number="3870"></td>
        <td id="LC3870" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(node);</td>
      </tr>
      <tr>
        <td id="L3871" class="blob-num js-line-number" data-line-number="3871"></td>
        <td id="LC3871" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3872" class="blob-num js-line-number" data-line-number="3872"></td>
        <td id="LC3872" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3873" class="blob-num js-line-number" data-line-number="3873"></td>
        <td id="LC3873" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">mkdirSync</span>(path, <span class="pl-smi">node</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L3874" class="blob-num js-line-number" data-line-number="3874"></td>
        <td id="LC3874" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3875" class="blob-num js-line-number" data-line-number="3875"></td>
        <td id="LC3875" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">writeFileSync</span>(path, <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, { mode<span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-smi">mode</span> });</td>
      </tr>
      <tr>
        <td id="L3876" class="blob-num js-line-number" data-line-number="3876"></td>
        <td id="LC3876" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3877" class="blob-num js-line-number" data-line-number="3877"></td>
        <td id="LC3877" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3878" class="blob-num js-line-number" data-line-number="3878"></td>
        <td id="LC3878" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3879" class="blob-num js-line-number" data-line-number="3879"></td>
        <td id="LC3879" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3880" class="blob-num js-line-number" data-line-number="3880"></td>
        <td id="LC3880" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3881" class="blob-num js-line-number" data-line-number="3881"></td>
        <td id="LC3881" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L3882" class="blob-num js-line-number" data-line-number="3882"></td>
        <td id="LC3882" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rename</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">oldNode</span>, <span class="pl-smi">newDir</span>, <span class="pl-smi">newName</span>) {</td>
      </tr>
      <tr>
        <td id="L3883" class="blob-num js-line-number" data-line-number="3883"></td>
        <td id="LC3883" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> oldPath <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(oldNode);</td>
      </tr>
      <tr>
        <td id="L3884" class="blob-num js-line-number" data-line-number="3884"></td>
        <td id="LC3884" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> newPath <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(newDir), newName);</td>
      </tr>
      <tr>
        <td id="L3885" class="blob-num js-line-number" data-line-number="3885"></td>
        <td id="LC3885" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3886" class="blob-num js-line-number" data-line-number="3886"></td>
        <td id="LC3886" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">fs</span>.<span class="pl-en">renameSync</span>(oldPath, newPath);</td>
      </tr>
      <tr>
        <td id="L3887" class="blob-num js-line-number" data-line-number="3887"></td>
        <td id="LC3887" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3888" class="blob-num js-line-number" data-line-number="3888"></td>
        <td id="LC3888" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3889" class="blob-num js-line-number" data-line-number="3889"></td>
        <td id="LC3889" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3890" class="blob-num js-line-number" data-line-number="3890"></td>
        <td id="LC3890" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3891" class="blob-num js-line-number" data-line-number="3891"></td>
        <td id="LC3891" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">unlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3892" class="blob-num js-line-number" data-line-number="3892"></td>
        <td id="LC3892" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L3893" class="blob-num js-line-number" data-line-number="3893"></td>
        <td id="LC3893" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3894" class="blob-num js-line-number" data-line-number="3894"></td>
        <td id="LC3894" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">fs</span>.<span class="pl-en">unlinkSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3895" class="blob-num js-line-number" data-line-number="3895"></td>
        <td id="LC3895" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3896" class="blob-num js-line-number" data-line-number="3896"></td>
        <td id="LC3896" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3897" class="blob-num js-line-number" data-line-number="3897"></td>
        <td id="LC3897" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3898" class="blob-num js-line-number" data-line-number="3898"></td>
        <td id="LC3898" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3899" class="blob-num js-line-number" data-line-number="3899"></td>
        <td id="LC3899" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rmdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L3900" class="blob-num js-line-number" data-line-number="3900"></td>
        <td id="LC3900" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L3901" class="blob-num js-line-number" data-line-number="3901"></td>
        <td id="LC3901" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3902" class="blob-num js-line-number" data-line-number="3902"></td>
        <td id="LC3902" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">fs</span>.<span class="pl-en">rmdirSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3903" class="blob-num js-line-number" data-line-number="3903"></td>
        <td id="LC3903" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3904" class="blob-num js-line-number" data-line-number="3904"></td>
        <td id="LC3904" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3905" class="blob-num js-line-number" data-line-number="3905"></td>
        <td id="LC3905" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3906" class="blob-num js-line-number" data-line-number="3906"></td>
        <td id="LC3906" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3907" class="blob-num js-line-number" data-line-number="3907"></td>
        <td id="LC3907" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3908" class="blob-num js-line-number" data-line-number="3908"></td>
        <td id="LC3908" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(node);</td>
      </tr>
      <tr>
        <td id="L3909" class="blob-num js-line-number" data-line-number="3909"></td>
        <td id="LC3909" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3910" class="blob-num js-line-number" data-line-number="3910"></td>
        <td id="LC3910" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">fs</span>.<span class="pl-en">readdirSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3911" class="blob-num js-line-number" data-line-number="3911"></td>
        <td id="LC3911" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3912" class="blob-num js-line-number" data-line-number="3912"></td>
        <td id="LC3912" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3913" class="blob-num js-line-number" data-line-number="3913"></td>
        <td id="LC3913" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3914" class="blob-num js-line-number" data-line-number="3914"></td>
        <td id="LC3914" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3915" class="blob-num js-line-number" data-line-number="3915"></td>
        <td id="LC3915" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">symlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">newName</span>, <span class="pl-smi">oldPath</span>) {</td>
      </tr>
      <tr>
        <td id="L3916" class="blob-num js-line-number" data-line-number="3916"></td>
        <td id="LC3916" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> newPath <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(parent), newName);</td>
      </tr>
      <tr>
        <td id="L3917" class="blob-num js-line-number" data-line-number="3917"></td>
        <td id="LC3917" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3918" class="blob-num js-line-number" data-line-number="3918"></td>
        <td id="LC3918" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">fs</span>.<span class="pl-en">symlinkSync</span>(oldPath, newPath);</td>
      </tr>
      <tr>
        <td id="L3919" class="blob-num js-line-number" data-line-number="3919"></td>
        <td id="LC3919" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3920" class="blob-num js-line-number" data-line-number="3920"></td>
        <td id="LC3920" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3921" class="blob-num js-line-number" data-line-number="3921"></td>
        <td id="LC3921" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3922" class="blob-num js-line-number" data-line-number="3922"></td>
        <td id="LC3922" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3923" class="blob-num js-line-number" data-line-number="3923"></td>
        <td id="LC3923" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L3924" class="blob-num js-line-number" data-line-number="3924"></td>
        <td id="LC3924" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(node);</td>
      </tr>
      <tr>
        <td id="L3925" class="blob-num js-line-number" data-line-number="3925"></td>
        <td id="LC3925" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3926" class="blob-num js-line-number" data-line-number="3926"></td>
        <td id="LC3926" class="blob-code blob-code-inner js-file-line">            path <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">readlinkSync</span>(path);</td>
      </tr>
      <tr>
        <td id="L3927" class="blob-num js-line-number" data-line-number="3927"></td>
        <td id="LC3927" class="blob-code blob-code-inner js-file-line">            path <span class="pl-k">=</span> <span class="pl-c1">NODEJS_PATH</span>.<span class="pl-en">relative</span>(<span class="pl-c1">NODEJS_PATH</span>.<span class="pl-en">resolve</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>.<span class="pl-smi">root</span>), path);</td>
      </tr>
      <tr>
        <td id="L3928" class="blob-num js-line-number" data-line-number="3928"></td>
        <td id="LC3928" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> path;</td>
      </tr>
      <tr>
        <td id="L3929" class="blob-num js-line-number" data-line-number="3929"></td>
        <td id="LC3929" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3930" class="blob-num js-line-number" data-line-number="3930"></td>
        <td id="LC3930" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3931" class="blob-num js-line-number" data-line-number="3931"></td>
        <td id="LC3931" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3932" class="blob-num js-line-number" data-line-number="3932"></td>
        <td id="LC3932" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3933" class="blob-num js-line-number" data-line-number="3933"></td>
        <td id="LC3933" class="blob-code blob-code-inner js-file-line">        }},stream_ops<span class="pl-k">:</span>{<span class="pl-en">open</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L3934" class="blob-num js-line-number" data-line-number="3934"></td>
        <td id="LC3934" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">NODEFS</span>.<span class="pl-en">realPath</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>);</td>
      </tr>
      <tr>
        <td id="L3935" class="blob-num js-line-number" data-line-number="3935"></td>
        <td id="LC3935" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3936" class="blob-num js-line-number" data-line-number="3936"></td>
        <td id="LC3936" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3937" class="blob-num js-line-number" data-line-number="3937"></td>
        <td id="LC3937" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span> <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">openSync</span>(path, <span class="pl-c1">NODEFS</span>.<span class="pl-en">flagsForNode</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span>));</td>
      </tr>
      <tr>
        <td id="L3938" class="blob-num js-line-number" data-line-number="3938"></td>
        <td id="LC3938" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3939" class="blob-num js-line-number" data-line-number="3939"></td>
        <td id="LC3939" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3940" class="blob-num js-line-number" data-line-number="3940"></td>
        <td id="LC3940" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3941" class="blob-num js-line-number" data-line-number="3941"></td>
        <td id="LC3941" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3942" class="blob-num js-line-number" data-line-number="3942"></td>
        <td id="LC3942" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3943" class="blob-num js-line-number" data-line-number="3943"></td>
        <td id="LC3943" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">close</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L3944" class="blob-num js-line-number" data-line-number="3944"></td>
        <td id="LC3944" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3945" class="blob-num js-line-number" data-line-number="3945"></td>
        <td id="LC3945" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span>) {</td>
      </tr>
      <tr>
        <td id="L3946" class="blob-num js-line-number" data-line-number="3946"></td>
        <td id="LC3946" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">fs</span>.<span class="pl-en">closeSync</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span>);</td>
      </tr>
      <tr>
        <td id="L3947" class="blob-num js-line-number" data-line-number="3947"></td>
        <td id="LC3947" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3948" class="blob-num js-line-number" data-line-number="3948"></td>
        <td id="LC3948" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3949" class="blob-num js-line-number" data-line-number="3949"></td>
        <td id="LC3949" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">e</span>.<span class="pl-c1">code</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L3950" class="blob-num js-line-number" data-line-number="3950"></td>
        <td id="LC3950" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3951" class="blob-num js-line-number" data-line-number="3951"></td>
        <td id="LC3951" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3952" class="blob-num js-line-number" data-line-number="3952"></td>
        <td id="LC3952" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">read</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L3953" class="blob-num js-line-number" data-line-number="3953"></td>
        <td id="LC3953" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Node.js &lt; 6 compatibility: node errors on 0 length reads</span></td>
      </tr>
      <tr>
        <td id="L3954" class="blob-num js-line-number" data-line-number="3954"></td>
        <td id="LC3954" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (length <span class="pl-k">===</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3955" class="blob-num js-line-number" data-line-number="3955"></td>
        <td id="LC3955" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3956" class="blob-num js-line-number" data-line-number="3956"></td>
        <td id="LC3956" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">fs</span>.<span class="pl-en">readSync</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span>, <span class="pl-c1">NODEFS</span>.<span class="pl-en">bufferFrom</span>(<span class="pl-smi">buffer</span>.<span class="pl-smi">buffer</span>), offset, length, position);</td>
      </tr>
      <tr>
        <td id="L3957" class="blob-num js-line-number" data-line-number="3957"></td>
        <td id="LC3957" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3958" class="blob-num js-line-number" data-line-number="3958"></td>
        <td id="LC3958" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3959" class="blob-num js-line-number" data-line-number="3959"></td>
        <td id="LC3959" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3960" class="blob-num js-line-number" data-line-number="3960"></td>
        <td id="LC3960" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">write</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L3961" class="blob-num js-line-number" data-line-number="3961"></td>
        <td id="LC3961" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3962" class="blob-num js-line-number" data-line-number="3962"></td>
        <td id="LC3962" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">fs</span>.<span class="pl-en">writeSync</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span>, <span class="pl-c1">NODEFS</span>.<span class="pl-en">bufferFrom</span>(<span class="pl-smi">buffer</span>.<span class="pl-smi">buffer</span>), offset, length, position);</td>
      </tr>
      <tr>
        <td id="L3963" class="blob-num js-line-number" data-line-number="3963"></td>
        <td id="LC3963" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3964" class="blob-num js-line-number" data-line-number="3964"></td>
        <td id="LC3964" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3965" class="blob-num js-line-number" data-line-number="3965"></td>
        <td id="LC3965" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3966" class="blob-num js-line-number" data-line-number="3966"></td>
        <td id="LC3966" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">llseek</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">whence</span>) {</td>
      </tr>
      <tr>
        <td id="L3967" class="blob-num js-line-number" data-line-number="3967"></td>
        <td id="LC3967" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> position <span class="pl-k">=</span> offset;</td>
      </tr>
      <tr>
        <td id="L3968" class="blob-num js-line-number" data-line-number="3968"></td>
        <td id="LC3968" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">1</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_CUR.</span></td>
      </tr>
      <tr>
        <td id="L3969" class="blob-num js-line-number" data-line-number="3969"></td>
        <td id="LC3969" class="blob-code blob-code-inner js-file-line">            position <span class="pl-k">+=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L3970" class="blob-num js-line-number" data-line-number="3970"></td>
        <td id="LC3970" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">2</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_END.</span></td>
      </tr>
      <tr>
        <td id="L3971" class="blob-num js-line-number" data-line-number="3971"></td>
        <td id="LC3971" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L3972" class="blob-num js-line-number" data-line-number="3972"></td>
        <td id="LC3972" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L3973" class="blob-num js-line-number" data-line-number="3973"></td>
        <td id="LC3973" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> stat <span class="pl-k">=</span> <span class="pl-smi">fs</span>.<span class="pl-en">fstatSync</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">nfd</span>);</td>
      </tr>
      <tr>
        <td id="L3974" class="blob-num js-line-number" data-line-number="3974"></td>
        <td id="LC3974" class="blob-code blob-code-inner js-file-line">                position <span class="pl-k">+=</span> <span class="pl-smi">stat</span>.<span class="pl-c1">size</span>;</td>
      </tr>
      <tr>
        <td id="L3975" class="blob-num js-line-number" data-line-number="3975"></td>
        <td id="LC3975" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L3976" class="blob-num js-line-number" data-line-number="3976"></td>
        <td id="LC3976" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L3977" class="blob-num js-line-number" data-line-number="3977"></td>
        <td id="LC3977" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L3978" class="blob-num js-line-number" data-line-number="3978"></td>
        <td id="LC3978" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3979" class="blob-num js-line-number" data-line-number="3979"></td>
        <td id="LC3979" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3980" class="blob-num js-line-number" data-line-number="3980"></td>
        <td id="LC3980" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3981" class="blob-num js-line-number" data-line-number="3981"></td>
        <td id="LC3981" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3982" class="blob-num js-line-number" data-line-number="3982"></td>
        <td id="LC3982" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L3983" class="blob-num js-line-number" data-line-number="3983"></td>
        <td id="LC3983" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L3984" class="blob-num js-line-number" data-line-number="3984"></td>
        <td id="LC3984" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3985" class="blob-num js-line-number" data-line-number="3985"></td>
        <td id="LC3985" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> position;</td>
      </tr>
      <tr>
        <td id="L3986" class="blob-num js-line-number" data-line-number="3986"></td>
        <td id="LC3986" class="blob-code blob-code-inner js-file-line">        }}};</td>
      </tr>
      <tr>
        <td id="L3987" class="blob-num js-line-number" data-line-number="3987"></td>
        <td id="LC3987" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L3988" class="blob-num js-line-number" data-line-number="3988"></td>
        <td id="LC3988" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">WORKERFS</span><span class="pl-k">=</span>{<span class="pl-c1">DIR_MODE</span><span class="pl-k">:</span><span class="pl-c1">16895</span>,<span class="pl-c1">FILE_MODE</span><span class="pl-k">:</span><span class="pl-c1">33279</span>,reader<span class="pl-k">:</span><span class="pl-c1">null</span>,<span class="pl-en">mount</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L3989" class="blob-num js-line-number" data-line-number="3989"></td>
        <td id="LC3989" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-c1">ENVIRONMENT_IS_WORKER</span>);</td>
      </tr>
      <tr>
        <td id="L3990" class="blob-num js-line-number" data-line-number="3990"></td>
        <td id="LC3990" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">WORKERFS</span>.<span class="pl-smi">reader</span>) <span class="pl-c1">WORKERFS</span>.<span class="pl-smi">reader</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">FileReaderSync</span>();</td>
      </tr>
      <tr>
        <td id="L3991" class="blob-num js-line-number" data-line-number="3991"></td>
        <td id="LC3991" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> root <span class="pl-k">=</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-en">createNode</span>(<span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">DIR_MODE</span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L3992" class="blob-num js-line-number" data-line-number="3992"></td>
        <td id="LC3992" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> createdParents <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L3993" class="blob-num js-line-number" data-line-number="3993"></td>
        <td id="LC3993" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">ensureParent</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L3994" class="blob-num js-line-number" data-line-number="3994"></td>
        <td id="LC3994" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> return the parent node, creating subdirs as necessary</span></td>
      </tr>
      <tr>
        <td id="L3995" class="blob-num js-line-number" data-line-number="3995"></td>
        <td id="LC3995" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> parts <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3996" class="blob-num js-line-number" data-line-number="3996"></td>
        <td id="LC3996" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> parent <span class="pl-k">=</span> root;</td>
      </tr>
      <tr>
        <td id="L3997" class="blob-num js-line-number" data-line-number="3997"></td>
        <td id="LC3997" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">parts</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L3998" class="blob-num js-line-number" data-line-number="3998"></td>
        <td id="LC3998" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> curr <span class="pl-k">=</span> <span class="pl-smi">parts</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>, i<span class="pl-k">+</span><span class="pl-c1">1</span>).<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3999" class="blob-num js-line-number" data-line-number="3999"></td>
        <td id="LC3999" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Issue 4254: Using curr as a node name will prevent the node</span></td>
      </tr>
      <tr>
        <td id="L4000" class="blob-num js-line-number" data-line-number="4000"></td>
        <td id="LC4000" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> from being found in FS.nameTable when FS.open is called on</span></td>
      </tr>
      <tr>
        <td id="L4001" class="blob-num js-line-number" data-line-number="4001"></td>
        <td id="LC4001" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> a path which holds a child of this node,</span></td>
      </tr>
      <tr>
        <td id="L4002" class="blob-num js-line-number" data-line-number="4002"></td>
        <td id="LC4002" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> given that all FS functions assume node names</span></td>
      </tr>
      <tr>
        <td id="L4003" class="blob-num js-line-number" data-line-number="4003"></td>
        <td id="LC4003" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> are just their corresponding parts within their given path,</span></td>
      </tr>
      <tr>
        <td id="L4004" class="blob-num js-line-number" data-line-number="4004"></td>
        <td id="LC4004" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> rather than incremental aggregates which include their parent&#39;s</span></td>
      </tr>
      <tr>
        <td id="L4005" class="blob-num js-line-number" data-line-number="4005"></td>
        <td id="LC4005" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> directories.</span></td>
      </tr>
      <tr>
        <td id="L4006" class="blob-num js-line-number" data-line-number="4006"></td>
        <td id="LC4006" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>createdParents[curr]) {</td>
      </tr>
      <tr>
        <td id="L4007" class="blob-num js-line-number" data-line-number="4007"></td>
        <td id="LC4007" class="blob-code blob-code-inner js-file-line">              createdParents[curr] <span class="pl-k">=</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-en">createNode</span>(parent, parts[i], <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">DIR_MODE</span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4008" class="blob-num js-line-number" data-line-number="4008"></td>
        <td id="LC4008" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4009" class="blob-num js-line-number" data-line-number="4009"></td>
        <td id="LC4009" class="blob-code blob-code-inner js-file-line">            parent <span class="pl-k">=</span> createdParents[curr];</td>
      </tr>
      <tr>
        <td id="L4010" class="blob-num js-line-number" data-line-number="4010"></td>
        <td id="LC4010" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4011" class="blob-num js-line-number" data-line-number="4011"></td>
        <td id="LC4011" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> parent;</td>
      </tr>
      <tr>
        <td id="L4012" class="blob-num js-line-number" data-line-number="4012"></td>
        <td id="LC4012" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4013" class="blob-num js-line-number" data-line-number="4013"></td>
        <td id="LC4013" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">base</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4014" class="blob-num js-line-number" data-line-number="4014"></td>
        <td id="LC4014" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> parts <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4015" class="blob-num js-line-number" data-line-number="4015"></td>
        <td id="LC4015" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> parts[<span class="pl-smi">parts</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>];</td>
      </tr>
      <tr>
        <td id="L4016" class="blob-num js-line-number" data-line-number="4016"></td>
        <td id="LC4016" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4017" class="blob-num js-line-number" data-line-number="4017"></td>
        <td id="LC4017" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> We also accept FileList here, by using Array.prototype</span></td>
      </tr>
      <tr>
        <td id="L4018" class="blob-num js-line-number" data-line-number="4018"></td>
        <td id="LC4018" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">forEach</span>.<span class="pl-c1">call</span>(<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>files<span class="pl-pds">&quot;</span></span>] <span class="pl-k">||</span> [], <span class="pl-k">function</span>(<span class="pl-smi">file</span>) {</td>
      </tr>
      <tr>
        <td id="L4019" class="blob-num js-line-number" data-line-number="4019"></td>
        <td id="LC4019" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">WORKERFS</span>.<span class="pl-en">createNode</span>(<span class="pl-en">ensureParent</span>(<span class="pl-smi">file</span>.<span class="pl-c1">name</span>), <span class="pl-en">base</span>(<span class="pl-smi">file</span>.<span class="pl-c1">name</span>), <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">FILE_MODE</span>, <span class="pl-c1">0</span>, file, <span class="pl-smi">file</span>.<span class="pl-smi">lastModifiedDate</span>);</td>
      </tr>
      <tr>
        <td id="L4020" class="blob-num js-line-number" data-line-number="4020"></td>
        <td id="LC4020" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4021" class="blob-num js-line-number" data-line-number="4021"></td>
        <td id="LC4021" class="blob-code blob-code-inner js-file-line">        (<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>blobs<span class="pl-pds">&quot;</span></span>] <span class="pl-k">||</span> []).<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">obj</span>) {</td>
      </tr>
      <tr>
        <td id="L4022" class="blob-num js-line-number" data-line-number="4022"></td>
        <td id="LC4022" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">WORKERFS</span>.<span class="pl-en">createNode</span>(<span class="pl-en">ensureParent</span>(obj[<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>]), <span class="pl-en">base</span>(obj[<span class="pl-s"><span class="pl-pds">&quot;</span>name<span class="pl-pds">&quot;</span></span>]), <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">FILE_MODE</span>, <span class="pl-c1">0</span>, obj[<span class="pl-s"><span class="pl-pds">&quot;</span>data<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L4023" class="blob-num js-line-number" data-line-number="4023"></td>
        <td id="LC4023" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4024" class="blob-num js-line-number" data-line-number="4024"></td>
        <td id="LC4024" class="blob-code blob-code-inner js-file-line">        (<span class="pl-smi">mount</span>.<span class="pl-smi">opts</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>packages<span class="pl-pds">&quot;</span></span>] <span class="pl-k">||</span> []).<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">pack</span>) {</td>
      </tr>
      <tr>
        <td id="L4025" class="blob-num js-line-number" data-line-number="4025"></td>
        <td id="LC4025" class="blob-code blob-code-inner js-file-line">          pack[<span class="pl-s"><span class="pl-pds">&#39;</span>metadata<span class="pl-pds">&#39;</span></span>].<span class="pl-smi">files</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">file</span>) {</td>
      </tr>
      <tr>
        <td id="L4026" class="blob-num js-line-number" data-line-number="4026"></td>
        <td id="LC4026" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-smi">file</span>.<span class="pl-c1">filename</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">//</span> remove initial slash</span></td>
      </tr>
      <tr>
        <td id="L4027" class="blob-num js-line-number" data-line-number="4027"></td>
        <td id="LC4027" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">WORKERFS</span>.<span class="pl-en">createNode</span>(<span class="pl-en">ensureParent</span>(name), <span class="pl-en">base</span>(name), <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">FILE_MODE</span>, <span class="pl-c1">0</span>, pack[<span class="pl-s"><span class="pl-pds">&#39;</span>blob<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">slice</span>(<span class="pl-smi">file</span>.<span class="pl-c1">start</span>, <span class="pl-smi">file</span>.<span class="pl-smi">end</span>));</td>
      </tr>
      <tr>
        <td id="L4028" class="blob-num js-line-number" data-line-number="4028"></td>
        <td id="LC4028" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L4029" class="blob-num js-line-number" data-line-number="4029"></td>
        <td id="LC4029" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4030" class="blob-num js-line-number" data-line-number="4030"></td>
        <td id="LC4030" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> root;</td>
      </tr>
      <tr>
        <td id="L4031" class="blob-num js-line-number" data-line-number="4031"></td>
        <td id="LC4031" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createNode</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>, <span class="pl-smi">contents</span>, <span class="pl-smi">mtime</span>) {</td>
      </tr>
      <tr>
        <td id="L4032" class="blob-num js-line-number" data-line-number="4032"></td>
        <td id="LC4032" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createNode</span>(parent, name, mode);</td>
      </tr>
      <tr>
        <td id="L4033" class="blob-num js-line-number" data-line-number="4033"></td>
        <td id="LC4033" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> mode;</td>
      </tr>
      <tr>
        <td id="L4034" class="blob-num js-line-number" data-line-number="4034"></td>
        <td id="LC4034" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-smi">node_ops</span>;</td>
      </tr>
      <tr>
        <td id="L4035" class="blob-num js-line-number" data-line-number="4035"></td>
        <td id="LC4035" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-smi">stream_ops</span>;</td>
      </tr>
      <tr>
        <td id="L4036" class="blob-num js-line-number" data-line-number="4036"></td>
        <td id="LC4036" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> (mtime <span class="pl-k">||</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>).<span class="pl-c1">getTime</span>();</td>
      </tr>
      <tr>
        <td id="L4037" class="blob-num js-line-number" data-line-number="4037"></td>
        <td id="LC4037" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-c1">WORKERFS</span>.<span class="pl-c1">FILE_MODE</span> <span class="pl-k">!==</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">DIR_MODE</span>);</td>
      </tr>
      <tr>
        <td id="L4038" class="blob-num js-line-number" data-line-number="4038"></td>
        <td id="LC4038" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (mode <span class="pl-k">===</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-c1">FILE_MODE</span>) {</td>
      </tr>
      <tr>
        <td id="L4039" class="blob-num js-line-number" data-line-number="4039"></td>
        <td id="LC4039" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-smi">contents</span>.<span class="pl-c1">size</span>;</td>
      </tr>
      <tr>
        <td id="L4040" class="blob-num js-line-number" data-line-number="4040"></td>
        <td id="LC4040" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> contents;</td>
      </tr>
      <tr>
        <td id="L4041" class="blob-num js-line-number" data-line-number="4041"></td>
        <td id="LC4041" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4042" class="blob-num js-line-number" data-line-number="4042"></td>
        <td id="LC4042" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> <span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L4043" class="blob-num js-line-number" data-line-number="4043"></td>
        <td id="LC4043" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L4044" class="blob-num js-line-number" data-line-number="4044"></td>
        <td id="LC4044" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4045" class="blob-num js-line-number" data-line-number="4045"></td>
        <td id="LC4045" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (parent) {</td>
      </tr>
      <tr>
        <td id="L4046" class="blob-num js-line-number" data-line-number="4046"></td>
        <td id="LC4046" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">parent</span>.<span class="pl-smi">contents</span>[name] <span class="pl-k">=</span> node;</td>
      </tr>
      <tr>
        <td id="L4047" class="blob-num js-line-number" data-line-number="4047"></td>
        <td id="LC4047" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4048" class="blob-num js-line-number" data-line-number="4048"></td>
        <td id="LC4048" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L4049" class="blob-num js-line-number" data-line-number="4049"></td>
        <td id="LC4049" class="blob-code blob-code-inner js-file-line">      },node_ops<span class="pl-k">:</span>{<span class="pl-en">getattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4050" class="blob-num js-line-number" data-line-number="4050"></td>
        <td id="LC4050" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> {</td>
      </tr>
      <tr>
        <td id="L4051" class="blob-num js-line-number" data-line-number="4051"></td>
        <td id="LC4051" class="blob-code blob-code-inner js-file-line">            dev<span class="pl-k">:</span> <span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L4052" class="blob-num js-line-number" data-line-number="4052"></td>
        <td id="LC4052" class="blob-code blob-code-inner js-file-line">            ino<span class="pl-k">:</span> <span class="pl-c1">undefined</span>,</td>
      </tr>
      <tr>
        <td id="L4053" class="blob-num js-line-number" data-line-number="4053"></td>
        <td id="LC4053" class="blob-code blob-code-inner js-file-line">            mode<span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-smi">mode</span>,</td>
      </tr>
      <tr>
        <td id="L4054" class="blob-num js-line-number" data-line-number="4054"></td>
        <td id="LC4054" class="blob-code blob-code-inner js-file-line">            nlink<span class="pl-k">:</span> <span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L4055" class="blob-num js-line-number" data-line-number="4055"></td>
        <td id="LC4055" class="blob-code blob-code-inner js-file-line">            uid<span class="pl-k">:</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L4056" class="blob-num js-line-number" data-line-number="4056"></td>
        <td id="LC4056" class="blob-code blob-code-inner js-file-line">            gid<span class="pl-k">:</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L4057" class="blob-num js-line-number" data-line-number="4057"></td>
        <td id="LC4057" class="blob-code blob-code-inner js-file-line">            rdev<span class="pl-k">:</span> <span class="pl-c1">undefined</span>,</td>
      </tr>
      <tr>
        <td id="L4058" class="blob-num js-line-number" data-line-number="4058"></td>
        <td id="LC4058" class="blob-code blob-code-inner js-file-line">            size<span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-c1">size</span>,</td>
      </tr>
      <tr>
        <td id="L4059" class="blob-num js-line-number" data-line-number="4059"></td>
        <td id="LC4059" class="blob-code blob-code-inner js-file-line">            atime<span class="pl-k">:</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>),</td>
      </tr>
      <tr>
        <td id="L4060" class="blob-num js-line-number" data-line-number="4060"></td>
        <td id="LC4060" class="blob-code blob-code-inner js-file-line">            mtime<span class="pl-k">:</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>),</td>
      </tr>
      <tr>
        <td id="L4061" class="blob-num js-line-number" data-line-number="4061"></td>
        <td id="LC4061" class="blob-code blob-code-inner js-file-line">            ctime<span class="pl-k">:</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span>),</td>
      </tr>
      <tr>
        <td id="L4062" class="blob-num js-line-number" data-line-number="4062"></td>
        <td id="LC4062" class="blob-code blob-code-inner js-file-line">            blksize<span class="pl-k">:</span> <span class="pl-c1">4096</span>,</td>
      </tr>
      <tr>
        <td id="L4063" class="blob-num js-line-number" data-line-number="4063"></td>
        <td id="LC4063" class="blob-code blob-code-inner js-file-line">            blocks<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">ceil</span>(<span class="pl-smi">node</span>.<span class="pl-c1">size</span> <span class="pl-k">/</span> <span class="pl-c1">4096</span>),</td>
      </tr>
      <tr>
        <td id="L4064" class="blob-num js-line-number" data-line-number="4064"></td>
        <td id="LC4064" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L4065" class="blob-num js-line-number" data-line-number="4065"></td>
        <td id="LC4065" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">setattr</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">attr</span>) {</td>
      </tr>
      <tr>
        <td id="L4066" class="blob-num js-line-number" data-line-number="4066"></td>
        <td id="LC4066" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">mode</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L4067" class="blob-num js-line-number" data-line-number="4067"></td>
        <td id="LC4067" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> <span class="pl-smi">attr</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L4068" class="blob-num js-line-number" data-line-number="4068"></td>
        <td id="LC4068" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4069" class="blob-num js-line-number" data-line-number="4069"></td>
        <td id="LC4069" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L4070" class="blob-num js-line-number" data-line-number="4070"></td>
        <td id="LC4070" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-smi">attr</span>.<span class="pl-smi">timestamp</span>;</td>
      </tr>
      <tr>
        <td id="L4071" class="blob-num js-line-number" data-line-number="4071"></td>
        <td id="LC4071" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4072" class="blob-num js-line-number" data-line-number="4072"></td>
        <td id="LC4072" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">lookup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4073" class="blob-num js-line-number" data-line-number="4073"></td>
        <td id="LC4073" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4074" class="blob-num js-line-number" data-line-number="4074"></td>
        <td id="LC4074" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">mknod</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4075" class="blob-num js-line-number" data-line-number="4075"></td>
        <td id="LC4075" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4076" class="blob-num js-line-number" data-line-number="4076"></td>
        <td id="LC4076" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rename</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">oldNode</span>, <span class="pl-smi">newDir</span>, <span class="pl-smi">newName</span>) {</td>
      </tr>
      <tr>
        <td id="L4077" class="blob-num js-line-number" data-line-number="4077"></td>
        <td id="LC4077" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4078" class="blob-num js-line-number" data-line-number="4078"></td>
        <td id="LC4078" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">unlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4079" class="blob-num js-line-number" data-line-number="4079"></td>
        <td id="LC4079" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4080" class="blob-num js-line-number" data-line-number="4080"></td>
        <td id="LC4080" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">rmdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4081" class="blob-num js-line-number" data-line-number="4081"></td>
        <td id="LC4081" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4082" class="blob-num js-line-number" data-line-number="4082"></td>
        <td id="LC4082" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4083" class="blob-num js-line-number" data-line-number="4083"></td>
        <td id="LC4083" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> entries <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L4084" class="blob-num js-line-number" data-line-number="4084"></td>
        <td id="LC4084" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> <span class="pl-smi">node</span>.<span class="pl-smi">contents</span>) {</td>
      </tr>
      <tr>
        <td id="L4085" class="blob-num js-line-number" data-line-number="4085"></td>
        <td id="LC4085" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-en">hasOwnProperty</span>(key)) {</td>
      </tr>
      <tr>
        <td id="L4086" class="blob-num js-line-number" data-line-number="4086"></td>
        <td id="LC4086" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L4087" class="blob-num js-line-number" data-line-number="4087"></td>
        <td id="LC4087" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4088" class="blob-num js-line-number" data-line-number="4088"></td>
        <td id="LC4088" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">entries</span>.<span class="pl-c1">push</span>(key);</td>
      </tr>
      <tr>
        <td id="L4089" class="blob-num js-line-number" data-line-number="4089"></td>
        <td id="LC4089" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4090" class="blob-num js-line-number" data-line-number="4090"></td>
        <td id="LC4090" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> entries;</td>
      </tr>
      <tr>
        <td id="L4091" class="blob-num js-line-number" data-line-number="4091"></td>
        <td id="LC4091" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">symlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">newName</span>, <span class="pl-smi">oldPath</span>) {</td>
      </tr>
      <tr>
        <td id="L4092" class="blob-num js-line-number" data-line-number="4092"></td>
        <td id="LC4092" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4093" class="blob-num js-line-number" data-line-number="4093"></td>
        <td id="LC4093" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">readlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4094" class="blob-num js-line-number" data-line-number="4094"></td>
        <td id="LC4094" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4095" class="blob-num js-line-number" data-line-number="4095"></td>
        <td id="LC4095" class="blob-code blob-code-inner js-file-line">        }},stream_ops<span class="pl-k">:</span>{<span class="pl-en">read</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L4096" class="blob-num js-line-number" data-line-number="4096"></td>
        <td id="LC4096" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&gt;=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-c1">size</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4097" class="blob-num js-line-number" data-line-number="4097"></td>
        <td id="LC4097" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> chunk <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">slice</span>(position, position <span class="pl-k">+</span> length);</td>
      </tr>
      <tr>
        <td id="L4098" class="blob-num js-line-number" data-line-number="4098"></td>
        <td id="LC4098" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ab <span class="pl-k">=</span> <span class="pl-c1">WORKERFS</span>.<span class="pl-smi">reader</span>.<span class="pl-en">readAsArrayBuffer</span>(chunk);</td>
      </tr>
      <tr>
        <td id="L4099" class="blob-num js-line-number" data-line-number="4099"></td>
        <td id="LC4099" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">buffer</span>.<span class="pl-c1">set</span>(<span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(ab), offset);</td>
      </tr>
      <tr>
        <td id="L4100" class="blob-num js-line-number" data-line-number="4100"></td>
        <td id="LC4100" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">chunk</span>.<span class="pl-c1">size</span>;</td>
      </tr>
      <tr>
        <td id="L4101" class="blob-num js-line-number" data-line-number="4101"></td>
        <td id="LC4101" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">write</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L4102" class="blob-num js-line-number" data-line-number="4102"></td>
        <td id="LC4102" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L4103" class="blob-num js-line-number" data-line-number="4103"></td>
        <td id="LC4103" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">llseek</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">whence</span>) {</td>
      </tr>
      <tr>
        <td id="L4104" class="blob-num js-line-number" data-line-number="4104"></td>
        <td id="LC4104" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> position <span class="pl-k">=</span> offset;</td>
      </tr>
      <tr>
        <td id="L4105" class="blob-num js-line-number" data-line-number="4105"></td>
        <td id="LC4105" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">1</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_CUR.</span></td>
      </tr>
      <tr>
        <td id="L4106" class="blob-num js-line-number" data-line-number="4106"></td>
        <td id="LC4106" class="blob-code blob-code-inner js-file-line">            position <span class="pl-k">+=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L4107" class="blob-num js-line-number" data-line-number="4107"></td>
        <td id="LC4107" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> <span class="pl-k">if</span> (whence <span class="pl-k">===</span> <span class="pl-c1">2</span>) {  <span class="pl-c"><span class="pl-c">//</span> SEEK_END.</span></td>
      </tr>
      <tr>
        <td id="L4108" class="blob-num js-line-number" data-line-number="4108"></td>
        <td id="LC4108" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4109" class="blob-num js-line-number" data-line-number="4109"></td>
        <td id="LC4109" class="blob-code blob-code-inner js-file-line">              position <span class="pl-k">+=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-c1">size</span>;</td>
      </tr>
      <tr>
        <td id="L4110" class="blob-num js-line-number" data-line-number="4110"></td>
        <td id="LC4110" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4111" class="blob-num js-line-number" data-line-number="4111"></td>
        <td id="LC4111" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4112" class="blob-num js-line-number" data-line-number="4112"></td>
        <td id="LC4112" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L4113" class="blob-num js-line-number" data-line-number="4113"></td>
        <td id="LC4113" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4114" class="blob-num js-line-number" data-line-number="4114"></td>
        <td id="LC4114" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4115" class="blob-num js-line-number" data-line-number="4115"></td>
        <td id="LC4115" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> position;</td>
      </tr>
      <tr>
        <td id="L4116" class="blob-num js-line-number" data-line-number="4116"></td>
        <td id="LC4116" class="blob-code blob-code-inner js-file-line">        }}};</td>
      </tr>
      <tr>
        <td id="L4117" class="blob-num js-line-number" data-line-number="4117"></td>
        <td id="LC4117" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4118" class="blob-num js-line-number" data-line-number="4118"></td>
        <td id="LC4118" class="blob-code blob-code-inner js-file-line">  var ERRNO_MESSAGES={0:&quot;Success&quot;,1:&quot;Not super-user&quot;,2:&quot;No such file or directory&quot;,3:&quot;No such process&quot;,4:&quot;Interrupted system call&quot;,5:&quot;I/O error&quot;,6:&quot;No such device or address&quot;,7:&quot;Arg list too long&quot;,8:&quot;Exec format error&quot;,9:&quot;Bad file number&quot;,10:&quot;No children&quot;,11:&quot;No more processes&quot;,12:&quot;Not enough core&quot;,13:&quot;Permission denied&quot;,14:&quot;Bad address&quot;,15:&quot;Block device required&quot;,16:&quot;Mount device busy&quot;,17:&quot;File exists&quot;,18:&quot;Cross-device link&quot;,19:&quot;No such device&quot;,20:&quot;Not a directory&quot;,21:&quot;Is a directory&quot;,22:&quot;Invalid argument&quot;,23:&quot;Too many open files in system&quot;,24:&quot;Too many open files&quot;,25:&quot;Not a typewriter&quot;,26:&quot;Text file busy&quot;,27:&quot;File too large&quot;,28:&quot;No space left on device&quot;,29:&quot;Illegal seek&quot;,30:&quot;Read only file system&quot;,31:&quot;Too many links&quot;,32:&quot;Broken pipe&quot;,33:&quot;Math arg out of domain of func&quot;,34:&quot;Math result not representable&quot;,35:&quot;File locking deadlock error&quot;,36:&quot;File or path name too long&quot;,37:&quot;No record locks available&quot;,38:&quot;Function not implemented&quot;,39:&quot;Directory not empty&quot;,40:&quot;Too many symbolic links&quot;,42:&quot;No message of desired type&quot;,43:&quot;Identifier removed&quot;,44:&quot;Channel number out of range&quot;,45:&quot;Level 2 not synchronized&quot;,46:&quot;Level 3 halted&quot;,47:&quot;Level 3 reset&quot;,48:&quot;Link number out of range&quot;,49:&quot;Protocol driver not attached&quot;,50:&quot;No CSI structure available&quot;,51:&quot;Level 2 halted&quot;,52:&quot;Invalid exchange&quot;,53:&quot;Invalid request descriptor&quot;,54:&quot;Exchange full&quot;,55:&quot;No anode&quot;,56:&quot;Invalid request code&quot;,57:&quot;Invalid slot&quot;,59:&quot;Bad font file fmt&quot;,60:&quot;Device not a stream&quot;,61:&quot;No data (for no delay io)&quot;,62:&quot;Timer expired&quot;,63:&quot;Out of streams resources&quot;,64:&quot;Machine is not on the network&quot;,65:&quot;Package not installed&quot;,66:&quot;The object is remote&quot;,67:&quot;The link has been severed&quot;,68:&quot;Advertise error&quot;,69:&quot;Srmount error&quot;,70:&quot;Communication error on send&quot;,71:&quot;Protocol error&quot;,72:&quot;Multihop attempted&quot;,73:&quot;Cross mount point (not really error)&quot;,74:&quot;Trying to read unreadable message&quot;,75:&quot;Value too large for defined data type&quot;,76:&quot;Given log. name not unique&quot;,77:&quot;f.d. invalid for this operation&quot;,78:&quot;Remote address changed&quot;,79:&quot;Can   access a needed shared lib&quot;,80:&quot;Accessing a corrupted shared lib&quot;,81:&quot;.lib section in a.out corrupted&quot;,82:&quot;Attempting to link in too many libs&quot;,83:&quot;Attempting to exec a shared library&quot;,84:&quot;Illegal byte sequence&quot;,86:&quot;Streams pipe error&quot;,87:&quot;Too many users&quot;,88:&quot;Socket operation on non-socket&quot;,89:&quot;Destination address required&quot;,90:&quot;Message too long&quot;,91:&quot;Protocol wrong type for socket&quot;,92:&quot;Protocol not available&quot;,93:&quot;Unknown protocol&quot;,94:&quot;Socket type not supported&quot;,95:&quot;Not supported&quot;,96:&quot;Protocol family not supported&quot;,97:&quot;Address family not supported by protocol family&quot;,98:&quot;Address already in use&quot;,99:&quot;Address not available&quot;,100:&quot;Network interface is not configured&quot;,101:&quot;Network is unreachable&quot;,102:&quot;Connection reset by network&quot;,103:&quot;Connection aborted&quot;,104:&quot;Connection reset by peer&quot;,105:&quot;No buffer space available&quot;,106:&quot;Socket is already connected&quot;,107:&quot;Socket is not connected&quot;,108:&quot;Can&#39;t send after socket shutdown&quot;,109:&quot;Too many references&quot;,110:&quot;Connection timed out&quot;,111:&quot;Connection refused&quot;,112:&quot;Host is down&quot;,113:&quot;Host is unreachable&quot;,114:&quot;Socket already connected&quot;,115:&quot;Connection already in progress&quot;,116:&quot;Stale file handle&quot;,122:&quot;Quota exceeded&quot;,123:&quot;No medium (in tape drive)&quot;,125:&quot;Operation canceled&quot;,130:&quot;Previous owner died&quot;,131:&quot;State not recoverable&quot;};</td>
      </tr>
      <tr>
        <td id="L4119" class="blob-num js-line-number" data-line-number="4119"></td>
        <td id="LC4119" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4120" class="blob-num js-line-number" data-line-number="4120"></td>
        <td id="LC4120" class="blob-code blob-code-inner js-file-line">  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:&quot;/&quot;,initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {</td>
      </tr>
      <tr>
        <td id="L4121" class="blob-num js-line-number" data-line-number="4121"></td>
        <td id="LC4121" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-k">throw</span> e <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> : <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-en">stackTrace</span>();</td>
      </tr>
      <tr>
        <td id="L4122" class="blob-num js-line-number" data-line-number="4122"></td>
        <td id="LC4122" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-en">___setErrNo</span>(<span class="pl-smi">e</span>.<span class="pl-smi">errno</span>);</td>
      </tr>
      <tr>
        <td id="L4123" class="blob-num js-line-number" data-line-number="4123"></td>
        <td id="LC4123" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lookupPath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">opts</span>) {</td>
      </tr>
      <tr>
        <td id="L4124" class="blob-num js-line-number" data-line-number="4124"></td>
        <td id="LC4124" class="blob-code blob-code-inner js-file-line">        path <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(<span class="pl-c1">FS</span>.<span class="pl-en">cwd</span>(), path);</td>
      </tr>
      <tr>
        <td id="L4125" class="blob-num js-line-number" data-line-number="4125"></td>
        <td id="LC4125" class="blob-code blob-code-inner js-file-line">        opts <span class="pl-k">=</span> opts <span class="pl-k">||</span> {};</td>
      </tr>
      <tr>
        <td id="L4126" class="blob-num js-line-number" data-line-number="4126"></td>
        <td id="LC4126" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4127" class="blob-num js-line-number" data-line-number="4127"></td>
        <td id="LC4127" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>path) <span class="pl-k">return</span> { path<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, node<span class="pl-k">:</span> <span class="pl-c1">null</span> };</td>
      </tr>
      <tr>
        <td id="L4128" class="blob-num js-line-number" data-line-number="4128"></td>
        <td id="LC4128" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4129" class="blob-num js-line-number" data-line-number="4129"></td>
        <td id="LC4129" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> defaults <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L4130" class="blob-num js-line-number" data-line-number="4130"></td>
        <td id="LC4130" class="blob-code blob-code-inner js-file-line">          follow_mount<span class="pl-k">:</span> <span class="pl-c1">true</span>,</td>
      </tr>
      <tr>
        <td id="L4131" class="blob-num js-line-number" data-line-number="4131"></td>
        <td id="LC4131" class="blob-code blob-code-inner js-file-line">          recurse_count<span class="pl-k">:</span> <span class="pl-c1">0</span></td>
      </tr>
      <tr>
        <td id="L4132" class="blob-num js-line-number" data-line-number="4132"></td>
        <td id="LC4132" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L4133" class="blob-num js-line-number" data-line-number="4133"></td>
        <td id="LC4133" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> defaults) {</td>
      </tr>
      <tr>
        <td id="L4134" class="blob-num js-line-number" data-line-number="4134"></td>
        <td id="LC4134" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (opts[key] <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L4135" class="blob-num js-line-number" data-line-number="4135"></td>
        <td id="LC4135" class="blob-code blob-code-inner js-file-line">            opts[key] <span class="pl-k">=</span> defaults[key];</td>
      </tr>
      <tr>
        <td id="L4136" class="blob-num js-line-number" data-line-number="4136"></td>
        <td id="LC4136" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4137" class="blob-num js-line-number" data-line-number="4137"></td>
        <td id="LC4137" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4138" class="blob-num js-line-number" data-line-number="4138"></td>
        <td id="LC4138" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4139" class="blob-num js-line-number" data-line-number="4139"></td>
        <td id="LC4139" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">opts</span>.<span class="pl-smi">recurse_count</span> <span class="pl-k">&gt;</span> <span class="pl-c1">8</span>) {  <span class="pl-c"><span class="pl-c">//</span> max recursive lookup of 8</span></td>
      </tr>
      <tr>
        <td id="L4140" class="blob-num js-line-number" data-line-number="4140"></td>
        <td id="LC4140" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">40</span>);</td>
      </tr>
      <tr>
        <td id="L4141" class="blob-num js-line-number" data-line-number="4141"></td>
        <td id="LC4141" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4142" class="blob-num js-line-number" data-line-number="4142"></td>
        <td id="LC4142" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4143" class="blob-num js-line-number" data-line-number="4143"></td>
        <td id="LC4143" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> split the path</span></td>
      </tr>
      <tr>
        <td id="L4144" class="blob-num js-line-number" data-line-number="4144"></td>
        <td id="LC4144" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parts <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">normalizeArray</span>(<span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>).<span class="pl-en">filter</span>(<span class="pl-k">function</span>(<span class="pl-smi">p</span>) {</td>
      </tr>
      <tr>
        <td id="L4145" class="blob-num js-line-number" data-line-number="4145"></td>
        <td id="LC4145" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">!!</span>p;</td>
      </tr>
      <tr>
        <td id="L4146" class="blob-num js-line-number" data-line-number="4146"></td>
        <td id="LC4146" class="blob-code blob-code-inner js-file-line">        }), <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L4147" class="blob-num js-line-number" data-line-number="4147"></td>
        <td id="LC4147" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4148" class="blob-num js-line-number" data-line-number="4148"></td>
        <td id="LC4148" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> start at the root</span></td>
      </tr>
      <tr>
        <td id="L4149" class="blob-num js-line-number" data-line-number="4149"></td>
        <td id="LC4149" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> current <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">root</span>;</td>
      </tr>
      <tr>
        <td id="L4150" class="blob-num js-line-number" data-line-number="4150"></td>
        <td id="LC4150" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> current_path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L4151" class="blob-num js-line-number" data-line-number="4151"></td>
        <td id="LC4151" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4152" class="blob-num js-line-number" data-line-number="4152"></td>
        <td id="LC4152" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">parts</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L4153" class="blob-num js-line-number" data-line-number="4153"></td>
        <td id="LC4153" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> islast <span class="pl-k">=</span> (i <span class="pl-k">===</span> <span class="pl-smi">parts</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4154" class="blob-num js-line-number" data-line-number="4154"></td>
        <td id="LC4154" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (islast <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">opts</span>.<span class="pl-c1">parent</span>) {</td>
      </tr>
      <tr>
        <td id="L4155" class="blob-num js-line-number" data-line-number="4155"></td>
        <td id="LC4155" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> stop resolving</span></td>
      </tr>
      <tr>
        <td id="L4156" class="blob-num js-line-number" data-line-number="4156"></td>
        <td id="LC4156" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L4157" class="blob-num js-line-number" data-line-number="4157"></td>
        <td id="LC4157" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4158" class="blob-num js-line-number" data-line-number="4158"></td>
        <td id="LC4158" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4159" class="blob-num js-line-number" data-line-number="4159"></td>
        <td id="LC4159" class="blob-code blob-code-inner js-file-line">          current <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(current, parts[i]);</td>
      </tr>
      <tr>
        <td id="L4160" class="blob-num js-line-number" data-line-number="4160"></td>
        <td id="LC4160" class="blob-code blob-code-inner js-file-line">          current_path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(current_path, parts[i]);</td>
      </tr>
      <tr>
        <td id="L4161" class="blob-num js-line-number" data-line-number="4161"></td>
        <td id="LC4161" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4162" class="blob-num js-line-number" data-line-number="4162"></td>
        <td id="LC4162" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> jump to the mount&#39;s root node if this is a mountpoint</span></td>
      </tr>
      <tr>
        <td id="L4163" class="blob-num js-line-number" data-line-number="4163"></td>
        <td id="LC4163" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(current)) {</td>
      </tr>
      <tr>
        <td id="L4164" class="blob-num js-line-number" data-line-number="4164"></td>
        <td id="LC4164" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>islast <span class="pl-k">||</span> (islast <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">opts</span>.<span class="pl-smi">follow_mount</span>)) {</td>
      </tr>
      <tr>
        <td id="L4165" class="blob-num js-line-number" data-line-number="4165"></td>
        <td id="LC4165" class="blob-code blob-code-inner js-file-line">              current <span class="pl-k">=</span> <span class="pl-smi">current</span>.<span class="pl-smi">mounted</span>.<span class="pl-smi">root</span>;</td>
      </tr>
      <tr>
        <td id="L4166" class="blob-num js-line-number" data-line-number="4166"></td>
        <td id="LC4166" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4167" class="blob-num js-line-number" data-line-number="4167"></td>
        <td id="LC4167" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4168" class="blob-num js-line-number" data-line-number="4168"></td>
        <td id="LC4168" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4169" class="blob-num js-line-number" data-line-number="4169"></td>
        <td id="LC4169" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> by default, lookupPath will not follow a symlink if it is the final path component.</span></td>
      </tr>
      <tr>
        <td id="L4170" class="blob-num js-line-number" data-line-number="4170"></td>
        <td id="LC4170" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> setting opts.follow = true will override this behavior.</span></td>
      </tr>
      <tr>
        <td id="L4171" class="blob-num js-line-number" data-line-number="4171"></td>
        <td id="LC4171" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>islast <span class="pl-k">||</span> <span class="pl-smi">opts</span>.<span class="pl-smi">follow</span>) {</td>
      </tr>
      <tr>
        <td id="L4172" class="blob-num js-line-number" data-line-number="4172"></td>
        <td id="LC4172" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> count <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4173" class="blob-num js-line-number" data-line-number="4173"></td>
        <td id="LC4173" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">while</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(<span class="pl-smi">current</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4174" class="blob-num js-line-number" data-line-number="4174"></td>
        <td id="LC4174" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> link <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">readlink</span>(current_path);</td>
      </tr>
      <tr>
        <td id="L4175" class="blob-num js-line-number" data-line-number="4175"></td>
        <td id="LC4175" class="blob-code blob-code-inner js-file-line">              current_path <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(<span class="pl-c1">PATH</span>.<span class="pl-en">dirname</span>(current_path), link);</td>
      </tr>
      <tr>
        <td id="L4176" class="blob-num js-line-number" data-line-number="4176"></td>
        <td id="LC4176" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4177" class="blob-num js-line-number" data-line-number="4177"></td>
        <td id="LC4177" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(current_path, { recurse_count<span class="pl-k">:</span> <span class="pl-smi">opts</span>.<span class="pl-smi">recurse_count</span> });</td>
      </tr>
      <tr>
        <td id="L4178" class="blob-num js-line-number" data-line-number="4178"></td>
        <td id="LC4178" class="blob-code blob-code-inner js-file-line">              current <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4179" class="blob-num js-line-number" data-line-number="4179"></td>
        <td id="LC4179" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4180" class="blob-num js-line-number" data-line-number="4180"></td>
        <td id="LC4180" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (count<span class="pl-k">++</span> <span class="pl-k">&gt;</span> <span class="pl-c1">40</span>) {  <span class="pl-c"><span class="pl-c">//</span> limit max consecutive symlinks to 40 (SYMLOOP_MAX).</span></td>
      </tr>
      <tr>
        <td id="L4181" class="blob-num js-line-number" data-line-number="4181"></td>
        <td id="LC4181" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">40</span>);</td>
      </tr>
      <tr>
        <td id="L4182" class="blob-num js-line-number" data-line-number="4182"></td>
        <td id="LC4182" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L4183" class="blob-num js-line-number" data-line-number="4183"></td>
        <td id="LC4183" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4184" class="blob-num js-line-number" data-line-number="4184"></td>
        <td id="LC4184" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4185" class="blob-num js-line-number" data-line-number="4185"></td>
        <td id="LC4185" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4186" class="blob-num js-line-number" data-line-number="4186"></td>
        <td id="LC4186" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4187" class="blob-num js-line-number" data-line-number="4187"></td>
        <td id="LC4187" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> { path<span class="pl-k">:</span> current_path, node<span class="pl-k">:</span> current };</td>
      </tr>
      <tr>
        <td id="L4188" class="blob-num js-line-number" data-line-number="4188"></td>
        <td id="LC4188" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getPath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4189" class="blob-num js-line-number" data-line-number="4189"></td>
        <td id="LC4189" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path;</td>
      </tr>
      <tr>
        <td id="L4190" class="blob-num js-line-number" data-line-number="4190"></td>
        <td id="LC4190" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-c1">true</span>) {</td>
      </tr>
      <tr>
        <td id="L4191" class="blob-num js-line-number" data-line-number="4191"></td>
        <td id="LC4191" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isRoot</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L4192" class="blob-num js-line-number" data-line-number="4192"></td>
        <td id="LC4192" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> mount <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">mountpoint</span>;</td>
      </tr>
      <tr>
        <td id="L4193" class="blob-num js-line-number" data-line-number="4193"></td>
        <td id="LC4193" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>path) <span class="pl-k">return</span> mount;</td>
      </tr>
      <tr>
        <td id="L4194" class="blob-num js-line-number" data-line-number="4194"></td>
        <td id="LC4194" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> mount[<span class="pl-smi">mount</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> mount <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> path <span class="pl-k">:</span> mount <span class="pl-k">+</span> path;</td>
      </tr>
      <tr>
        <td id="L4195" class="blob-num js-line-number" data-line-number="4195"></td>
        <td id="LC4195" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4196" class="blob-num js-line-number" data-line-number="4196"></td>
        <td id="LC4196" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">=</span> path <span class="pl-k">?</span> <span class="pl-smi">node</span>.<span class="pl-c1">name</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> path <span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-c1">name</span>;</td>
      </tr>
      <tr>
        <td id="L4197" class="blob-num js-line-number" data-line-number="4197"></td>
        <td id="LC4197" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-c1">parent</span>;</td>
      </tr>
      <tr>
        <td id="L4198" class="blob-num js-line-number" data-line-number="4198"></td>
        <td id="LC4198" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4199" class="blob-num js-line-number" data-line-number="4199"></td>
        <td id="LC4199" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">hashName</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parentid</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4200" class="blob-num js-line-number" data-line-number="4200"></td>
        <td id="LC4200" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> hash <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4201" class="blob-num js-line-number" data-line-number="4201"></td>
        <td id="LC4201" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4202" class="blob-num js-line-number" data-line-number="4202"></td>
        <td id="LC4202" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4203" class="blob-num js-line-number" data-line-number="4203"></td>
        <td id="LC4203" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">name</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L4204" class="blob-num js-line-number" data-line-number="4204"></td>
        <td id="LC4204" class="blob-code blob-code-inner js-file-line">          hash <span class="pl-k">=</span> ((hash <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">5</span>) <span class="pl-k">-</span> hash <span class="pl-k">+</span> <span class="pl-smi">name</span>.<span class="pl-c1">charCodeAt</span>(i)) <span class="pl-k">|</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4205" class="blob-num js-line-number" data-line-number="4205"></td>
        <td id="LC4205" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4206" class="blob-num js-line-number" data-line-number="4206"></td>
        <td id="LC4206" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((parentid <span class="pl-k">+</span> hash) <span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">0</span>) <span class="pl-k">%</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L4207" class="blob-num js-line-number" data-line-number="4207"></td>
        <td id="LC4207" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">hashAddNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4208" class="blob-num js-line-number" data-line-number="4208"></td>
        <td id="LC4208" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> hash <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">hashName</span>(<span class="pl-smi">node</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">id</span>, <span class="pl-smi">node</span>.<span class="pl-c1">name</span>);</td>
      </tr>
      <tr>
        <td id="L4209" class="blob-num js-line-number" data-line-number="4209"></td>
        <td id="LC4209" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">name_next</span> <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash];</td>
      </tr>
      <tr>
        <td id="L4210" class="blob-num js-line-number" data-line-number="4210"></td>
        <td id="LC4210" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash] <span class="pl-k">=</span> node;</td>
      </tr>
      <tr>
        <td id="L4211" class="blob-num js-line-number" data-line-number="4211"></td>
        <td id="LC4211" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">hashRemoveNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4212" class="blob-num js-line-number" data-line-number="4212"></td>
        <td id="LC4212" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> hash <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">hashName</span>(<span class="pl-smi">node</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">id</span>, <span class="pl-smi">node</span>.<span class="pl-c1">name</span>);</td>
      </tr>
      <tr>
        <td id="L4213" class="blob-num js-line-number" data-line-number="4213"></td>
        <td id="LC4213" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash] <span class="pl-k">===</span> node) {</td>
      </tr>
      <tr>
        <td id="L4214" class="blob-num js-line-number" data-line-number="4214"></td>
        <td id="LC4214" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash] <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">name_next</span>;</td>
      </tr>
      <tr>
        <td id="L4215" class="blob-num js-line-number" data-line-number="4215"></td>
        <td id="LC4215" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4216" class="blob-num js-line-number" data-line-number="4216"></td>
        <td id="LC4216" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> current <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash];</td>
      </tr>
      <tr>
        <td id="L4217" class="blob-num js-line-number" data-line-number="4217"></td>
        <td id="LC4217" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">while</span> (current) {</td>
      </tr>
      <tr>
        <td id="L4218" class="blob-num js-line-number" data-line-number="4218"></td>
        <td id="LC4218" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">current</span>.<span class="pl-smi">name_next</span> <span class="pl-k">===</span> node) {</td>
      </tr>
      <tr>
        <td id="L4219" class="blob-num js-line-number" data-line-number="4219"></td>
        <td id="LC4219" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">current</span>.<span class="pl-smi">name_next</span> <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">name_next</span>;</td>
      </tr>
      <tr>
        <td id="L4220" class="blob-num js-line-number" data-line-number="4220"></td>
        <td id="LC4220" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L4221" class="blob-num js-line-number" data-line-number="4221"></td>
        <td id="LC4221" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4222" class="blob-num js-line-number" data-line-number="4222"></td>
        <td id="LC4222" class="blob-code blob-code-inner js-file-line">            current <span class="pl-k">=</span> <span class="pl-smi">current</span>.<span class="pl-smi">name_next</span>;</td>
      </tr>
      <tr>
        <td id="L4223" class="blob-num js-line-number" data-line-number="4223"></td>
        <td id="LC4223" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4224" class="blob-num js-line-number" data-line-number="4224"></td>
        <td id="LC4224" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4225" class="blob-num js-line-number" data-line-number="4225"></td>
        <td id="LC4225" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lookupNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4226" class="blob-num js-line-number" data-line-number="4226"></td>
        <td id="LC4226" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayLookup</span>(parent);</td>
      </tr>
      <tr>
        <td id="L4227" class="blob-num js-line-number" data-line-number="4227"></td>
        <td id="LC4227" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4228" class="blob-num js-line-number" data-line-number="4228"></td>
        <td id="LC4228" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err, parent);</td>
      </tr>
      <tr>
        <td id="L4229" class="blob-num js-line-number" data-line-number="4229"></td>
        <td id="LC4229" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4230" class="blob-num js-line-number" data-line-number="4230"></td>
        <td id="LC4230" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> hash <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">hashName</span>(<span class="pl-smi">parent</span>.<span class="pl-c1">id</span>, name);</td>
      </tr>
      <tr>
        <td id="L4231" class="blob-num js-line-number" data-line-number="4231"></td>
        <td id="LC4231" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash]; node; node <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">name_next</span>) {</td>
      </tr>
      <tr>
        <td id="L4232" class="blob-num js-line-number" data-line-number="4232"></td>
        <td id="LC4232" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> nodeName <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-c1">name</span>;</td>
      </tr>
      <tr>
        <td id="L4233" class="blob-num js-line-number" data-line-number="4233"></td>
        <td id="LC4233" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-c1">parent</span>.<span class="pl-c1">id</span> <span class="pl-k">===</span> <span class="pl-smi">parent</span>.<span class="pl-c1">id</span> <span class="pl-k">&amp;&amp;</span> nodeName <span class="pl-k">===</span> name) {</td>
      </tr>
      <tr>
        <td id="L4234" class="blob-num js-line-number" data-line-number="4234"></td>
        <td id="LC4234" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L4235" class="blob-num js-line-number" data-line-number="4235"></td>
        <td id="LC4235" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4236" class="blob-num js-line-number" data-line-number="4236"></td>
        <td id="LC4236" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4237" class="blob-num js-line-number" data-line-number="4237"></td>
        <td id="LC4237" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if we failed to find it in the cache, call into the VFS</span></td>
      </tr>
      <tr>
        <td id="L4238" class="blob-num js-line-number" data-line-number="4238"></td>
        <td id="LC4238" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookup</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4239" class="blob-num js-line-number" data-line-number="4239"></td>
        <td id="LC4239" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">rdev</span>) {</td>
      </tr>
      <tr>
        <td id="L4240" class="blob-num js-line-number" data-line-number="4240"></td>
        <td id="LC4240" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">FSNode</span>) {</td>
      </tr>
      <tr>
        <td id="L4241" class="blob-num js-line-number" data-line-number="4241"></td>
        <td id="LC4241" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">FSNode</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">rdev</span>) {</td>
      </tr>
      <tr>
        <td id="L4242" class="blob-num js-line-number" data-line-number="4242"></td>
        <td id="LC4242" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>parent) {</td>
      </tr>
      <tr>
        <td id="L4243" class="blob-num js-line-number" data-line-number="4243"></td>
        <td id="LC4243" class="blob-code blob-code-inner js-file-line">              parent <span class="pl-k">=</span> <span class="pl-c1">this</span>;  <span class="pl-c"><span class="pl-c">//</span> root node sets parent to itself</span></td>
      </tr>
      <tr>
        <td id="L4244" class="blob-num js-line-number" data-line-number="4244"></td>
        <td id="LC4244" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4245" class="blob-num js-line-number" data-line-number="4245"></td>
        <td id="LC4245" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-c1">parent</span> <span class="pl-k">=</span> parent;</td>
      </tr>
      <tr>
        <td id="L4246" class="blob-num js-line-number" data-line-number="4246"></td>
        <td id="LC4246" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">mount</span> <span class="pl-k">=</span> <span class="pl-smi">parent</span>.<span class="pl-smi">mount</span>;</td>
      </tr>
      <tr>
        <td id="L4247" class="blob-num js-line-number" data-line-number="4247"></td>
        <td id="LC4247" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">mounted</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L4248" class="blob-num js-line-number" data-line-number="4248"></td>
        <td id="LC4248" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-c1">id</span> <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nextInode</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L4249" class="blob-num js-line-number" data-line-number="4249"></td>
        <td id="LC4249" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name;</td>
      </tr>
      <tr>
        <td id="L4250" class="blob-num js-line-number" data-line-number="4250"></td>
        <td id="LC4250" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">=</span> mode;</td>
      </tr>
      <tr>
        <td id="L4251" class="blob-num js-line-number" data-line-number="4251"></td>
        <td id="LC4251" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L4252" class="blob-num js-line-number" data-line-number="4252"></td>
        <td id="LC4252" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L4253" class="blob-num js-line-number" data-line-number="4253"></td>
        <td id="LC4253" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">rdev</span> <span class="pl-k">=</span> rdev;</td>
      </tr>
      <tr>
        <td id="L4254" class="blob-num js-line-number" data-line-number="4254"></td>
        <td id="LC4254" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L4255" class="blob-num js-line-number" data-line-number="4255"></td>
        <td id="LC4255" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4256" class="blob-num js-line-number" data-line-number="4256"></td>
        <td id="LC4256" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">FSNode</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L4257" class="blob-num js-line-number" data-line-number="4257"></td>
        <td id="LC4257" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4258" class="blob-num js-line-number" data-line-number="4258"></td>
        <td id="LC4258" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> compatibility</span></td>
      </tr>
      <tr>
        <td id="L4259" class="blob-num js-line-number" data-line-number="4259"></td>
        <td id="LC4259" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> readMode <span class="pl-k">=</span> <span class="pl-c1">292</span> <span class="pl-k">|</span> <span class="pl-c1">73</span>;</td>
      </tr>
      <tr>
        <td id="L4260" class="blob-num js-line-number" data-line-number="4260"></td>
        <td id="LC4260" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> writeMode <span class="pl-k">=</span> <span class="pl-c1">146</span>;</td>
      </tr>
      <tr>
        <td id="L4261" class="blob-num js-line-number" data-line-number="4261"></td>
        <td id="LC4261" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4262" class="blob-num js-line-number" data-line-number="4262"></td>
        <td id="LC4262" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> NOTE we must use Object.defineProperties instead of individual calls to</span></td>
      </tr>
      <tr>
        <td id="L4263" class="blob-num js-line-number" data-line-number="4263"></td>
        <td id="LC4263" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Object.defineProperty in order to make closure compiler happy</span></td>
      </tr>
      <tr>
        <td id="L4264" class="blob-num js-line-number" data-line-number="4264"></td>
        <td id="LC4264" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">FSNode</span>.<span class="pl-c1">prototype</span>, {</td>
      </tr>
      <tr>
        <td id="L4265" class="blob-num js-line-number" data-line-number="4265"></td>
        <td id="LC4265" class="blob-code blob-code-inner js-file-line">            read<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4266" class="blob-num js-line-number" data-line-number="4266"></td>
        <td id="LC4266" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> (<span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> readMode) <span class="pl-k">===</span> readMode; },</td>
      </tr>
      <tr>
        <td id="L4267" class="blob-num js-line-number" data-line-number="4267"></td>
        <td id="LC4267" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">set</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">val</span>) { val <span class="pl-k">?</span> <span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">|=</span> readMode <span class="pl-k">:</span> <span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;=</span> <span class="pl-k">~</span>readMode; }</td>
      </tr>
      <tr>
        <td id="L4268" class="blob-num js-line-number" data-line-number="4268"></td>
        <td id="LC4268" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4269" class="blob-num js-line-number" data-line-number="4269"></td>
        <td id="LC4269" class="blob-code blob-code-inner js-file-line">            write<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4270" class="blob-num js-line-number" data-line-number="4270"></td>
        <td id="LC4270" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> (<span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> writeMode) <span class="pl-k">===</span> writeMode; },</td>
      </tr>
      <tr>
        <td id="L4271" class="blob-num js-line-number" data-line-number="4271"></td>
        <td id="LC4271" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">set</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">val</span>) { val <span class="pl-k">?</span> <span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">|=</span> writeMode <span class="pl-k">:</span> <span class="pl-c1">this</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;=</span> <span class="pl-k">~</span>writeMode; }</td>
      </tr>
      <tr>
        <td id="L4272" class="blob-num js-line-number" data-line-number="4272"></td>
        <td id="LC4272" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4273" class="blob-num js-line-number" data-line-number="4273"></td>
        <td id="LC4273" class="blob-code blob-code-inner js-file-line">            isFolder<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4274" class="blob-num js-line-number" data-line-number="4274"></td>
        <td id="LC4274" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-c1">this</span>.<span class="pl-smi">mode</span>); }</td>
      </tr>
      <tr>
        <td id="L4275" class="blob-num js-line-number" data-line-number="4275"></td>
        <td id="LC4275" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4276" class="blob-num js-line-number" data-line-number="4276"></td>
        <td id="LC4276" class="blob-code blob-code-inner js-file-line">            isDevice<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4277" class="blob-num js-line-number" data-line-number="4277"></td>
        <td id="LC4277" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">isChrdev</span>(<span class="pl-c1">this</span>.<span class="pl-smi">mode</span>); }</td>
      </tr>
      <tr>
        <td id="L4278" class="blob-num js-line-number" data-line-number="4278"></td>
        <td id="LC4278" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4279" class="blob-num js-line-number" data-line-number="4279"></td>
        <td id="LC4279" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L4280" class="blob-num js-line-number" data-line-number="4280"></td>
        <td id="LC4280" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4281" class="blob-num js-line-number" data-line-number="4281"></td>
        <td id="LC4281" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4282" class="blob-num js-line-number" data-line-number="4282"></td>
        <td id="LC4282" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">FS.FSNode</span>(parent, name, mode, rdev);</td>
      </tr>
      <tr>
        <td id="L4283" class="blob-num js-line-number" data-line-number="4283"></td>
        <td id="LC4283" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4284" class="blob-num js-line-number" data-line-number="4284"></td>
        <td id="LC4284" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">hashAddNode</span>(node);</td>
      </tr>
      <tr>
        <td id="L4285" class="blob-num js-line-number" data-line-number="4285"></td>
        <td id="LC4285" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4286" class="blob-num js-line-number" data-line-number="4286"></td>
        <td id="LC4286" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L4287" class="blob-num js-line-number" data-line-number="4287"></td>
        <td id="LC4287" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">destroyNode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4288" class="blob-num js-line-number" data-line-number="4288"></td>
        <td id="LC4288" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">hashRemoveNode</span>(node);</td>
      </tr>
      <tr>
        <td id="L4289" class="blob-num js-line-number" data-line-number="4289"></td>
        <td id="LC4289" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isRoot</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4290" class="blob-num js-line-number" data-line-number="4290"></td>
        <td id="LC4290" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node <span class="pl-k">===</span> <span class="pl-smi">node</span>.<span class="pl-c1">parent</span>;</td>
      </tr>
      <tr>
        <td id="L4291" class="blob-num js-line-number" data-line-number="4291"></td>
        <td id="LC4291" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isMountpoint</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L4292" class="blob-num js-line-number" data-line-number="4292"></td>
        <td id="LC4292" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">!!</span><span class="pl-smi">node</span>.<span class="pl-smi">mounted</span>;</td>
      </tr>
      <tr>
        <td id="L4293" class="blob-num js-line-number" data-line-number="4293"></td>
        <td id="LC4293" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4294" class="blob-num js-line-number" data-line-number="4294"></td>
        <td id="LC4294" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">32768</span>;</td>
      </tr>
      <tr>
        <td id="L4295" class="blob-num js-line-number" data-line-number="4295"></td>
        <td id="LC4295" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isDir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4296" class="blob-num js-line-number" data-line-number="4296"></td>
        <td id="LC4296" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">16384</span>;</td>
      </tr>
      <tr>
        <td id="L4297" class="blob-num js-line-number" data-line-number="4297"></td>
        <td id="LC4297" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isLink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4298" class="blob-num js-line-number" data-line-number="4298"></td>
        <td id="LC4298" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">40960</span>;</td>
      </tr>
      <tr>
        <td id="L4299" class="blob-num js-line-number" data-line-number="4299"></td>
        <td id="LC4299" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isChrdev</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4300" class="blob-num js-line-number" data-line-number="4300"></td>
        <td id="LC4300" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">8192</span>;</td>
      </tr>
      <tr>
        <td id="L4301" class="blob-num js-line-number" data-line-number="4301"></td>
        <td id="LC4301" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isBlkdev</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4302" class="blob-num js-line-number" data-line-number="4302"></td>
        <td id="LC4302" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">24576</span>;</td>
      </tr>
      <tr>
        <td id="L4303" class="blob-num js-line-number" data-line-number="4303"></td>
        <td id="LC4303" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isFIFO</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4304" class="blob-num js-line-number" data-line-number="4304"></td>
        <td id="LC4304" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) <span class="pl-k">===</span> <span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L4305" class="blob-num js-line-number" data-line-number="4305"></td>
        <td id="LC4305" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isSocket</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4306" class="blob-num js-line-number" data-line-number="4306"></td>
        <td id="LC4306" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">49152</span>) <span class="pl-k">===</span> <span class="pl-c1">49152</span>;</td>
      </tr>
      <tr>
        <td id="L4307" class="blob-num js-line-number" data-line-number="4307"></td>
        <td id="LC4307" class="blob-code blob-code-inner js-file-line">      },flagModes<span class="pl-k">:</span>{<span class="pl-s"><span class="pl-pds">&quot;</span>r<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>rs<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1052672</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>r+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>w<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">577</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>wx<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">705</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>xw<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">705</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>w+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">578</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>wx+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">706</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>xw+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">706</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>a<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1089</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>ax<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1217</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>xa<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1217</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>a+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1090</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>ax+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1218</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>xa+<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span><span class="pl-c1">1218</span>},<span class="pl-en">modeStringToFlags</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">str</span>) {</td>
      </tr>
      <tr>
        <td id="L4308" class="blob-num js-line-number" data-line-number="4308"></td>
        <td id="LC4308" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> flags <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">flagModes</span>[str];</td>
      </tr>
      <tr>
        <td id="L4309" class="blob-num js-line-number" data-line-number="4309"></td>
        <td id="LC4309" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> flags <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4310" class="blob-num js-line-number" data-line-number="4310"></td>
        <td id="LC4310" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Unknown file open mode: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> str);</td>
      </tr>
      <tr>
        <td id="L4311" class="blob-num js-line-number" data-line-number="4311"></td>
        <td id="LC4311" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4312" class="blob-num js-line-number" data-line-number="4312"></td>
        <td id="LC4312" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> flags;</td>
      </tr>
      <tr>
        <td id="L4313" class="blob-num js-line-number" data-line-number="4313"></td>
        <td id="LC4313" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">flagsToPermissionString</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">flag</span>) {</td>
      </tr>
      <tr>
        <td id="L4314" class="blob-num js-line-number" data-line-number="4314"></td>
        <td id="LC4314" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> perms <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>rw<span class="pl-pds">&#39;</span></span>][flag <span class="pl-k">&amp;</span> <span class="pl-c1">3</span>];</td>
      </tr>
      <tr>
        <td id="L4315" class="blob-num js-line-number" data-line-number="4315"></td>
        <td id="LC4315" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((flag <span class="pl-k">&amp;</span> <span class="pl-c1">512</span>)) {</td>
      </tr>
      <tr>
        <td id="L4316" class="blob-num js-line-number" data-line-number="4316"></td>
        <td id="LC4316" class="blob-code blob-code-inner js-file-line">          perms <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L4317" class="blob-num js-line-number" data-line-number="4317"></td>
        <td id="LC4317" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4318" class="blob-num js-line-number" data-line-number="4318"></td>
        <td id="LC4318" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> perms;</td>
      </tr>
      <tr>
        <td id="L4319" class="blob-num js-line-number" data-line-number="4319"></td>
        <td id="LC4319" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">nodePermissions</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">perms</span>) {</td>
      </tr>
      <tr>
        <td id="L4320" class="blob-num js-line-number" data-line-number="4320"></td>
        <td id="LC4320" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">ignorePermissions</span>) {</td>
      </tr>
      <tr>
        <td id="L4321" class="blob-num js-line-number" data-line-number="4321"></td>
        <td id="LC4321" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4322" class="blob-num js-line-number" data-line-number="4322"></td>
        <td id="LC4322" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4323" class="blob-num js-line-number" data-line-number="4323"></td>
        <td id="LC4323" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> return 0 if any user, group or owner bits are set.</span></td>
      </tr>
      <tr>
        <td id="L4324" class="blob-num js-line-number" data-line-number="4324"></td>
        <td id="LC4324" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">perms</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!==</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> <span class="pl-c1">292</span>)) {</td>
      </tr>
      <tr>
        <td id="L4325" class="blob-num js-line-number" data-line-number="4325"></td>
        <td id="LC4325" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L4326" class="blob-num js-line-number" data-line-number="4326"></td>
        <td id="LC4326" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">perms</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!==</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> <span class="pl-c1">146</span>)) {</td>
      </tr>
      <tr>
        <td id="L4327" class="blob-num js-line-number" data-line-number="4327"></td>
        <td id="LC4327" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L4328" class="blob-num js-line-number" data-line-number="4328"></td>
        <td id="LC4328" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">perms</span>.<span class="pl-c1">indexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>x<span class="pl-pds">&#39;</span></span>) <span class="pl-k">!==</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> <span class="pl-c1">73</span>)) {</td>
      </tr>
      <tr>
        <td id="L4329" class="blob-num js-line-number" data-line-number="4329"></td>
        <td id="LC4329" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L4330" class="blob-num js-line-number" data-line-number="4330"></td>
        <td id="LC4330" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4331" class="blob-num js-line-number" data-line-number="4331"></td>
        <td id="LC4331" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4332" class="blob-num js-line-number" data-line-number="4332"></td>
        <td id="LC4332" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mayLookup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dir</span>) {</td>
      </tr>
      <tr>
        <td id="L4333" class="blob-num js-line-number" data-line-number="4333"></td>
        <td id="LC4333" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(dir, <span class="pl-s"><span class="pl-pds">&#39;</span>x<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4334" class="blob-num js-line-number" data-line-number="4334"></td>
        <td id="LC4334" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) <span class="pl-k">return</span> err;</td>
      </tr>
      <tr>
        <td id="L4335" class="blob-num js-line-number" data-line-number="4335"></td>
        <td id="LC4335" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">dir</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">lookup</span>) <span class="pl-k">return</span> <span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L4336" class="blob-num js-line-number" data-line-number="4336"></td>
        <td id="LC4336" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4337" class="blob-num js-line-number" data-line-number="4337"></td>
        <td id="LC4337" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mayCreate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dir</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4338" class="blob-num js-line-number" data-line-number="4338"></td>
        <td id="LC4338" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4339" class="blob-num js-line-number" data-line-number="4339"></td>
        <td id="LC4339" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(dir, name);</td>
      </tr>
      <tr>
        <td id="L4340" class="blob-num js-line-number" data-line-number="4340"></td>
        <td id="LC4340" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">17</span>;</td>
      </tr>
      <tr>
        <td id="L4341" class="blob-num js-line-number" data-line-number="4341"></td>
        <td id="LC4341" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4342" class="blob-num js-line-number" data-line-number="4342"></td>
        <td id="LC4342" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4343" class="blob-num js-line-number" data-line-number="4343"></td>
        <td id="LC4343" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(dir, <span class="pl-s"><span class="pl-pds">&#39;</span>wx<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4344" class="blob-num js-line-number" data-line-number="4344"></td>
        <td id="LC4344" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mayDelete</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dir</span>, <span class="pl-smi">name</span>, <span class="pl-smi">isdir</span>) {</td>
      </tr>
      <tr>
        <td id="L4345" class="blob-num js-line-number" data-line-number="4345"></td>
        <td id="LC4345" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4346" class="blob-num js-line-number" data-line-number="4346"></td>
        <td id="LC4346" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4347" class="blob-num js-line-number" data-line-number="4347"></td>
        <td id="LC4347" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(dir, name);</td>
      </tr>
      <tr>
        <td id="L4348" class="blob-num js-line-number" data-line-number="4348"></td>
        <td id="LC4348" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4349" class="blob-num js-line-number" data-line-number="4349"></td>
        <td id="LC4349" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L4350" class="blob-num js-line-number" data-line-number="4350"></td>
        <td id="LC4350" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4351" class="blob-num js-line-number" data-line-number="4351"></td>
        <td id="LC4351" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(dir, <span class="pl-s"><span class="pl-pds">&#39;</span>wx<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4352" class="blob-num js-line-number" data-line-number="4352"></td>
        <td id="LC4352" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4353" class="blob-num js-line-number" data-line-number="4353"></td>
        <td id="LC4353" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> err;</td>
      </tr>
      <tr>
        <td id="L4354" class="blob-num js-line-number" data-line-number="4354"></td>
        <td id="LC4354" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4355" class="blob-num js-line-number" data-line-number="4355"></td>
        <td id="LC4355" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (isdir) {</td>
      </tr>
      <tr>
        <td id="L4356" class="blob-num js-line-number" data-line-number="4356"></td>
        <td id="LC4356" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4357" class="blob-num js-line-number" data-line-number="4357"></td>
        <td id="LC4357" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">20</span>;</td>
      </tr>
      <tr>
        <td id="L4358" class="blob-num js-line-number" data-line-number="4358"></td>
        <td id="LC4358" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4359" class="blob-num js-line-number" data-line-number="4359"></td>
        <td id="LC4359" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isRoot</span>(node) <span class="pl-k">||</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(node) <span class="pl-k">===</span> <span class="pl-c1">FS</span>.<span class="pl-en">cwd</span>()) {</td>
      </tr>
      <tr>
        <td id="L4360" class="blob-num js-line-number" data-line-number="4360"></td>
        <td id="LC4360" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L4361" class="blob-num js-line-number" data-line-number="4361"></td>
        <td id="LC4361" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4362" class="blob-num js-line-number" data-line-number="4362"></td>
        <td id="LC4362" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4363" class="blob-num js-line-number" data-line-number="4363"></td>
        <td id="LC4363" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4364" class="blob-num js-line-number" data-line-number="4364"></td>
        <td id="LC4364" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">21</span>;</td>
      </tr>
      <tr>
        <td id="L4365" class="blob-num js-line-number" data-line-number="4365"></td>
        <td id="LC4365" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4366" class="blob-num js-line-number" data-line-number="4366"></td>
        <td id="LC4366" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4367" class="blob-num js-line-number" data-line-number="4367"></td>
        <td id="LC4367" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4368" class="blob-num js-line-number" data-line-number="4368"></td>
        <td id="LC4368" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mayOpen</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">node</span>, <span class="pl-smi">flags</span>) {</td>
      </tr>
      <tr>
        <td id="L4369" class="blob-num js-line-number" data-line-number="4369"></td>
        <td id="LC4369" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>node) {</td>
      </tr>
      <tr>
        <td id="L4370" class="blob-num js-line-number" data-line-number="4370"></td>
        <td id="LC4370" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L4371" class="blob-num js-line-number" data-line-number="4371"></td>
        <td id="LC4371" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4372" class="blob-num js-line-number" data-line-number="4372"></td>
        <td id="LC4372" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isLink</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4373" class="blob-num js-line-number" data-line-number="4373"></td>
        <td id="LC4373" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">40</span>;</td>
      </tr>
      <tr>
        <td id="L4374" class="blob-num js-line-number" data-line-number="4374"></td>
        <td id="LC4374" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4375" class="blob-num js-line-number" data-line-number="4375"></td>
        <td id="LC4375" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">flagsToPermissionString</span>(flags) <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-c"><span class="pl-c">//</span> opening for write</span></td>
      </tr>
      <tr>
        <td id="L4376" class="blob-num js-line-number" data-line-number="4376"></td>
        <td id="LC4376" class="blob-code blob-code-inner js-file-line">              (flags <span class="pl-k">&amp;</span> <span class="pl-c1">512</span>)) { <span class="pl-c"><span class="pl-c">//</span> TODO: check for O_SEARCH? (== search for dir only)</span></td>
      </tr>
      <tr>
        <td id="L4377" class="blob-num js-line-number" data-line-number="4377"></td>
        <td id="LC4377" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">21</span>;</td>
      </tr>
      <tr>
        <td id="L4378" class="blob-num js-line-number" data-line-number="4378"></td>
        <td id="LC4378" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4379" class="blob-num js-line-number" data-line-number="4379"></td>
        <td id="LC4379" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4380" class="blob-num js-line-number" data-line-number="4380"></td>
        <td id="LC4380" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(node, <span class="pl-c1">FS</span>.<span class="pl-en">flagsToPermissionString</span>(flags));</td>
      </tr>
      <tr>
        <td id="L4381" class="blob-num js-line-number" data-line-number="4381"></td>
        <td id="LC4381" class="blob-code blob-code-inner js-file-line">      },<span class="pl-c1">MAX_OPEN_FDS</span><span class="pl-k">:</span><span class="pl-c1">4096</span>,<span class="pl-en">nextfd</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd_start</span>, <span class="pl-smi">fd_end</span>) {</td>
      </tr>
      <tr>
        <td id="L4382" class="blob-num js-line-number" data-line-number="4382"></td>
        <td id="LC4382" class="blob-code blob-code-inner js-file-line">        fd_start <span class="pl-k">=</span> fd_start <span class="pl-k">||</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4383" class="blob-num js-line-number" data-line-number="4383"></td>
        <td id="LC4383" class="blob-code blob-code-inner js-file-line">        fd_end <span class="pl-k">=</span> fd_end <span class="pl-k">||</span> <span class="pl-c1">FS</span>.<span class="pl-c1">MAX_OPEN_FDS</span>;</td>
      </tr>
      <tr>
        <td id="L4384" class="blob-num js-line-number" data-line-number="4384"></td>
        <td id="LC4384" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> fd <span class="pl-k">=</span> fd_start; fd <span class="pl-k">&lt;=</span> fd_end; fd<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L4385" class="blob-num js-line-number" data-line-number="4385"></td>
        <td id="LC4385" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>[fd]) {</td>
      </tr>
      <tr>
        <td id="L4386" class="blob-num js-line-number" data-line-number="4386"></td>
        <td id="LC4386" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> fd;</td>
      </tr>
      <tr>
        <td id="L4387" class="blob-num js-line-number" data-line-number="4387"></td>
        <td id="LC4387" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4388" class="blob-num js-line-number" data-line-number="4388"></td>
        <td id="LC4388" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4389" class="blob-num js-line-number" data-line-number="4389"></td>
        <td id="LC4389" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">24</span>);</td>
      </tr>
      <tr>
        <td id="L4390" class="blob-num js-line-number" data-line-number="4390"></td>
        <td id="LC4390" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getStream</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd</span>) {</td>
      </tr>
      <tr>
        <td id="L4391" class="blob-num js-line-number" data-line-number="4391"></td>
        <td id="LC4391" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>[fd];</td>
      </tr>
      <tr>
        <td id="L4392" class="blob-num js-line-number" data-line-number="4392"></td>
        <td id="LC4392" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createStream</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">fd_start</span>, <span class="pl-smi">fd_end</span>) {</td>
      </tr>
      <tr>
        <td id="L4393" class="blob-num js-line-number" data-line-number="4393"></td>
        <td id="LC4393" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">FSStream</span>) {</td>
      </tr>
      <tr>
        <td id="L4394" class="blob-num js-line-number" data-line-number="4394"></td>
        <td id="LC4394" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">FSStream</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L4395" class="blob-num js-line-number" data-line-number="4395"></td>
        <td id="LC4395" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">FSStream</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L4396" class="blob-num js-line-number" data-line-number="4396"></td>
        <td id="LC4396" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> compatibility</span></td>
      </tr>
      <tr>
        <td id="L4397" class="blob-num js-line-number" data-line-number="4397"></td>
        <td id="LC4397" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">FSStream</span>.<span class="pl-c1">prototype</span>, {</td>
      </tr>
      <tr>
        <td id="L4398" class="blob-num js-line-number" data-line-number="4398"></td>
        <td id="LC4398" class="blob-code blob-code-inner js-file-line">            object<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4399" class="blob-num js-line-number" data-line-number="4399"></td>
        <td id="LC4399" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">node</span>; },</td>
      </tr>
      <tr>
        <td id="L4400" class="blob-num js-line-number" data-line-number="4400"></td>
        <td id="LC4400" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">set</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">val</span>) { <span class="pl-c1">this</span>.<span class="pl-smi">node</span> <span class="pl-k">=</span> val; }</td>
      </tr>
      <tr>
        <td id="L4401" class="blob-num js-line-number" data-line-number="4401"></td>
        <td id="LC4401" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4402" class="blob-num js-line-number" data-line-number="4402"></td>
        <td id="LC4402" class="blob-code blob-code-inner js-file-line">            isRead<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4403" class="blob-num js-line-number" data-line-number="4403"></td>
        <td id="LC4403" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> (<span class="pl-c1">this</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">!==</span> <span class="pl-c1">1</span>; }</td>
      </tr>
      <tr>
        <td id="L4404" class="blob-num js-line-number" data-line-number="4404"></td>
        <td id="LC4404" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4405" class="blob-num js-line-number" data-line-number="4405"></td>
        <td id="LC4405" class="blob-code blob-code-inner js-file-line">            isWrite<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4406" class="blob-num js-line-number" data-line-number="4406"></td>
        <td id="LC4406" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> (<span class="pl-c1">this</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span>; }</td>
      </tr>
      <tr>
        <td id="L4407" class="blob-num js-line-number" data-line-number="4407"></td>
        <td id="LC4407" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L4408" class="blob-num js-line-number" data-line-number="4408"></td>
        <td id="LC4408" class="blob-code blob-code-inner js-file-line">            isAppend<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L4409" class="blob-num js-line-number" data-line-number="4409"></td>
        <td id="LC4409" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> (<span class="pl-c1">this</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1024</span>); }</td>
      </tr>
      <tr>
        <td id="L4410" class="blob-num js-line-number" data-line-number="4410"></td>
        <td id="LC4410" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4411" class="blob-num js-line-number" data-line-number="4411"></td>
        <td id="LC4411" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L4412" class="blob-num js-line-number" data-line-number="4412"></td>
        <td id="LC4412" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4413" class="blob-num js-line-number" data-line-number="4413"></td>
        <td id="LC4413" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> clone it, so we can return an instance of FSStream</span></td>
      </tr>
      <tr>
        <td id="L4414" class="blob-num js-line-number" data-line-number="4414"></td>
        <td id="LC4414" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> newStream <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">FS.FSStream</span>();</td>
      </tr>
      <tr>
        <td id="L4415" class="blob-num js-line-number" data-line-number="4415"></td>
        <td id="LC4415" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> p <span class="pl-k">in</span> stream) {</td>
      </tr>
      <tr>
        <td id="L4416" class="blob-num js-line-number" data-line-number="4416"></td>
        <td id="LC4416" class="blob-code blob-code-inner js-file-line">          newStream[p] <span class="pl-k">=</span> stream[p];</td>
      </tr>
      <tr>
        <td id="L4417" class="blob-num js-line-number" data-line-number="4417"></td>
        <td id="LC4417" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4418" class="blob-num js-line-number" data-line-number="4418"></td>
        <td id="LC4418" class="blob-code blob-code-inner js-file-line">        stream <span class="pl-k">=</span> newStream;</td>
      </tr>
      <tr>
        <td id="L4419" class="blob-num js-line-number" data-line-number="4419"></td>
        <td id="LC4419" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nextfd</span>(fd_start, fd_end);</td>
      </tr>
      <tr>
        <td id="L4420" class="blob-num js-line-number" data-line-number="4420"></td>
        <td id="LC4420" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream</span>.<span class="pl-smi">fd</span> <span class="pl-k">=</span> fd;</td>
      </tr>
      <tr>
        <td id="L4421" class="blob-num js-line-number" data-line-number="4421"></td>
        <td id="LC4421" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>[fd] <span class="pl-k">=</span> stream;</td>
      </tr>
      <tr>
        <td id="L4422" class="blob-num js-line-number" data-line-number="4422"></td>
        <td id="LC4422" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> stream;</td>
      </tr>
      <tr>
        <td id="L4423" class="blob-num js-line-number" data-line-number="4423"></td>
        <td id="LC4423" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">closeStream</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd</span>) {</td>
      </tr>
      <tr>
        <td id="L4424" class="blob-num js-line-number" data-line-number="4424"></td>
        <td id="LC4424" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>[fd] <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L4425" class="blob-num js-line-number" data-line-number="4425"></td>
        <td id="LC4425" class="blob-code blob-code-inner js-file-line">      },chrdev_stream_ops<span class="pl-k">:</span>{<span class="pl-en">open</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L4426" class="blob-num js-line-number" data-line-number="4426"></td>
        <td id="LC4426" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> device <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getDevice</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">rdev</span>);</td>
      </tr>
      <tr>
        <td id="L4427" class="blob-num js-line-number" data-line-number="4427"></td>
        <td id="LC4427" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> override node&#39;s stream ops with the device&#39;s</span></td>
      </tr>
      <tr>
        <td id="L4428" class="blob-num js-line-number" data-line-number="4428"></td>
        <td id="LC4428" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> <span class="pl-smi">device</span>.<span class="pl-smi">stream_ops</span>;</td>
      </tr>
      <tr>
        <td id="L4429" class="blob-num js-line-number" data-line-number="4429"></td>
        <td id="LC4429" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> forward the open call</span></td>
      </tr>
      <tr>
        <td id="L4430" class="blob-num js-line-number" data-line-number="4430"></td>
        <td id="LC4430" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">open</span>) {</td>
      </tr>
      <tr>
        <td id="L4431" class="blob-num js-line-number" data-line-number="4431"></td>
        <td id="LC4431" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-c1">open</span>(stream);</td>
      </tr>
      <tr>
        <td id="L4432" class="blob-num js-line-number" data-line-number="4432"></td>
        <td id="LC4432" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4433" class="blob-num js-line-number" data-line-number="4433"></td>
        <td id="LC4433" class="blob-code blob-code-inner js-file-line">        },<span class="pl-en">llseek</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L4434" class="blob-num js-line-number" data-line-number="4434"></td>
        <td id="LC4434" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">29</span>);</td>
      </tr>
      <tr>
        <td id="L4435" class="blob-num js-line-number" data-line-number="4435"></td>
        <td id="LC4435" class="blob-code blob-code-inner js-file-line">        }},<span class="pl-en">major</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4436" class="blob-num js-line-number" data-line-number="4436"></td>
        <td id="LC4436" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((dev) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">8</span>);</td>
      </tr>
      <tr>
        <td id="L4437" class="blob-num js-line-number" data-line-number="4437"></td>
        <td id="LC4437" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">minor</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4438" class="blob-num js-line-number" data-line-number="4438"></td>
        <td id="LC4438" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((dev) <span class="pl-k">&amp;</span> <span class="pl-c1">0xff</span>);</td>
      </tr>
      <tr>
        <td id="L4439" class="blob-num js-line-number" data-line-number="4439"></td>
        <td id="LC4439" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">makedev</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">ma</span>, <span class="pl-smi">mi</span>) {</td>
      </tr>
      <tr>
        <td id="L4440" class="blob-num js-line-number" data-line-number="4440"></td>
        <td id="LC4440" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((ma) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">8</span> <span class="pl-k">|</span> (mi));</td>
      </tr>
      <tr>
        <td id="L4441" class="blob-num js-line-number" data-line-number="4441"></td>
        <td id="LC4441" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">registerDevice</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dev</span>, <span class="pl-smi">ops</span>) {</td>
      </tr>
      <tr>
        <td id="L4442" class="blob-num js-line-number" data-line-number="4442"></td>
        <td id="LC4442" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">devices</span>[dev] <span class="pl-k">=</span> { stream_ops<span class="pl-k">:</span> ops };</td>
      </tr>
      <tr>
        <td id="L4443" class="blob-num js-line-number" data-line-number="4443"></td>
        <td id="LC4443" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getDevice</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4444" class="blob-num js-line-number" data-line-number="4444"></td>
        <td id="LC4444" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-smi">devices</span>[dev];</td>
      </tr>
      <tr>
        <td id="L4445" class="blob-num js-line-number" data-line-number="4445"></td>
        <td id="LC4445" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getMounts</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L4446" class="blob-num js-line-number" data-line-number="4446"></td>
        <td id="LC4446" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mounts <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L4447" class="blob-num js-line-number" data-line-number="4447"></td>
        <td id="LC4447" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> check <span class="pl-k">=</span> [mount];</td>
      </tr>
      <tr>
        <td id="L4448" class="blob-num js-line-number" data-line-number="4448"></td>
        <td id="LC4448" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4449" class="blob-num js-line-number" data-line-number="4449"></td>
        <td id="LC4449" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-smi">check</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L4450" class="blob-num js-line-number" data-line-number="4450"></td>
        <td id="LC4450" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> m <span class="pl-k">=</span> <span class="pl-smi">check</span>.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L4451" class="blob-num js-line-number" data-line-number="4451"></td>
        <td id="LC4451" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4452" class="blob-num js-line-number" data-line-number="4452"></td>
        <td id="LC4452" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">mounts</span>.<span class="pl-c1">push</span>(m);</td>
      </tr>
      <tr>
        <td id="L4453" class="blob-num js-line-number" data-line-number="4453"></td>
        <td id="LC4453" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4454" class="blob-num js-line-number" data-line-number="4454"></td>
        <td id="LC4454" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">check</span>.<span class="pl-smi">push</span>.<span class="pl-c1">apply</span>(check, <span class="pl-smi">m</span>.<span class="pl-smi">mounts</span>);</td>
      </tr>
      <tr>
        <td id="L4455" class="blob-num js-line-number" data-line-number="4455"></td>
        <td id="LC4455" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4456" class="blob-num js-line-number" data-line-number="4456"></td>
        <td id="LC4456" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4457" class="blob-num js-line-number" data-line-number="4457"></td>
        <td id="LC4457" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> mounts;</td>
      </tr>
      <tr>
        <td id="L4458" class="blob-num js-line-number" data-line-number="4458"></td>
        <td id="LC4458" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">syncfs</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">populate</span>, <span class="pl-smi">callback</span>) {</td>
      </tr>
      <tr>
        <td id="L4459" class="blob-num js-line-number" data-line-number="4459"></td>
        <td id="LC4459" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span>(populate) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4460" class="blob-num js-line-number" data-line-number="4460"></td>
        <td id="LC4460" class="blob-code blob-code-inner js-file-line">          callback <span class="pl-k">=</span> populate;</td>
      </tr>
      <tr>
        <td id="L4461" class="blob-num js-line-number" data-line-number="4461"></td>
        <td id="LC4461" class="blob-code blob-code-inner js-file-line">          populate <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L4462" class="blob-num js-line-number" data-line-number="4462"></td>
        <td id="LC4462" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4463" class="blob-num js-line-number" data-line-number="4463"></td>
        <td id="LC4463" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4464" class="blob-num js-line-number" data-line-number="4464"></td>
        <td id="LC4464" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">syncFSRequests</span><span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L4465" class="blob-num js-line-number" data-line-number="4465"></td>
        <td id="LC4465" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4466" class="blob-num js-line-number" data-line-number="4466"></td>
        <td id="LC4466" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">syncFSRequests</span> <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L4467" class="blob-num js-line-number" data-line-number="4467"></td>
        <td id="LC4467" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>warning: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">FS</span>.<span class="pl-smi">syncFSRequests</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> FS.syncfs operations in flight at once, probably just doing extra work<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4468" class="blob-num js-line-number" data-line-number="4468"></td>
        <td id="LC4468" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4469" class="blob-num js-line-number" data-line-number="4469"></td>
        <td id="LC4469" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4470" class="blob-num js-line-number" data-line-number="4470"></td>
        <td id="LC4470" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mounts <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMounts</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">root</span>.<span class="pl-smi">mount</span>);</td>
      </tr>
      <tr>
        <td id="L4471" class="blob-num js-line-number" data-line-number="4471"></td>
        <td id="LC4471" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> completed <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4472" class="blob-num js-line-number" data-line-number="4472"></td>
        <td id="LC4472" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4473" class="blob-num js-line-number" data-line-number="4473"></td>
        <td id="LC4473" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">doCallback</span>(<span class="pl-smi">err</span>) {</td>
      </tr>
      <tr>
        <td id="L4474" class="blob-num js-line-number" data-line-number="4474"></td>
        <td id="LC4474" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">assert</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">syncFSRequests</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4475" class="blob-num js-line-number" data-line-number="4475"></td>
        <td id="LC4475" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">syncFSRequests</span><span class="pl-k">--</span>;</td>
      </tr>
      <tr>
        <td id="L4476" class="blob-num js-line-number" data-line-number="4476"></td>
        <td id="LC4476" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">callback</span>(err);</td>
      </tr>
      <tr>
        <td id="L4477" class="blob-num js-line-number" data-line-number="4477"></td>
        <td id="LC4477" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4478" class="blob-num js-line-number" data-line-number="4478"></td>
        <td id="LC4478" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4479" class="blob-num js-line-number" data-line-number="4479"></td>
        <td id="LC4479" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">done</span>(<span class="pl-smi">err</span>) {</td>
      </tr>
      <tr>
        <td id="L4480" class="blob-num js-line-number" data-line-number="4480"></td>
        <td id="LC4480" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4481" class="blob-num js-line-number" data-line-number="4481"></td>
        <td id="LC4481" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">done</span>.<span class="pl-smi">errored</span>) {</td>
      </tr>
      <tr>
        <td id="L4482" class="blob-num js-line-number" data-line-number="4482"></td>
        <td id="LC4482" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">done</span>.<span class="pl-smi">errored</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L4483" class="blob-num js-line-number" data-line-number="4483"></td>
        <td id="LC4483" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-en">doCallback</span>(err);</td>
      </tr>
      <tr>
        <td id="L4484" class="blob-num js-line-number" data-line-number="4484"></td>
        <td id="LC4484" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4485" class="blob-num js-line-number" data-line-number="4485"></td>
        <td id="LC4485" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L4486" class="blob-num js-line-number" data-line-number="4486"></td>
        <td id="LC4486" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4487" class="blob-num js-line-number" data-line-number="4487"></td>
        <td id="LC4487" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">++</span>completed <span class="pl-k">&gt;=</span> <span class="pl-smi">mounts</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L4488" class="blob-num js-line-number" data-line-number="4488"></td>
        <td id="LC4488" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">doCallback</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L4489" class="blob-num js-line-number" data-line-number="4489"></td>
        <td id="LC4489" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4490" class="blob-num js-line-number" data-line-number="4490"></td>
        <td id="LC4490" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L4491" class="blob-num js-line-number" data-line-number="4491"></td>
        <td id="LC4491" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4492" class="blob-num js-line-number" data-line-number="4492"></td>
        <td id="LC4492" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> sync all mounts</span></td>
      </tr>
      <tr>
        <td id="L4493" class="blob-num js-line-number" data-line-number="4493"></td>
        <td id="LC4493" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">mounts</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span> (<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L4494" class="blob-num js-line-number" data-line-number="4494"></td>
        <td id="LC4494" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">mount</span>.<span class="pl-c1">type</span>.<span class="pl-smi">syncfs</span>) {</td>
      </tr>
      <tr>
        <td id="L4495" class="blob-num js-line-number" data-line-number="4495"></td>
        <td id="LC4495" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-en">done</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L4496" class="blob-num js-line-number" data-line-number="4496"></td>
        <td id="LC4496" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4497" class="blob-num js-line-number" data-line-number="4497"></td>
        <td id="LC4497" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">mount</span>.<span class="pl-c1">type</span>.<span class="pl-en">syncfs</span>(mount, populate, done);</td>
      </tr>
      <tr>
        <td id="L4498" class="blob-num js-line-number" data-line-number="4498"></td>
        <td id="LC4498" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4499" class="blob-num js-line-number" data-line-number="4499"></td>
        <td id="LC4499" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mount</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">type</span>, <span class="pl-smi">opts</span>, <span class="pl-smi">mountpoint</span>) {</td>
      </tr>
      <tr>
        <td id="L4500" class="blob-num js-line-number" data-line-number="4500"></td>
        <td id="LC4500" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> root <span class="pl-k">=</span> mountpoint <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L4501" class="blob-num js-line-number" data-line-number="4501"></td>
        <td id="LC4501" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> pseudo <span class="pl-k">=</span> <span class="pl-k">!</span>mountpoint;</td>
      </tr>
      <tr>
        <td id="L4502" class="blob-num js-line-number" data-line-number="4502"></td>
        <td id="LC4502" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4503" class="blob-num js-line-number" data-line-number="4503"></td>
        <td id="LC4503" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4504" class="blob-num js-line-number" data-line-number="4504"></td>
        <td id="LC4504" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (root <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">FS</span>.<span class="pl-smi">root</span>) {</td>
      </tr>
      <tr>
        <td id="L4505" class="blob-num js-line-number" data-line-number="4505"></td>
        <td id="LC4505" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4506" class="blob-num js-line-number" data-line-number="4506"></td>
        <td id="LC4506" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">!</span>root <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>pseudo) {</td>
      </tr>
      <tr>
        <td id="L4507" class="blob-num js-line-number" data-line-number="4507"></td>
        <td id="LC4507" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(mountpoint, { follow_mount<span class="pl-k">:</span> <span class="pl-c1">false</span> });</td>
      </tr>
      <tr>
        <td id="L4508" class="blob-num js-line-number" data-line-number="4508"></td>
        <td id="LC4508" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4509" class="blob-num js-line-number" data-line-number="4509"></td>
        <td id="LC4509" class="blob-code blob-code-inner js-file-line">          mountpoint <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span>;  <span class="pl-c"><span class="pl-c">//</span> use the absolute path</span></td>
      </tr>
      <tr>
        <td id="L4510" class="blob-num js-line-number" data-line-number="4510"></td>
        <td id="LC4510" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4511" class="blob-num js-line-number" data-line-number="4511"></td>
        <td id="LC4511" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4512" class="blob-num js-line-number" data-line-number="4512"></td>
        <td id="LC4512" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L4513" class="blob-num js-line-number" data-line-number="4513"></td>
        <td id="LC4513" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4514" class="blob-num js-line-number" data-line-number="4514"></td>
        <td id="LC4514" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4515" class="blob-num js-line-number" data-line-number="4515"></td>
        <td id="LC4515" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4516" class="blob-num js-line-number" data-line-number="4516"></td>
        <td id="LC4516" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4517" class="blob-num js-line-number" data-line-number="4517"></td>
        <td id="LC4517" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">20</span>);</td>
      </tr>
      <tr>
        <td id="L4518" class="blob-num js-line-number" data-line-number="4518"></td>
        <td id="LC4518" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4519" class="blob-num js-line-number" data-line-number="4519"></td>
        <td id="LC4519" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4520" class="blob-num js-line-number" data-line-number="4520"></td>
        <td id="LC4520" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4521" class="blob-num js-line-number" data-line-number="4521"></td>
        <td id="LC4521" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mount <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L4522" class="blob-num js-line-number" data-line-number="4522"></td>
        <td id="LC4522" class="blob-code blob-code-inner js-file-line">          type<span class="pl-k">:</span> type,</td>
      </tr>
      <tr>
        <td id="L4523" class="blob-num js-line-number" data-line-number="4523"></td>
        <td id="LC4523" class="blob-code blob-code-inner js-file-line">          opts<span class="pl-k">:</span> opts,</td>
      </tr>
      <tr>
        <td id="L4524" class="blob-num js-line-number" data-line-number="4524"></td>
        <td id="LC4524" class="blob-code blob-code-inner js-file-line">          mountpoint<span class="pl-k">:</span> mountpoint,</td>
      </tr>
      <tr>
        <td id="L4525" class="blob-num js-line-number" data-line-number="4525"></td>
        <td id="LC4525" class="blob-code blob-code-inner js-file-line">          mounts<span class="pl-k">:</span> []</td>
      </tr>
      <tr>
        <td id="L4526" class="blob-num js-line-number" data-line-number="4526"></td>
        <td id="LC4526" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L4527" class="blob-num js-line-number" data-line-number="4527"></td>
        <td id="LC4527" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4528" class="blob-num js-line-number" data-line-number="4528"></td>
        <td id="LC4528" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> create a root node for the fs</span></td>
      </tr>
      <tr>
        <td id="L4529" class="blob-num js-line-number" data-line-number="4529"></td>
        <td id="LC4529" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mountRoot <span class="pl-k">=</span> <span class="pl-smi">type</span>.<span class="pl-en">mount</span>(mount);</td>
      </tr>
      <tr>
        <td id="L4530" class="blob-num js-line-number" data-line-number="4530"></td>
        <td id="LC4530" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">mountRoot</span>.<span class="pl-smi">mount</span> <span class="pl-k">=</span> mount;</td>
      </tr>
      <tr>
        <td id="L4531" class="blob-num js-line-number" data-line-number="4531"></td>
        <td id="LC4531" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">mount</span>.<span class="pl-smi">root</span> <span class="pl-k">=</span> mountRoot;</td>
      </tr>
      <tr>
        <td id="L4532" class="blob-num js-line-number" data-line-number="4532"></td>
        <td id="LC4532" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4533" class="blob-num js-line-number" data-line-number="4533"></td>
        <td id="LC4533" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (root) {</td>
      </tr>
      <tr>
        <td id="L4534" class="blob-num js-line-number" data-line-number="4534"></td>
        <td id="LC4534" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">root</span> <span class="pl-k">=</span> mountRoot;</td>
      </tr>
      <tr>
        <td id="L4535" class="blob-num js-line-number" data-line-number="4535"></td>
        <td id="LC4535" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (node) {</td>
      </tr>
      <tr>
        <td id="L4536" class="blob-num js-line-number" data-line-number="4536"></td>
        <td id="LC4536" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> set as a mountpoint</span></td>
      </tr>
      <tr>
        <td id="L4537" class="blob-num js-line-number" data-line-number="4537"></td>
        <td id="LC4537" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">mounted</span> <span class="pl-k">=</span> mount;</td>
      </tr>
      <tr>
        <td id="L4538" class="blob-num js-line-number" data-line-number="4538"></td>
        <td id="LC4538" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4539" class="blob-num js-line-number" data-line-number="4539"></td>
        <td id="LC4539" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> add the new mount to the current mount&#39;s children</span></td>
      </tr>
      <tr>
        <td id="L4540" class="blob-num js-line-number" data-line-number="4540"></td>
        <td id="LC4540" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">node</span>.<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L4541" class="blob-num js-line-number" data-line-number="4541"></td>
        <td id="LC4541" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">mounts</span>.<span class="pl-c1">push</span>(mount);</td>
      </tr>
      <tr>
        <td id="L4542" class="blob-num js-line-number" data-line-number="4542"></td>
        <td id="LC4542" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4543" class="blob-num js-line-number" data-line-number="4543"></td>
        <td id="LC4543" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4544" class="blob-num js-line-number" data-line-number="4544"></td>
        <td id="LC4544" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4545" class="blob-num js-line-number" data-line-number="4545"></td>
        <td id="LC4545" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> mountRoot;</td>
      </tr>
      <tr>
        <td id="L4546" class="blob-num js-line-number" data-line-number="4546"></td>
        <td id="LC4546" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">unmount</span><span class="pl-k">:</span><span class="pl-k">function</span> (<span class="pl-smi">mountpoint</span>) {</td>
      </tr>
      <tr>
        <td id="L4547" class="blob-num js-line-number" data-line-number="4547"></td>
        <td id="LC4547" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(mountpoint, { follow_mount<span class="pl-k">:</span> <span class="pl-c1">false</span> });</td>
      </tr>
      <tr>
        <td id="L4548" class="blob-num js-line-number" data-line-number="4548"></td>
        <td id="LC4548" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4549" class="blob-num js-line-number" data-line-number="4549"></td>
        <td id="LC4549" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(<span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>)) {</td>
      </tr>
      <tr>
        <td id="L4550" class="blob-num js-line-number" data-line-number="4550"></td>
        <td id="LC4550" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4551" class="blob-num js-line-number" data-line-number="4551"></td>
        <td id="LC4551" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4552" class="blob-num js-line-number" data-line-number="4552"></td>
        <td id="LC4552" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4553" class="blob-num js-line-number" data-line-number="4553"></td>
        <td id="LC4553" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> destroy the nodes for this mount, and all its child mounts</span></td>
      </tr>
      <tr>
        <td id="L4554" class="blob-num js-line-number" data-line-number="4554"></td>
        <td id="LC4554" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4555" class="blob-num js-line-number" data-line-number="4555"></td>
        <td id="LC4555" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mount <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">mounted</span>;</td>
      </tr>
      <tr>
        <td id="L4556" class="blob-num js-line-number" data-line-number="4556"></td>
        <td id="LC4556" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mounts <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMounts</span>(mount);</td>
      </tr>
      <tr>
        <td id="L4557" class="blob-num js-line-number" data-line-number="4557"></td>
        <td id="LC4557" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4558" class="blob-num js-line-number" data-line-number="4558"></td>
        <td id="LC4558" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>).<span class="pl-c1">forEach</span>(<span class="pl-k">function</span> (<span class="pl-smi">hash</span>) {</td>
      </tr>
      <tr>
        <td id="L4559" class="blob-num js-line-number" data-line-number="4559"></td>
        <td id="LC4559" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> current <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span>[hash];</td>
      </tr>
      <tr>
        <td id="L4560" class="blob-num js-line-number" data-line-number="4560"></td>
        <td id="LC4560" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4561" class="blob-num js-line-number" data-line-number="4561"></td>
        <td id="LC4561" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">while</span> (current) {</td>
      </tr>
      <tr>
        <td id="L4562" class="blob-num js-line-number" data-line-number="4562"></td>
        <td id="LC4562" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> next <span class="pl-k">=</span> <span class="pl-smi">current</span>.<span class="pl-smi">name_next</span>;</td>
      </tr>
      <tr>
        <td id="L4563" class="blob-num js-line-number" data-line-number="4563"></td>
        <td id="LC4563" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4564" class="blob-num js-line-number" data-line-number="4564"></td>
        <td id="LC4564" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">mounts</span>.<span class="pl-c1">indexOf</span>(<span class="pl-smi">current</span>.<span class="pl-smi">mount</span>) <span class="pl-k">!==</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L4565" class="blob-num js-line-number" data-line-number="4565"></td>
        <td id="LC4565" class="blob-code blob-code-inner js-file-line">              <span class="pl-c1">FS</span>.<span class="pl-en">destroyNode</span>(current);</td>
      </tr>
      <tr>
        <td id="L4566" class="blob-num js-line-number" data-line-number="4566"></td>
        <td id="LC4566" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4567" class="blob-num js-line-number" data-line-number="4567"></td>
        <td id="LC4567" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4568" class="blob-num js-line-number" data-line-number="4568"></td>
        <td id="LC4568" class="blob-code blob-code-inner js-file-line">            current <span class="pl-k">=</span> next;</td>
      </tr>
      <tr>
        <td id="L4569" class="blob-num js-line-number" data-line-number="4569"></td>
        <td id="LC4569" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4570" class="blob-num js-line-number" data-line-number="4570"></td>
        <td id="LC4570" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4571" class="blob-num js-line-number" data-line-number="4571"></td>
        <td id="LC4571" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4572" class="blob-num js-line-number" data-line-number="4572"></td>
        <td id="LC4572" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> no longer a mountpoint</span></td>
      </tr>
      <tr>
        <td id="L4573" class="blob-num js-line-number" data-line-number="4573"></td>
        <td id="LC4573" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">mounted</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L4574" class="blob-num js-line-number" data-line-number="4574"></td>
        <td id="LC4574" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4575" class="blob-num js-line-number" data-line-number="4575"></td>
        <td id="LC4575" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> remove this mount from the child mounts</span></td>
      </tr>
      <tr>
        <td id="L4576" class="blob-num js-line-number" data-line-number="4576"></td>
        <td id="LC4576" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> idx <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">mounts</span>.<span class="pl-c1">indexOf</span>(mount);</td>
      </tr>
      <tr>
        <td id="L4577" class="blob-num js-line-number" data-line-number="4577"></td>
        <td id="LC4577" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(idx <span class="pl-k">!==</span> <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4578" class="blob-num js-line-number" data-line-number="4578"></td>
        <td id="LC4578" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">mount</span>.<span class="pl-smi">mounts</span>.<span class="pl-c1">splice</span>(idx, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4579" class="blob-num js-line-number" data-line-number="4579"></td>
        <td id="LC4579" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lookup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L4580" class="blob-num js-line-number" data-line-number="4580"></td>
        <td id="LC4580" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">lookup</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4581" class="blob-num js-line-number" data-line-number="4581"></td>
        <td id="LC4581" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mknod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4582" class="blob-num js-line-number" data-line-number="4582"></td>
        <td id="LC4582" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4583" class="blob-num js-line-number" data-line-number="4583"></td>
        <td id="LC4583" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parent <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4584" class="blob-num js-line-number" data-line-number="4584"></td>
        <td id="LC4584" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(path);</td>
      </tr>
      <tr>
        <td id="L4585" class="blob-num js-line-number" data-line-number="4585"></td>
        <td id="LC4585" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>name <span class="pl-k">||</span> name <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> name <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>..<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4586" class="blob-num js-line-number" data-line-number="4586"></td>
        <td id="LC4586" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4587" class="blob-num js-line-number" data-line-number="4587"></td>
        <td id="LC4587" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4588" class="blob-num js-line-number" data-line-number="4588"></td>
        <td id="LC4588" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayCreate</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4589" class="blob-num js-line-number" data-line-number="4589"></td>
        <td id="LC4589" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4590" class="blob-num js-line-number" data-line-number="4590"></td>
        <td id="LC4590" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4591" class="blob-num js-line-number" data-line-number="4591"></td>
        <td id="LC4591" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4592" class="blob-num js-line-number" data-line-number="4592"></td>
        <td id="LC4592" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">mknod</span>) {</td>
      </tr>
      <tr>
        <td id="L4593" class="blob-num js-line-number" data-line-number="4593"></td>
        <td id="LC4593" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4594" class="blob-num js-line-number" data-line-number="4594"></td>
        <td id="LC4594" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4595" class="blob-num js-line-number" data-line-number="4595"></td>
        <td id="LC4595" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">mknod</span>(parent, name, mode, dev);</td>
      </tr>
      <tr>
        <td id="L4596" class="blob-num js-line-number" data-line-number="4596"></td>
        <td id="LC4596" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">create</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4597" class="blob-num js-line-number" data-line-number="4597"></td>
        <td id="LC4597" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">=</span> mode <span class="pl-k">!==</span> <span class="pl-c1">undefined</span> <span class="pl-k">?</span> mode <span class="pl-k">:</span> <span class="pl-c1">438</span> <span class="pl-c"><span class="pl-c">/*</span> 0666 <span class="pl-c">*/</span></span>;</td>
      </tr>
      <tr>
        <td id="L4598" class="blob-num js-line-number" data-line-number="4598"></td>
        <td id="LC4598" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">&amp;=</span> <span class="pl-c1">4095</span>;</td>
      </tr>
      <tr>
        <td id="L4599" class="blob-num js-line-number" data-line-number="4599"></td>
        <td id="LC4599" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">|=</span> <span class="pl-c1">32768</span>;</td>
      </tr>
      <tr>
        <td id="L4600" class="blob-num js-line-number" data-line-number="4600"></td>
        <td id="LC4600" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">mknod</span>(path, mode, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4601" class="blob-num js-line-number" data-line-number="4601"></td>
        <td id="LC4601" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mkdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4602" class="blob-num js-line-number" data-line-number="4602"></td>
        <td id="LC4602" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">=</span> mode <span class="pl-k">!==</span> <span class="pl-c1">undefined</span> <span class="pl-k">?</span> mode <span class="pl-k">:</span> <span class="pl-c1">511</span> <span class="pl-c"><span class="pl-c">/*</span> 0777 <span class="pl-c">*/</span></span>;</td>
      </tr>
      <tr>
        <td id="L4603" class="blob-num js-line-number" data-line-number="4603"></td>
        <td id="LC4603" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">&amp;=</span> <span class="pl-c1">511</span> <span class="pl-k">|</span> <span class="pl-c1">512</span>;</td>
      </tr>
      <tr>
        <td id="L4604" class="blob-num js-line-number" data-line-number="4604"></td>
        <td id="LC4604" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">|=</span> <span class="pl-c1">16384</span>;</td>
      </tr>
      <tr>
        <td id="L4605" class="blob-num js-line-number" data-line-number="4605"></td>
        <td id="LC4605" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">mknod</span>(path, mode, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4606" class="blob-num js-line-number" data-line-number="4606"></td>
        <td id="LC4606" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mkdirTree</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4607" class="blob-num js-line-number" data-line-number="4607"></td>
        <td id="LC4607" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> dirs <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4608" class="blob-num js-line-number" data-line-number="4608"></td>
        <td id="LC4608" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> d <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L4609" class="blob-num js-line-number" data-line-number="4609"></td>
        <td id="LC4609" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">dirs</span>.<span class="pl-c1">length</span>; <span class="pl-k">++</span>i) {</td>
      </tr>
      <tr>
        <td id="L4610" class="blob-num js-line-number" data-line-number="4610"></td>
        <td id="LC4610" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>dirs[i]) <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L4611" class="blob-num js-line-number" data-line-number="4611"></td>
        <td id="LC4611" class="blob-code blob-code-inner js-file-line">          d <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> dirs[i];</td>
      </tr>
      <tr>
        <td id="L4612" class="blob-num js-line-number" data-line-number="4612"></td>
        <td id="LC4612" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4613" class="blob-num js-line-number" data-line-number="4613"></td>
        <td id="LC4613" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(d, mode);</td>
      </tr>
      <tr>
        <td id="L4614" class="blob-num js-line-number" data-line-number="4614"></td>
        <td id="LC4614" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4615" class="blob-num js-line-number" data-line-number="4615"></td>
        <td id="LC4615" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">e</span>.<span class="pl-smi">errno</span> <span class="pl-k">!=</span> <span class="pl-c1">17</span>) <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L4616" class="blob-num js-line-number" data-line-number="4616"></td>
        <td id="LC4616" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4617" class="blob-num js-line-number" data-line-number="4617"></td>
        <td id="LC4617" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4618" class="blob-num js-line-number" data-line-number="4618"></td>
        <td id="LC4618" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mkdev</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L4619" class="blob-num js-line-number" data-line-number="4619"></td>
        <td id="LC4619" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span>(dev) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4620" class="blob-num js-line-number" data-line-number="4620"></td>
        <td id="LC4620" class="blob-code blob-code-inner js-file-line">          dev <span class="pl-k">=</span> mode;</td>
      </tr>
      <tr>
        <td id="L4621" class="blob-num js-line-number" data-line-number="4621"></td>
        <td id="LC4621" class="blob-code blob-code-inner js-file-line">          mode <span class="pl-k">=</span> <span class="pl-c1">438</span> <span class="pl-c"><span class="pl-c">/*</span> 0666 <span class="pl-c">*/</span></span>;</td>
      </tr>
      <tr>
        <td id="L4622" class="blob-num js-line-number" data-line-number="4622"></td>
        <td id="LC4622" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4623" class="blob-num js-line-number" data-line-number="4623"></td>
        <td id="LC4623" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">|=</span> <span class="pl-c1">8192</span>;</td>
      </tr>
      <tr>
        <td id="L4624" class="blob-num js-line-number" data-line-number="4624"></td>
        <td id="LC4624" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">mknod</span>(path, mode, dev);</td>
      </tr>
      <tr>
        <td id="L4625" class="blob-num js-line-number" data-line-number="4625"></td>
        <td id="LC4625" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">symlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">oldpath</span>, <span class="pl-smi">newpath</span>) {</td>
      </tr>
      <tr>
        <td id="L4626" class="blob-num js-line-number" data-line-number="4626"></td>
        <td id="LC4626" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(oldpath)) {</td>
      </tr>
      <tr>
        <td id="L4627" class="blob-num js-line-number" data-line-number="4627"></td>
        <td id="LC4627" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4628" class="blob-num js-line-number" data-line-number="4628"></td>
        <td id="LC4628" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4629" class="blob-num js-line-number" data-line-number="4629"></td>
        <td id="LC4629" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(newpath, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4630" class="blob-num js-line-number" data-line-number="4630"></td>
        <td id="LC4630" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parent <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4631" class="blob-num js-line-number" data-line-number="4631"></td>
        <td id="LC4631" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>parent) {</td>
      </tr>
      <tr>
        <td id="L4632" class="blob-num js-line-number" data-line-number="4632"></td>
        <td id="LC4632" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4633" class="blob-num js-line-number" data-line-number="4633"></td>
        <td id="LC4633" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4634" class="blob-num js-line-number" data-line-number="4634"></td>
        <td id="LC4634" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> newname <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(newpath);</td>
      </tr>
      <tr>
        <td id="L4635" class="blob-num js-line-number" data-line-number="4635"></td>
        <td id="LC4635" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayCreate</span>(parent, newname);</td>
      </tr>
      <tr>
        <td id="L4636" class="blob-num js-line-number" data-line-number="4636"></td>
        <td id="LC4636" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4637" class="blob-num js-line-number" data-line-number="4637"></td>
        <td id="LC4637" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4638" class="blob-num js-line-number" data-line-number="4638"></td>
        <td id="LC4638" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4639" class="blob-num js-line-number" data-line-number="4639"></td>
        <td id="LC4639" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">symlink</span>) {</td>
      </tr>
      <tr>
        <td id="L4640" class="blob-num js-line-number" data-line-number="4640"></td>
        <td id="LC4640" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4641" class="blob-num js-line-number" data-line-number="4641"></td>
        <td id="LC4641" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4642" class="blob-num js-line-number" data-line-number="4642"></td>
        <td id="LC4642" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">symlink</span>(parent, newname, oldpath);</td>
      </tr>
      <tr>
        <td id="L4643" class="blob-num js-line-number" data-line-number="4643"></td>
        <td id="LC4643" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">rename</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">old_path</span>, <span class="pl-smi">new_path</span>) {</td>
      </tr>
      <tr>
        <td id="L4644" class="blob-num js-line-number" data-line-number="4644"></td>
        <td id="LC4644" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> old_dirname <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">dirname</span>(old_path);</td>
      </tr>
      <tr>
        <td id="L4645" class="blob-num js-line-number" data-line-number="4645"></td>
        <td id="LC4645" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> new_dirname <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">dirname</span>(new_path);</td>
      </tr>
      <tr>
        <td id="L4646" class="blob-num js-line-number" data-line-number="4646"></td>
        <td id="LC4646" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> old_name <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(old_path);</td>
      </tr>
      <tr>
        <td id="L4647" class="blob-num js-line-number" data-line-number="4647"></td>
        <td id="LC4647" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> new_name <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(new_path);</td>
      </tr>
      <tr>
        <td id="L4648" class="blob-num js-line-number" data-line-number="4648"></td>
        <td id="LC4648" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> parents must exist</span></td>
      </tr>
      <tr>
        <td id="L4649" class="blob-num js-line-number" data-line-number="4649"></td>
        <td id="LC4649" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup, old_dir, new_dir;</td>
      </tr>
      <tr>
        <td id="L4650" class="blob-num js-line-number" data-line-number="4650"></td>
        <td id="LC4650" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4651" class="blob-num js-line-number" data-line-number="4651"></td>
        <td id="LC4651" class="blob-code blob-code-inner js-file-line">          lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(old_path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4652" class="blob-num js-line-number" data-line-number="4652"></td>
        <td id="LC4652" class="blob-code blob-code-inner js-file-line">          old_dir <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4653" class="blob-num js-line-number" data-line-number="4653"></td>
        <td id="LC4653" class="blob-code blob-code-inner js-file-line">          lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(new_path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4654" class="blob-num js-line-number" data-line-number="4654"></td>
        <td id="LC4654" class="blob-code blob-code-inner js-file-line">          new_dir <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4655" class="blob-num js-line-number" data-line-number="4655"></td>
        <td id="LC4655" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4656" class="blob-num js-line-number" data-line-number="4656"></td>
        <td id="LC4656" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4657" class="blob-num js-line-number" data-line-number="4657"></td>
        <td id="LC4657" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4658" class="blob-num js-line-number" data-line-number="4658"></td>
        <td id="LC4658" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>old_dir <span class="pl-k">||</span> <span class="pl-k">!</span>new_dir) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4659" class="blob-num js-line-number" data-line-number="4659"></td>
        <td id="LC4659" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> need to be part of the same mount</span></td>
      </tr>
      <tr>
        <td id="L4660" class="blob-num js-line-number" data-line-number="4660"></td>
        <td id="LC4660" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">old_dir</span>.<span class="pl-smi">mount</span> <span class="pl-k">!==</span> <span class="pl-smi">new_dir</span>.<span class="pl-smi">mount</span>) {</td>
      </tr>
      <tr>
        <td id="L4661" class="blob-num js-line-number" data-line-number="4661"></td>
        <td id="LC4661" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">18</span>);</td>
      </tr>
      <tr>
        <td id="L4662" class="blob-num js-line-number" data-line-number="4662"></td>
        <td id="LC4662" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4663" class="blob-num js-line-number" data-line-number="4663"></td>
        <td id="LC4663" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> source must exist</span></td>
      </tr>
      <tr>
        <td id="L4664" class="blob-num js-line-number" data-line-number="4664"></td>
        <td id="LC4664" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> old_node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(old_dir, old_name);</td>
      </tr>
      <tr>
        <td id="L4665" class="blob-num js-line-number" data-line-number="4665"></td>
        <td id="LC4665" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> old path should not be an ancestor of the new path</span></td>
      </tr>
      <tr>
        <td id="L4666" class="blob-num js-line-number" data-line-number="4666"></td>
        <td id="LC4666" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> relative <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">relative</span>(old_path, new_dirname);</td>
      </tr>
      <tr>
        <td id="L4667" class="blob-num js-line-number" data-line-number="4667"></td>
        <td id="LC4667" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">relative</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4668" class="blob-num js-line-number" data-line-number="4668"></td>
        <td id="LC4668" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4669" class="blob-num js-line-number" data-line-number="4669"></td>
        <td id="LC4669" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4670" class="blob-num js-line-number" data-line-number="4670"></td>
        <td id="LC4670" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> new path should not be an ancestor of the old path</span></td>
      </tr>
      <tr>
        <td id="L4671" class="blob-num js-line-number" data-line-number="4671"></td>
        <td id="LC4671" class="blob-code blob-code-inner js-file-line">        relative <span class="pl-k">=</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">relative</span>(new_path, old_dirname);</td>
      </tr>
      <tr>
        <td id="L4672" class="blob-num js-line-number" data-line-number="4672"></td>
        <td id="LC4672" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">relative</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4673" class="blob-num js-line-number" data-line-number="4673"></td>
        <td id="LC4673" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">39</span>);</td>
      </tr>
      <tr>
        <td id="L4674" class="blob-num js-line-number" data-line-number="4674"></td>
        <td id="LC4674" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4675" class="blob-num js-line-number" data-line-number="4675"></td>
        <td id="LC4675" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> see if the new path already exists</span></td>
      </tr>
      <tr>
        <td id="L4676" class="blob-num js-line-number" data-line-number="4676"></td>
        <td id="LC4676" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> new_node;</td>
      </tr>
      <tr>
        <td id="L4677" class="blob-num js-line-number" data-line-number="4677"></td>
        <td id="LC4677" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4678" class="blob-num js-line-number" data-line-number="4678"></td>
        <td id="LC4678" class="blob-code blob-code-inner js-file-line">          new_node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(new_dir, new_name);</td>
      </tr>
      <tr>
        <td id="L4679" class="blob-num js-line-number" data-line-number="4679"></td>
        <td id="LC4679" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4680" class="blob-num js-line-number" data-line-number="4680"></td>
        <td id="LC4680" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> not fatal</span></td>
      </tr>
      <tr>
        <td id="L4681" class="blob-num js-line-number" data-line-number="4681"></td>
        <td id="LC4681" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4682" class="blob-num js-line-number" data-line-number="4682"></td>
        <td id="LC4682" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> early out if nothing needs to change</span></td>
      </tr>
      <tr>
        <td id="L4683" class="blob-num js-line-number" data-line-number="4683"></td>
        <td id="LC4683" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (old_node <span class="pl-k">===</span> new_node) {</td>
      </tr>
      <tr>
        <td id="L4684" class="blob-num js-line-number" data-line-number="4684"></td>
        <td id="LC4684" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L4685" class="blob-num js-line-number" data-line-number="4685"></td>
        <td id="LC4685" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4686" class="blob-num js-line-number" data-line-number="4686"></td>
        <td id="LC4686" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> we&#39;ll need to delete the old entry</span></td>
      </tr>
      <tr>
        <td id="L4687" class="blob-num js-line-number" data-line-number="4687"></td>
        <td id="LC4687" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> isdir <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">old_node</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L4688" class="blob-num js-line-number" data-line-number="4688"></td>
        <td id="LC4688" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayDelete</span>(old_dir, old_name, isdir);</td>
      </tr>
      <tr>
        <td id="L4689" class="blob-num js-line-number" data-line-number="4689"></td>
        <td id="LC4689" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4690" class="blob-num js-line-number" data-line-number="4690"></td>
        <td id="LC4690" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4691" class="blob-num js-line-number" data-line-number="4691"></td>
        <td id="LC4691" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4692" class="blob-num js-line-number" data-line-number="4692"></td>
        <td id="LC4692" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> need delete permissions if we&#39;ll be overwriting.</span></td>
      </tr>
      <tr>
        <td id="L4693" class="blob-num js-line-number" data-line-number="4693"></td>
        <td id="LC4693" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> need create permissions if new doesn&#39;t already exist.</span></td>
      </tr>
      <tr>
        <td id="L4694" class="blob-num js-line-number" data-line-number="4694"></td>
        <td id="LC4694" class="blob-code blob-code-inner js-file-line">        err <span class="pl-k">=</span> new_node <span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L4695" class="blob-num js-line-number" data-line-number="4695"></td>
        <td id="LC4695" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">mayDelete</span>(new_dir, new_name, isdir) <span class="pl-k">:</span></td>
      </tr>
      <tr>
        <td id="L4696" class="blob-num js-line-number" data-line-number="4696"></td>
        <td id="LC4696" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">mayCreate</span>(new_dir, new_name);</td>
      </tr>
      <tr>
        <td id="L4697" class="blob-num js-line-number" data-line-number="4697"></td>
        <td id="LC4697" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4698" class="blob-num js-line-number" data-line-number="4698"></td>
        <td id="LC4698" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4699" class="blob-num js-line-number" data-line-number="4699"></td>
        <td id="LC4699" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4700" class="blob-num js-line-number" data-line-number="4700"></td>
        <td id="LC4700" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">old_dir</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">rename</span>) {</td>
      </tr>
      <tr>
        <td id="L4701" class="blob-num js-line-number" data-line-number="4701"></td>
        <td id="LC4701" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4702" class="blob-num js-line-number" data-line-number="4702"></td>
        <td id="LC4702" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4703" class="blob-num js-line-number" data-line-number="4703"></td>
        <td id="LC4703" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(old_node) <span class="pl-k">||</span> (new_node <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(new_node))) {</td>
      </tr>
      <tr>
        <td id="L4704" class="blob-num js-line-number" data-line-number="4704"></td>
        <td id="LC4704" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4705" class="blob-num js-line-number" data-line-number="4705"></td>
        <td id="LC4705" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4706" class="blob-num js-line-number" data-line-number="4706"></td>
        <td id="LC4706" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if we are going to change the parent, check write permissions</span></td>
      </tr>
      <tr>
        <td id="L4707" class="blob-num js-line-number" data-line-number="4707"></td>
        <td id="LC4707" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (new_dir <span class="pl-k">!==</span> old_dir) {</td>
      </tr>
      <tr>
        <td id="L4708" class="blob-num js-line-number" data-line-number="4708"></td>
        <td id="LC4708" class="blob-code blob-code-inner js-file-line">          err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(old_dir, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4709" class="blob-num js-line-number" data-line-number="4709"></td>
        <td id="LC4709" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4710" class="blob-num js-line-number" data-line-number="4710"></td>
        <td id="LC4710" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4711" class="blob-num js-line-number" data-line-number="4711"></td>
        <td id="LC4711" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4712" class="blob-num js-line-number" data-line-number="4712"></td>
        <td id="LC4712" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4713" class="blob-num js-line-number" data-line-number="4713"></td>
        <td id="LC4713" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4714" class="blob-num js-line-number" data-line-number="4714"></td>
        <td id="LC4714" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willMovePath<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L4715" class="blob-num js-line-number" data-line-number="4715"></td>
        <td id="LC4715" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willMovePath<span class="pl-pds">&#39;</span></span>](old_path, new_path);</td>
      </tr>
      <tr>
        <td id="L4716" class="blob-num js-line-number" data-line-number="4716"></td>
        <td id="LC4716" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4717" class="blob-num js-line-number" data-line-number="4717"></td>
        <td id="LC4717" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4718" class="blob-num js-line-number" data-line-number="4718"></td>
        <td id="LC4718" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;willMovePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>old_path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;, &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>new_path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4719" class="blob-num js-line-number" data-line-number="4719"></td>
        <td id="LC4719" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4720" class="blob-num js-line-number" data-line-number="4720"></td>
        <td id="LC4720" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> remove the node from the lookup hash</span></td>
      </tr>
      <tr>
        <td id="L4721" class="blob-num js-line-number" data-line-number="4721"></td>
        <td id="LC4721" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">hashRemoveNode</span>(old_node);</td>
      </tr>
      <tr>
        <td id="L4722" class="blob-num js-line-number" data-line-number="4722"></td>
        <td id="LC4722" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> do the underlying fs rename</span></td>
      </tr>
      <tr>
        <td id="L4723" class="blob-num js-line-number" data-line-number="4723"></td>
        <td id="LC4723" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4724" class="blob-num js-line-number" data-line-number="4724"></td>
        <td id="LC4724" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">old_dir</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">rename</span>(old_node, new_dir, new_name);</td>
      </tr>
      <tr>
        <td id="L4725" class="blob-num js-line-number" data-line-number="4725"></td>
        <td id="LC4725" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4726" class="blob-num js-line-number" data-line-number="4726"></td>
        <td id="LC4726" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L4727" class="blob-num js-line-number" data-line-number="4727"></td>
        <td id="LC4727" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L4728" class="blob-num js-line-number" data-line-number="4728"></td>
        <td id="LC4728" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> add the node back to the hash (in case node_ops.rename</span></td>
      </tr>
      <tr>
        <td id="L4729" class="blob-num js-line-number" data-line-number="4729"></td>
        <td id="LC4729" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> changed its name)</span></td>
      </tr>
      <tr>
        <td id="L4730" class="blob-num js-line-number" data-line-number="4730"></td>
        <td id="LC4730" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">hashAddNode</span>(old_node);</td>
      </tr>
      <tr>
        <td id="L4731" class="blob-num js-line-number" data-line-number="4731"></td>
        <td id="LC4731" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4732" class="blob-num js-line-number" data-line-number="4732"></td>
        <td id="LC4732" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4733" class="blob-num js-line-number" data-line-number="4733"></td>
        <td id="LC4733" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onMovePath<span class="pl-pds">&#39;</span></span>]) <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onMovePath<span class="pl-pds">&#39;</span></span>](old_path, new_path);</td>
      </tr>
      <tr>
        <td id="L4734" class="blob-num js-line-number" data-line-number="4734"></td>
        <td id="LC4734" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4735" class="blob-num js-line-number" data-line-number="4735"></td>
        <td id="LC4735" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;onMovePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>old_path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;, &#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>new_path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4736" class="blob-num js-line-number" data-line-number="4736"></td>
        <td id="LC4736" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4737" class="blob-num js-line-number" data-line-number="4737"></td>
        <td id="LC4737" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">rmdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4738" class="blob-num js-line-number" data-line-number="4738"></td>
        <td id="LC4738" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4739" class="blob-num js-line-number" data-line-number="4739"></td>
        <td id="LC4739" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parent <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4740" class="blob-num js-line-number" data-line-number="4740"></td>
        <td id="LC4740" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(path);</td>
      </tr>
      <tr>
        <td id="L4741" class="blob-num js-line-number" data-line-number="4741"></td>
        <td id="LC4741" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4742" class="blob-num js-line-number" data-line-number="4742"></td>
        <td id="LC4742" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayDelete</span>(parent, name, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L4743" class="blob-num js-line-number" data-line-number="4743"></td>
        <td id="LC4743" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4744" class="blob-num js-line-number" data-line-number="4744"></td>
        <td id="LC4744" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4745" class="blob-num js-line-number" data-line-number="4745"></td>
        <td id="LC4745" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4746" class="blob-num js-line-number" data-line-number="4746"></td>
        <td id="LC4746" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">rmdir</span>) {</td>
      </tr>
      <tr>
        <td id="L4747" class="blob-num js-line-number" data-line-number="4747"></td>
        <td id="LC4747" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4748" class="blob-num js-line-number" data-line-number="4748"></td>
        <td id="LC4748" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4749" class="blob-num js-line-number" data-line-number="4749"></td>
        <td id="LC4749" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L4750" class="blob-num js-line-number" data-line-number="4750"></td>
        <td id="LC4750" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4751" class="blob-num js-line-number" data-line-number="4751"></td>
        <td id="LC4751" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4752" class="blob-num js-line-number" data-line-number="4752"></td>
        <td id="LC4752" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4753" class="blob-num js-line-number" data-line-number="4753"></td>
        <td id="LC4753" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willDeletePath<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L4754" class="blob-num js-line-number" data-line-number="4754"></td>
        <td id="LC4754" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willDeletePath<span class="pl-pds">&#39;</span></span>](path);</td>
      </tr>
      <tr>
        <td id="L4755" class="blob-num js-line-number" data-line-number="4755"></td>
        <td id="LC4755" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4756" class="blob-num js-line-number" data-line-number="4756"></td>
        <td id="LC4756" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4757" class="blob-num js-line-number" data-line-number="4757"></td>
        <td id="LC4757" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;willDeletePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4758" class="blob-num js-line-number" data-line-number="4758"></td>
        <td id="LC4758" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4759" class="blob-num js-line-number" data-line-number="4759"></td>
        <td id="LC4759" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">rmdir</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4760" class="blob-num js-line-number" data-line-number="4760"></td>
        <td id="LC4760" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">destroyNode</span>(node);</td>
      </tr>
      <tr>
        <td id="L4761" class="blob-num js-line-number" data-line-number="4761"></td>
        <td id="LC4761" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4762" class="blob-num js-line-number" data-line-number="4762"></td>
        <td id="LC4762" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onDeletePath<span class="pl-pds">&#39;</span></span>]) <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onDeletePath<span class="pl-pds">&#39;</span></span>](path);</td>
      </tr>
      <tr>
        <td id="L4763" class="blob-num js-line-number" data-line-number="4763"></td>
        <td id="LC4763" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4764" class="blob-num js-line-number" data-line-number="4764"></td>
        <td id="LC4764" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;onDeletePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4765" class="blob-num js-line-number" data-line-number="4765"></td>
        <td id="LC4765" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4766" class="blob-num js-line-number" data-line-number="4766"></td>
        <td id="LC4766" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">readdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4767" class="blob-num js-line-number" data-line-number="4767"></td>
        <td id="LC4767" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4768" class="blob-num js-line-number" data-line-number="4768"></td>
        <td id="LC4768" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4769" class="blob-num js-line-number" data-line-number="4769"></td>
        <td id="LC4769" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">readdir</span>) {</td>
      </tr>
      <tr>
        <td id="L4770" class="blob-num js-line-number" data-line-number="4770"></td>
        <td id="LC4770" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">20</span>);</td>
      </tr>
      <tr>
        <td id="L4771" class="blob-num js-line-number" data-line-number="4771"></td>
        <td id="LC4771" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4772" class="blob-num js-line-number" data-line-number="4772"></td>
        <td id="LC4772" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">readdir</span>(node);</td>
      </tr>
      <tr>
        <td id="L4773" class="blob-num js-line-number" data-line-number="4773"></td>
        <td id="LC4773" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">unlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4774" class="blob-num js-line-number" data-line-number="4774"></td>
        <td id="LC4774" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4775" class="blob-num js-line-number" data-line-number="4775"></td>
        <td id="LC4775" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parent <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4776" class="blob-num js-line-number" data-line-number="4776"></td>
        <td id="LC4776" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(path);</td>
      </tr>
      <tr>
        <td id="L4777" class="blob-num js-line-number" data-line-number="4777"></td>
        <td id="LC4777" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupNode</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4778" class="blob-num js-line-number" data-line-number="4778"></td>
        <td id="LC4778" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayDelete</span>(parent, name, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L4779" class="blob-num js-line-number" data-line-number="4779"></td>
        <td id="LC4779" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4780" class="blob-num js-line-number" data-line-number="4780"></td>
        <td id="LC4780" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> According to POSIX, we should map EISDIR to EPERM, but</span></td>
      </tr>
      <tr>
        <td id="L4781" class="blob-num js-line-number" data-line-number="4781"></td>
        <td id="LC4781" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> we instead do what Linux does (and we must, as we use</span></td>
      </tr>
      <tr>
        <td id="L4782" class="blob-num js-line-number" data-line-number="4782"></td>
        <td id="LC4782" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> the musl linux libc).</span></td>
      </tr>
      <tr>
        <td id="L4783" class="blob-num js-line-number" data-line-number="4783"></td>
        <td id="LC4783" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4784" class="blob-num js-line-number" data-line-number="4784"></td>
        <td id="LC4784" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4785" class="blob-num js-line-number" data-line-number="4785"></td>
        <td id="LC4785" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">unlink</span>) {</td>
      </tr>
      <tr>
        <td id="L4786" class="blob-num js-line-number" data-line-number="4786"></td>
        <td id="LC4786" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4787" class="blob-num js-line-number" data-line-number="4787"></td>
        <td id="LC4787" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4788" class="blob-num js-line-number" data-line-number="4788"></td>
        <td id="LC4788" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isMountpoint</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L4789" class="blob-num js-line-number" data-line-number="4789"></td>
        <td id="LC4789" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">16</span>);</td>
      </tr>
      <tr>
        <td id="L4790" class="blob-num js-line-number" data-line-number="4790"></td>
        <td id="LC4790" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4791" class="blob-num js-line-number" data-line-number="4791"></td>
        <td id="LC4791" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4792" class="blob-num js-line-number" data-line-number="4792"></td>
        <td id="LC4792" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willDeletePath<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L4793" class="blob-num js-line-number" data-line-number="4793"></td>
        <td id="LC4793" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>willDeletePath<span class="pl-pds">&#39;</span></span>](path);</td>
      </tr>
      <tr>
        <td id="L4794" class="blob-num js-line-number" data-line-number="4794"></td>
        <td id="LC4794" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4795" class="blob-num js-line-number" data-line-number="4795"></td>
        <td id="LC4795" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4796" class="blob-num js-line-number" data-line-number="4796"></td>
        <td id="LC4796" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;willDeletePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4797" class="blob-num js-line-number" data-line-number="4797"></td>
        <td id="LC4797" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4798" class="blob-num js-line-number" data-line-number="4798"></td>
        <td id="LC4798" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">parent</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">unlink</span>(parent, name);</td>
      </tr>
      <tr>
        <td id="L4799" class="blob-num js-line-number" data-line-number="4799"></td>
        <td id="LC4799" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">destroyNode</span>(node);</td>
      </tr>
      <tr>
        <td id="L4800" class="blob-num js-line-number" data-line-number="4800"></td>
        <td id="LC4800" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4801" class="blob-num js-line-number" data-line-number="4801"></td>
        <td id="LC4801" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onDeletePath<span class="pl-pds">&#39;</span></span>]) <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onDeletePath<span class="pl-pds">&#39;</span></span>](path);</td>
      </tr>
      <tr>
        <td id="L4802" class="blob-num js-line-number" data-line-number="4802"></td>
        <td id="LC4802" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L4803" class="blob-num js-line-number" data-line-number="4803"></td>
        <td id="LC4803" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;onDeletePath&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L4804" class="blob-num js-line-number" data-line-number="4804"></td>
        <td id="LC4804" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4805" class="blob-num js-line-number" data-line-number="4805"></td>
        <td id="LC4805" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">readlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4806" class="blob-num js-line-number" data-line-number="4806"></td>
        <td id="LC4806" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path);</td>
      </tr>
      <tr>
        <td id="L4807" class="blob-num js-line-number" data-line-number="4807"></td>
        <td id="LC4807" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> link <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4808" class="blob-num js-line-number" data-line-number="4808"></td>
        <td id="LC4808" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>link) {</td>
      </tr>
      <tr>
        <td id="L4809" class="blob-num js-line-number" data-line-number="4809"></td>
        <td id="LC4809" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4810" class="blob-num js-line-number" data-line-number="4810"></td>
        <td id="LC4810" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4811" class="blob-num js-line-number" data-line-number="4811"></td>
        <td id="LC4811" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">link</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">readlink</span>) {</td>
      </tr>
      <tr>
        <td id="L4812" class="blob-num js-line-number" data-line-number="4812"></td>
        <td id="LC4812" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4813" class="blob-num js-line-number" data-line-number="4813"></td>
        <td id="LC4813" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4814" class="blob-num js-line-number" data-line-number="4814"></td>
        <td id="LC4814" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(<span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(<span class="pl-smi">link</span>.<span class="pl-c1">parent</span>), <span class="pl-smi">link</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">readlink</span>(link));</td>
      </tr>
      <tr>
        <td id="L4815" class="blob-num js-line-number" data-line-number="4815"></td>
        <td id="LC4815" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">stat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">dontFollow</span>) {</td>
      </tr>
      <tr>
        <td id="L4816" class="blob-num js-line-number" data-line-number="4816"></td>
        <td id="LC4816" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-k">!</span>dontFollow });</td>
      </tr>
      <tr>
        <td id="L4817" class="blob-num js-line-number" data-line-number="4817"></td>
        <td id="LC4817" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4818" class="blob-num js-line-number" data-line-number="4818"></td>
        <td id="LC4818" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>node) {</td>
      </tr>
      <tr>
        <td id="L4819" class="blob-num js-line-number" data-line-number="4819"></td>
        <td id="LC4819" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4820" class="blob-num js-line-number" data-line-number="4820"></td>
        <td id="LC4820" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4821" class="blob-num js-line-number" data-line-number="4821"></td>
        <td id="LC4821" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">getattr</span>) {</td>
      </tr>
      <tr>
        <td id="L4822" class="blob-num js-line-number" data-line-number="4822"></td>
        <td id="LC4822" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4823" class="blob-num js-line-number" data-line-number="4823"></td>
        <td id="LC4823" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4824" class="blob-num js-line-number" data-line-number="4824"></td>
        <td id="LC4824" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">getattr</span>(node);</td>
      </tr>
      <tr>
        <td id="L4825" class="blob-num js-line-number" data-line-number="4825"></td>
        <td id="LC4825" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lstat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L4826" class="blob-num js-line-number" data-line-number="4826"></td>
        <td id="LC4826" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">stat</span>(path, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L4827" class="blob-num js-line-number" data-line-number="4827"></td>
        <td id="LC4827" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">chmod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dontFollow</span>) {</td>
      </tr>
      <tr>
        <td id="L4828" class="blob-num js-line-number" data-line-number="4828"></td>
        <td id="LC4828" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4829" class="blob-num js-line-number" data-line-number="4829"></td>
        <td id="LC4829" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4830" class="blob-num js-line-number" data-line-number="4830"></td>
        <td id="LC4830" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-k">!</span>dontFollow });</td>
      </tr>
      <tr>
        <td id="L4831" class="blob-num js-line-number" data-line-number="4831"></td>
        <td id="LC4831" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4832" class="blob-num js-line-number" data-line-number="4832"></td>
        <td id="LC4832" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4833" class="blob-num js-line-number" data-line-number="4833"></td>
        <td id="LC4833" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> path;</td>
      </tr>
      <tr>
        <td id="L4834" class="blob-num js-line-number" data-line-number="4834"></td>
        <td id="LC4834" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4835" class="blob-num js-line-number" data-line-number="4835"></td>
        <td id="LC4835" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span>) {</td>
      </tr>
      <tr>
        <td id="L4836" class="blob-num js-line-number" data-line-number="4836"></td>
        <td id="LC4836" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4837" class="blob-num js-line-number" data-line-number="4837"></td>
        <td id="LC4837" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4838" class="blob-num js-line-number" data-line-number="4838"></td>
        <td id="LC4838" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">setattr</span>(node, {</td>
      </tr>
      <tr>
        <td id="L4839" class="blob-num js-line-number" data-line-number="4839"></td>
        <td id="LC4839" class="blob-code blob-code-inner js-file-line">          mode<span class="pl-k">:</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">4095</span>) <span class="pl-k">|</span> (<span class="pl-smi">node</span>.<span class="pl-smi">mode</span> <span class="pl-k">&amp;</span> <span class="pl-k">~</span><span class="pl-c1">4095</span>),</td>
      </tr>
      <tr>
        <td id="L4840" class="blob-num js-line-number" data-line-number="4840"></td>
        <td id="LC4840" class="blob-code blob-code-inner js-file-line">          timestamp<span class="pl-k">:</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>()</td>
      </tr>
      <tr>
        <td id="L4841" class="blob-num js-line-number" data-line-number="4841"></td>
        <td id="LC4841" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4842" class="blob-num js-line-number" data-line-number="4842"></td>
        <td id="LC4842" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lchmod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4843" class="blob-num js-line-number" data-line-number="4843"></td>
        <td id="LC4843" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(path, mode, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L4844" class="blob-num js-line-number" data-line-number="4844"></td>
        <td id="LC4844" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">fchmod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L4845" class="blob-num js-line-number" data-line-number="4845"></td>
        <td id="LC4845" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(fd);</td>
      </tr>
      <tr>
        <td id="L4846" class="blob-num js-line-number" data-line-number="4846"></td>
        <td id="LC4846" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) {</td>
      </tr>
      <tr>
        <td id="L4847" class="blob-num js-line-number" data-line-number="4847"></td>
        <td id="LC4847" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L4848" class="blob-num js-line-number" data-line-number="4848"></td>
        <td id="LC4848" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4849" class="blob-num js-line-number" data-line-number="4849"></td>
        <td id="LC4849" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>, mode);</td>
      </tr>
      <tr>
        <td id="L4850" class="blob-num js-line-number" data-line-number="4850"></td>
        <td id="LC4850" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">chown</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">uid</span>, <span class="pl-smi">gid</span>, <span class="pl-smi">dontFollow</span>) {</td>
      </tr>
      <tr>
        <td id="L4851" class="blob-num js-line-number" data-line-number="4851"></td>
        <td id="LC4851" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4852" class="blob-num js-line-number" data-line-number="4852"></td>
        <td id="LC4852" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4853" class="blob-num js-line-number" data-line-number="4853"></td>
        <td id="LC4853" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-k">!</span>dontFollow });</td>
      </tr>
      <tr>
        <td id="L4854" class="blob-num js-line-number" data-line-number="4854"></td>
        <td id="LC4854" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4855" class="blob-num js-line-number" data-line-number="4855"></td>
        <td id="LC4855" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4856" class="blob-num js-line-number" data-line-number="4856"></td>
        <td id="LC4856" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> path;</td>
      </tr>
      <tr>
        <td id="L4857" class="blob-num js-line-number" data-line-number="4857"></td>
        <td id="LC4857" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4858" class="blob-num js-line-number" data-line-number="4858"></td>
        <td id="LC4858" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span>) {</td>
      </tr>
      <tr>
        <td id="L4859" class="blob-num js-line-number" data-line-number="4859"></td>
        <td id="LC4859" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4860" class="blob-num js-line-number" data-line-number="4860"></td>
        <td id="LC4860" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4861" class="blob-num js-line-number" data-line-number="4861"></td>
        <td id="LC4861" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">setattr</span>(node, {</td>
      </tr>
      <tr>
        <td id="L4862" class="blob-num js-line-number" data-line-number="4862"></td>
        <td id="LC4862" class="blob-code blob-code-inner js-file-line">          timestamp<span class="pl-k">:</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>()</td>
      </tr>
      <tr>
        <td id="L4863" class="blob-num js-line-number" data-line-number="4863"></td>
        <td id="LC4863" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> we ignore the uid / gid for now</span></td>
      </tr>
      <tr>
        <td id="L4864" class="blob-num js-line-number" data-line-number="4864"></td>
        <td id="LC4864" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4865" class="blob-num js-line-number" data-line-number="4865"></td>
        <td id="LC4865" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">lchown</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">uid</span>, <span class="pl-smi">gid</span>) {</td>
      </tr>
      <tr>
        <td id="L4866" class="blob-num js-line-number" data-line-number="4866"></td>
        <td id="LC4866" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">chown</span>(path, uid, gid, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L4867" class="blob-num js-line-number" data-line-number="4867"></td>
        <td id="LC4867" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">fchown</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd</span>, <span class="pl-smi">uid</span>, <span class="pl-smi">gid</span>) {</td>
      </tr>
      <tr>
        <td id="L4868" class="blob-num js-line-number" data-line-number="4868"></td>
        <td id="LC4868" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(fd);</td>
      </tr>
      <tr>
        <td id="L4869" class="blob-num js-line-number" data-line-number="4869"></td>
        <td id="LC4869" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) {</td>
      </tr>
      <tr>
        <td id="L4870" class="blob-num js-line-number" data-line-number="4870"></td>
        <td id="LC4870" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L4871" class="blob-num js-line-number" data-line-number="4871"></td>
        <td id="LC4871" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4872" class="blob-num js-line-number" data-line-number="4872"></td>
        <td id="LC4872" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">chown</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>, uid, gid);</td>
      </tr>
      <tr>
        <td id="L4873" class="blob-num js-line-number" data-line-number="4873"></td>
        <td id="LC4873" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">truncate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">len</span>) {</td>
      </tr>
      <tr>
        <td id="L4874" class="blob-num js-line-number" data-line-number="4874"></td>
        <td id="LC4874" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (len <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L4875" class="blob-num js-line-number" data-line-number="4875"></td>
        <td id="LC4875" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4876" class="blob-num js-line-number" data-line-number="4876"></td>
        <td id="LC4876" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4877" class="blob-num js-line-number" data-line-number="4877"></td>
        <td id="LC4877" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4878" class="blob-num js-line-number" data-line-number="4878"></td>
        <td id="LC4878" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4879" class="blob-num js-line-number" data-line-number="4879"></td>
        <td id="LC4879" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4880" class="blob-num js-line-number" data-line-number="4880"></td>
        <td id="LC4880" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4881" class="blob-num js-line-number" data-line-number="4881"></td>
        <td id="LC4881" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4882" class="blob-num js-line-number" data-line-number="4882"></td>
        <td id="LC4882" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> path;</td>
      </tr>
      <tr>
        <td id="L4883" class="blob-num js-line-number" data-line-number="4883"></td>
        <td id="LC4883" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4884" class="blob-num js-line-number" data-line-number="4884"></td>
        <td id="LC4884" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-smi">setattr</span>) {</td>
      </tr>
      <tr>
        <td id="L4885" class="blob-num js-line-number" data-line-number="4885"></td>
        <td id="LC4885" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4886" class="blob-num js-line-number" data-line-number="4886"></td>
        <td id="LC4886" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4887" class="blob-num js-line-number" data-line-number="4887"></td>
        <td id="LC4887" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4888" class="blob-num js-line-number" data-line-number="4888"></td>
        <td id="LC4888" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">21</span>);</td>
      </tr>
      <tr>
        <td id="L4889" class="blob-num js-line-number" data-line-number="4889"></td>
        <td id="LC4889" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4890" class="blob-num js-line-number" data-line-number="4890"></td>
        <td id="LC4890" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4891" class="blob-num js-line-number" data-line-number="4891"></td>
        <td id="LC4891" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4892" class="blob-num js-line-number" data-line-number="4892"></td>
        <td id="LC4892" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4893" class="blob-num js-line-number" data-line-number="4893"></td>
        <td id="LC4893" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(node, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L4894" class="blob-num js-line-number" data-line-number="4894"></td>
        <td id="LC4894" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4895" class="blob-num js-line-number" data-line-number="4895"></td>
        <td id="LC4895" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4896" class="blob-num js-line-number" data-line-number="4896"></td>
        <td id="LC4896" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4897" class="blob-num js-line-number" data-line-number="4897"></td>
        <td id="LC4897" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">setattr</span>(node, {</td>
      </tr>
      <tr>
        <td id="L4898" class="blob-num js-line-number" data-line-number="4898"></td>
        <td id="LC4898" class="blob-code blob-code-inner js-file-line">          size<span class="pl-k">:</span> len,</td>
      </tr>
      <tr>
        <td id="L4899" class="blob-num js-line-number" data-line-number="4899"></td>
        <td id="LC4899" class="blob-code blob-code-inner js-file-line">          timestamp<span class="pl-k">:</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>()</td>
      </tr>
      <tr>
        <td id="L4900" class="blob-num js-line-number" data-line-number="4900"></td>
        <td id="LC4900" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4901" class="blob-num js-line-number" data-line-number="4901"></td>
        <td id="LC4901" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">ftruncate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">fd</span>, <span class="pl-smi">len</span>) {</td>
      </tr>
      <tr>
        <td id="L4902" class="blob-num js-line-number" data-line-number="4902"></td>
        <td id="LC4902" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(fd);</td>
      </tr>
      <tr>
        <td id="L4903" class="blob-num js-line-number" data-line-number="4903"></td>
        <td id="LC4903" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) {</td>
      </tr>
      <tr>
        <td id="L4904" class="blob-num js-line-number" data-line-number="4904"></td>
        <td id="LC4904" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L4905" class="blob-num js-line-number" data-line-number="4905"></td>
        <td id="LC4905" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4906" class="blob-num js-line-number" data-line-number="4906"></td>
        <td id="LC4906" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L4907" class="blob-num js-line-number" data-line-number="4907"></td>
        <td id="LC4907" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L4908" class="blob-num js-line-number" data-line-number="4908"></td>
        <td id="LC4908" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4909" class="blob-num js-line-number" data-line-number="4909"></td>
        <td id="LC4909" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">truncate</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>, len);</td>
      </tr>
      <tr>
        <td id="L4910" class="blob-num js-line-number" data-line-number="4910"></td>
        <td id="LC4910" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">utime</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">atime</span>, <span class="pl-smi">mtime</span>) {</td>
      </tr>
      <tr>
        <td id="L4911" class="blob-num js-line-number" data-line-number="4911"></td>
        <td id="LC4911" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L4912" class="blob-num js-line-number" data-line-number="4912"></td>
        <td id="LC4912" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4913" class="blob-num js-line-number" data-line-number="4913"></td>
        <td id="LC4913" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span>.<span class="pl-en">setattr</span>(node, {</td>
      </tr>
      <tr>
        <td id="L4914" class="blob-num js-line-number" data-line-number="4914"></td>
        <td id="LC4914" class="blob-code blob-code-inner js-file-line">          timestamp<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(atime, mtime)</td>
      </tr>
      <tr>
        <td id="L4915" class="blob-num js-line-number" data-line-number="4915"></td>
        <td id="LC4915" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L4916" class="blob-num js-line-number" data-line-number="4916"></td>
        <td id="LC4916" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">open</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">flags</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">fd_start</span>, <span class="pl-smi">fd_end</span>) {</td>
      </tr>
      <tr>
        <td id="L4917" class="blob-num js-line-number" data-line-number="4917"></td>
        <td id="LC4917" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4918" class="blob-num js-line-number" data-line-number="4918"></td>
        <td id="LC4918" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4919" class="blob-num js-line-number" data-line-number="4919"></td>
        <td id="LC4919" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4920" class="blob-num js-line-number" data-line-number="4920"></td>
        <td id="LC4920" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">=</span> <span class="pl-k">typeof</span> flags <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> <span class="pl-c1">FS</span>.<span class="pl-en">modeStringToFlags</span>(flags) <span class="pl-k">:</span> flags;</td>
      </tr>
      <tr>
        <td id="L4921" class="blob-num js-line-number" data-line-number="4921"></td>
        <td id="LC4921" class="blob-code blob-code-inner js-file-line">        mode <span class="pl-k">=</span> <span class="pl-k">typeof</span> mode <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> <span class="pl-c1">438</span> <span class="pl-c"><span class="pl-c">/*</span> 0666 <span class="pl-c">*/</span></span> <span class="pl-k">:</span> mode;</td>
      </tr>
      <tr>
        <td id="L4922" class="blob-num js-line-number" data-line-number="4922"></td>
        <td id="LC4922" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">64</span>)) {</td>
      </tr>
      <tr>
        <td id="L4923" class="blob-num js-line-number" data-line-number="4923"></td>
        <td id="LC4923" class="blob-code blob-code-inner js-file-line">          mode <span class="pl-k">=</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">4095</span>) <span class="pl-k">|</span> <span class="pl-c1">32768</span>;</td>
      </tr>
      <tr>
        <td id="L4924" class="blob-num js-line-number" data-line-number="4924"></td>
        <td id="LC4924" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4925" class="blob-num js-line-number" data-line-number="4925"></td>
        <td id="LC4925" class="blob-code blob-code-inner js-file-line">          mode <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L4926" class="blob-num js-line-number" data-line-number="4926"></td>
        <td id="LC4926" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4927" class="blob-num js-line-number" data-line-number="4927"></td>
        <td id="LC4927" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L4928" class="blob-num js-line-number" data-line-number="4928"></td>
        <td id="LC4928" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> path <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L4929" class="blob-num js-line-number" data-line-number="4929"></td>
        <td id="LC4929" class="blob-code blob-code-inner js-file-line">          node <span class="pl-k">=</span> path;</td>
      </tr>
      <tr>
        <td id="L4930" class="blob-num js-line-number" data-line-number="4930"></td>
        <td id="LC4930" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4931" class="blob-num js-line-number" data-line-number="4931"></td>
        <td id="LC4931" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(path);</td>
      </tr>
      <tr>
        <td id="L4932" class="blob-num js-line-number" data-line-number="4932"></td>
        <td id="LC4932" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L4933" class="blob-num js-line-number" data-line-number="4933"></td>
        <td id="LC4933" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, {</td>
      </tr>
      <tr>
        <td id="L4934" class="blob-num js-line-number" data-line-number="4934"></td>
        <td id="LC4934" class="blob-code blob-code-inner js-file-line">              follow<span class="pl-k">:</span> <span class="pl-k">!</span>(flags <span class="pl-k">&amp;</span> <span class="pl-c1">131072</span>)</td>
      </tr>
      <tr>
        <td id="L4935" class="blob-num js-line-number" data-line-number="4935"></td>
        <td id="LC4935" class="blob-code blob-code-inner js-file-line">            });</td>
      </tr>
      <tr>
        <td id="L4936" class="blob-num js-line-number" data-line-number="4936"></td>
        <td id="LC4936" class="blob-code blob-code-inner js-file-line">            node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L4937" class="blob-num js-line-number" data-line-number="4937"></td>
        <td id="LC4937" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L4938" class="blob-num js-line-number" data-line-number="4938"></td>
        <td id="LC4938" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> ignore</span></td>
      </tr>
      <tr>
        <td id="L4939" class="blob-num js-line-number" data-line-number="4939"></td>
        <td id="LC4939" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4940" class="blob-num js-line-number" data-line-number="4940"></td>
        <td id="LC4940" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4941" class="blob-num js-line-number" data-line-number="4941"></td>
        <td id="LC4941" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> perhaps we need to create the node</span></td>
      </tr>
      <tr>
        <td id="L4942" class="blob-num js-line-number" data-line-number="4942"></td>
        <td id="LC4942" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> created <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L4943" class="blob-num js-line-number" data-line-number="4943"></td>
        <td id="LC4943" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">64</span>)) {</td>
      </tr>
      <tr>
        <td id="L4944" class="blob-num js-line-number" data-line-number="4944"></td>
        <td id="LC4944" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (node) {</td>
      </tr>
      <tr>
        <td id="L4945" class="blob-num js-line-number" data-line-number="4945"></td>
        <td id="LC4945" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> if O_CREAT and O_EXCL are set, error out if the node already exists</span></td>
      </tr>
      <tr>
        <td id="L4946" class="blob-num js-line-number" data-line-number="4946"></td>
        <td id="LC4946" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">128</span>)) {</td>
      </tr>
      <tr>
        <td id="L4947" class="blob-num js-line-number" data-line-number="4947"></td>
        <td id="LC4947" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">17</span>);</td>
      </tr>
      <tr>
        <td id="L4948" class="blob-num js-line-number" data-line-number="4948"></td>
        <td id="LC4948" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L4949" class="blob-num js-line-number" data-line-number="4949"></td>
        <td id="LC4949" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L4950" class="blob-num js-line-number" data-line-number="4950"></td>
        <td id="LC4950" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> node doesn&#39;t exist, try to create it</span></td>
      </tr>
      <tr>
        <td id="L4951" class="blob-num js-line-number" data-line-number="4951"></td>
        <td id="LC4951" class="blob-code blob-code-inner js-file-line">            node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mknod</span>(path, mode, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4952" class="blob-num js-line-number" data-line-number="4952"></td>
        <td id="LC4952" class="blob-code blob-code-inner js-file-line">            created <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L4953" class="blob-num js-line-number" data-line-number="4953"></td>
        <td id="LC4953" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4954" class="blob-num js-line-number" data-line-number="4954"></td>
        <td id="LC4954" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4955" class="blob-num js-line-number" data-line-number="4955"></td>
        <td id="LC4955" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>node) {</td>
      </tr>
      <tr>
        <td id="L4956" class="blob-num js-line-number" data-line-number="4956"></td>
        <td id="LC4956" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L4957" class="blob-num js-line-number" data-line-number="4957"></td>
        <td id="LC4957" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4958" class="blob-num js-line-number" data-line-number="4958"></td>
        <td id="LC4958" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> can&#39;t truncate a device</span></td>
      </tr>
      <tr>
        <td id="L4959" class="blob-num js-line-number" data-line-number="4959"></td>
        <td id="LC4959" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isChrdev</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4960" class="blob-num js-line-number" data-line-number="4960"></td>
        <td id="LC4960" class="blob-code blob-code-inner js-file-line">          flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span><span class="pl-c1">512</span>;</td>
      </tr>
      <tr>
        <td id="L4961" class="blob-num js-line-number" data-line-number="4961"></td>
        <td id="LC4961" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4962" class="blob-num js-line-number" data-line-number="4962"></td>
        <td id="LC4962" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> if asked only for a directory, then this must be one</span></td>
      </tr>
      <tr>
        <td id="L4963" class="blob-num js-line-number" data-line-number="4963"></td>
        <td id="LC4963" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">65536</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L4964" class="blob-num js-line-number" data-line-number="4964"></td>
        <td id="LC4964" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">20</span>);</td>
      </tr>
      <tr>
        <td id="L4965" class="blob-num js-line-number" data-line-number="4965"></td>
        <td id="LC4965" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4966" class="blob-num js-line-number" data-line-number="4966"></td>
        <td id="LC4966" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> check permissions, if this is not a file we just created now (it is ok to</span></td>
      </tr>
      <tr>
        <td id="L4967" class="blob-num js-line-number" data-line-number="4967"></td>
        <td id="LC4967" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> create and write to a file with read-only permissions; it is read-only</span></td>
      </tr>
      <tr>
        <td id="L4968" class="blob-num js-line-number" data-line-number="4968"></td>
        <td id="LC4968" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> for later use)</span></td>
      </tr>
      <tr>
        <td id="L4969" class="blob-num js-line-number" data-line-number="4969"></td>
        <td id="LC4969" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>created) {</td>
      </tr>
      <tr>
        <td id="L4970" class="blob-num js-line-number" data-line-number="4970"></td>
        <td id="LC4970" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mayOpen</span>(node, flags);</td>
      </tr>
      <tr>
        <td id="L4971" class="blob-num js-line-number" data-line-number="4971"></td>
        <td id="LC4971" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L4972" class="blob-num js-line-number" data-line-number="4972"></td>
        <td id="LC4972" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L4973" class="blob-num js-line-number" data-line-number="4973"></td>
        <td id="LC4973" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L4974" class="blob-num js-line-number" data-line-number="4974"></td>
        <td id="LC4974" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4975" class="blob-num js-line-number" data-line-number="4975"></td>
        <td id="LC4975" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> do truncation if necessary</span></td>
      </tr>
      <tr>
        <td id="L4976" class="blob-num js-line-number" data-line-number="4976"></td>
        <td id="LC4976" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">512</span>)) {</td>
      </tr>
      <tr>
        <td id="L4977" class="blob-num js-line-number" data-line-number="4977"></td>
        <td id="LC4977" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">truncate</span>(node, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L4978" class="blob-num js-line-number" data-line-number="4978"></td>
        <td id="LC4978" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4979" class="blob-num js-line-number" data-line-number="4979"></td>
        <td id="LC4979" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> we&#39;ve already handled these, don&#39;t pass down to the underlying vfs</span></td>
      </tr>
      <tr>
        <td id="L4980" class="blob-num js-line-number" data-line-number="4980"></td>
        <td id="LC4980" class="blob-code blob-code-inner js-file-line">        flags <span class="pl-k">&amp;=</span> <span class="pl-k">~</span>(<span class="pl-c1">128</span> <span class="pl-k">|</span> <span class="pl-c1">512</span>);</td>
      </tr>
      <tr>
        <td id="L4981" class="blob-num js-line-number" data-line-number="4981"></td>
        <td id="LC4981" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L4982" class="blob-num js-line-number" data-line-number="4982"></td>
        <td id="LC4982" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> register the stream with the filesystem</span></td>
      </tr>
      <tr>
        <td id="L4983" class="blob-num js-line-number" data-line-number="4983"></td>
        <td id="LC4983" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createStream</span>({</td>
      </tr>
      <tr>
        <td id="L4984" class="blob-num js-line-number" data-line-number="4984"></td>
        <td id="LC4984" class="blob-code blob-code-inner js-file-line">          node<span class="pl-k">:</span> node,</td>
      </tr>
      <tr>
        <td id="L4985" class="blob-num js-line-number" data-line-number="4985"></td>
        <td id="LC4985" class="blob-code blob-code-inner js-file-line">          path<span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(node),  <span class="pl-c"><span class="pl-c">//</span> we want the absolute path to the node</span></td>
      </tr>
      <tr>
        <td id="L4986" class="blob-num js-line-number" data-line-number="4986"></td>
        <td id="LC4986" class="blob-code blob-code-inner js-file-line">          flags<span class="pl-k">:</span> flags,</td>
      </tr>
      <tr>
        <td id="L4987" class="blob-num js-line-number" data-line-number="4987"></td>
        <td id="LC4987" class="blob-code blob-code-inner js-file-line">          seekable<span class="pl-k">:</span> <span class="pl-c1">true</span>,</td>
      </tr>
      <tr>
        <td id="L4988" class="blob-num js-line-number" data-line-number="4988"></td>
        <td id="LC4988" class="blob-code blob-code-inner js-file-line">          position<span class="pl-k">:</span> <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L4989" class="blob-num js-line-number" data-line-number="4989"></td>
        <td id="LC4989" class="blob-code blob-code-inner js-file-line">          stream_ops<span class="pl-k">:</span> <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span>,</td>
      </tr>
      <tr>
        <td id="L4990" class="blob-num js-line-number" data-line-number="4990"></td>
        <td id="LC4990" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> used by the file family libc calls (fopen, fwrite, ferror, etc.)</span></td>
      </tr>
      <tr>
        <td id="L4991" class="blob-num js-line-number" data-line-number="4991"></td>
        <td id="LC4991" class="blob-code blob-code-inner js-file-line">          ungotten<span class="pl-k">:</span> [],</td>
      </tr>
      <tr>
        <td id="L4992" class="blob-num js-line-number" data-line-number="4992"></td>
        <td id="LC4992" class="blob-code blob-code-inner js-file-line">          error<span class="pl-k">:</span> <span class="pl-c1">false</span></td>
      </tr>
      <tr>
        <td id="L4993" class="blob-num js-line-number" data-line-number="4993"></td>
        <td id="LC4993" class="blob-code blob-code-inner js-file-line">        }, fd_start, fd_end);</td>
      </tr>
      <tr>
        <td id="L4994" class="blob-num js-line-number" data-line-number="4994"></td>
        <td id="LC4994" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> call the new stream&#39;s open function</span></td>
      </tr>
      <tr>
        <td id="L4995" class="blob-num js-line-number" data-line-number="4995"></td>
        <td id="LC4995" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">open</span>) {</td>
      </tr>
      <tr>
        <td id="L4996" class="blob-num js-line-number" data-line-number="4996"></td>
        <td id="LC4996" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-c1">open</span>(stream);</td>
      </tr>
      <tr>
        <td id="L4997" class="blob-num js-line-number" data-line-number="4997"></td>
        <td id="LC4997" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L4998" class="blob-num js-line-number" data-line-number="4998"></td>
        <td id="LC4998" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>logReadFiles<span class="pl-pds">&#39;</span></span>] <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>(flags <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>)) {</td>
      </tr>
      <tr>
        <td id="L4999" class="blob-num js-line-number" data-line-number="4999"></td>
        <td id="LC4999" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">readFiles</span>) <span class="pl-c1">FS</span>.<span class="pl-smi">readFiles</span> <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L5000" class="blob-num js-line-number" data-line-number="5000"></td>
        <td id="LC5000" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>(path <span class="pl-k">in</span> <span class="pl-c1">FS</span>.<span class="pl-smi">readFiles</span>)) {</td>
      </tr>
      <tr>
        <td id="L5001" class="blob-num js-line-number" data-line-number="5001"></td>
        <td id="LC5001" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-smi">readFiles</span>[path] <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L5002" class="blob-num js-line-number" data-line-number="5002"></td>
        <td id="LC5002" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate error on read file: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> path);</td>
      </tr>
      <tr>
        <td id="L5003" class="blob-num js-line-number" data-line-number="5003"></td>
        <td id="LC5003" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5004" class="blob-num js-line-number" data-line-number="5004"></td>
        <td id="LC5004" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5005" class="blob-num js-line-number" data-line-number="5005"></td>
        <td id="LC5005" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5006" class="blob-num js-line-number" data-line-number="5006"></td>
        <td id="LC5006" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onOpenFile<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L5007" class="blob-num js-line-number" data-line-number="5007"></td>
        <td id="LC5007" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> trackingFlags <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5008" class="blob-num js-line-number" data-line-number="5008"></td>
        <td id="LC5008" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">!==</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L5009" class="blob-num js-line-number" data-line-number="5009"></td>
        <td id="LC5009" class="blob-code blob-code-inner js-file-line">              trackingFlags <span class="pl-k">|=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">tracking</span>.<span class="pl-smi">openFlags</span>.<span class="pl-c1">READ</span>;</td>
      </tr>
      <tr>
        <td id="L5010" class="blob-num js-line-number" data-line-number="5010"></td>
        <td id="LC5010" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5011" class="blob-num js-line-number" data-line-number="5011"></td>
        <td id="LC5011" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5012" class="blob-num js-line-number" data-line-number="5012"></td>
        <td id="LC5012" class="blob-code blob-code-inner js-file-line">              trackingFlags <span class="pl-k">|=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">tracking</span>.<span class="pl-smi">openFlags</span>.<span class="pl-c1">WRITE</span>;</td>
      </tr>
      <tr>
        <td id="L5013" class="blob-num js-line-number" data-line-number="5013"></td>
        <td id="LC5013" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5014" class="blob-num js-line-number" data-line-number="5014"></td>
        <td id="LC5014" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onOpenFile<span class="pl-pds">&#39;</span></span>](path, trackingFlags);</td>
      </tr>
      <tr>
        <td id="L5015" class="blob-num js-line-number" data-line-number="5015"></td>
        <td id="LC5015" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5016" class="blob-num js-line-number" data-line-number="5016"></td>
        <td id="LC5016" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L5017" class="blob-num js-line-number" data-line-number="5017"></td>
        <td id="LC5017" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;onOpenFile&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>path<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;, flags) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L5018" class="blob-num js-line-number" data-line-number="5018"></td>
        <td id="LC5018" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5019" class="blob-num js-line-number" data-line-number="5019"></td>
        <td id="LC5019" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> stream;</td>
      </tr>
      <tr>
        <td id="L5020" class="blob-num js-line-number" data-line-number="5020"></td>
        <td id="LC5020" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">close</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L5021" class="blob-num js-line-number" data-line-number="5021"></td>
        <td id="LC5021" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isClosed</span>(stream)) {</td>
      </tr>
      <tr>
        <td id="L5022" class="blob-num js-line-number" data-line-number="5022"></td>
        <td id="LC5022" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5023" class="blob-num js-line-number" data-line-number="5023"></td>
        <td id="LC5023" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5024" class="blob-num js-line-number" data-line-number="5024"></td>
        <td id="LC5024" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">getdents</span>) <span class="pl-smi">stream</span>.<span class="pl-smi">getdents</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>; <span class="pl-c"><span class="pl-c">//</span> free readdir state</span></td>
      </tr>
      <tr>
        <td id="L5025" class="blob-num js-line-number" data-line-number="5025"></td>
        <td id="LC5025" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5026" class="blob-num js-line-number" data-line-number="5026"></td>
        <td id="LC5026" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">close</span>) {</td>
      </tr>
      <tr>
        <td id="L5027" class="blob-num js-line-number" data-line-number="5027"></td>
        <td id="LC5027" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5028" class="blob-num js-line-number" data-line-number="5028"></td>
        <td id="LC5028" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5029" class="blob-num js-line-number" data-line-number="5029"></td>
        <td id="LC5029" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5030" class="blob-num js-line-number" data-line-number="5030"></td>
        <td id="LC5030" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L5031" class="blob-num js-line-number" data-line-number="5031"></td>
        <td id="LC5031" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">finally</span> {</td>
      </tr>
      <tr>
        <td id="L5032" class="blob-num js-line-number" data-line-number="5032"></td>
        <td id="LC5032" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">closeStream</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">fd</span>);</td>
      </tr>
      <tr>
        <td id="L5033" class="blob-num js-line-number" data-line-number="5033"></td>
        <td id="LC5033" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5034" class="blob-num js-line-number" data-line-number="5034"></td>
        <td id="LC5034" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream</span>.<span class="pl-smi">fd</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L5035" class="blob-num js-line-number" data-line-number="5035"></td>
        <td id="LC5035" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">isClosed</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L5036" class="blob-num js-line-number" data-line-number="5036"></td>
        <td id="LC5036" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">fd</span> <span class="pl-k">===</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L5037" class="blob-num js-line-number" data-line-number="5037"></td>
        <td id="LC5037" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">llseek</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">whence</span>) {</td>
      </tr>
      <tr>
        <td id="L5038" class="blob-num js-line-number" data-line-number="5038"></td>
        <td id="LC5038" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isClosed</span>(stream)) {</td>
      </tr>
      <tr>
        <td id="L5039" class="blob-num js-line-number" data-line-number="5039"></td>
        <td id="LC5039" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5040" class="blob-num js-line-number" data-line-number="5040"></td>
        <td id="LC5040" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5041" class="blob-num js-line-number" data-line-number="5041"></td>
        <td id="LC5041" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">seekable</span> <span class="pl-k">||</span> <span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">llseek</span>) {</td>
      </tr>
      <tr>
        <td id="L5042" class="blob-num js-line-number" data-line-number="5042"></td>
        <td id="LC5042" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">29</span>);</td>
      </tr>
      <tr>
        <td id="L5043" class="blob-num js-line-number" data-line-number="5043"></td>
        <td id="LC5043" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5044" class="blob-num js-line-number" data-line-number="5044"></td>
        <td id="LC5044" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (whence <span class="pl-k">!=</span> <span class="pl-c1">0</span> <span class="pl-c"><span class="pl-c">/*</span> SEEK_SET <span class="pl-c">*/</span></span> <span class="pl-k">&amp;&amp;</span> whence <span class="pl-k">!=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">/*</span> SEEK_CUR <span class="pl-c">*/</span></span> <span class="pl-k">&amp;&amp;</span> whence <span class="pl-k">!=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">/*</span> SEEK_END <span class="pl-c">*/</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5045" class="blob-num js-line-number" data-line-number="5045"></td>
        <td id="LC5045" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5046" class="blob-num js-line-number" data-line-number="5046"></td>
        <td id="LC5046" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5047" class="blob-num js-line-number" data-line-number="5047"></td>
        <td id="LC5047" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream</span>.<span class="pl-smi">position</span> <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">llseek</span>(stream, offset, whence);</td>
      </tr>
      <tr>
        <td id="L5048" class="blob-num js-line-number" data-line-number="5048"></td>
        <td id="LC5048" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream</span>.<span class="pl-smi">ungotten</span> <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L5049" class="blob-num js-line-number" data-line-number="5049"></td>
        <td id="LC5049" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L5050" class="blob-num js-line-number" data-line-number="5050"></td>
        <td id="LC5050" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">read</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L5051" class="blob-num js-line-number" data-line-number="5051"></td>
        <td id="LC5051" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (length <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> position <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5052" class="blob-num js-line-number" data-line-number="5052"></td>
        <td id="LC5052" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5053" class="blob-num js-line-number" data-line-number="5053"></td>
        <td id="LC5053" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5054" class="blob-num js-line-number" data-line-number="5054"></td>
        <td id="LC5054" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isClosed</span>(stream)) {</td>
      </tr>
      <tr>
        <td id="L5055" class="blob-num js-line-number" data-line-number="5055"></td>
        <td id="LC5055" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5056" class="blob-num js-line-number" data-line-number="5056"></td>
        <td id="LC5056" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5057" class="blob-num js-line-number" data-line-number="5057"></td>
        <td id="LC5057" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">===</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L5058" class="blob-num js-line-number" data-line-number="5058"></td>
        <td id="LC5058" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5059" class="blob-num js-line-number" data-line-number="5059"></td>
        <td id="LC5059" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5060" class="blob-num js-line-number" data-line-number="5060"></td>
        <td id="LC5060" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L5061" class="blob-num js-line-number" data-line-number="5061"></td>
        <td id="LC5061" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">21</span>);</td>
      </tr>
      <tr>
        <td id="L5062" class="blob-num js-line-number" data-line-number="5062"></td>
        <td id="LC5062" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5063" class="blob-num js-line-number" data-line-number="5063"></td>
        <td id="LC5063" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">read</span>) {</td>
      </tr>
      <tr>
        <td id="L5064" class="blob-num js-line-number" data-line-number="5064"></td>
        <td id="LC5064" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5065" class="blob-num js-line-number" data-line-number="5065"></td>
        <td id="LC5065" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5066" class="blob-num js-line-number" data-line-number="5066"></td>
        <td id="LC5066" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> seeking <span class="pl-k">=</span> <span class="pl-k">typeof</span> position <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5067" class="blob-num js-line-number" data-line-number="5067"></td>
        <td id="LC5067" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>seeking) {</td>
      </tr>
      <tr>
        <td id="L5068" class="blob-num js-line-number" data-line-number="5068"></td>
        <td id="LC5068" class="blob-code blob-code-inner js-file-line">          position <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L5069" class="blob-num js-line-number" data-line-number="5069"></td>
        <td id="LC5069" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">seekable</span>) {</td>
      </tr>
      <tr>
        <td id="L5070" class="blob-num js-line-number" data-line-number="5070"></td>
        <td id="LC5070" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">29</span>);</td>
      </tr>
      <tr>
        <td id="L5071" class="blob-num js-line-number" data-line-number="5071"></td>
        <td id="LC5071" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5072" class="blob-num js-line-number" data-line-number="5072"></td>
        <td id="LC5072" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> bytesRead <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">read</span>(stream, buffer, offset, length, position);</td>
      </tr>
      <tr>
        <td id="L5073" class="blob-num js-line-number" data-line-number="5073"></td>
        <td id="LC5073" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>seeking) <span class="pl-smi">stream</span>.<span class="pl-smi">position</span> <span class="pl-k">+=</span> bytesRead;</td>
      </tr>
      <tr>
        <td id="L5074" class="blob-num js-line-number" data-line-number="5074"></td>
        <td id="LC5074" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> bytesRead;</td>
      </tr>
      <tr>
        <td id="L5075" class="blob-num js-line-number" data-line-number="5075"></td>
        <td id="LC5075" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">write</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>, <span class="pl-smi">canOwn</span>) {</td>
      </tr>
      <tr>
        <td id="L5076" class="blob-num js-line-number" data-line-number="5076"></td>
        <td id="LC5076" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (length <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> position <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5077" class="blob-num js-line-number" data-line-number="5077"></td>
        <td id="LC5077" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5078" class="blob-num js-line-number" data-line-number="5078"></td>
        <td id="LC5078" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5079" class="blob-num js-line-number" data-line-number="5079"></td>
        <td id="LC5079" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isClosed</span>(stream)) {</td>
      </tr>
      <tr>
        <td id="L5080" class="blob-num js-line-number" data-line-number="5080"></td>
        <td id="LC5080" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5081" class="blob-num js-line-number" data-line-number="5081"></td>
        <td id="LC5081" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5082" class="blob-num js-line-number" data-line-number="5082"></td>
        <td id="LC5082" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5083" class="blob-num js-line-number" data-line-number="5083"></td>
        <td id="LC5083" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5084" class="blob-num js-line-number" data-line-number="5084"></td>
        <td id="LC5084" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5085" class="blob-num js-line-number" data-line-number="5085"></td>
        <td id="LC5085" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L5086" class="blob-num js-line-number" data-line-number="5086"></td>
        <td id="LC5086" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">21</span>);</td>
      </tr>
      <tr>
        <td id="L5087" class="blob-num js-line-number" data-line-number="5087"></td>
        <td id="LC5087" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5088" class="blob-num js-line-number" data-line-number="5088"></td>
        <td id="LC5088" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">write</span>) {</td>
      </tr>
      <tr>
        <td id="L5089" class="blob-num js-line-number" data-line-number="5089"></td>
        <td id="LC5089" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5090" class="blob-num js-line-number" data-line-number="5090"></td>
        <td id="LC5090" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5091" class="blob-num js-line-number" data-line-number="5091"></td>
        <td id="LC5091" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1024</span>) {</td>
      </tr>
      <tr>
        <td id="L5092" class="blob-num js-line-number" data-line-number="5092"></td>
        <td id="LC5092" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> seek to the end before writing in append mode</span></td>
      </tr>
      <tr>
        <td id="L5093" class="blob-num js-line-number" data-line-number="5093"></td>
        <td id="LC5093" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">llseek</span>(stream, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L5094" class="blob-num js-line-number" data-line-number="5094"></td>
        <td id="LC5094" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5095" class="blob-num js-line-number" data-line-number="5095"></td>
        <td id="LC5095" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> seeking <span class="pl-k">=</span> <span class="pl-k">typeof</span> position <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5096" class="blob-num js-line-number" data-line-number="5096"></td>
        <td id="LC5096" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>seeking) {</td>
      </tr>
      <tr>
        <td id="L5097" class="blob-num js-line-number" data-line-number="5097"></td>
        <td id="LC5097" class="blob-code blob-code-inner js-file-line">          position <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L5098" class="blob-num js-line-number" data-line-number="5098"></td>
        <td id="LC5098" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">seekable</span>) {</td>
      </tr>
      <tr>
        <td id="L5099" class="blob-num js-line-number" data-line-number="5099"></td>
        <td id="LC5099" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">29</span>);</td>
      </tr>
      <tr>
        <td id="L5100" class="blob-num js-line-number" data-line-number="5100"></td>
        <td id="LC5100" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5101" class="blob-num js-line-number" data-line-number="5101"></td>
        <td id="LC5101" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> bytesWritten <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-c1">write</span>(stream, buffer, offset, length, position, canOwn);</td>
      </tr>
      <tr>
        <td id="L5102" class="blob-num js-line-number" data-line-number="5102"></td>
        <td id="LC5102" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>seeking) <span class="pl-smi">stream</span>.<span class="pl-smi">position</span> <span class="pl-k">+=</span> bytesWritten;</td>
      </tr>
      <tr>
        <td id="L5103" class="blob-num js-line-number" data-line-number="5103"></td>
        <td id="LC5103" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5104" class="blob-num js-line-number" data-line-number="5104"></td>
        <td id="LC5104" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">path</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onWriteToFile<span class="pl-pds">&#39;</span></span>]) <span class="pl-c1">FS</span>.<span class="pl-smi">trackingDelegate</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>onWriteToFile<span class="pl-pds">&#39;</span></span>](<span class="pl-smi">stream</span>.<span class="pl-smi">path</span>);</td>
      </tr>
      <tr>
        <td id="L5105" class="blob-num js-line-number" data-line-number="5105"></td>
        <td id="LC5105" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L5106" class="blob-num js-line-number" data-line-number="5106"></td>
        <td id="LC5106" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>FS.trackingDelegate[&#39;onWriteToFile&#39;](&#39;<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span><span class="pl-smi">stream</span>.<span class="pl-smi">path</span><span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>&#39;) threw an exception: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">e</span>.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L5107" class="blob-num js-line-number" data-line-number="5107"></td>
        <td id="LC5107" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5108" class="blob-num js-line-number" data-line-number="5108"></td>
        <td id="LC5108" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> bytesWritten;</td>
      </tr>
      <tr>
        <td id="L5109" class="blob-num js-line-number" data-line-number="5109"></td>
        <td id="LC5109" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">allocate</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>) {</td>
      </tr>
      <tr>
        <td id="L5110" class="blob-num js-line-number" data-line-number="5110"></td>
        <td id="LC5110" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">isClosed</span>(stream)) {</td>
      </tr>
      <tr>
        <td id="L5111" class="blob-num js-line-number" data-line-number="5111"></td>
        <td id="LC5111" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5112" class="blob-num js-line-number" data-line-number="5112"></td>
        <td id="LC5112" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5113" class="blob-num js-line-number" data-line-number="5113"></td>
        <td id="LC5113" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (offset <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> length <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5114" class="blob-num js-line-number" data-line-number="5114"></td>
        <td id="LC5114" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L5115" class="blob-num js-line-number" data-line-number="5115"></td>
        <td id="LC5115" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5116" class="blob-num js-line-number" data-line-number="5116"></td>
        <td id="LC5116" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5117" class="blob-num js-line-number" data-line-number="5117"></td>
        <td id="LC5117" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5118" class="blob-num js-line-number" data-line-number="5118"></td>
        <td id="LC5118" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5119" class="blob-num js-line-number" data-line-number="5119"></td>
        <td id="LC5119" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isFile</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L5120" class="blob-num js-line-number" data-line-number="5120"></td>
        <td id="LC5120" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">19</span>);</td>
      </tr>
      <tr>
        <td id="L5121" class="blob-num js-line-number" data-line-number="5121"></td>
        <td id="LC5121" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5122" class="blob-num js-line-number" data-line-number="5122"></td>
        <td id="LC5122" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">allocate</span>) {</td>
      </tr>
      <tr>
        <td id="L5123" class="blob-num js-line-number" data-line-number="5123"></td>
        <td id="LC5123" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">95</span>);</td>
      </tr>
      <tr>
        <td id="L5124" class="blob-num js-line-number" data-line-number="5124"></td>
        <td id="LC5124" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5125" class="blob-num js-line-number" data-line-number="5125"></td>
        <td id="LC5125" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">allocate</span>(stream, offset, length);</td>
      </tr>
      <tr>
        <td id="L5126" class="blob-num js-line-number" data-line-number="5126"></td>
        <td id="LC5126" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">mmap</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>, <span class="pl-smi">prot</span>, <span class="pl-smi">flags</span>) {</td>
      </tr>
      <tr>
        <td id="L5127" class="blob-num js-line-number" data-line-number="5127"></td>
        <td id="LC5127" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> User requests writing to file (prot &amp; PROT_WRITE != 0).</span></td>
      </tr>
      <tr>
        <td id="L5128" class="blob-num js-line-number" data-line-number="5128"></td>
        <td id="LC5128" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Checking if we have permissions to write to the file unless</span></td>
      </tr>
      <tr>
        <td id="L5129" class="blob-num js-line-number" data-line-number="5129"></td>
        <td id="LC5129" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> MAP_PRIVATE flag is set. According to POSIX spec it is possible</span></td>
      </tr>
      <tr>
        <td id="L5130" class="blob-num js-line-number" data-line-number="5130"></td>
        <td id="LC5130" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> to write to file opened in read-only mode with MAP_PRIVATE flag,</span></td>
      </tr>
      <tr>
        <td id="L5131" class="blob-num js-line-number" data-line-number="5131"></td>
        <td id="LC5131" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> as all modifications will be visible only in the memory of</span></td>
      </tr>
      <tr>
        <td id="L5132" class="blob-num js-line-number" data-line-number="5132"></td>
        <td id="LC5132" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> the current process.</span></td>
      </tr>
      <tr>
        <td id="L5133" class="blob-num js-line-number" data-line-number="5133"></td>
        <td id="LC5133" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((prot <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span></td>
      </tr>
      <tr>
        <td id="L5134" class="blob-num js-line-number" data-line-number="5134"></td>
        <td id="LC5134" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">&amp;&amp;</span> (flags <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>) <span class="pl-k">===</span> <span class="pl-c1">0</span></td>
      </tr>
      <tr>
        <td id="L5135" class="blob-num js-line-number" data-line-number="5135"></td>
        <td id="LC5135" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">&amp;&amp;</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">!==</span> <span class="pl-c1">2</span>) {</td>
      </tr>
      <tr>
        <td id="L5136" class="blob-num js-line-number" data-line-number="5136"></td>
        <td id="LC5136" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">13</span>);</td>
      </tr>
      <tr>
        <td id="L5137" class="blob-num js-line-number" data-line-number="5137"></td>
        <td id="LC5137" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5138" class="blob-num js-line-number" data-line-number="5138"></td>
        <td id="LC5138" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">&amp;</span> <span class="pl-c1">2097155</span>) <span class="pl-k">===</span> <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L5139" class="blob-num js-line-number" data-line-number="5139"></td>
        <td id="LC5139" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">13</span>);</td>
      </tr>
      <tr>
        <td id="L5140" class="blob-num js-line-number" data-line-number="5140"></td>
        <td id="LC5140" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5141" class="blob-num js-line-number" data-line-number="5141"></td>
        <td id="LC5141" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">mmap</span>) {</td>
      </tr>
      <tr>
        <td id="L5142" class="blob-num js-line-number" data-line-number="5142"></td>
        <td id="LC5142" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">19</span>);</td>
      </tr>
      <tr>
        <td id="L5143" class="blob-num js-line-number" data-line-number="5143"></td>
        <td id="LC5143" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5144" class="blob-num js-line-number" data-line-number="5144"></td>
        <td id="LC5144" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">mmap</span>(stream, buffer, offset, length, position, prot, flags);</td>
      </tr>
      <tr>
        <td id="L5145" class="blob-num js-line-number" data-line-number="5145"></td>
        <td id="LC5145" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">msync</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">mmapFlags</span>) {</td>
      </tr>
      <tr>
        <td id="L5146" class="blob-num js-line-number" data-line-number="5146"></td>
        <td id="LC5146" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>stream <span class="pl-k">||</span> <span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">msync</span>) {</td>
      </tr>
      <tr>
        <td id="L5147" class="blob-num js-line-number" data-line-number="5147"></td>
        <td id="LC5147" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5148" class="blob-num js-line-number" data-line-number="5148"></td>
        <td id="LC5148" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5149" class="blob-num js-line-number" data-line-number="5149"></td>
        <td id="LC5149" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">msync</span>(stream, buffer, offset, length, mmapFlags);</td>
      </tr>
      <tr>
        <td id="L5150" class="blob-num js-line-number" data-line-number="5150"></td>
        <td id="LC5150" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">munmap</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L5151" class="blob-num js-line-number" data-line-number="5151"></td>
        <td id="LC5151" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5152" class="blob-num js-line-number" data-line-number="5152"></td>
        <td id="LC5152" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">ioctl</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">cmd</span>, <span class="pl-smi">arg</span>) {</td>
      </tr>
      <tr>
        <td id="L5153" class="blob-num js-line-number" data-line-number="5153"></td>
        <td id="LC5153" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">ioctl</span>) {</td>
      </tr>
      <tr>
        <td id="L5154" class="blob-num js-line-number" data-line-number="5154"></td>
        <td id="LC5154" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">25</span>);</td>
      </tr>
      <tr>
        <td id="L5155" class="blob-num js-line-number" data-line-number="5155"></td>
        <td id="LC5155" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5156" class="blob-num js-line-number" data-line-number="5156"></td>
        <td id="LC5156" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">ioctl</span>(stream, cmd, arg);</td>
      </tr>
      <tr>
        <td id="L5157" class="blob-num js-line-number" data-line-number="5157"></td>
        <td id="LC5157" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">readFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">opts</span>) {</td>
      </tr>
      <tr>
        <td id="L5158" class="blob-num js-line-number" data-line-number="5158"></td>
        <td id="LC5158" class="blob-code blob-code-inner js-file-line">        opts <span class="pl-k">=</span> opts <span class="pl-k">||</span> {};</td>
      </tr>
      <tr>
        <td id="L5159" class="blob-num js-line-number" data-line-number="5159"></td>
        <td id="LC5159" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span> <span class="pl-k">=</span> <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5160" class="blob-num js-line-number" data-line-number="5160"></td>
        <td id="LC5160" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">=</span> <span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>binary<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5161" class="blob-num js-line-number" data-line-number="5161"></td>
        <td id="LC5161" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>utf8<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>binary<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5162" class="blob-num js-line-number" data-line-number="5162"></td>
        <td id="LC5162" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Invalid encoding type &quot;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5163" class="blob-num js-line-number" data-line-number="5163"></td>
        <td id="LC5163" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5164" class="blob-num js-line-number" data-line-number="5164"></td>
        <td id="LC5164" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret;</td>
      </tr>
      <tr>
        <td id="L5165" class="blob-num js-line-number" data-line-number="5165"></td>
        <td id="LC5165" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(path, <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span>);</td>
      </tr>
      <tr>
        <td id="L5166" class="blob-num js-line-number" data-line-number="5166"></td>
        <td id="LC5166" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stat <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">stat</span>(path);</td>
      </tr>
      <tr>
        <td id="L5167" class="blob-num js-line-number" data-line-number="5167"></td>
        <td id="LC5167" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> length <span class="pl-k">=</span> <span class="pl-smi">stat</span>.<span class="pl-c1">size</span>;</td>
      </tr>
      <tr>
        <td id="L5168" class="blob-num js-line-number" data-line-number="5168"></td>
        <td id="LC5168" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> buf <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(length);</td>
      </tr>
      <tr>
        <td id="L5169" class="blob-num js-line-number" data-line-number="5169"></td>
        <td id="LC5169" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">read</span>(stream, buf, <span class="pl-c1">0</span>, length, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5170" class="blob-num js-line-number" data-line-number="5170"></td>
        <td id="LC5170" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>utf8<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5171" class="blob-num js-line-number" data-line-number="5171"></td>
        <td id="LC5171" class="blob-code blob-code-inner js-file-line">          ret <span class="pl-k">=</span> <span class="pl-en">UTF8ArrayToString</span>(buf, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5172" class="blob-num js-line-number" data-line-number="5172"></td>
        <td id="LC5172" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">opts</span>.<span class="pl-c1">encoding</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>binary<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5173" class="blob-num js-line-number" data-line-number="5173"></td>
        <td id="LC5173" class="blob-code blob-code-inner js-file-line">          ret <span class="pl-k">=</span> buf;</td>
      </tr>
      <tr>
        <td id="L5174" class="blob-num js-line-number" data-line-number="5174"></td>
        <td id="LC5174" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5175" class="blob-num js-line-number" data-line-number="5175"></td>
        <td id="LC5175" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5176" class="blob-num js-line-number" data-line-number="5176"></td>
        <td id="LC5176" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5177" class="blob-num js-line-number" data-line-number="5177"></td>
        <td id="LC5177" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">writeFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">data</span>, <span class="pl-smi">opts</span>) {</td>
      </tr>
      <tr>
        <td id="L5178" class="blob-num js-line-number" data-line-number="5178"></td>
        <td id="LC5178" class="blob-code blob-code-inner js-file-line">        opts <span class="pl-k">=</span> opts <span class="pl-k">||</span> {};</td>
      </tr>
      <tr>
        <td id="L5179" class="blob-num js-line-number" data-line-number="5179"></td>
        <td id="LC5179" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span> <span class="pl-k">=</span> <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5180" class="blob-num js-line-number" data-line-number="5180"></td>
        <td id="LC5180" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(path, <span class="pl-smi">opts</span>.<span class="pl-smi">flags</span>, <span class="pl-smi">opts</span>.<span class="pl-smi">mode</span>);</td>
      </tr>
      <tr>
        <td id="L5181" class="blob-num js-line-number" data-line-number="5181"></td>
        <td id="LC5181" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> data <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5182" class="blob-num js-line-number" data-line-number="5182"></td>
        <td id="LC5182" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> buf <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-en">lengthBytesUTF8</span>(data)<span class="pl-k">+</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5183" class="blob-num js-line-number" data-line-number="5183"></td>
        <td id="LC5183" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> actualNumBytes <span class="pl-k">=</span> <span class="pl-en">stringToUTF8Array</span>(data, buf, <span class="pl-c1">0</span>, <span class="pl-smi">buf</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L5184" class="blob-num js-line-number" data-line-number="5184"></td>
        <td id="LC5184" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-c1">write</span>(stream, buf, <span class="pl-c1">0</span>, actualNumBytes, <span class="pl-c1">undefined</span>, <span class="pl-smi">opts</span>.<span class="pl-smi">canOwn</span>);</td>
      </tr>
      <tr>
        <td id="L5185" class="blob-num js-line-number" data-line-number="5185"></td>
        <td id="LC5185" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">ArrayBuffer</span>.<span class="pl-en">isView</span>(data)) {</td>
      </tr>
      <tr>
        <td id="L5186" class="blob-num js-line-number" data-line-number="5186"></td>
        <td id="LC5186" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-c1">write</span>(stream, data, <span class="pl-c1">0</span>, <span class="pl-smi">data</span>.<span class="pl-smi">byteLength</span>, <span class="pl-c1">undefined</span>, <span class="pl-smi">opts</span>.<span class="pl-smi">canOwn</span>);</td>
      </tr>
      <tr>
        <td id="L5187" class="blob-num js-line-number" data-line-number="5187"></td>
        <td id="LC5187" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5188" class="blob-num js-line-number" data-line-number="5188"></td>
        <td id="LC5188" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Unsupported data type<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5189" class="blob-num js-line-number" data-line-number="5189"></td>
        <td id="LC5189" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5190" class="blob-num js-line-number" data-line-number="5190"></td>
        <td id="LC5190" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5191" class="blob-num js-line-number" data-line-number="5191"></td>
        <td id="LC5191" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">cwd</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5192" class="blob-num js-line-number" data-line-number="5192"></td>
        <td id="LC5192" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-smi">currentPath</span>;</td>
      </tr>
      <tr>
        <td id="L5193" class="blob-num js-line-number" data-line-number="5193"></td>
        <td id="LC5193" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">chdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L5194" class="blob-num js-line-number" data-line-number="5194"></td>
        <td id="LC5194" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L5195" class="blob-num js-line-number" data-line-number="5195"></td>
        <td id="LC5195" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">lookup</span>.<span class="pl-smi">node</span> <span class="pl-k">===</span> <span class="pl-c1">null</span>) {</td>
      </tr>
      <tr>
        <td id="L5196" class="blob-num js-line-number" data-line-number="5196"></td>
        <td id="LC5196" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L5197" class="blob-num js-line-number" data-line-number="5197"></td>
        <td id="LC5197" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5198" class="blob-num js-line-number" data-line-number="5198"></td>
        <td id="LC5198" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">isDir</span>(<span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>.<span class="pl-smi">mode</span>)) {</td>
      </tr>
      <tr>
        <td id="L5199" class="blob-num js-line-number" data-line-number="5199"></td>
        <td id="LC5199" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">20</span>);</td>
      </tr>
      <tr>
        <td id="L5200" class="blob-num js-line-number" data-line-number="5200"></td>
        <td id="LC5200" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5201" class="blob-num js-line-number" data-line-number="5201"></td>
        <td id="LC5201" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> err <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(<span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>x<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5202" class="blob-num js-line-number" data-line-number="5202"></td>
        <td id="LC5202" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (err) {</td>
      </tr>
      <tr>
        <td id="L5203" class="blob-num js-line-number" data-line-number="5203"></td>
        <td id="LC5203" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(err);</td>
      </tr>
      <tr>
        <td id="L5204" class="blob-num js-line-number" data-line-number="5204"></td>
        <td id="LC5204" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5205" class="blob-num js-line-number" data-line-number="5205"></td>
        <td id="LC5205" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">currentPath</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span>;</td>
      </tr>
      <tr>
        <td id="L5206" class="blob-num js-line-number" data-line-number="5206"></td>
        <td id="LC5206" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createDefaultDirectories</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5207" class="blob-num js-line-number" data-line-number="5207"></td>
        <td id="LC5207" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/tmp<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5208" class="blob-num js-line-number" data-line-number="5208"></td>
        <td id="LC5208" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/home<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5209" class="blob-num js-line-number" data-line-number="5209"></td>
        <td id="LC5209" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/home/web_user<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5210" class="blob-num js-line-number" data-line-number="5210"></td>
        <td id="LC5210" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createDefaultDevices</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5211" class="blob-num js-line-number" data-line-number="5211"></td>
        <td id="LC5211" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> create /dev</span></td>
      </tr>
      <tr>
        <td id="L5212" class="blob-num js-line-number" data-line-number="5212"></td>
        <td id="LC5212" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5213" class="blob-num js-line-number" data-line-number="5213"></td>
        <td id="LC5213" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> setup /dev/null</span></td>
      </tr>
      <tr>
        <td id="L5214" class="blob-num js-line-number" data-line-number="5214"></td>
        <td id="LC5214" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">registerDevice</span>(<span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>), {</td>
      </tr>
      <tr>
        <td id="L5215" class="blob-num js-line-number" data-line-number="5215"></td>
        <td id="LC5215" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">read</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-c1">0</span>; },</td>
      </tr>
      <tr>
        <td id="L5216" class="blob-num js-line-number" data-line-number="5216"></td>
        <td id="LC5216" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">write</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">pos</span>) { <span class="pl-k">return</span> length; }</td>
      </tr>
      <tr>
        <td id="L5217" class="blob-num js-line-number" data-line-number="5217"></td>
        <td id="LC5217" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L5218" class="blob-num js-line-number" data-line-number="5218"></td>
        <td id="LC5218" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdev</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/null<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>));</td>
      </tr>
      <tr>
        <td id="L5219" class="blob-num js-line-number" data-line-number="5219"></td>
        <td id="LC5219" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> setup /dev/tty and /dev/tty1</span></td>
      </tr>
      <tr>
        <td id="L5220" class="blob-num js-line-number" data-line-number="5220"></td>
        <td id="LC5220" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> stderr needs to print output using Module[&#39;printErr&#39;]</span></td>
      </tr>
      <tr>
        <td id="L5221" class="blob-num js-line-number" data-line-number="5221"></td>
        <td id="LC5221" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> so we register a second tty just for it.</span></td>
      </tr>
      <tr>
        <td id="L5222" class="blob-num js-line-number" data-line-number="5222"></td>
        <td id="LC5222" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">TTY</span>.<span class="pl-en">register</span>(<span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">5</span>, <span class="pl-c1">0</span>), <span class="pl-c1">TTY</span>.<span class="pl-smi">default_tty_ops</span>);</td>
      </tr>
      <tr>
        <td id="L5223" class="blob-num js-line-number" data-line-number="5223"></td>
        <td id="LC5223" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">TTY</span>.<span class="pl-en">register</span>(<span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">6</span>, <span class="pl-c1">0</span>), <span class="pl-c1">TTY</span>.<span class="pl-smi">default_tty1_ops</span>);</td>
      </tr>
      <tr>
        <td id="L5224" class="blob-num js-line-number" data-line-number="5224"></td>
        <td id="LC5224" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdev</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/tty<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">5</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L5225" class="blob-num js-line-number" data-line-number="5225"></td>
        <td id="LC5225" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdev</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/tty1<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">6</span>, <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L5226" class="blob-num js-line-number" data-line-number="5226"></td>
        <td id="LC5226" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> setup /dev/[u]random</span></td>
      </tr>
      <tr>
        <td id="L5227" class="blob-num js-line-number" data-line-number="5227"></td>
        <td id="LC5227" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> random_device;</td>
      </tr>
      <tr>
        <td id="L5228" class="blob-num js-line-number" data-line-number="5228"></td>
        <td id="LC5228" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> crypto <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> crypto[<span class="pl-s"><span class="pl-pds">&#39;</span>getRandomValues<span class="pl-pds">&#39;</span></span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5229" class="blob-num js-line-number" data-line-number="5229"></td>
        <td id="LC5229" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> for modern web browsers</span></td>
      </tr>
      <tr>
        <td id="L5230" class="blob-num js-line-number" data-line-number="5230"></td>
        <td id="LC5230" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> randomBuffer <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5231" class="blob-num js-line-number" data-line-number="5231"></td>
        <td id="LC5231" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">random_device</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-smi">crypto</span>.<span class="pl-en">getRandomValues</span>(randomBuffer); <span class="pl-k">return</span> randomBuffer[<span class="pl-c1">0</span>]; };</td>
      </tr>
      <tr>
        <td id="L5232" class="blob-num js-line-number" data-line-number="5232"></td>
        <td id="LC5232" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L5233" class="blob-num js-line-number" data-line-number="5233"></td>
        <td id="LC5233" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_IS_NODE</span>) {</td>
      </tr>
      <tr>
        <td id="L5234" class="blob-num js-line-number" data-line-number="5234"></td>
        <td id="LC5234" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> for nodejs with or without crypto support included</span></td>
      </tr>
      <tr>
        <td id="L5235" class="blob-num js-line-number" data-line-number="5235"></td>
        <td id="LC5235" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5236" class="blob-num js-line-number" data-line-number="5236"></td>
        <td id="LC5236" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> crypto_module <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>crypto<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5237" class="blob-num js-line-number" data-line-number="5237"></td>
        <td id="LC5237" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> nodejs has crypto support</span></td>
      </tr>
      <tr>
        <td id="L5238" class="blob-num js-line-number" data-line-number="5238"></td>
        <td id="LC5238" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">random_device</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> crypto_module[<span class="pl-s"><span class="pl-pds">&#39;</span>randomBytes<span class="pl-pds">&#39;</span></span>](<span class="pl-c1">1</span>)[<span class="pl-c1">0</span>]; };</td>
      </tr>
      <tr>
        <td id="L5239" class="blob-num js-line-number" data-line-number="5239"></td>
        <td id="LC5239" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5240" class="blob-num js-line-number" data-line-number="5240"></td>
        <td id="LC5240" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> nodejs doesn&#39;t have crypto support</span></td>
      </tr>
      <tr>
        <td id="L5241" class="blob-num js-line-number" data-line-number="5241"></td>
        <td id="LC5241" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5242" class="blob-num js-line-number" data-line-number="5242"></td>
        <td id="LC5242" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L5243" class="blob-num js-line-number" data-line-number="5243"></td>
        <td id="LC5243" class="blob-code blob-code-inner js-file-line">        {}</td>
      </tr>
      <tr>
        <td id="L5244" class="blob-num js-line-number" data-line-number="5244"></td>
        <td id="LC5244" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>random_device) {</td>
      </tr>
      <tr>
        <td id="L5245" class="blob-num js-line-number" data-line-number="5245"></td>
        <td id="LC5245" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> we couldn&#39;t find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096</span></td>
      </tr>
      <tr>
        <td id="L5246" class="blob-num js-line-number" data-line-number="5246"></td>
        <td id="LC5246" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">random_device</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i &lt; array.length; i++) array[i] = (Math.random()*256)|0 } };<span class="pl-pds">&quot;</span></span>); };</td>
      </tr>
      <tr>
        <td id="L5247" class="blob-num js-line-number" data-line-number="5247"></td>
        <td id="LC5247" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5248" class="blob-num js-line-number" data-line-number="5248"></td>
        <td id="LC5248" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createDevice</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>random<span class="pl-pds">&#39;</span></span>, random_device);</td>
      </tr>
      <tr>
        <td id="L5249" class="blob-num js-line-number" data-line-number="5249"></td>
        <td id="LC5249" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createDevice</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>urandom<span class="pl-pds">&#39;</span></span>, random_device);</td>
      </tr>
      <tr>
        <td id="L5250" class="blob-num js-line-number" data-line-number="5250"></td>
        <td id="LC5250" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> we&#39;re not going to emulate the actual shm device,</span></td>
      </tr>
      <tr>
        <td id="L5251" class="blob-num js-line-number" data-line-number="5251"></td>
        <td id="LC5251" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> just create the tmp dirs that reside in it commonly</span></td>
      </tr>
      <tr>
        <td id="L5252" class="blob-num js-line-number" data-line-number="5252"></td>
        <td id="LC5252" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/shm<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5253" class="blob-num js-line-number" data-line-number="5253"></td>
        <td id="LC5253" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/shm/tmp<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5254" class="blob-num js-line-number" data-line-number="5254"></td>
        <td id="LC5254" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createSpecialDirectories</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5255" class="blob-num js-line-number" data-line-number="5255"></td>
        <td id="LC5255" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> create /proc/self/fd which allows /proc/self/fd/6 =&gt; readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)</span></td>
      </tr>
      <tr>
        <td id="L5256" class="blob-num js-line-number" data-line-number="5256"></td>
        <td id="LC5256" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/proc<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5257" class="blob-num js-line-number" data-line-number="5257"></td>
        <td id="LC5257" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/proc/self<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5258" class="blob-num js-line-number" data-line-number="5258"></td>
        <td id="LC5258" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/proc/self/fd<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5259" class="blob-num js-line-number" data-line-number="5259"></td>
        <td id="LC5259" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mount</span>({</td>
      </tr>
      <tr>
        <td id="L5260" class="blob-num js-line-number" data-line-number="5260"></td>
        <td id="LC5260" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">mount</span><span class="pl-k">:</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5261" class="blob-num js-line-number" data-line-number="5261"></td>
        <td id="LC5261" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createNode</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/proc/self<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>fd<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">16384</span> <span class="pl-k">|</span> <span class="pl-c1">511</span> <span class="pl-c"><span class="pl-c">/*</span> 0777 <span class="pl-c">*/</span></span>, <span class="pl-c1">73</span>);</td>
      </tr>
      <tr>
        <td id="L5262" class="blob-num js-line-number" data-line-number="5262"></td>
        <td id="LC5262" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">node</span>.<span class="pl-smi">node_ops</span> <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L5263" class="blob-num js-line-number" data-line-number="5263"></td>
        <td id="LC5263" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">lookup</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L5264" class="blob-num js-line-number" data-line-number="5264"></td>
        <td id="LC5264" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-k">+</span>name;</td>
      </tr>
      <tr>
        <td id="L5265" class="blob-num js-line-number" data-line-number="5265"></td>
        <td id="LC5265" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(fd);</td>
      </tr>
      <tr>
        <td id="L5266" class="blob-num js-line-number" data-line-number="5266"></td>
        <td id="LC5266" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5267" class="blob-num js-line-number" data-line-number="5267"></td>
        <td id="LC5267" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">var</span> ret <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L5268" class="blob-num js-line-number" data-line-number="5268"></td>
        <td id="LC5268" class="blob-code blob-code-inner js-file-line">                  parent<span class="pl-k">:</span> <span class="pl-c1">null</span>,</td>
      </tr>
      <tr>
        <td id="L5269" class="blob-num js-line-number" data-line-number="5269"></td>
        <td id="LC5269" class="blob-code blob-code-inner js-file-line">                  mount<span class="pl-k">:</span> { mountpoint<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>fake<span class="pl-pds">&#39;</span></span> },</td>
      </tr>
      <tr>
        <td id="L5270" class="blob-num js-line-number" data-line-number="5270"></td>
        <td id="LC5270" class="blob-code blob-code-inner js-file-line">                  node_ops<span class="pl-k">:</span> { <span class="pl-en">readlink</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">path</span> } }</td>
      </tr>
      <tr>
        <td id="L5271" class="blob-num js-line-number" data-line-number="5271"></td>
        <td id="LC5271" class="blob-code blob-code-inner js-file-line">                };</td>
      </tr>
      <tr>
        <td id="L5272" class="blob-num js-line-number" data-line-number="5272"></td>
        <td id="LC5272" class="blob-code blob-code-inner js-file-line">                <span class="pl-smi">ret</span>.<span class="pl-c1">parent</span> <span class="pl-k">=</span> ret; <span class="pl-c"><span class="pl-c">//</span> make it look like a simple root node</span></td>
      </tr>
      <tr>
        <td id="L5273" class="blob-num js-line-number" data-line-number="5273"></td>
        <td id="LC5273" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5274" class="blob-num js-line-number" data-line-number="5274"></td>
        <td id="LC5274" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5275" class="blob-num js-line-number" data-line-number="5275"></td>
        <td id="LC5275" class="blob-code blob-code-inner js-file-line">            };</td>
      </tr>
      <tr>
        <td id="L5276" class="blob-num js-line-number" data-line-number="5276"></td>
        <td id="LC5276" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L5277" class="blob-num js-line-number" data-line-number="5277"></td>
        <td id="LC5277" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5278" class="blob-num js-line-number" data-line-number="5278"></td>
        <td id="LC5278" class="blob-code blob-code-inner js-file-line">        }, {}, <span class="pl-s"><span class="pl-pds">&#39;</span>/proc/self/fd<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5279" class="blob-num js-line-number" data-line-number="5279"></td>
        <td id="LC5279" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createStandardStreams</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5280" class="blob-num js-line-number" data-line-number="5280"></td>
        <td id="LC5280" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> TODO deprecate the old functionality of a single</span></td>
      </tr>
      <tr>
        <td id="L5281" class="blob-num js-line-number" data-line-number="5281"></td>
        <td id="LC5281" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> input / output callback and that utilizes FS.createDevice</span></td>
      </tr>
      <tr>
        <td id="L5282" class="blob-num js-line-number" data-line-number="5282"></td>
        <td id="LC5282" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> and instead require a unique set of stream ops</span></td>
      </tr>
      <tr>
        <td id="L5283" class="blob-num js-line-number" data-line-number="5283"></td>
        <td id="LC5283" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5284" class="blob-num js-line-number" data-line-number="5284"></td>
        <td id="LC5284" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> by default, we symlink the standard streams to the</span></td>
      </tr>
      <tr>
        <td id="L5285" class="blob-num js-line-number" data-line-number="5285"></td>
        <td id="LC5285" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> default tty devices. however, if the standard streams</span></td>
      </tr>
      <tr>
        <td id="L5286" class="blob-num js-line-number" data-line-number="5286"></td>
        <td id="LC5286" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> have been overwritten we create a unique device for</span></td>
      </tr>
      <tr>
        <td id="L5287" class="blob-num js-line-number" data-line-number="5287"></td>
        <td id="LC5287" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> them instead.</span></td>
      </tr>
      <tr>
        <td id="L5288" class="blob-num js-line-number" data-line-number="5288"></td>
        <td id="LC5288" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdin<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L5289" class="blob-num js-line-number" data-line-number="5289"></td>
        <td id="LC5289" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">createDevice</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stdin<span class="pl-pds">&#39;</span></span>, Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdin<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L5290" class="blob-num js-line-number" data-line-number="5290"></td>
        <td id="LC5290" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5291" class="blob-num js-line-number" data-line-number="5291"></td>
        <td id="LC5291" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">symlink</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/tty<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stdin<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5292" class="blob-num js-line-number" data-line-number="5292"></td>
        <td id="LC5292" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5293" class="blob-num js-line-number" data-line-number="5293"></td>
        <td id="LC5293" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L5294" class="blob-num js-line-number" data-line-number="5294"></td>
        <td id="LC5294" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">createDevice</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">null</span>, Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L5295" class="blob-num js-line-number" data-line-number="5295"></td>
        <td id="LC5295" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5296" class="blob-num js-line-number" data-line-number="5296"></td>
        <td id="LC5296" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">symlink</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/tty<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stdout<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5297" class="blob-num js-line-number" data-line-number="5297"></td>
        <td id="LC5297" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5298" class="blob-num js-line-number" data-line-number="5298"></td>
        <td id="LC5298" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L5299" class="blob-num js-line-number" data-line-number="5299"></td>
        <td id="LC5299" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">createDevice</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">null</span>, Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L5300" class="blob-num js-line-number" data-line-number="5300"></td>
        <td id="LC5300" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5301" class="blob-num js-line-number" data-line-number="5301"></td>
        <td id="LC5301" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">symlink</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/tty1<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stderr<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5302" class="blob-num js-line-number" data-line-number="5302"></td>
        <td id="LC5302" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5303" class="blob-num js-line-number" data-line-number="5303"></td>
        <td id="LC5303" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5304" class="blob-num js-line-number" data-line-number="5304"></td>
        <td id="LC5304" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> open default streams for the stdin, stdout and stderr devices</span></td>
      </tr>
      <tr>
        <td id="L5305" class="blob-num js-line-number" data-line-number="5305"></td>
        <td id="LC5305" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stdin <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stdin<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5306" class="blob-num js-line-number" data-line-number="5306"></td>
        <td id="LC5306" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stdout <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stdout<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5307" class="blob-num js-line-number" data-line-number="5307"></td>
        <td id="LC5307" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stderr <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/stderr<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5308" class="blob-num js-line-number" data-line-number="5308"></td>
        <td id="LC5308" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-smi">stdin</span>.<span class="pl-smi">fd</span> <span class="pl-k">===</span> <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>invalid handle for stdin (<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">stdin</span>.<span class="pl-smi">fd</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5309" class="blob-num js-line-number" data-line-number="5309"></td>
        <td id="LC5309" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-smi">stdout</span>.<span class="pl-smi">fd</span> <span class="pl-k">===</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>invalid handle for stdout (<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">stdout</span>.<span class="pl-smi">fd</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5310" class="blob-num js-line-number" data-line-number="5310"></td>
        <td id="LC5310" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-smi">stderr</span>.<span class="pl-smi">fd</span> <span class="pl-k">===</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>invalid handle for stderr (<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">stderr</span>.<span class="pl-smi">fd</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5311" class="blob-num js-line-number" data-line-number="5311"></td>
        <td id="LC5311" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">ensureErrnoError</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5312" class="blob-num js-line-number" data-line-number="5312"></td>
        <td id="LC5312" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L5313" class="blob-num js-line-number" data-line-number="5313"></td>
        <td id="LC5313" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">ErrnoError</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">ErrnoError</span>(<span class="pl-smi">errno</span>, <span class="pl-smi">node</span>) {</td>
      </tr>
      <tr>
        <td id="L5314" class="blob-num js-line-number" data-line-number="5314"></td>
        <td id="LC5314" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">node</span> <span class="pl-k">=</span> node;</td>
      </tr>
      <tr>
        <td id="L5315" class="blob-num js-line-number" data-line-number="5315"></td>
        <td id="LC5315" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-en">setErrno</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">errno</span>) {</td>
      </tr>
      <tr>
        <td id="L5316" class="blob-num js-line-number" data-line-number="5316"></td>
        <td id="LC5316" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">errno</span> <span class="pl-k">=</span> errno;</td>
      </tr>
      <tr>
        <td id="L5317" class="blob-num js-line-number" data-line-number="5317"></td>
        <td id="LC5317" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> key <span class="pl-k">in</span> <span class="pl-c1">ERRNO_CODES</span>) {</td>
      </tr>
      <tr>
        <td id="L5318" class="blob-num js-line-number" data-line-number="5318"></td>
        <td id="LC5318" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (<span class="pl-c1">ERRNO_CODES</span>[key] <span class="pl-k">===</span> errno) {</td>
      </tr>
      <tr>
        <td id="L5319" class="blob-num js-line-number" data-line-number="5319"></td>
        <td id="LC5319" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">this</span>.<span class="pl-c1">code</span> <span class="pl-k">=</span> key;</td>
      </tr>
      <tr>
        <td id="L5320" class="blob-num js-line-number" data-line-number="5320"></td>
        <td id="LC5320" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L5321" class="blob-num js-line-number" data-line-number="5321"></td>
        <td id="LC5321" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5322" class="blob-num js-line-number" data-line-number="5322"></td>
        <td id="LC5322" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5323" class="blob-num js-line-number" data-line-number="5323"></td>
        <td id="LC5323" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L5324" class="blob-num js-line-number" data-line-number="5324"></td>
        <td id="LC5324" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-en">setErrno</span>(errno);</td>
      </tr>
      <tr>
        <td id="L5325" class="blob-num js-line-number" data-line-number="5325"></td>
        <td id="LC5325" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">message</span> <span class="pl-k">=</span> <span class="pl-c1">ERRNO_MESSAGES</span>[errno];</td>
      </tr>
      <tr>
        <td id="L5326" class="blob-num js-line-number" data-line-number="5326"></td>
        <td id="LC5326" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5327" class="blob-num js-line-number" data-line-number="5327"></td>
        <td id="LC5327" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Try to get a maximally helpful stack trace. On Node.js, getting Error.stack</span></td>
      </tr>
      <tr>
        <td id="L5328" class="blob-num js-line-number" data-line-number="5328"></td>
        <td id="LC5328" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> now ensures it shows what we want.</span></td>
      </tr>
      <tr>
        <td id="L5329" class="blob-num js-line-number" data-line-number="5329"></td>
        <td id="LC5329" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-c1">this</span>.<span class="pl-smi">stack</span>) {</td>
      </tr>
      <tr>
        <td id="L5330" class="blob-num js-line-number" data-line-number="5330"></td>
        <td id="LC5330" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Define the stack property for Node.js 4, which otherwise errors on the next line.</span></td>
      </tr>
      <tr>
        <td id="L5331" class="blob-num js-line-number" data-line-number="5331"></td>
        <td id="LC5331" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(<span class="pl-c1">this</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>stack<span class="pl-pds">&quot;</span></span>, { value<span class="pl-k">:</span> (<span class="pl-k">new</span> <span class="pl-en">Error</span>).<span class="pl-smi">stack</span>, writable<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L5332" class="blob-num js-line-number" data-line-number="5332"></td>
        <td id="LC5332" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>.<span class="pl-smi">stack</span> <span class="pl-k">=</span> <span class="pl-en">demangleAll</span>(<span class="pl-c1">this</span>.<span class="pl-smi">stack</span>);</td>
      </tr>
      <tr>
        <td id="L5333" class="blob-num js-line-number" data-line-number="5333"></td>
        <td id="LC5333" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5334" class="blob-num js-line-number" data-line-number="5334"></td>
        <td id="LC5334" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5335" class="blob-num js-line-number" data-line-number="5335"></td>
        <td id="LC5335" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>();</td>
      </tr>
      <tr>
        <td id="L5336" class="blob-num js-line-number" data-line-number="5336"></td>
        <td id="LC5336" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>.<span class="pl-c1">prototype</span>.<span class="pl-c1">constructor</span> <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>;</td>
      </tr>
      <tr>
        <td id="L5337" class="blob-num js-line-number" data-line-number="5337"></td>
        <td id="LC5337" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)</span></td>
      </tr>
      <tr>
        <td id="L5338" class="blob-num js-line-number" data-line-number="5338"></td>
        <td id="LC5338" class="blob-code blob-code-inner js-file-line">        [<span class="pl-c1">2</span>].<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">code</span>) {</td>
      </tr>
      <tr>
        <td id="L5339" class="blob-num js-line-number" data-line-number="5339"></td>
        <td id="LC5339" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">genericErrors</span>[code] <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(code);</td>
      </tr>
      <tr>
        <td id="L5340" class="blob-num js-line-number" data-line-number="5340"></td>
        <td id="LC5340" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-smi">genericErrors</span>[code].<span class="pl-smi">stack</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;generic error, no stack&gt;<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5341" class="blob-num js-line-number" data-line-number="5341"></td>
        <td id="LC5341" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L5342" class="blob-num js-line-number" data-line-number="5342"></td>
        <td id="LC5342" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">staticInit</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5343" class="blob-num js-line-number" data-line-number="5343"></td>
        <td id="LC5343" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">ensureErrnoError</span>();</td>
      </tr>
      <tr>
        <td id="L5344" class="blob-num js-line-number" data-line-number="5344"></td>
        <td id="LC5344" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5345" class="blob-num js-line-number" data-line-number="5345"></td>
        <td id="LC5345" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">nameTable</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Array</span>(<span class="pl-c1">4096</span>);</td>
      </tr>
      <tr>
        <td id="L5346" class="blob-num js-line-number" data-line-number="5346"></td>
        <td id="LC5346" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5347" class="blob-num js-line-number" data-line-number="5347"></td>
        <td id="LC5347" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mount</span>(<span class="pl-c1">MEMFS</span>, {}, <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5348" class="blob-num js-line-number" data-line-number="5348"></td>
        <td id="LC5348" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5349" class="blob-num js-line-number" data-line-number="5349"></td>
        <td id="LC5349" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createDefaultDirectories</span>();</td>
      </tr>
      <tr>
        <td id="L5350" class="blob-num js-line-number" data-line-number="5350"></td>
        <td id="LC5350" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createDefaultDevices</span>();</td>
      </tr>
      <tr>
        <td id="L5351" class="blob-num js-line-number" data-line-number="5351"></td>
        <td id="LC5351" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createSpecialDirectories</span>();</td>
      </tr>
      <tr>
        <td id="L5352" class="blob-num js-line-number" data-line-number="5352"></td>
        <td id="LC5352" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5353" class="blob-num js-line-number" data-line-number="5353"></td>
        <td id="LC5353" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">filesystems</span> <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L5354" class="blob-num js-line-number" data-line-number="5354"></td>
        <td id="LC5354" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&#39;</span>MEMFS<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">MEMFS</span>,</td>
      </tr>
      <tr>
        <td id="L5355" class="blob-num js-line-number" data-line-number="5355"></td>
        <td id="LC5355" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&#39;</span>IDBFS<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">IDBFS</span>,</td>
      </tr>
      <tr>
        <td id="L5356" class="blob-num js-line-number" data-line-number="5356"></td>
        <td id="LC5356" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&#39;</span>NODEFS<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">NODEFS</span>,</td>
      </tr>
      <tr>
        <td id="L5357" class="blob-num js-line-number" data-line-number="5357"></td>
        <td id="LC5357" class="blob-code blob-code-inner js-file-line">          <span class="pl-s"><span class="pl-pds">&#39;</span>WORKERFS<span class="pl-pds">&#39;</span></span><span class="pl-k">:</span> <span class="pl-c1">WORKERFS</span>,</td>
      </tr>
      <tr>
        <td id="L5358" class="blob-num js-line-number" data-line-number="5358"></td>
        <td id="LC5358" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5359" class="blob-num js-line-number" data-line-number="5359"></td>
        <td id="LC5359" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">init</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">input</span>, <span class="pl-smi">output</span>, <span class="pl-smi">error</span>) {</td>
      </tr>
      <tr>
        <td id="L5360" class="blob-num js-line-number" data-line-number="5360"></td>
        <td id="LC5360" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">init</span>.<span class="pl-smi">initialized</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5361" class="blob-num js-line-number" data-line-number="5361"></td>
        <td id="LC5361" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">init</span>.<span class="pl-smi">initialized</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5362" class="blob-num js-line-number" data-line-number="5362"></td>
        <td id="LC5362" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5363" class="blob-num js-line-number" data-line-number="5363"></td>
        <td id="LC5363" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">ensureErrnoError</span>();</td>
      </tr>
      <tr>
        <td id="L5364" class="blob-num js-line-number" data-line-number="5364"></td>
        <td id="LC5364" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5365" class="blob-num js-line-number" data-line-number="5365"></td>
        <td id="LC5365" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here</span></td>
      </tr>
      <tr>
        <td id="L5366" class="blob-num js-line-number" data-line-number="5366"></td>
        <td id="LC5366" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdin<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> input <span class="pl-k">||</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdin<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L5367" class="blob-num js-line-number" data-line-number="5367"></td>
        <td id="LC5367" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> output <span class="pl-k">||</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L5368" class="blob-num js-line-number" data-line-number="5368"></td>
        <td id="LC5368" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> error <span class="pl-k">||</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L5369" class="blob-num js-line-number" data-line-number="5369"></td>
        <td id="LC5369" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5370" class="blob-num js-line-number" data-line-number="5370"></td>
        <td id="LC5370" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">createStandardStreams</span>();</td>
      </tr>
      <tr>
        <td id="L5371" class="blob-num js-line-number" data-line-number="5371"></td>
        <td id="LC5371" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">quit</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5372" class="blob-num js-line-number" data-line-number="5372"></td>
        <td id="LC5372" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-smi">init</span>.<span class="pl-smi">initialized</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L5373" class="blob-num js-line-number" data-line-number="5373"></td>
        <td id="LC5373" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> force-flush all streams, so we get musl std streams printed out</span></td>
      </tr>
      <tr>
        <td id="L5374" class="blob-num js-line-number" data-line-number="5374"></td>
        <td id="LC5374" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> fflush <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>_fflush<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L5375" class="blob-num js-line-number" data-line-number="5375"></td>
        <td id="LC5375" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (fflush) <span class="pl-en">fflush</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5376" class="blob-num js-line-number" data-line-number="5376"></td>
        <td id="LC5376" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> close all of our streams</span></td>
      </tr>
      <tr>
        <td id="L5377" class="blob-num js-line-number" data-line-number="5377"></td>
        <td id="LC5377" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5378" class="blob-num js-line-number" data-line-number="5378"></td>
        <td id="LC5378" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-smi">streams</span>[i];</td>
      </tr>
      <tr>
        <td id="L5379" class="blob-num js-line-number" data-line-number="5379"></td>
        <td id="LC5379" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) {</td>
      </tr>
      <tr>
        <td id="L5380" class="blob-num js-line-number" data-line-number="5380"></td>
        <td id="LC5380" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L5381" class="blob-num js-line-number" data-line-number="5381"></td>
        <td id="LC5381" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5382" class="blob-num js-line-number" data-line-number="5382"></td>
        <td id="LC5382" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5383" class="blob-num js-line-number" data-line-number="5383"></td>
        <td id="LC5383" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5384" class="blob-num js-line-number" data-line-number="5384"></td>
        <td id="LC5384" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getMode</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5385" class="blob-num js-line-number" data-line-number="5385"></td>
        <td id="LC5385" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5386" class="blob-num js-line-number" data-line-number="5386"></td>
        <td id="LC5386" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (canRead) mode <span class="pl-k">|=</span> <span class="pl-c1">292</span> <span class="pl-k">|</span> <span class="pl-c1">73</span>;</td>
      </tr>
      <tr>
        <td id="L5387" class="blob-num js-line-number" data-line-number="5387"></td>
        <td id="LC5387" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (canWrite) mode <span class="pl-k">|=</span> <span class="pl-c1">146</span>;</td>
      </tr>
      <tr>
        <td id="L5388" class="blob-num js-line-number" data-line-number="5388"></td>
        <td id="LC5388" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> mode;</td>
      </tr>
      <tr>
        <td id="L5389" class="blob-num js-line-number" data-line-number="5389"></td>
        <td id="LC5389" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">joinPath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parts</span>, <span class="pl-smi">forceRelative</span>) {</td>
      </tr>
      <tr>
        <td id="L5390" class="blob-num js-line-number" data-line-number="5390"></td>
        <td id="LC5390" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-smi">join</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, parts);</td>
      </tr>
      <tr>
        <td id="L5391" class="blob-num js-line-number" data-line-number="5391"></td>
        <td id="LC5391" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (forceRelative <span class="pl-k">&amp;&amp;</span> path[<span class="pl-c1">0</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>) path <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5392" class="blob-num js-line-number" data-line-number="5392"></td>
        <td id="LC5392" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> path;</td>
      </tr>
      <tr>
        <td id="L5393" class="blob-num js-line-number" data-line-number="5393"></td>
        <td id="LC5393" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">absolutePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">relative</span>, <span class="pl-smi">base</span>) {</td>
      </tr>
      <tr>
        <td id="L5394" class="blob-num js-line-number" data-line-number="5394"></td>
        <td id="LC5394" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(base, relative);</td>
      </tr>
      <tr>
        <td id="L5395" class="blob-num js-line-number" data-line-number="5395"></td>
        <td id="LC5395" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">standardizePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L5396" class="blob-num js-line-number" data-line-number="5396"></td>
        <td id="LC5396" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(path);</td>
      </tr>
      <tr>
        <td id="L5397" class="blob-num js-line-number" data-line-number="5397"></td>
        <td id="LC5397" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">findObject</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">dontResolveLastLink</span>) {</td>
      </tr>
      <tr>
        <td id="L5398" class="blob-num js-line-number" data-line-number="5398"></td>
        <td id="LC5398" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">analyzePath</span>(path, dontResolveLastLink);</td>
      </tr>
      <tr>
        <td id="L5399" class="blob-num js-line-number" data-line-number="5399"></td>
        <td id="LC5399" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">ret</span>.<span class="pl-smi">exists</span>) {</td>
      </tr>
      <tr>
        <td id="L5400" class="blob-num js-line-number" data-line-number="5400"></td>
        <td id="LC5400" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">ret</span>.<span class="pl-c1">object</span>;</td>
      </tr>
      <tr>
        <td id="L5401" class="blob-num js-line-number" data-line-number="5401"></td>
        <td id="LC5401" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5402" class="blob-num js-line-number" data-line-number="5402"></td>
        <td id="LC5402" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">___setErrNo</span>(<span class="pl-smi">ret</span>.<span class="pl-smi">error</span>);</td>
      </tr>
      <tr>
        <td id="L5403" class="blob-num js-line-number" data-line-number="5403"></td>
        <td id="LC5403" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L5404" class="blob-num js-line-number" data-line-number="5404"></td>
        <td id="LC5404" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5405" class="blob-num js-line-number" data-line-number="5405"></td>
        <td id="LC5405" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">analyzePath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">dontResolveLastLink</span>) {</td>
      </tr>
      <tr>
        <td id="L5406" class="blob-num js-line-number" data-line-number="5406"></td>
        <td id="LC5406" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> operate from within the context of the symlink&#39;s target</span></td>
      </tr>
      <tr>
        <td id="L5407" class="blob-num js-line-number" data-line-number="5407"></td>
        <td id="LC5407" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5408" class="blob-num js-line-number" data-line-number="5408"></td>
        <td id="LC5408" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-k">!</span>dontResolveLastLink });</td>
      </tr>
      <tr>
        <td id="L5409" class="blob-num js-line-number" data-line-number="5409"></td>
        <td id="LC5409" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span>;</td>
      </tr>
      <tr>
        <td id="L5410" class="blob-num js-line-number" data-line-number="5410"></td>
        <td id="LC5410" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5411" class="blob-num js-line-number" data-line-number="5411"></td>
        <td id="LC5411" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5412" class="blob-num js-line-number" data-line-number="5412"></td>
        <td id="LC5412" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L5413" class="blob-num js-line-number" data-line-number="5413"></td>
        <td id="LC5413" class="blob-code blob-code-inner js-file-line">          isRoot<span class="pl-k">:</span> <span class="pl-c1">false</span>, exists<span class="pl-k">:</span> <span class="pl-c1">false</span>, error<span class="pl-k">:</span> <span class="pl-c1">0</span>, name<span class="pl-k">:</span> <span class="pl-c1">null</span>, path<span class="pl-k">:</span> <span class="pl-c1">null</span>, object<span class="pl-k">:</span> <span class="pl-c1">null</span>,</td>
      </tr>
      <tr>
        <td id="L5414" class="blob-num js-line-number" data-line-number="5414"></td>
        <td id="LC5414" class="blob-code blob-code-inner js-file-line">          parentExists<span class="pl-k">:</span> <span class="pl-c1">false</span>, parentPath<span class="pl-k">:</span> <span class="pl-c1">null</span>, parentObject<span class="pl-k">:</span> <span class="pl-c1">null</span></td>
      </tr>
      <tr>
        <td id="L5415" class="blob-num js-line-number" data-line-number="5415"></td>
        <td id="LC5415" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5416" class="blob-num js-line-number" data-line-number="5416"></td>
        <td id="LC5416" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5417" class="blob-num js-line-number" data-line-number="5417"></td>
        <td id="LC5417" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { parent<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L5418" class="blob-num js-line-number" data-line-number="5418"></td>
        <td id="LC5418" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">parentExists</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5419" class="blob-num js-line-number" data-line-number="5419"></td>
        <td id="LC5419" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">parentPath</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span>;</td>
      </tr>
      <tr>
        <td id="L5420" class="blob-num js-line-number" data-line-number="5420"></td>
        <td id="LC5420" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">parentObject</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L5421" class="blob-num js-line-number" data-line-number="5421"></td>
        <td id="LC5421" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(path);</td>
      </tr>
      <tr>
        <td id="L5422" class="blob-num js-line-number" data-line-number="5422"></td>
        <td id="LC5422" class="blob-code blob-code-inner js-file-line">          lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-k">!</span>dontResolveLastLink });</td>
      </tr>
      <tr>
        <td id="L5423" class="blob-num js-line-number" data-line-number="5423"></td>
        <td id="LC5423" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">exists</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5424" class="blob-num js-line-number" data-line-number="5424"></td>
        <td id="LC5424" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">path</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span>;</td>
      </tr>
      <tr>
        <td id="L5425" class="blob-num js-line-number" data-line-number="5425"></td>
        <td id="LC5425" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-c1">object</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L5426" class="blob-num js-line-number" data-line-number="5426"></td>
        <td id="LC5426" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>.<span class="pl-c1">name</span>;</td>
      </tr>
      <tr>
        <td id="L5427" class="blob-num js-line-number" data-line-number="5427"></td>
        <td id="LC5427" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">isRoot</span> <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">path</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5428" class="blob-num js-line-number" data-line-number="5428"></td>
        <td id="LC5428" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5429" class="blob-num js-line-number" data-line-number="5429"></td>
        <td id="LC5429" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">ret</span>.<span class="pl-smi">error</span> <span class="pl-k">=</span> <span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L5430" class="blob-num js-line-number" data-line-number="5430"></td>
        <td id="LC5430" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5431" class="blob-num js-line-number" data-line-number="5431"></td>
        <td id="LC5431" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5432" class="blob-num js-line-number" data-line-number="5432"></td>
        <td id="LC5432" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createFolder</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5433" class="blob-num js-line-number" data-line-number="5433"></td>
        <td id="LC5433" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L5434" class="blob-num js-line-number" data-line-number="5434"></td>
        <td id="LC5434" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMode</span>(canRead, canWrite);</td>
      </tr>
      <tr>
        <td id="L5435" class="blob-num js-line-number" data-line-number="5435"></td>
        <td id="LC5435" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(path, mode);</td>
      </tr>
      <tr>
        <td id="L5436" class="blob-num js-line-number" data-line-number="5436"></td>
        <td id="LC5436" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createPath</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">path</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5437" class="blob-num js-line-number" data-line-number="5437"></td>
        <td id="LC5437" class="blob-code blob-code-inner js-file-line">        parent <span class="pl-k">=</span> <span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent);</td>
      </tr>
      <tr>
        <td id="L5438" class="blob-num js-line-number" data-line-number="5438"></td>
        <td id="LC5438" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> parts <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">split</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>).<span class="pl-c1">reverse</span>();</td>
      </tr>
      <tr>
        <td id="L5439" class="blob-num js-line-number" data-line-number="5439"></td>
        <td id="LC5439" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-smi">parts</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L5440" class="blob-num js-line-number" data-line-number="5440"></td>
        <td id="LC5440" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> part <span class="pl-k">=</span> <span class="pl-smi">parts</span>.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L5441" class="blob-num js-line-number" data-line-number="5441"></td>
        <td id="LC5441" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>part) <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L5442" class="blob-num js-line-number" data-line-number="5442"></td>
        <td id="LC5442" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> current <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(parent, part);</td>
      </tr>
      <tr>
        <td id="L5443" class="blob-num js-line-number" data-line-number="5443"></td>
        <td id="LC5443" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5444" class="blob-num js-line-number" data-line-number="5444"></td>
        <td id="LC5444" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(current);</td>
      </tr>
      <tr>
        <td id="L5445" class="blob-num js-line-number" data-line-number="5445"></td>
        <td id="LC5445" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5446" class="blob-num js-line-number" data-line-number="5446"></td>
        <td id="LC5446" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> ignore EEXIST</span></td>
      </tr>
      <tr>
        <td id="L5447" class="blob-num js-line-number" data-line-number="5447"></td>
        <td id="LC5447" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5448" class="blob-num js-line-number" data-line-number="5448"></td>
        <td id="LC5448" class="blob-code blob-code-inner js-file-line">          parent <span class="pl-k">=</span> current;</td>
      </tr>
      <tr>
        <td id="L5449" class="blob-num js-line-number" data-line-number="5449"></td>
        <td id="LC5449" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5450" class="blob-num js-line-number" data-line-number="5450"></td>
        <td id="LC5450" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> current;</td>
      </tr>
      <tr>
        <td id="L5451" class="blob-num js-line-number" data-line-number="5451"></td>
        <td id="LC5451" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">properties</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5452" class="blob-num js-line-number" data-line-number="5452"></td>
        <td id="LC5452" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L5453" class="blob-num js-line-number" data-line-number="5453"></td>
        <td id="LC5453" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMode</span>(canRead, canWrite);</td>
      </tr>
      <tr>
        <td id="L5454" class="blob-num js-line-number" data-line-number="5454"></td>
        <td id="LC5454" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">create</span>(path, mode);</td>
      </tr>
      <tr>
        <td id="L5455" class="blob-num js-line-number" data-line-number="5455"></td>
        <td id="LC5455" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createDataFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">data</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>, <span class="pl-smi">canOwn</span>) {</td>
      </tr>
      <tr>
        <td id="L5456" class="blob-num js-line-number" data-line-number="5456"></td>
        <td id="LC5456" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> name <span class="pl-k">?</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent), name) <span class="pl-k">:</span> parent;</td>
      </tr>
      <tr>
        <td id="L5457" class="blob-num js-line-number" data-line-number="5457"></td>
        <td id="LC5457" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMode</span>(canRead, canWrite);</td>
      </tr>
      <tr>
        <td id="L5458" class="blob-num js-line-number" data-line-number="5458"></td>
        <td id="LC5458" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">create</span>(path, mode);</td>
      </tr>
      <tr>
        <td id="L5459" class="blob-num js-line-number" data-line-number="5459"></td>
        <td id="LC5459" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (data) {</td>
      </tr>
      <tr>
        <td id="L5460" class="blob-num js-line-number" data-line-number="5460"></td>
        <td id="LC5460" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">typeof</span> data <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5461" class="blob-num js-line-number" data-line-number="5461"></td>
        <td id="LC5461" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> arr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Array</span>(<span class="pl-smi">data</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L5462" class="blob-num js-line-number" data-line-number="5462"></td>
        <td id="LC5462" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>, len <span class="pl-k">=</span> <span class="pl-smi">data</span>.<span class="pl-c1">length</span>; i <span class="pl-k">&lt;</span> len; <span class="pl-k">++</span>i) arr[i] <span class="pl-k">=</span> <span class="pl-smi">data</span>.<span class="pl-c1">charCodeAt</span>(i);</td>
      </tr>
      <tr>
        <td id="L5463" class="blob-num js-line-number" data-line-number="5463"></td>
        <td id="LC5463" class="blob-code blob-code-inner js-file-line">            data <span class="pl-k">=</span> arr;</td>
      </tr>
      <tr>
        <td id="L5464" class="blob-num js-line-number" data-line-number="5464"></td>
        <td id="LC5464" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5465" class="blob-num js-line-number" data-line-number="5465"></td>
        <td id="LC5465" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> make sure we can write to the file</span></td>
      </tr>
      <tr>
        <td id="L5466" class="blob-num js-line-number" data-line-number="5466"></td>
        <td id="LC5466" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(node, mode <span class="pl-k">|</span> <span class="pl-c1">146</span>);</td>
      </tr>
      <tr>
        <td id="L5467" class="blob-num js-line-number" data-line-number="5467"></td>
        <td id="LC5467" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(node, <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5468" class="blob-num js-line-number" data-line-number="5468"></td>
        <td id="LC5468" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-c1">write</span>(stream, data, <span class="pl-c1">0</span>, <span class="pl-smi">data</span>.<span class="pl-c1">length</span>, <span class="pl-c1">0</span>, canOwn);</td>
      </tr>
      <tr>
        <td id="L5469" class="blob-num js-line-number" data-line-number="5469"></td>
        <td id="LC5469" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5470" class="blob-num js-line-number" data-line-number="5470"></td>
        <td id="LC5470" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(node, mode);</td>
      </tr>
      <tr>
        <td id="L5471" class="blob-num js-line-number" data-line-number="5471"></td>
        <td id="LC5471" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5472" class="blob-num js-line-number" data-line-number="5472"></td>
        <td id="LC5472" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L5473" class="blob-num js-line-number" data-line-number="5473"></td>
        <td id="LC5473" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createDevice</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">input</span>, <span class="pl-smi">output</span>) {</td>
      </tr>
      <tr>
        <td id="L5474" class="blob-num js-line-number" data-line-number="5474"></td>
        <td id="LC5474" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L5475" class="blob-num js-line-number" data-line-number="5475"></td>
        <td id="LC5475" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> mode <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getMode</span>(<span class="pl-k">!!</span>input, <span class="pl-k">!!</span>output);</td>
      </tr>
      <tr>
        <td id="L5476" class="blob-num js-line-number" data-line-number="5476"></td>
        <td id="LC5476" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-smi">createDevice</span>.<span class="pl-smi">major</span>) <span class="pl-c1">FS</span>.<span class="pl-smi">createDevice</span>.<span class="pl-smi">major</span> <span class="pl-k">=</span> <span class="pl-c1">64</span>;</td>
      </tr>
      <tr>
        <td id="L5477" class="blob-num js-line-number" data-line-number="5477"></td>
        <td id="LC5477" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> dev <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">makedev</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">createDevice</span>.<span class="pl-smi">major</span><span class="pl-k">++</span>, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5478" class="blob-num js-line-number" data-line-number="5478"></td>
        <td id="LC5478" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Create a fake device that a set of stream ops to emulate</span></td>
      </tr>
      <tr>
        <td id="L5479" class="blob-num js-line-number" data-line-number="5479"></td>
        <td id="LC5479" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> the old behavior.</span></td>
      </tr>
      <tr>
        <td id="L5480" class="blob-num js-line-number" data-line-number="5480"></td>
        <td id="LC5480" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">registerDevice</span>(dev, {</td>
      </tr>
      <tr>
        <td id="L5481" class="blob-num js-line-number" data-line-number="5481"></td>
        <td id="LC5481" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">open</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L5482" class="blob-num js-line-number" data-line-number="5482"></td>
        <td id="LC5482" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">stream</span>.<span class="pl-smi">seekable</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L5483" class="blob-num js-line-number" data-line-number="5483"></td>
        <td id="LC5483" class="blob-code blob-code-inner js-file-line">          },</td>
      </tr>
      <tr>
        <td id="L5484" class="blob-num js-line-number" data-line-number="5484"></td>
        <td id="LC5484" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">close</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">stream</span>) {</td>
      </tr>
      <tr>
        <td id="L5485" class="blob-num js-line-number" data-line-number="5485"></td>
        <td id="LC5485" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> flush any pending line data</span></td>
      </tr>
      <tr>
        <td id="L5486" class="blob-num js-line-number" data-line-number="5486"></td>
        <td id="LC5486" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (output <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">output</span>.<span class="pl-smi">buffer</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">output</span>.<span class="pl-smi">buffer</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L5487" class="blob-num js-line-number" data-line-number="5487"></td>
        <td id="LC5487" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">output</span>(<span class="pl-c1">10</span>);</td>
      </tr>
      <tr>
        <td id="L5488" class="blob-num js-line-number" data-line-number="5488"></td>
        <td id="LC5488" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5489" class="blob-num js-line-number" data-line-number="5489"></td>
        <td id="LC5489" class="blob-code blob-code-inner js-file-line">          },</td>
      </tr>
      <tr>
        <td id="L5490" class="blob-num js-line-number" data-line-number="5490"></td>
        <td id="LC5490" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">read</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">pos</span> <span class="pl-c"><span class="pl-c">/*</span> ignored <span class="pl-c">*/</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5491" class="blob-num js-line-number" data-line-number="5491"></td>
        <td id="LC5491" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> bytesRead <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5492" class="blob-num js-line-number" data-line-number="5492"></td>
        <td id="LC5492" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5493" class="blob-num js-line-number" data-line-number="5493"></td>
        <td id="LC5493" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">var</span> result;</td>
      </tr>
      <tr>
        <td id="L5494" class="blob-num js-line-number" data-line-number="5494"></td>
        <td id="LC5494" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5495" class="blob-num js-line-number" data-line-number="5495"></td>
        <td id="LC5495" class="blob-code blob-code-inner js-file-line">                result <span class="pl-k">=</span> <span class="pl-en">input</span>();</td>
      </tr>
      <tr>
        <td id="L5496" class="blob-num js-line-number" data-line-number="5496"></td>
        <td id="LC5496" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5497" class="blob-num js-line-number" data-line-number="5497"></td>
        <td id="LC5497" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L5498" class="blob-num js-line-number" data-line-number="5498"></td>
        <td id="LC5498" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5499" class="blob-num js-line-number" data-line-number="5499"></td>
        <td id="LC5499" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (result <span class="pl-k">===</span> <span class="pl-c1">undefined</span> <span class="pl-k">&amp;&amp;</span> bytesRead <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5500" class="blob-num js-line-number" data-line-number="5500"></td>
        <td id="LC5500" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">11</span>);</td>
      </tr>
      <tr>
        <td id="L5501" class="blob-num js-line-number" data-line-number="5501"></td>
        <td id="LC5501" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5502" class="blob-num js-line-number" data-line-number="5502"></td>
        <td id="LC5502" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (result <span class="pl-k">===</span> <span class="pl-c1">null</span> <span class="pl-k">||</span> result <span class="pl-k">===</span> <span class="pl-c1">undefined</span>) <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L5503" class="blob-num js-line-number" data-line-number="5503"></td>
        <td id="LC5503" class="blob-code blob-code-inner js-file-line">              bytesRead<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L5504" class="blob-num js-line-number" data-line-number="5504"></td>
        <td id="LC5504" class="blob-code blob-code-inner js-file-line">              buffer[offset<span class="pl-k">+</span>i] <span class="pl-k">=</span> result;</td>
      </tr>
      <tr>
        <td id="L5505" class="blob-num js-line-number" data-line-number="5505"></td>
        <td id="LC5505" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5506" class="blob-num js-line-number" data-line-number="5506"></td>
        <td id="LC5506" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (bytesRead) {</td>
      </tr>
      <tr>
        <td id="L5507" class="blob-num js-line-number" data-line-number="5507"></td>
        <td id="LC5507" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L5508" class="blob-num js-line-number" data-line-number="5508"></td>
        <td id="LC5508" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5509" class="blob-num js-line-number" data-line-number="5509"></td>
        <td id="LC5509" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> bytesRead;</td>
      </tr>
      <tr>
        <td id="L5510" class="blob-num js-line-number" data-line-number="5510"></td>
        <td id="LC5510" class="blob-code blob-code-inner js-file-line">          },</td>
      </tr>
      <tr>
        <td id="L5511" class="blob-num js-line-number" data-line-number="5511"></td>
        <td id="LC5511" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">write</span><span class="pl-k">:</span> <span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">pos</span>) {</td>
      </tr>
      <tr>
        <td id="L5512" class="blob-num js-line-number" data-line-number="5512"></td>
        <td id="LC5512" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> length; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5513" class="blob-num js-line-number" data-line-number="5513"></td>
        <td id="LC5513" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5514" class="blob-num js-line-number" data-line-number="5514"></td>
        <td id="LC5514" class="blob-code blob-code-inner js-file-line">                <span class="pl-en">output</span>(buffer[offset<span class="pl-k">+</span>i]);</td>
      </tr>
      <tr>
        <td id="L5515" class="blob-num js-line-number" data-line-number="5515"></td>
        <td id="LC5515" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5516" class="blob-num js-line-number" data-line-number="5516"></td>
        <td id="LC5516" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L5517" class="blob-num js-line-number" data-line-number="5517"></td>
        <td id="LC5517" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5518" class="blob-num js-line-number" data-line-number="5518"></td>
        <td id="LC5518" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5519" class="blob-num js-line-number" data-line-number="5519"></td>
        <td id="LC5519" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (length) {</td>
      </tr>
      <tr>
        <td id="L5520" class="blob-num js-line-number" data-line-number="5520"></td>
        <td id="LC5520" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">timestamp</span> <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L5521" class="blob-num js-line-number" data-line-number="5521"></td>
        <td id="LC5521" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5522" class="blob-num js-line-number" data-line-number="5522"></td>
        <td id="LC5522" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L5523" class="blob-num js-line-number" data-line-number="5523"></td>
        <td id="LC5523" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5524" class="blob-num js-line-number" data-line-number="5524"></td>
        <td id="LC5524" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L5525" class="blob-num js-line-number" data-line-number="5525"></td>
        <td id="LC5525" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">mkdev</span>(path, mode, dev);</td>
      </tr>
      <tr>
        <td id="L5526" class="blob-num js-line-number" data-line-number="5526"></td>
        <td id="LC5526" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createLink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">target</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5527" class="blob-num js-line-number" data-line-number="5527"></td>
        <td id="LC5527" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(<span class="pl-k">typeof</span> parent <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span> <span class="pl-k">?</span> parent <span class="pl-k">:</span> <span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(parent), name);</td>
      </tr>
      <tr>
        <td id="L5528" class="blob-num js-line-number" data-line-number="5528"></td>
        <td id="LC5528" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">symlink</span>(target, path);</td>
      </tr>
      <tr>
        <td id="L5529" class="blob-num js-line-number" data-line-number="5529"></td>
        <td id="LC5529" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">forceLoadFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">obj</span>) {</td>
      </tr>
      <tr>
        <td id="L5530" class="blob-num js-line-number" data-line-number="5530"></td>
        <td id="LC5530" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">obj</span>.<span class="pl-smi">isDevice</span> <span class="pl-k">||</span> <span class="pl-smi">obj</span>.<span class="pl-smi">isFolder</span> <span class="pl-k">||</span> <span class="pl-smi">obj</span>.<span class="pl-c1">link</span> <span class="pl-k">||</span> <span class="pl-smi">obj</span>.<span class="pl-smi">contents</span>) <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5531" class="blob-num js-line-number" data-line-number="5531"></td>
        <td id="LC5531" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> success <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5532" class="blob-num js-line-number" data-line-number="5532"></td>
        <td id="LC5532" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">XMLHttpRequest</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5533" class="blob-num js-line-number" data-line-number="5533"></td>
        <td id="LC5533" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5534" class="blob-num js-line-number" data-line-number="5534"></td>
        <td id="LC5534" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (read_) {</td>
      </tr>
      <tr>
        <td id="L5535" class="blob-num js-line-number" data-line-number="5535"></td>
        <td id="LC5535" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Command-line.</span></td>
      </tr>
      <tr>
        <td id="L5536" class="blob-num js-line-number" data-line-number="5536"></td>
        <td id="LC5536" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5537" class="blob-num js-line-number" data-line-number="5537"></td>
        <td id="LC5537" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> WARNING: Can&#39;t read binary files in V8&#39;s d8 or tracemonkey&#39;s js, as</span></td>
      </tr>
      <tr>
        <td id="L5538" class="blob-num js-line-number" data-line-number="5538"></td>
        <td id="LC5538" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span>          read() will try to parse UTF8.</span></td>
      </tr>
      <tr>
        <td id="L5539" class="blob-num js-line-number" data-line-number="5539"></td>
        <td id="LC5539" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">obj</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-en">intArrayFromString</span>(<span class="pl-en">read_</span>(<span class="pl-smi">obj</span>.<span class="pl-smi">url</span>), <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L5540" class="blob-num js-line-number" data-line-number="5540"></td>
        <td id="LC5540" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">obj</span>.<span class="pl-smi">usedBytes</span> <span class="pl-k">=</span> <span class="pl-smi">obj</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L5541" class="blob-num js-line-number" data-line-number="5541"></td>
        <td id="LC5541" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5542" class="blob-num js-line-number" data-line-number="5542"></td>
        <td id="LC5542" class="blob-code blob-code-inner js-file-line">            success <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L5543" class="blob-num js-line-number" data-line-number="5543"></td>
        <td id="LC5543" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5544" class="blob-num js-line-number" data-line-number="5544"></td>
        <td id="LC5544" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5545" class="blob-num js-line-number" data-line-number="5545"></td>
        <td id="LC5545" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Cannot load without read() or XMLHttpRequest.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5546" class="blob-num js-line-number" data-line-number="5546"></td>
        <td id="LC5546" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5547" class="blob-num js-line-number" data-line-number="5547"></td>
        <td id="LC5547" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>success) <span class="pl-en">___setErrNo</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L5548" class="blob-num js-line-number" data-line-number="5548"></td>
        <td id="LC5548" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> success;</td>
      </tr>
      <tr>
        <td id="L5549" class="blob-num js-line-number" data-line-number="5549"></td>
        <td id="LC5549" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createLazyFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">url</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>) {</td>
      </tr>
      <tr>
        <td id="L5550" class="blob-num js-line-number" data-line-number="5550"></td>
        <td id="LC5550" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.</span></td>
      </tr>
      <tr>
        <td id="L5551" class="blob-num js-line-number" data-line-number="5551"></td>
        <td id="LC5551" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">LazyUint8Array</span>() {</td>
      </tr>
      <tr>
        <td id="L5552" class="blob-num js-line-number" data-line-number="5552"></td>
        <td id="LC5552" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">lengthKnown</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L5553" class="blob-num js-line-number" data-line-number="5553"></td>
        <td id="LC5553" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">chunks</span> <span class="pl-k">=</span> []; <span class="pl-c"><span class="pl-c">//</span> Loaded chunks. Index is the chunk number</span></td>
      </tr>
      <tr>
        <td id="L5554" class="blob-num js-line-number" data-line-number="5554"></td>
        <td id="LC5554" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5555" class="blob-num js-line-number" data-line-number="5555"></td>
        <td id="LC5555" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">LazyUint8Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">get</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">LazyUint8Array_get</span>(<span class="pl-smi">idx</span>) {</td>
      </tr>
      <tr>
        <td id="L5556" class="blob-num js-line-number" data-line-number="5556"></td>
        <td id="LC5556" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (idx <span class="pl-k">&gt;</span> <span class="pl-c1">this</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">||</span> idx <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L5557" class="blob-num js-line-number" data-line-number="5557"></td>
        <td id="LC5557" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">undefined</span>;</td>
      </tr>
      <tr>
        <td id="L5558" class="blob-num js-line-number" data-line-number="5558"></td>
        <td id="LC5558" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5559" class="blob-num js-line-number" data-line-number="5559"></td>
        <td id="LC5559" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> chunkOffset <span class="pl-k">=</span> idx <span class="pl-k">%</span> <span class="pl-c1">this</span>.<span class="pl-smi">chunkSize</span>;</td>
      </tr>
      <tr>
        <td id="L5560" class="blob-num js-line-number" data-line-number="5560"></td>
        <td id="LC5560" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> chunkNum <span class="pl-k">=</span> (idx <span class="pl-k">/</span> <span class="pl-c1">this</span>.<span class="pl-smi">chunkSize</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5561" class="blob-num js-line-number" data-line-number="5561"></td>
        <td id="LC5561" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-en">getter</span>(chunkNum)[chunkOffset];</td>
      </tr>
      <tr>
        <td id="L5562" class="blob-num js-line-number" data-line-number="5562"></td>
        <td id="LC5562" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5563" class="blob-num js-line-number" data-line-number="5563"></td>
        <td id="LC5563" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">LazyUint8Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">setDataGetter</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">LazyUint8Array_setDataGetter</span>(<span class="pl-smi">getter</span>) {</td>
      </tr>
      <tr>
        <td id="L5564" class="blob-num js-line-number" data-line-number="5564"></td>
        <td id="LC5564" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">getter</span> <span class="pl-k">=</span> getter;</td>
      </tr>
      <tr>
        <td id="L5565" class="blob-num js-line-number" data-line-number="5565"></td>
        <td id="LC5565" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5566" class="blob-num js-line-number" data-line-number="5566"></td>
        <td id="LC5566" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">LazyUint8Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">cacheLength</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">LazyUint8Array_cacheLength</span>() {</td>
      </tr>
      <tr>
        <td id="L5567" class="blob-num js-line-number" data-line-number="5567"></td>
        <td id="LC5567" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Find length</span></td>
      </tr>
      <tr>
        <td id="L5568" class="blob-num js-line-number" data-line-number="5568"></td>
        <td id="LC5568" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> xhr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>();</td>
      </tr>
      <tr>
        <td id="L5569" class="blob-num js-line-number" data-line-number="5569"></td>
        <td id="LC5569" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">xhr</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>HEAD<span class="pl-pds">&#39;</span></span>, url, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L5570" class="blob-num js-line-number" data-line-number="5570"></td>
        <td id="LC5570" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">xhr</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L5571" class="blob-num js-line-number" data-line-number="5571"></td>
        <td id="LC5571" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>(<span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">200</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">&lt;</span> <span class="pl-c1">300</span> <span class="pl-k">||</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">===</span> <span class="pl-c1">304</span>)) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Couldn&#39;t load <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> url <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>. Status: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span>);</td>
      </tr>
      <tr>
        <td id="L5572" class="blob-num js-line-number" data-line-number="5572"></td>
        <td id="LC5572" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> datalength <span class="pl-k">=</span> <span class="pl-c1">Number</span>(<span class="pl-smi">xhr</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-length<span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L5573" class="blob-num js-line-number" data-line-number="5573"></td>
        <td id="LC5573" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> header;</td>
      </tr>
      <tr>
        <td id="L5574" class="blob-num js-line-number" data-line-number="5574"></td>
        <td id="LC5574" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> hasByteServing <span class="pl-k">=</span> (header <span class="pl-k">=</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Accept-Ranges<span class="pl-pds">&quot;</span></span>)) <span class="pl-k">&amp;&amp;</span> header <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>bytes<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5575" class="blob-num js-line-number" data-line-number="5575"></td>
        <td id="LC5575" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> usesGzip <span class="pl-k">=</span> (header <span class="pl-k">=</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">getResponseHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Content-Encoding<span class="pl-pds">&quot;</span></span>)) <span class="pl-k">&amp;&amp;</span> header <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>gzip<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5576" class="blob-num js-line-number" data-line-number="5576"></td>
        <td id="LC5576" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5577" class="blob-num js-line-number" data-line-number="5577"></td>
        <td id="LC5577" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> chunkSize <span class="pl-k">=</span> <span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span>; <span class="pl-c"><span class="pl-c">//</span> Chunk size in bytes</span></td>
      </tr>
      <tr>
        <td id="L5578" class="blob-num js-line-number" data-line-number="5578"></td>
        <td id="LC5578" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5579" class="blob-num js-line-number" data-line-number="5579"></td>
        <td id="LC5579" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>hasByteServing) chunkSize <span class="pl-k">=</span> datalength;</td>
      </tr>
      <tr>
        <td id="L5580" class="blob-num js-line-number" data-line-number="5580"></td>
        <td id="LC5580" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5581" class="blob-num js-line-number" data-line-number="5581"></td>
        <td id="LC5581" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Function to get a range from the remote URL.</span></td>
      </tr>
      <tr>
        <td id="L5582" class="blob-num js-line-number" data-line-number="5582"></td>
        <td id="LC5582" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> doXHR <span class="pl-k">=</span> (<span class="pl-k">function</span>(<span class="pl-smi">from</span>, <span class="pl-smi">to</span>) {</td>
      </tr>
      <tr>
        <td id="L5583" class="blob-num js-line-number" data-line-number="5583"></td>
        <td id="LC5583" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (from <span class="pl-k">&gt;</span> to) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>invalid range (<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> from <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>, <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> to <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>) or no bytes requested!<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5584" class="blob-num js-line-number" data-line-number="5584"></td>
        <td id="LC5584" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (to <span class="pl-k">&gt;</span> datalength<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>only <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> datalength <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span> bytes available! programmer error!<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5585" class="blob-num js-line-number" data-line-number="5585"></td>
        <td id="LC5585" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5586" class="blob-num js-line-number" data-line-number="5586"></td>
        <td id="LC5586" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.</span></td>
      </tr>
      <tr>
        <td id="L5587" class="blob-num js-line-number" data-line-number="5587"></td>
        <td id="LC5587" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> xhr <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">XMLHttpRequest</span>();</td>
      </tr>
      <tr>
        <td id="L5588" class="blob-num js-line-number" data-line-number="5588"></td>
        <td id="LC5588" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">xhr</span>.<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>GET<span class="pl-pds">&#39;</span></span>, url, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L5589" class="blob-num js-line-number" data-line-number="5589"></td>
        <td id="LC5589" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (datalength <span class="pl-k">!==</span> chunkSize) <span class="pl-smi">xhr</span>.<span class="pl-c1">setRequestHeader</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Range<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">&quot;</span>bytes=<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> from <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> to);</td>
      </tr>
      <tr>
        <td id="L5590" class="blob-num js-line-number" data-line-number="5590"></td>
        <td id="LC5590" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5591" class="blob-num js-line-number" data-line-number="5591"></td>
        <td id="LC5591" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Some hints to the browser that we want binary data.</span></td>
      </tr>
      <tr>
        <td id="L5592" class="blob-num js-line-number" data-line-number="5592"></td>
        <td id="LC5592" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">Uint8Array</span> <span class="pl-k">!=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) <span class="pl-smi">xhr</span>.<span class="pl-smi">responseType</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>arraybuffer<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5593" class="blob-num js-line-number" data-line-number="5593"></td>
        <td id="LC5593" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">xhr</span>.<span class="pl-smi">overrideMimeType</span>) {</td>
      </tr>
      <tr>
        <td id="L5594" class="blob-num js-line-number" data-line-number="5594"></td>
        <td id="LC5594" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">xhr</span>.<span class="pl-en">overrideMimeType</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>text/plain; charset=x-user-defined<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5595" class="blob-num js-line-number" data-line-number="5595"></td>
        <td id="LC5595" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5596" class="blob-num js-line-number" data-line-number="5596"></td>
        <td id="LC5596" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5597" class="blob-num js-line-number" data-line-number="5597"></td>
        <td id="LC5597" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">xhr</span>.<span class="pl-c1">send</span>(<span class="pl-c1">null</span>);</td>
      </tr>
      <tr>
        <td id="L5598" class="blob-num js-line-number" data-line-number="5598"></td>
        <td id="LC5598" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>(<span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">200</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">&lt;</span> <span class="pl-c1">300</span> <span class="pl-k">||</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span> <span class="pl-k">===</span> <span class="pl-c1">304</span>)) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Couldn&#39;t load <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> url <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>. Status: <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-smi">xhr</span>.<span class="pl-c1">status</span>);</td>
      </tr>
      <tr>
        <td id="L5599" class="blob-num js-line-number" data-line-number="5599"></td>
        <td id="LC5599" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-smi">xhr</span>.<span class="pl-smi">response</span> <span class="pl-k">!==</span> <span class="pl-c1">undefined</span>) {</td>
      </tr>
      <tr>
        <td id="L5600" class="blob-num js-line-number" data-line-number="5600"></td>
        <td id="LC5600" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-smi">xhr</span>.<span class="pl-smi">response</span> <span class="pl-k">||</span> []);</td>
      </tr>
      <tr>
        <td id="L5601" class="blob-num js-line-number" data-line-number="5601"></td>
        <td id="LC5601" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5602" class="blob-num js-line-number" data-line-number="5602"></td>
        <td id="LC5602" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">return</span> <span class="pl-en">intArrayFromString</span>(<span class="pl-smi">xhr</span>.<span class="pl-c1">responseText</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L5603" class="blob-num js-line-number" data-line-number="5603"></td>
        <td id="LC5603" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5604" class="blob-num js-line-number" data-line-number="5604"></td>
        <td id="LC5604" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5605" class="blob-num js-line-number" data-line-number="5605"></td>
        <td id="LC5605" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lazyArray <span class="pl-k">=</span> <span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L5606" class="blob-num js-line-number" data-line-number="5606"></td>
        <td id="LC5606" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">lazyArray</span>.<span class="pl-en">setDataGetter</span>(<span class="pl-k">function</span>(<span class="pl-smi">chunkNum</span>) {</td>
      </tr>
      <tr>
        <td id="L5607" class="blob-num js-line-number" data-line-number="5607"></td>
        <td id="LC5607" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> start <span class="pl-k">=</span> chunkNum <span class="pl-k">*</span> chunkSize;</td>
      </tr>
      <tr>
        <td id="L5608" class="blob-num js-line-number" data-line-number="5608"></td>
        <td id="LC5608" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> end <span class="pl-k">=</span> (chunkNum<span class="pl-k">+</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> chunkSize <span class="pl-k">-</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">//</span> including this byte</span></td>
      </tr>
      <tr>
        <td id="L5609" class="blob-num js-line-number" data-line-number="5609"></td>
        <td id="LC5609" class="blob-code blob-code-inner js-file-line">            end <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(end, datalength<span class="pl-k">-</span><span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">//</span> if datalength-1 is selected, this is the last block</span></td>
      </tr>
      <tr>
        <td id="L5610" class="blob-num js-line-number" data-line-number="5610"></td>
        <td id="LC5610" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">typeof</span>(<span class="pl-smi">lazyArray</span>.<span class="pl-smi">chunks</span>[chunkNum]) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5611" class="blob-num js-line-number" data-line-number="5611"></td>
        <td id="LC5611" class="blob-code blob-code-inner js-file-line">              <span class="pl-smi">lazyArray</span>.<span class="pl-smi">chunks</span>[chunkNum] <span class="pl-k">=</span> <span class="pl-en">doXHR</span>(start, end);</td>
      </tr>
      <tr>
        <td id="L5612" class="blob-num js-line-number" data-line-number="5612"></td>
        <td id="LC5612" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5613" class="blob-num js-line-number" data-line-number="5613"></td>
        <td id="LC5613" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">typeof</span>(<span class="pl-smi">lazyArray</span>.<span class="pl-smi">chunks</span>[chunkNum]) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>doXHR failed!<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5614" class="blob-num js-line-number" data-line-number="5614"></td>
        <td id="LC5614" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">lazyArray</span>.<span class="pl-smi">chunks</span>[chunkNum];</td>
      </tr>
      <tr>
        <td id="L5615" class="blob-num js-line-number" data-line-number="5615"></td>
        <td id="LC5615" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5616" class="blob-num js-line-number" data-line-number="5616"></td>
        <td id="LC5616" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5617" class="blob-num js-line-number" data-line-number="5617"></td>
        <td id="LC5617" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (usesGzip <span class="pl-k">||</span> <span class="pl-k">!</span>datalength) {</td>
      </tr>
      <tr>
        <td id="L5618" class="blob-num js-line-number" data-line-number="5618"></td>
        <td id="LC5618" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> if the server uses gzip or doesn&#39;t supply the length, we have to download the whole file to get the (uncompressed) length</span></td>
      </tr>
      <tr>
        <td id="L5619" class="blob-num js-line-number" data-line-number="5619"></td>
        <td id="LC5619" class="blob-code blob-code-inner js-file-line">            chunkSize <span class="pl-k">=</span> datalength <span class="pl-k">=</span> <span class="pl-c1">1</span>; <span class="pl-c"><span class="pl-c">//</span> this will force getter(0)/doXHR do download the whole file</span></td>
      </tr>
      <tr>
        <td id="L5620" class="blob-num js-line-number" data-line-number="5620"></td>
        <td id="LC5620" class="blob-code blob-code-inner js-file-line">            datalength <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-en">getter</span>(<span class="pl-c1">0</span>).<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L5621" class="blob-num js-line-number" data-line-number="5621"></td>
        <td id="LC5621" class="blob-code blob-code-inner js-file-line">            chunkSize <span class="pl-k">=</span> datalength;</td>
      </tr>
      <tr>
        <td id="L5622" class="blob-num js-line-number" data-line-number="5622"></td>
        <td id="LC5622" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>LazyFiles on gzip forces download of the whole file when length is accessed<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5623" class="blob-num js-line-number" data-line-number="5623"></td>
        <td id="LC5623" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5624" class="blob-num js-line-number" data-line-number="5624"></td>
        <td id="LC5624" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5625" class="blob-num js-line-number" data-line-number="5625"></td>
        <td id="LC5625" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">_length</span> <span class="pl-k">=</span> datalength;</td>
      </tr>
      <tr>
        <td id="L5626" class="blob-num js-line-number" data-line-number="5626"></td>
        <td id="LC5626" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">_chunkSize</span> <span class="pl-k">=</span> chunkSize;</td>
      </tr>
      <tr>
        <td id="L5627" class="blob-num js-line-number" data-line-number="5627"></td>
        <td id="LC5627" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">this</span>.<span class="pl-smi">lengthKnown</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5628" class="blob-num js-line-number" data-line-number="5628"></td>
        <td id="LC5628" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5629" class="blob-num js-line-number" data-line-number="5629"></td>
        <td id="LC5629" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">XMLHttpRequest</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5630" class="blob-num js-line-number" data-line-number="5630"></td>
        <td id="LC5630" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5631" class="blob-num js-line-number" data-line-number="5631"></td>
        <td id="LC5631" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> lazyArray <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">LazyUint8Array</span>();</td>
      </tr>
      <tr>
        <td id="L5632" class="blob-num js-line-number" data-line-number="5632"></td>
        <td id="LC5632" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(lazyArray, {</td>
      </tr>
      <tr>
        <td id="L5633" class="blob-num js-line-number" data-line-number="5633"></td>
        <td id="LC5633" class="blob-code blob-code-inner js-file-line">            length<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L5634" class="blob-num js-line-number" data-line-number="5634"></td>
        <td id="LC5634" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5635" class="blob-num js-line-number" data-line-number="5635"></td>
        <td id="LC5635" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthKnown</span>) {</td>
      </tr>
      <tr>
        <td id="L5636" class="blob-num js-line-number" data-line-number="5636"></td>
        <td id="LC5636" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c1">this</span>.<span class="pl-en">cacheLength</span>();</td>
      </tr>
      <tr>
        <td id="L5637" class="blob-num js-line-number" data-line-number="5637"></td>
        <td id="LC5637" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L5638" class="blob-num js-line-number" data-line-number="5638"></td>
        <td id="LC5638" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_length</span>;</td>
      </tr>
      <tr>
        <td id="L5639" class="blob-num js-line-number" data-line-number="5639"></td>
        <td id="LC5639" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5640" class="blob-num js-line-number" data-line-number="5640"></td>
        <td id="LC5640" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L5641" class="blob-num js-line-number" data-line-number="5641"></td>
        <td id="LC5641" class="blob-code blob-code-inner js-file-line">            chunkSize<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L5642" class="blob-num js-line-number" data-line-number="5642"></td>
        <td id="LC5642" class="blob-code blob-code-inner js-file-line">              <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5643" class="blob-num js-line-number" data-line-number="5643"></td>
        <td id="LC5643" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-c1">this</span>.<span class="pl-smi">lengthKnown</span>) {</td>
      </tr>
      <tr>
        <td id="L5644" class="blob-num js-line-number" data-line-number="5644"></td>
        <td id="LC5644" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c1">this</span>.<span class="pl-en">cacheLength</span>();</td>
      </tr>
      <tr>
        <td id="L5645" class="blob-num js-line-number" data-line-number="5645"></td>
        <td id="LC5645" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L5646" class="blob-num js-line-number" data-line-number="5646"></td>
        <td id="LC5646" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">_chunkSize</span>;</td>
      </tr>
      <tr>
        <td id="L5647" class="blob-num js-line-number" data-line-number="5647"></td>
        <td id="LC5647" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5648" class="blob-num js-line-number" data-line-number="5648"></td>
        <td id="LC5648" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5649" class="blob-num js-line-number" data-line-number="5649"></td>
        <td id="LC5649" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5650" class="blob-num js-line-number" data-line-number="5650"></td>
        <td id="LC5650" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5651" class="blob-num js-line-number" data-line-number="5651"></td>
        <td id="LC5651" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> properties <span class="pl-k">=</span> { isDevice<span class="pl-k">:</span> <span class="pl-c1">false</span>, contents<span class="pl-k">:</span> lazyArray };</td>
      </tr>
      <tr>
        <td id="L5652" class="blob-num js-line-number" data-line-number="5652"></td>
        <td id="LC5652" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5653" class="blob-num js-line-number" data-line-number="5653"></td>
        <td id="LC5653" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> properties <span class="pl-k">=</span> { isDevice<span class="pl-k">:</span> <span class="pl-c1">false</span>, url<span class="pl-k">:</span> url };</td>
      </tr>
      <tr>
        <td id="L5654" class="blob-num js-line-number" data-line-number="5654"></td>
        <td id="LC5654" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5655" class="blob-num js-line-number" data-line-number="5655"></td>
        <td id="LC5655" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5656" class="blob-num js-line-number" data-line-number="5656"></td>
        <td id="LC5656" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">createFile</span>(parent, name, properties, canRead, canWrite);</td>
      </tr>
      <tr>
        <td id="L5657" class="blob-num js-line-number" data-line-number="5657"></td>
        <td id="LC5657" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> This is a total hack, but I want to get this lazy file code out of the</span></td>
      </tr>
      <tr>
        <td id="L5658" class="blob-num js-line-number" data-line-number="5658"></td>
        <td id="LC5658" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> core of MEMFS. If we want to keep this lazy file concept I feel it should</span></td>
      </tr>
      <tr>
        <td id="L5659" class="blob-num js-line-number" data-line-number="5659"></td>
        <td id="LC5659" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> be its own thin LAZYFS proxying calls to MEMFS.</span></td>
      </tr>
      <tr>
        <td id="L5660" class="blob-num js-line-number" data-line-number="5660"></td>
        <td id="LC5660" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">properties</span>.<span class="pl-smi">contents</span>) {</td>
      </tr>
      <tr>
        <td id="L5661" class="blob-num js-line-number" data-line-number="5661"></td>
        <td id="LC5661" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-smi">properties</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L5662" class="blob-num js-line-number" data-line-number="5662"></td>
        <td id="LC5662" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">properties</span>.<span class="pl-smi">url</span>) {</td>
      </tr>
      <tr>
        <td id="L5663" class="blob-num js-line-number" data-line-number="5663"></td>
        <td id="LC5663" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">contents</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L5664" class="blob-num js-line-number" data-line-number="5664"></td>
        <td id="LC5664" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">node</span>.<span class="pl-smi">url</span> <span class="pl-k">=</span> <span class="pl-smi">properties</span>.<span class="pl-smi">url</span>;</td>
      </tr>
      <tr>
        <td id="L5665" class="blob-num js-line-number" data-line-number="5665"></td>
        <td id="LC5665" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5666" class="blob-num js-line-number" data-line-number="5666"></td>
        <td id="LC5666" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Add a function that defers querying the file size until it is asked the first time.</span></td>
      </tr>
      <tr>
        <td id="L5667" class="blob-num js-line-number" data-line-number="5667"></td>
        <td id="LC5667" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Object</span>.<span class="pl-en">defineProperties</span>(node, {</td>
      </tr>
      <tr>
        <td id="L5668" class="blob-num js-line-number" data-line-number="5668"></td>
        <td id="LC5668" class="blob-code blob-code-inner js-file-line">          usedBytes<span class="pl-k">:</span> {</td>
      </tr>
      <tr>
        <td id="L5669" class="blob-num js-line-number" data-line-number="5669"></td>
        <td id="LC5669" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">contents</span>.<span class="pl-c1">length</span>; }</td>
      </tr>
      <tr>
        <td id="L5670" class="blob-num js-line-number" data-line-number="5670"></td>
        <td id="LC5670" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5671" class="blob-num js-line-number" data-line-number="5671"></td>
        <td id="LC5671" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L5672" class="blob-num js-line-number" data-line-number="5672"></td>
        <td id="LC5672" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> override each stream op with one that tries to force load the lazy file first</span></td>
      </tr>
      <tr>
        <td id="L5673" class="blob-num js-line-number" data-line-number="5673"></td>
        <td id="LC5673" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream_ops <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L5674" class="blob-num js-line-number" data-line-number="5674"></td>
        <td id="LC5674" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> keys <span class="pl-k">=</span> <span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(<span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span>);</td>
      </tr>
      <tr>
        <td id="L5675" class="blob-num js-line-number" data-line-number="5675"></td>
        <td id="LC5675" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">keys</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">key</span>) {</td>
      </tr>
      <tr>
        <td id="L5676" class="blob-num js-line-number" data-line-number="5676"></td>
        <td id="LC5676" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> fn <span class="pl-k">=</span> <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span>[key];</td>
      </tr>
      <tr>
        <td id="L5677" class="blob-num js-line-number" data-line-number="5677"></td>
        <td id="LC5677" class="blob-code blob-code-inner js-file-line">          stream_ops[key] <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">forceLoadLazyFile</span>() {</td>
      </tr>
      <tr>
        <td id="L5678" class="blob-num js-line-number" data-line-number="5678"></td>
        <td id="LC5678" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">forceLoadFile</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L5679" class="blob-num js-line-number" data-line-number="5679"></td>
        <td id="LC5679" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L5680" class="blob-num js-line-number" data-line-number="5680"></td>
        <td id="LC5680" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5681" class="blob-num js-line-number" data-line-number="5681"></td>
        <td id="LC5681" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">fn</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>);</td>
      </tr>
      <tr>
        <td id="L5682" class="blob-num js-line-number" data-line-number="5682"></td>
        <td id="LC5682" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L5683" class="blob-num js-line-number" data-line-number="5683"></td>
        <td id="LC5683" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L5684" class="blob-num js-line-number" data-line-number="5684"></td>
        <td id="LC5684" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> use a custom read function</span></td>
      </tr>
      <tr>
        <td id="L5685" class="blob-num js-line-number" data-line-number="5685"></td>
        <td id="LC5685" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">stream_ops</span>.<span class="pl-en">read</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">stream_ops_read</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">buffer</span>, <span class="pl-smi">offset</span>, <span class="pl-smi">length</span>, <span class="pl-smi">position</span>) {</td>
      </tr>
      <tr>
        <td id="L5686" class="blob-num js-line-number" data-line-number="5686"></td>
        <td id="LC5686" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">FS</span>.<span class="pl-en">forceLoadFile</span>(node)) {</td>
      </tr>
      <tr>
        <td id="L5687" class="blob-num js-line-number" data-line-number="5687"></td>
        <td id="LC5687" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">5</span>);</td>
      </tr>
      <tr>
        <td id="L5688" class="blob-num js-line-number" data-line-number="5688"></td>
        <td id="LC5688" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5689" class="blob-num js-line-number" data-line-number="5689"></td>
        <td id="LC5689" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> contents <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">node</span>.<span class="pl-smi">contents</span>;</td>
      </tr>
      <tr>
        <td id="L5690" class="blob-num js-line-number" data-line-number="5690"></td>
        <td id="LC5690" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (position <span class="pl-k">&gt;=</span> <span class="pl-smi">contents</span>.<span class="pl-c1">length</span>)</td>
      </tr>
      <tr>
        <td id="L5691" class="blob-num js-line-number" data-line-number="5691"></td>
        <td id="LC5691" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5692" class="blob-num js-line-number" data-line-number="5692"></td>
        <td id="LC5692" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> size <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-smi">contents</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> position, length);</td>
      </tr>
      <tr>
        <td id="L5693" class="blob-num js-line-number" data-line-number="5693"></td>
        <td id="LC5693" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">assert</span>(size <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5694" class="blob-num js-line-number" data-line-number="5694"></td>
        <td id="LC5694" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-smi">contents</span>.<span class="pl-smi">slice</span>) { <span class="pl-c"><span class="pl-c">//</span> normal array</span></td>
      </tr>
      <tr>
        <td id="L5695" class="blob-num js-line-number" data-line-number="5695"></td>
        <td id="LC5695" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> size; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5696" class="blob-num js-line-number" data-line-number="5696"></td>
        <td id="LC5696" class="blob-code blob-code-inner js-file-line">              buffer[offset <span class="pl-k">+</span> i] <span class="pl-k">=</span> contents[position <span class="pl-k">+</span> i];</td>
      </tr>
      <tr>
        <td id="L5697" class="blob-num js-line-number" data-line-number="5697"></td>
        <td id="LC5697" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5698" class="blob-num js-line-number" data-line-number="5698"></td>
        <td id="LC5698" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5699" class="blob-num js-line-number" data-line-number="5699"></td>
        <td id="LC5699" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> size; i<span class="pl-k">++</span>) { <span class="pl-c"><span class="pl-c">//</span> LazyUint8Array from sync binary XHR</span></td>
      </tr>
      <tr>
        <td id="L5700" class="blob-num js-line-number" data-line-number="5700"></td>
        <td id="LC5700" class="blob-code blob-code-inner js-file-line">              buffer[offset <span class="pl-k">+</span> i] <span class="pl-k">=</span> <span class="pl-smi">contents</span>.<span class="pl-c1">get</span>(position <span class="pl-k">+</span> i);</td>
      </tr>
      <tr>
        <td id="L5701" class="blob-num js-line-number" data-line-number="5701"></td>
        <td id="LC5701" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5702" class="blob-num js-line-number" data-line-number="5702"></td>
        <td id="LC5702" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5703" class="blob-num js-line-number" data-line-number="5703"></td>
        <td id="LC5703" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> size;</td>
      </tr>
      <tr>
        <td id="L5704" class="blob-num js-line-number" data-line-number="5704"></td>
        <td id="LC5704" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5705" class="blob-num js-line-number" data-line-number="5705"></td>
        <td id="LC5705" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">node</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">=</span> stream_ops;</td>
      </tr>
      <tr>
        <td id="L5706" class="blob-num js-line-number" data-line-number="5706"></td>
        <td id="LC5706" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> node;</td>
      </tr>
      <tr>
        <td id="L5707" class="blob-num js-line-number" data-line-number="5707"></td>
        <td id="LC5707" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">createPreloadedFile</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">parent</span>, <span class="pl-smi">name</span>, <span class="pl-smi">url</span>, <span class="pl-smi">canRead</span>, <span class="pl-smi">canWrite</span>, <span class="pl-smi">onload</span>, <span class="pl-smi">onerror</span>, <span class="pl-smi">dontCreateFile</span>, <span class="pl-smi">canOwn</span>, <span class="pl-smi">preFinish</span>) {</td>
      </tr>
      <tr>
        <td id="L5708" class="blob-num js-line-number" data-line-number="5708"></td>
        <td id="LC5708" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">Browser</span>.<span class="pl-en">init</span>(); <span class="pl-c"><span class="pl-c">//</span> XXX perhaps this method should move onto Browser?</span></td>
      </tr>
      <tr>
        <td id="L5709" class="blob-num js-line-number" data-line-number="5709"></td>
        <td id="LC5709" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> TODO we should allow people to just pass in a complete filename instead</span></td>
      </tr>
      <tr>
        <td id="L5710" class="blob-num js-line-number" data-line-number="5710"></td>
        <td id="LC5710" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> of parent and name being that we just join them anyways</span></td>
      </tr>
      <tr>
        <td id="L5711" class="blob-num js-line-number" data-line-number="5711"></td>
        <td id="LC5711" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> fullname <span class="pl-k">=</span> name <span class="pl-k">?</span> <span class="pl-c1">PATH_FS</span>.<span class="pl-en">resolve</span>(<span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(parent, name)) <span class="pl-k">:</span> parent;</td>
      </tr>
      <tr>
        <td id="L5712" class="blob-num js-line-number" data-line-number="5712"></td>
        <td id="LC5712" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> dep <span class="pl-k">=</span> <span class="pl-en">getUniqueRunDependency</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>cp <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> fullname); <span class="pl-c"><span class="pl-c">//</span> might have several active requests for the same fullname</span></td>
      </tr>
      <tr>
        <td id="L5713" class="blob-num js-line-number" data-line-number="5713"></td>
        <td id="LC5713" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">function</span> <span class="pl-en">processData</span>(<span class="pl-smi">byteArray</span>) {</td>
      </tr>
      <tr>
        <td id="L5714" class="blob-num js-line-number" data-line-number="5714"></td>
        <td id="LC5714" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">function</span> <span class="pl-en">finish</span>(<span class="pl-smi">byteArray</span>) {</td>
      </tr>
      <tr>
        <td id="L5715" class="blob-num js-line-number" data-line-number="5715"></td>
        <td id="LC5715" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (preFinish) <span class="pl-en">preFinish</span>();</td>
      </tr>
      <tr>
        <td id="L5716" class="blob-num js-line-number" data-line-number="5716"></td>
        <td id="LC5716" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>dontCreateFile) {</td>
      </tr>
      <tr>
        <td id="L5717" class="blob-num js-line-number" data-line-number="5717"></td>
        <td id="LC5717" class="blob-code blob-code-inner js-file-line">              <span class="pl-c1">FS</span>.<span class="pl-en">createDataFile</span>(parent, name, byteArray, canRead, canWrite, canOwn);</td>
      </tr>
      <tr>
        <td id="L5718" class="blob-num js-line-number" data-line-number="5718"></td>
        <td id="LC5718" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5719" class="blob-num js-line-number" data-line-number="5719"></td>
        <td id="LC5719" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (onload) <span class="pl-en">onload</span>();</td>
      </tr>
      <tr>
        <td id="L5720" class="blob-num js-line-number" data-line-number="5720"></td>
        <td id="LC5720" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">removeRunDependency</span>(dep);</td>
      </tr>
      <tr>
        <td id="L5721" class="blob-num js-line-number" data-line-number="5721"></td>
        <td id="LC5721" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5722" class="blob-num js-line-number" data-line-number="5722"></td>
        <td id="LC5722" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> handled <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L5723" class="blob-num js-line-number" data-line-number="5723"></td>
        <td id="LC5723" class="blob-code blob-code-inner js-file-line">          Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preloadPlugins<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">plugin</span>) {</td>
      </tr>
      <tr>
        <td id="L5724" class="blob-num js-line-number" data-line-number="5724"></td>
        <td id="LC5724" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (handled) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L5725" class="blob-num js-line-number" data-line-number="5725"></td>
        <td id="LC5725" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (plugin[<span class="pl-s"><span class="pl-pds">&#39;</span>canHandle<span class="pl-pds">&#39;</span></span>](fullname)) {</td>
      </tr>
      <tr>
        <td id="L5726" class="blob-num js-line-number" data-line-number="5726"></td>
        <td id="LC5726" class="blob-code blob-code-inner js-file-line">              plugin[<span class="pl-s"><span class="pl-pds">&#39;</span>handle<span class="pl-pds">&#39;</span></span>](byteArray, fullname, finish, <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5727" class="blob-num js-line-number" data-line-number="5727"></td>
        <td id="LC5727" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (onerror) <span class="pl-en">onerror</span>();</td>
      </tr>
      <tr>
        <td id="L5728" class="blob-num js-line-number" data-line-number="5728"></td>
        <td id="LC5728" class="blob-code blob-code-inner js-file-line">                <span class="pl-en">removeRunDependency</span>(dep);</td>
      </tr>
      <tr>
        <td id="L5729" class="blob-num js-line-number" data-line-number="5729"></td>
        <td id="LC5729" class="blob-code blob-code-inner js-file-line">              });</td>
      </tr>
      <tr>
        <td id="L5730" class="blob-num js-line-number" data-line-number="5730"></td>
        <td id="LC5730" class="blob-code blob-code-inner js-file-line">              handled <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L5731" class="blob-num js-line-number" data-line-number="5731"></td>
        <td id="LC5731" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5732" class="blob-num js-line-number" data-line-number="5732"></td>
        <td id="LC5732" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5733" class="blob-num js-line-number" data-line-number="5733"></td>
        <td id="LC5733" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">!</span>handled) <span class="pl-en">finish</span>(byteArray);</td>
      </tr>
      <tr>
        <td id="L5734" class="blob-num js-line-number" data-line-number="5734"></td>
        <td id="LC5734" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5735" class="blob-num js-line-number" data-line-number="5735"></td>
        <td id="LC5735" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">addRunDependency</span>(dep);</td>
      </tr>
      <tr>
        <td id="L5736" class="blob-num js-line-number" data-line-number="5736"></td>
        <td id="LC5736" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">typeof</span> url <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>string<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5737" class="blob-num js-line-number" data-line-number="5737"></td>
        <td id="LC5737" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">Browser</span>.<span class="pl-en">asyncLoad</span>(url, <span class="pl-k">function</span>(<span class="pl-smi">byteArray</span>) {</td>
      </tr>
      <tr>
        <td id="L5738" class="blob-num js-line-number" data-line-number="5738"></td>
        <td id="LC5738" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">processData</span>(byteArray);</td>
      </tr>
      <tr>
        <td id="L5739" class="blob-num js-line-number" data-line-number="5739"></td>
        <td id="LC5739" class="blob-code blob-code-inner js-file-line">          }, onerror);</td>
      </tr>
      <tr>
        <td id="L5740" class="blob-num js-line-number" data-line-number="5740"></td>
        <td id="LC5740" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5741" class="blob-num js-line-number" data-line-number="5741"></td>
        <td id="LC5741" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">processData</span>(url);</td>
      </tr>
      <tr>
        <td id="L5742" class="blob-num js-line-number" data-line-number="5742"></td>
        <td id="LC5742" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5743" class="blob-num js-line-number" data-line-number="5743"></td>
        <td id="LC5743" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">indexedDB</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5744" class="blob-num js-line-number" data-line-number="5744"></td>
        <td id="LC5744" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">window</span>.<span class="pl-smi">indexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">mozIndexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">webkitIndexedDB</span> <span class="pl-k">||</span> <span class="pl-c1">window</span>.<span class="pl-smi">msIndexedDB</span>;</td>
      </tr>
      <tr>
        <td id="L5745" class="blob-num js-line-number" data-line-number="5745"></td>
        <td id="LC5745" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">DB_NAME</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5746" class="blob-num js-line-number" data-line-number="5746"></td>
        <td id="LC5746" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>EM_FS_<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">window</span>.<span class="pl-c1">location</span>.<span class="pl-c1">pathname</span>;</td>
      </tr>
      <tr>
        <td id="L5747" class="blob-num js-line-number" data-line-number="5747"></td>
        <td id="LC5747" class="blob-code blob-code-inner js-file-line">      },<span class="pl-c1">DB_VERSION</span><span class="pl-k">:</span><span class="pl-c1">20</span>,<span class="pl-c1">DB_STORE_NAME</span><span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">&quot;</span>FILE_DATA<span class="pl-pds">&quot;</span></span>,<span class="pl-en">saveFilesToDB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">paths</span>, <span class="pl-smi">onload</span>, <span class="pl-smi">onerror</span>) {</td>
      </tr>
      <tr>
        <td id="L5748" class="blob-num js-line-number" data-line-number="5748"></td>
        <td id="LC5748" class="blob-code blob-code-inner js-file-line">        onload <span class="pl-k">=</span> onload <span class="pl-k">||</span> <span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L5749" class="blob-num js-line-number" data-line-number="5749"></td>
        <td id="LC5749" class="blob-code blob-code-inner js-file-line">        onerror <span class="pl-k">=</span> onerror <span class="pl-k">||</span> <span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L5750" class="blob-num js-line-number" data-line-number="5750"></td>
        <td id="LC5750" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> indexedDB <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">indexedDB</span>();</td>
      </tr>
      <tr>
        <td id="L5751" class="blob-num js-line-number" data-line-number="5751"></td>
        <td id="LC5751" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5752" class="blob-num js-line-number" data-line-number="5752"></td>
        <td id="LC5752" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> openRequest <span class="pl-k">=</span> <span class="pl-smi">indexedDB</span>.<span class="pl-c1">open</span>(<span class="pl-c1">FS</span>.<span class="pl-en">DB_NAME</span>(), <span class="pl-c1">FS</span>.<span class="pl-c1">DB_VERSION</span>);</td>
      </tr>
      <tr>
        <td id="L5753" class="blob-num js-line-number" data-line-number="5753"></td>
        <td id="LC5753" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5754" class="blob-num js-line-number" data-line-number="5754"></td>
        <td id="LC5754" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">onerror</span>(e);</td>
      </tr>
      <tr>
        <td id="L5755" class="blob-num js-line-number" data-line-number="5755"></td>
        <td id="LC5755" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5756" class="blob-num js-line-number" data-line-number="5756"></td>
        <td id="LC5756" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-en">onupgradeneeded</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">openRequest_onupgradeneeded</span>() {</td>
      </tr>
      <tr>
        <td id="L5757" class="blob-num js-line-number" data-line-number="5757"></td>
        <td id="LC5757" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>creating db<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5758" class="blob-num js-line-number" data-line-number="5758"></td>
        <td id="LC5758" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-smi">openRequest</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L5759" class="blob-num js-line-number" data-line-number="5759"></td>
        <td id="LC5759" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">db</span>.<span class="pl-en">createObjectStore</span>(<span class="pl-c1">FS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L5760" class="blob-num js-line-number" data-line-number="5760"></td>
        <td id="LC5760" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5761" class="blob-num js-line-number" data-line-number="5761"></td>
        <td id="LC5761" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">openRequest_onsuccess</span>() {</td>
      </tr>
      <tr>
        <td id="L5762" class="blob-num js-line-number" data-line-number="5762"></td>
        <td id="LC5762" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-smi">openRequest</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L5763" class="blob-num js-line-number" data-line-number="5763"></td>
        <td id="LC5763" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> transaction <span class="pl-k">=</span> <span class="pl-smi">db</span>.<span class="pl-en">transaction</span>([<span class="pl-c1">FS</span>.<span class="pl-c1">DB_STORE_NAME</span>], <span class="pl-s"><span class="pl-pds">&#39;</span>readwrite<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5764" class="blob-num js-line-number" data-line-number="5764"></td>
        <td id="LC5764" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> files <span class="pl-k">=</span> <span class="pl-smi">transaction</span>.<span class="pl-en">objectStore</span>(<span class="pl-c1">FS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L5765" class="blob-num js-line-number" data-line-number="5765"></td>
        <td id="LC5765" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ok <span class="pl-k">=</span> <span class="pl-c1">0</span>, fail <span class="pl-k">=</span> <span class="pl-c1">0</span>, total <span class="pl-k">=</span> <span class="pl-smi">paths</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L5766" class="blob-num js-line-number" data-line-number="5766"></td>
        <td id="LC5766" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">function</span> <span class="pl-en">finish</span>() {</td>
      </tr>
      <tr>
        <td id="L5767" class="blob-num js-line-number" data-line-number="5767"></td>
        <td id="LC5767" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (fail <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-en">onload</span>(); <span class="pl-k">else</span> <span class="pl-en">onerror</span>();</td>
      </tr>
      <tr>
        <td id="L5768" class="blob-num js-line-number" data-line-number="5768"></td>
        <td id="LC5768" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5769" class="blob-num js-line-number" data-line-number="5769"></td>
        <td id="LC5769" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">paths</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L5770" class="blob-num js-line-number" data-line-number="5770"></td>
        <td id="LC5770" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> putRequest <span class="pl-k">=</span> <span class="pl-smi">files</span>.<span class="pl-en">put</span>(<span class="pl-c1">FS</span>.<span class="pl-en">analyzePath</span>(path).<span class="pl-c1">object</span>.<span class="pl-smi">contents</span>, path);</td>
      </tr>
      <tr>
        <td id="L5771" class="blob-num js-line-number" data-line-number="5771"></td>
        <td id="LC5771" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">putRequest</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">putRequest_onsuccess</span>() { ok<span class="pl-k">++</span>; <span class="pl-k">if</span> (ok <span class="pl-k">+</span> fail <span class="pl-k">==</span> total) <span class="pl-en">finish</span>() };</td>
      </tr>
      <tr>
        <td id="L5772" class="blob-num js-line-number" data-line-number="5772"></td>
        <td id="LC5772" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">putRequest</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">putRequest_onerror</span>() { fail<span class="pl-k">++</span>; <span class="pl-k">if</span> (ok <span class="pl-k">+</span> fail <span class="pl-k">==</span> total) <span class="pl-en">finish</span>() };</td>
      </tr>
      <tr>
        <td id="L5773" class="blob-num js-line-number" data-line-number="5773"></td>
        <td id="LC5773" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5774" class="blob-num js-line-number" data-line-number="5774"></td>
        <td id="LC5774" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">transaction</span>.<span class="pl-smi">onerror</span> <span class="pl-k">=</span> onerror;</td>
      </tr>
      <tr>
        <td id="L5775" class="blob-num js-line-number" data-line-number="5775"></td>
        <td id="LC5775" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5776" class="blob-num js-line-number" data-line-number="5776"></td>
        <td id="LC5776" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-smi">onerror</span> <span class="pl-k">=</span> onerror;</td>
      </tr>
      <tr>
        <td id="L5777" class="blob-num js-line-number" data-line-number="5777"></td>
        <td id="LC5777" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">loadFilesFromDB</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">paths</span>, <span class="pl-smi">onload</span>, <span class="pl-smi">onerror</span>) {</td>
      </tr>
      <tr>
        <td id="L5778" class="blob-num js-line-number" data-line-number="5778"></td>
        <td id="LC5778" class="blob-code blob-code-inner js-file-line">        onload <span class="pl-k">=</span> onload <span class="pl-k">||</span> <span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L5779" class="blob-num js-line-number" data-line-number="5779"></td>
        <td id="LC5779" class="blob-code blob-code-inner js-file-line">        onerror <span class="pl-k">=</span> onerror <span class="pl-k">||</span> <span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L5780" class="blob-num js-line-number" data-line-number="5780"></td>
        <td id="LC5780" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> indexedDB <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">indexedDB</span>();</td>
      </tr>
      <tr>
        <td id="L5781" class="blob-num js-line-number" data-line-number="5781"></td>
        <td id="LC5781" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5782" class="blob-num js-line-number" data-line-number="5782"></td>
        <td id="LC5782" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> openRequest <span class="pl-k">=</span> <span class="pl-smi">indexedDB</span>.<span class="pl-c1">open</span>(<span class="pl-c1">FS</span>.<span class="pl-en">DB_NAME</span>(), <span class="pl-c1">FS</span>.<span class="pl-c1">DB_VERSION</span>);</td>
      </tr>
      <tr>
        <td id="L5783" class="blob-num js-line-number" data-line-number="5783"></td>
        <td id="LC5783" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5784" class="blob-num js-line-number" data-line-number="5784"></td>
        <td id="LC5784" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-en">onerror</span>(e);</td>
      </tr>
      <tr>
        <td id="L5785" class="blob-num js-line-number" data-line-number="5785"></td>
        <td id="LC5785" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5786" class="blob-num js-line-number" data-line-number="5786"></td>
        <td id="LC5786" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-smi">onupgradeneeded</span> <span class="pl-k">=</span> onerror; <span class="pl-c"><span class="pl-c">//</span> no database to load from</span></td>
      </tr>
      <tr>
        <td id="L5787" class="blob-num js-line-number" data-line-number="5787"></td>
        <td id="LC5787" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">openRequest_onsuccess</span>() {</td>
      </tr>
      <tr>
        <td id="L5788" class="blob-num js-line-number" data-line-number="5788"></td>
        <td id="LC5788" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> db <span class="pl-k">=</span> <span class="pl-smi">openRequest</span>.<span class="pl-smi">result</span>;</td>
      </tr>
      <tr>
        <td id="L5789" class="blob-num js-line-number" data-line-number="5789"></td>
        <td id="LC5789" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5790" class="blob-num js-line-number" data-line-number="5790"></td>
        <td id="LC5790" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> transaction <span class="pl-k">=</span> <span class="pl-smi">db</span>.<span class="pl-en">transaction</span>([<span class="pl-c1">FS</span>.<span class="pl-c1">DB_STORE_NAME</span>], <span class="pl-s"><span class="pl-pds">&#39;</span>readonly<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L5791" class="blob-num js-line-number" data-line-number="5791"></td>
        <td id="LC5791" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L5792" class="blob-num js-line-number" data-line-number="5792"></td>
        <td id="LC5792" class="blob-code blob-code-inner js-file-line">            <span class="pl-en">onerror</span>(e);</td>
      </tr>
      <tr>
        <td id="L5793" class="blob-num js-line-number" data-line-number="5793"></td>
        <td id="LC5793" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L5794" class="blob-num js-line-number" data-line-number="5794"></td>
        <td id="LC5794" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5795" class="blob-num js-line-number" data-line-number="5795"></td>
        <td id="LC5795" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> files <span class="pl-k">=</span> <span class="pl-smi">transaction</span>.<span class="pl-en">objectStore</span>(<span class="pl-c1">FS</span>.<span class="pl-c1">DB_STORE_NAME</span>);</td>
      </tr>
      <tr>
        <td id="L5796" class="blob-num js-line-number" data-line-number="5796"></td>
        <td id="LC5796" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ok <span class="pl-k">=</span> <span class="pl-c1">0</span>, fail <span class="pl-k">=</span> <span class="pl-c1">0</span>, total <span class="pl-k">=</span> <span class="pl-smi">paths</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L5797" class="blob-num js-line-number" data-line-number="5797"></td>
        <td id="LC5797" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">function</span> <span class="pl-en">finish</span>() {</td>
      </tr>
      <tr>
        <td id="L5798" class="blob-num js-line-number" data-line-number="5798"></td>
        <td id="LC5798" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (fail <span class="pl-k">==</span> <span class="pl-c1">0</span>) <span class="pl-en">onload</span>(); <span class="pl-k">else</span> <span class="pl-en">onerror</span>();</td>
      </tr>
      <tr>
        <td id="L5799" class="blob-num js-line-number" data-line-number="5799"></td>
        <td id="LC5799" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5800" class="blob-num js-line-number" data-line-number="5800"></td>
        <td id="LC5800" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">paths</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L5801" class="blob-num js-line-number" data-line-number="5801"></td>
        <td id="LC5801" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> getRequest <span class="pl-k">=</span> <span class="pl-smi">files</span>.<span class="pl-c1">get</span>(path);</td>
      </tr>
      <tr>
        <td id="L5802" class="blob-num js-line-number" data-line-number="5802"></td>
        <td id="LC5802" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">getRequest</span>.<span class="pl-en">onsuccess</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">getRequest_onsuccess</span>() {</td>
      </tr>
      <tr>
        <td id="L5803" class="blob-num js-line-number" data-line-number="5803"></td>
        <td id="LC5803" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (<span class="pl-c1">FS</span>.<span class="pl-en">analyzePath</span>(path).<span class="pl-smi">exists</span>) {</td>
      </tr>
      <tr>
        <td id="L5804" class="blob-num js-line-number" data-line-number="5804"></td>
        <td id="LC5804" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">FS</span>.<span class="pl-en">unlink</span>(path);</td>
      </tr>
      <tr>
        <td id="L5805" class="blob-num js-line-number" data-line-number="5805"></td>
        <td id="LC5805" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L5806" class="blob-num js-line-number" data-line-number="5806"></td>
        <td id="LC5806" class="blob-code blob-code-inner js-file-line">              <span class="pl-c1">FS</span>.<span class="pl-en">createDataFile</span>(<span class="pl-c1">PATH</span>.<span class="pl-en">dirname</span>(path), <span class="pl-c1">PATH</span>.<span class="pl-en">basename</span>(path), <span class="pl-smi">getRequest</span>.<span class="pl-smi">result</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L5807" class="blob-num js-line-number" data-line-number="5807"></td>
        <td id="LC5807" class="blob-code blob-code-inner js-file-line">              ok<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L5808" class="blob-num js-line-number" data-line-number="5808"></td>
        <td id="LC5808" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (ok <span class="pl-k">+</span> fail <span class="pl-k">==</span> total) <span class="pl-en">finish</span>();</td>
      </tr>
      <tr>
        <td id="L5809" class="blob-num js-line-number" data-line-number="5809"></td>
        <td id="LC5809" class="blob-code blob-code-inner js-file-line">            };</td>
      </tr>
      <tr>
        <td id="L5810" class="blob-num js-line-number" data-line-number="5810"></td>
        <td id="LC5810" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">getRequest</span>.<span class="pl-en">onerror</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">getRequest_onerror</span>() { fail<span class="pl-k">++</span>; <span class="pl-k">if</span> (ok <span class="pl-k">+</span> fail <span class="pl-k">==</span> total) <span class="pl-en">finish</span>() };</td>
      </tr>
      <tr>
        <td id="L5811" class="blob-num js-line-number" data-line-number="5811"></td>
        <td id="LC5811" class="blob-code blob-code-inner js-file-line">          });</td>
      </tr>
      <tr>
        <td id="L5812" class="blob-num js-line-number" data-line-number="5812"></td>
        <td id="LC5812" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">transaction</span>.<span class="pl-smi">onerror</span> <span class="pl-k">=</span> onerror;</td>
      </tr>
      <tr>
        <td id="L5813" class="blob-num js-line-number" data-line-number="5813"></td>
        <td id="LC5813" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L5814" class="blob-num js-line-number" data-line-number="5814"></td>
        <td id="LC5814" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">openRequest</span>.<span class="pl-smi">onerror</span> <span class="pl-k">=</span> onerror;</td>
      </tr>
      <tr>
        <td id="L5815" class="blob-num js-line-number" data-line-number="5815"></td>
        <td id="LC5815" class="blob-code blob-code-inner js-file-line">      }};<span class="pl-k">var</span> <span class="pl-c1">SYSCALLS</span><span class="pl-k">=</span>{<span class="pl-c1">DEFAULT_POLLMASK</span><span class="pl-k">:</span><span class="pl-c1">5</span>,mappings<span class="pl-k">:</span>{},umask<span class="pl-k">:</span><span class="pl-c1">511</span>,<span class="pl-en">calculateAt</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">dirfd</span>, <span class="pl-smi">path</span>) {</td>
      </tr>
      <tr>
        <td id="L5816" class="blob-num js-line-number" data-line-number="5816"></td>
        <td id="LC5816" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (path[<span class="pl-c1">0</span>] <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L5817" class="blob-num js-line-number" data-line-number="5817"></td>
        <td id="LC5817" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> relative path</span></td>
      </tr>
      <tr>
        <td id="L5818" class="blob-num js-line-number" data-line-number="5818"></td>
        <td id="LC5818" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> dir;</td>
      </tr>
      <tr>
        <td id="L5819" class="blob-num js-line-number" data-line-number="5819"></td>
        <td id="LC5819" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (dirfd <span class="pl-k">===</span> <span class="pl-k">-</span><span class="pl-c1">100</span>) {</td>
      </tr>
      <tr>
        <td id="L5820" class="blob-num js-line-number" data-line-number="5820"></td>
        <td id="LC5820" class="blob-code blob-code-inner js-file-line">            dir <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">cwd</span>();</td>
      </tr>
      <tr>
        <td id="L5821" class="blob-num js-line-number" data-line-number="5821"></td>
        <td id="LC5821" class="blob-code blob-code-inner js-file-line">          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L5822" class="blob-num js-line-number" data-line-number="5822"></td>
        <td id="LC5822" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> dirstream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(dirfd);</td>
      </tr>
      <tr>
        <td id="L5823" class="blob-num js-line-number" data-line-number="5823"></td>
        <td id="LC5823" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-k">!</span>dirstream) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5824" class="blob-num js-line-number" data-line-number="5824"></td>
        <td id="LC5824" class="blob-code blob-code-inner js-file-line">            dir <span class="pl-k">=</span> <span class="pl-smi">dirstream</span>.<span class="pl-smi">path</span>;</td>
      </tr>
      <tr>
        <td id="L5825" class="blob-num js-line-number" data-line-number="5825"></td>
        <td id="LC5825" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5826" class="blob-num js-line-number" data-line-number="5826"></td>
        <td id="LC5826" class="blob-code blob-code-inner js-file-line">          path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-en">join2</span>(dir, path);</td>
      </tr>
      <tr>
        <td id="L5827" class="blob-num js-line-number" data-line-number="5827"></td>
        <td id="LC5827" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5828" class="blob-num js-line-number" data-line-number="5828"></td>
        <td id="LC5828" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> path;</td>
      </tr>
      <tr>
        <td id="L5829" class="blob-num js-line-number" data-line-number="5829"></td>
        <td id="LC5829" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doStat</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">func</span>, <span class="pl-smi">path</span>, <span class="pl-smi">buf</span>) {</td>
      </tr>
      <tr>
        <td id="L5830" class="blob-num js-line-number" data-line-number="5830"></td>
        <td id="LC5830" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5831" class="blob-num js-line-number" data-line-number="5831"></td>
        <td id="LC5831" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> stat <span class="pl-k">=</span> <span class="pl-en">func</span>(path);</td>
      </tr>
      <tr>
        <td id="L5832" class="blob-num js-line-number" data-line-number="5832"></td>
        <td id="LC5832" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5833" class="blob-num js-line-number" data-line-number="5833"></td>
        <td id="LC5833" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (e <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">e</span>.<span class="pl-smi">node</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(path) <span class="pl-k">!==</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(<span class="pl-c1">FS</span>.<span class="pl-en">getPath</span>(<span class="pl-smi">e</span>.<span class="pl-smi">node</span>))) {</td>
      </tr>
      <tr>
        <td id="L5834" class="blob-num js-line-number" data-line-number="5834"></td>
        <td id="LC5834" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> an error occurred while trying to look up the path; we should just report ENOTDIR</span></td>
      </tr>
      <tr>
        <td id="L5835" class="blob-num js-line-number" data-line-number="5835"></td>
        <td id="LC5835" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">20</span>;</td>
      </tr>
      <tr>
        <td id="L5836" class="blob-num js-line-number" data-line-number="5836"></td>
        <td id="LC5836" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L5837" class="blob-num js-line-number" data-line-number="5837"></td>
        <td id="LC5837" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">throw</span> e;</td>
      </tr>
      <tr>
        <td id="L5838" class="blob-num js-line-number" data-line-number="5838"></td>
        <td id="LC5838" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5839" class="blob-num js-line-number" data-line-number="5839"></td>
        <td id="LC5839" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((buf)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">dev</span>;</td>
      </tr>
      <tr>
        <td id="L5840" class="blob-num js-line-number" data-line-number="5840"></td>
        <td id="LC5840" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5841" class="blob-num js-line-number" data-line-number="5841"></td>
        <td id="LC5841" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">8</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">ino</span>;</td>
      </tr>
      <tr>
        <td id="L5842" class="blob-num js-line-number" data-line-number="5842"></td>
        <td id="LC5842" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">12</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">mode</span>;</td>
      </tr>
      <tr>
        <td id="L5843" class="blob-num js-line-number" data-line-number="5843"></td>
        <td id="LC5843" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">16</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">nlink</span>;</td>
      </tr>
      <tr>
        <td id="L5844" class="blob-num js-line-number" data-line-number="5844"></td>
        <td id="LC5844" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">20</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">uid</span>;</td>
      </tr>
      <tr>
        <td id="L5845" class="blob-num js-line-number" data-line-number="5845"></td>
        <td id="LC5845" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">24</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">gid</span>;</td>
      </tr>
      <tr>
        <td id="L5846" class="blob-num js-line-number" data-line-number="5846"></td>
        <td id="LC5846" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">28</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">rdev</span>;</td>
      </tr>
      <tr>
        <td id="L5847" class="blob-num js-line-number" data-line-number="5847"></td>
        <td id="LC5847" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">32</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5848" class="blob-num js-line-number" data-line-number="5848"></td>
        <td id="LC5848" class="blob-code blob-code-inner js-file-line">        (tempI64 <span class="pl-k">=</span> [<span class="pl-smi">stat</span>.<span class="pl-c1">size</span><span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>,(tempDouble<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-c1">size</span>,(<span class="pl-k">+</span>(<span class="pl-en">Math_abs</span>(tempDouble))) <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span> <span class="pl-k">?</span> (tempDouble <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span> <span class="pl-k">?</span> ((<span class="pl-en">Math_min</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_floor</span>((tempDouble)<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>))), <span class="pl-c1">4294967295.0</span>))<span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span> <span class="pl-k">:</span> (<span class="pl-k">~~</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_ceil</span>((tempDouble <span class="pl-k">-</span> <span class="pl-k">+</span>(((<span class="pl-k">~~</span>(tempDouble)))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>)))))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>) <span class="pl-k">:</span> <span class="pl-c1">0</span>)],<span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">40</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">0</span>],<span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">44</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">1</span>]);</td>
      </tr>
      <tr>
        <td id="L5849" class="blob-num js-line-number" data-line-number="5849"></td>
        <td id="LC5849" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">48</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">4096</span>;</td>
      </tr>
      <tr>
        <td id="L5850" class="blob-num js-line-number" data-line-number="5850"></td>
        <td id="LC5850" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">52</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">blocks</span>;</td>
      </tr>
      <tr>
        <td id="L5851" class="blob-num js-line-number" data-line-number="5851"></td>
        <td id="LC5851" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">56</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">atime</span>.<span class="pl-c1">getTime</span>() <span class="pl-k">/</span> <span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5852" class="blob-num js-line-number" data-line-number="5852"></td>
        <td id="LC5852" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">60</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5853" class="blob-num js-line-number" data-line-number="5853"></td>
        <td id="LC5853" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">64</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">mtime</span>.<span class="pl-c1">getTime</span>() <span class="pl-k">/</span> <span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5854" class="blob-num js-line-number" data-line-number="5854"></td>
        <td id="LC5854" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">68</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5855" class="blob-num js-line-number" data-line-number="5855"></td>
        <td id="LC5855" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">72</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>(<span class="pl-smi">stat</span>.<span class="pl-smi">ctime</span>.<span class="pl-c1">getTime</span>() <span class="pl-k">/</span> <span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5856" class="blob-num js-line-number" data-line-number="5856"></td>
        <td id="LC5856" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">76</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5857" class="blob-num js-line-number" data-line-number="5857"></td>
        <td id="LC5857" class="blob-code blob-code-inner js-file-line">        (tempI64 <span class="pl-k">=</span> [<span class="pl-smi">stat</span>.<span class="pl-smi">ino</span><span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>,(tempDouble<span class="pl-k">=</span><span class="pl-smi">stat</span>.<span class="pl-smi">ino</span>,(<span class="pl-k">+</span>(<span class="pl-en">Math_abs</span>(tempDouble))) <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span> <span class="pl-k">?</span> (tempDouble <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span> <span class="pl-k">?</span> ((<span class="pl-en">Math_min</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_floor</span>((tempDouble)<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>))), <span class="pl-c1">4294967295.0</span>))<span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span> <span class="pl-k">:</span> (<span class="pl-k">~~</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_ceil</span>((tempDouble <span class="pl-k">-</span> <span class="pl-k">+</span>(((<span class="pl-k">~~</span>(tempDouble)))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>)))))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>) <span class="pl-k">:</span> <span class="pl-c1">0</span>)],<span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">80</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">0</span>],<span class="pl-c1">HEAP32</span>[(((buf)<span class="pl-k">+</span>(<span class="pl-c1">84</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">1</span>]);</td>
      </tr>
      <tr>
        <td id="L5858" class="blob-num js-line-number" data-line-number="5858"></td>
        <td id="LC5858" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5859" class="blob-num js-line-number" data-line-number="5859"></td>
        <td id="LC5859" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doMsync</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">addr</span>, <span class="pl-smi">stream</span>, <span class="pl-smi">len</span>, <span class="pl-smi">flags</span>) {</td>
      </tr>
      <tr>
        <td id="L5860" class="blob-num js-line-number" data-line-number="5860"></td>
        <td id="LC5860" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> buffer <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Uint8Array</span>(<span class="pl-c1">HEAPU8</span>.<span class="pl-en">subarray</span>(addr, addr <span class="pl-k">+</span> len));</td>
      </tr>
      <tr>
        <td id="L5861" class="blob-num js-line-number" data-line-number="5861"></td>
        <td id="LC5861" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">msync</span>(stream, buffer, <span class="pl-c1">0</span>, len, flags);</td>
      </tr>
      <tr>
        <td id="L5862" class="blob-num js-line-number" data-line-number="5862"></td>
        <td id="LC5862" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doMkdir</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>) {</td>
      </tr>
      <tr>
        <td id="L5863" class="blob-num js-line-number" data-line-number="5863"></td>
        <td id="LC5863" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> remove a trailing slash, if one - /a/b/ has basename of &#39;&#39;, but</span></td>
      </tr>
      <tr>
        <td id="L5864" class="blob-num js-line-number" data-line-number="5864"></td>
        <td id="LC5864" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> we want to create b in the context of this function</span></td>
      </tr>
      <tr>
        <td id="L5865" class="blob-num js-line-number" data-line-number="5865"></td>
        <td id="LC5865" class="blob-code blob-code-inner js-file-line">        path <span class="pl-k">=</span> <span class="pl-c1">PATH</span>.<span class="pl-c1">normalize</span>(path);</td>
      </tr>
      <tr>
        <td id="L5866" class="blob-num js-line-number" data-line-number="5866"></td>
        <td id="LC5866" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (path[<span class="pl-smi">path</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>) path <span class="pl-k">=</span> <span class="pl-smi">path</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-smi">path</span>.<span class="pl-c1">length</span><span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5867" class="blob-num js-line-number" data-line-number="5867"></td>
        <td id="LC5867" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mkdir</span>(path, mode, <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5868" class="blob-num js-line-number" data-line-number="5868"></td>
        <td id="LC5868" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5869" class="blob-num js-line-number" data-line-number="5869"></td>
        <td id="LC5869" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doMknod</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">mode</span>, <span class="pl-smi">dev</span>) {</td>
      </tr>
      <tr>
        <td id="L5870" class="blob-num js-line-number" data-line-number="5870"></td>
        <td id="LC5870" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> we don&#39;t want this in the JS API as it uses mknod to create all nodes.</span></td>
      </tr>
      <tr>
        <td id="L5871" class="blob-num js-line-number" data-line-number="5871"></td>
        <td id="LC5871" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">switch</span> (mode <span class="pl-k">&amp;</span> <span class="pl-c1">61440</span>) {</td>
      </tr>
      <tr>
        <td id="L5872" class="blob-num js-line-number" data-line-number="5872"></td>
        <td id="LC5872" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">case</span> <span class="pl-c1">32768</span>:</td>
      </tr>
      <tr>
        <td id="L5873" class="blob-num js-line-number" data-line-number="5873"></td>
        <td id="LC5873" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">case</span> <span class="pl-c1">8192</span>:</td>
      </tr>
      <tr>
        <td id="L5874" class="blob-num js-line-number" data-line-number="5874"></td>
        <td id="LC5874" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">case</span> <span class="pl-c1">24576</span>:</td>
      </tr>
      <tr>
        <td id="L5875" class="blob-num js-line-number" data-line-number="5875"></td>
        <td id="LC5875" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">case</span> <span class="pl-c1">4096</span>:</td>
      </tr>
      <tr>
        <td id="L5876" class="blob-num js-line-number" data-line-number="5876"></td>
        <td id="LC5876" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">case</span> <span class="pl-c1">49152</span>:</td>
      </tr>
      <tr>
        <td id="L5877" class="blob-num js-line-number" data-line-number="5877"></td>
        <td id="LC5877" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L5878" class="blob-num js-line-number" data-line-number="5878"></td>
        <td id="LC5878" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">default</span>: <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L5879" class="blob-num js-line-number" data-line-number="5879"></td>
        <td id="LC5879" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5880" class="blob-num js-line-number" data-line-number="5880"></td>
        <td id="LC5880" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">mknod</span>(path, mode, dev);</td>
      </tr>
      <tr>
        <td id="L5881" class="blob-num js-line-number" data-line-number="5881"></td>
        <td id="LC5881" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5882" class="blob-num js-line-number" data-line-number="5882"></td>
        <td id="LC5882" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doReadlink</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">buf</span>, <span class="pl-smi">bufsize</span>) {</td>
      </tr>
      <tr>
        <td id="L5883" class="blob-num js-line-number" data-line-number="5883"></td>
        <td id="LC5883" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (bufsize <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L5884" class="blob-num js-line-number" data-line-number="5884"></td>
        <td id="LC5884" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">readlink</span>(path);</td>
      </tr>
      <tr>
        <td id="L5885" class="blob-num js-line-number" data-line-number="5885"></td>
        <td id="LC5885" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5886" class="blob-num js-line-number" data-line-number="5886"></td>
        <td id="LC5886" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(bufsize, <span class="pl-en">lengthBytesUTF8</span>(ret));</td>
      </tr>
      <tr>
        <td id="L5887" class="blob-num js-line-number" data-line-number="5887"></td>
        <td id="LC5887" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> endChar <span class="pl-k">=</span> <span class="pl-c1">HEAP8</span>[buf<span class="pl-k">+</span>len];</td>
      </tr>
      <tr>
        <td id="L5888" class="blob-num js-line-number" data-line-number="5888"></td>
        <td id="LC5888" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">stringToUTF8</span>(ret, buf, bufsize<span class="pl-k">+</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5889" class="blob-num js-line-number" data-line-number="5889"></td>
        <td id="LC5889" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)</span></td>
      </tr>
      <tr>
        <td id="L5890" class="blob-num js-line-number" data-line-number="5890"></td>
        <td id="LC5890" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.</span></td>
      </tr>
      <tr>
        <td id="L5891" class="blob-num js-line-number" data-line-number="5891"></td>
        <td id="LC5891" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP8</span>[buf<span class="pl-k">+</span>len] <span class="pl-k">=</span> endChar;</td>
      </tr>
      <tr>
        <td id="L5892" class="blob-num js-line-number" data-line-number="5892"></td>
        <td id="LC5892" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5893" class="blob-num js-line-number" data-line-number="5893"></td>
        <td id="LC5893" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L5894" class="blob-num js-line-number" data-line-number="5894"></td>
        <td id="LC5894" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doAccess</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">amode</span>) {</td>
      </tr>
      <tr>
        <td id="L5895" class="blob-num js-line-number" data-line-number="5895"></td>
        <td id="LC5895" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (amode <span class="pl-k">&amp;</span> <span class="pl-k">~</span><span class="pl-c1">7</span>) {</td>
      </tr>
      <tr>
        <td id="L5896" class="blob-num js-line-number" data-line-number="5896"></td>
        <td id="LC5896" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> need a valid mode</span></td>
      </tr>
      <tr>
        <td id="L5897" class="blob-num js-line-number" data-line-number="5897"></td>
        <td id="LC5897" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L5898" class="blob-num js-line-number" data-line-number="5898"></td>
        <td id="LC5898" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5899" class="blob-num js-line-number" data-line-number="5899"></td>
        <td id="LC5899" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> node;</td>
      </tr>
      <tr>
        <td id="L5900" class="blob-num js-line-number" data-line-number="5900"></td>
        <td id="LC5900" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> lookup <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">lookupPath</span>(path, { follow<span class="pl-k">:</span> <span class="pl-c1">true</span> });</td>
      </tr>
      <tr>
        <td id="L5901" class="blob-num js-line-number" data-line-number="5901"></td>
        <td id="LC5901" class="blob-code blob-code-inner js-file-line">        node <span class="pl-k">=</span> <span class="pl-smi">lookup</span>.<span class="pl-smi">node</span>;</td>
      </tr>
      <tr>
        <td id="L5902" class="blob-num js-line-number" data-line-number="5902"></td>
        <td id="LC5902" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>node) {</td>
      </tr>
      <tr>
        <td id="L5903" class="blob-num js-line-number" data-line-number="5903"></td>
        <td id="LC5903" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L5904" class="blob-num js-line-number" data-line-number="5904"></td>
        <td id="LC5904" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5905" class="blob-num js-line-number" data-line-number="5905"></td>
        <td id="LC5905" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> perms <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5906" class="blob-num js-line-number" data-line-number="5906"></td>
        <td id="LC5906" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (amode <span class="pl-k">&amp;</span> <span class="pl-c1">4</span>) perms <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5907" class="blob-num js-line-number" data-line-number="5907"></td>
        <td id="LC5907" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (amode <span class="pl-k">&amp;</span> <span class="pl-c1">2</span>) perms <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>w<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5908" class="blob-num js-line-number" data-line-number="5908"></td>
        <td id="LC5908" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (amode <span class="pl-k">&amp;</span> <span class="pl-c1">1</span>) perms <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>x<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5909" class="blob-num js-line-number" data-line-number="5909"></td>
        <td id="LC5909" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (perms <span class="pl-c"><span class="pl-c">/*</span> otherwise, they&#39;ve just passed F_OK <span class="pl-c">*/</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">FS</span>.<span class="pl-en">nodePermissions</span>(node, perms)) {</td>
      </tr>
      <tr>
        <td id="L5910" class="blob-num js-line-number" data-line-number="5910"></td>
        <td id="LC5910" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">13</span>;</td>
      </tr>
      <tr>
        <td id="L5911" class="blob-num js-line-number" data-line-number="5911"></td>
        <td id="LC5911" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5912" class="blob-num js-line-number" data-line-number="5912"></td>
        <td id="LC5912" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5913" class="blob-num js-line-number" data-line-number="5913"></td>
        <td id="LC5913" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doDup</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">path</span>, <span class="pl-smi">flags</span>, <span class="pl-smi">suggestFD</span>) {</td>
      </tr>
      <tr>
        <td id="L5914" class="blob-num js-line-number" data-line-number="5914"></td>
        <td id="LC5914" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> suggest <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(suggestFD);</td>
      </tr>
      <tr>
        <td id="L5915" class="blob-num js-line-number" data-line-number="5915"></td>
        <td id="LC5915" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (suggest) <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(suggest);</td>
      </tr>
      <tr>
        <td id="L5916" class="blob-num js-line-number" data-line-number="5916"></td>
        <td id="LC5916" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(path, flags, <span class="pl-c1">0</span>, suggestFD, suggestFD).<span class="pl-smi">fd</span>;</td>
      </tr>
      <tr>
        <td id="L5917" class="blob-num js-line-number" data-line-number="5917"></td>
        <td id="LC5917" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doReadv</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">iov</span>, <span class="pl-smi">iovcnt</span>, <span class="pl-smi">offset</span>) {</td>
      </tr>
      <tr>
        <td id="L5918" class="blob-num js-line-number" data-line-number="5918"></td>
        <td id="LC5918" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5919" class="blob-num js-line-number" data-line-number="5919"></td>
        <td id="LC5919" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> iovcnt; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5920" class="blob-num js-line-number" data-line-number="5920"></td>
        <td id="LC5920" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ptr <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((iov)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">8</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L5921" class="blob-num js-line-number" data-line-number="5921"></td>
        <td id="LC5921" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((iov)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L5922" class="blob-num js-line-number" data-line-number="5922"></td>
        <td id="LC5922" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> curr <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">read</span>(stream, <span class="pl-c1">HEAP8</span>,ptr, len, offset);</td>
      </tr>
      <tr>
        <td id="L5923" class="blob-num js-line-number" data-line-number="5923"></td>
        <td id="LC5923" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (curr <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L5924" class="blob-num js-line-number" data-line-number="5924"></td>
        <td id="LC5924" class="blob-code blob-code-inner js-file-line">          ret <span class="pl-k">+=</span> curr;</td>
      </tr>
      <tr>
        <td id="L5925" class="blob-num js-line-number" data-line-number="5925"></td>
        <td id="LC5925" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (curr <span class="pl-k">&lt;</span> len) <span class="pl-k">break</span>; <span class="pl-c"><span class="pl-c">//</span> nothing more to read</span></td>
      </tr>
      <tr>
        <td id="L5926" class="blob-num js-line-number" data-line-number="5926"></td>
        <td id="LC5926" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5927" class="blob-num js-line-number" data-line-number="5927"></td>
        <td id="LC5927" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5928" class="blob-num js-line-number" data-line-number="5928"></td>
        <td id="LC5928" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">doWritev</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">iov</span>, <span class="pl-smi">iovcnt</span>, <span class="pl-smi">offset</span>) {</td>
      </tr>
      <tr>
        <td id="L5929" class="blob-num js-line-number" data-line-number="5929"></td>
        <td id="LC5929" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5930" class="blob-num js-line-number" data-line-number="5930"></td>
        <td id="LC5930" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> iovcnt; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L5931" class="blob-num js-line-number" data-line-number="5931"></td>
        <td id="LC5931" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> ptr <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((iov)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">8</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L5932" class="blob-num js-line-number" data-line-number="5932"></td>
        <td id="LC5932" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> len <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((iov)<span class="pl-k">+</span>(i<span class="pl-k">*</span><span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L5933" class="blob-num js-line-number" data-line-number="5933"></td>
        <td id="LC5933" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> curr <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">write</span>(stream, <span class="pl-c1">HEAP8</span>,ptr, len, offset);</td>
      </tr>
      <tr>
        <td id="L5934" class="blob-num js-line-number" data-line-number="5934"></td>
        <td id="LC5934" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (curr <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L5935" class="blob-num js-line-number" data-line-number="5935"></td>
        <td id="LC5935" class="blob-code blob-code-inner js-file-line">          ret <span class="pl-k">+=</span> curr;</td>
      </tr>
      <tr>
        <td id="L5936" class="blob-num js-line-number" data-line-number="5936"></td>
        <td id="LC5936" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5937" class="blob-num js-line-number" data-line-number="5937"></td>
        <td id="LC5937" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5938" class="blob-num js-line-number" data-line-number="5938"></td>
        <td id="LC5938" class="blob-code blob-code-inner js-file-line">      },varargs<span class="pl-k">:</span><span class="pl-c1">0</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">varargs</span>) {</td>
      </tr>
      <tr>
        <td id="L5939" class="blob-num js-line-number" data-line-number="5939"></td>
        <td id="LC5939" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">+=</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L5940" class="blob-num js-line-number" data-line-number="5940"></td>
        <td id="LC5940" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span>)<span class="pl-k">-</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L5941" class="blob-num js-line-number" data-line-number="5941"></td>
        <td id="LC5941" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5942" class="blob-num js-line-number" data-line-number="5942"></td>
        <td id="LC5942" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getStr</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5943" class="blob-num js-line-number" data-line-number="5943"></td>
        <td id="LC5943" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> ret <span class="pl-k">=</span> <span class="pl-en">UTF8ToString</span>(<span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L5944" class="blob-num js-line-number" data-line-number="5944"></td>
        <td id="LC5944" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L5945" class="blob-num js-line-number" data-line-number="5945"></td>
        <td id="LC5945" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getStreamFromFD</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5946" class="blob-num js-line-number" data-line-number="5946"></td>
        <td id="LC5946" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(<span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L5947" class="blob-num js-line-number" data-line-number="5947"></td>
        <td id="LC5947" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L5948" class="blob-num js-line-number" data-line-number="5948"></td>
        <td id="LC5948" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> stream;</td>
      </tr>
      <tr>
        <td id="L5949" class="blob-num js-line-number" data-line-number="5949"></td>
        <td id="LC5949" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">get64</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5950" class="blob-num js-line-number" data-line-number="5950"></td>
        <td id="LC5950" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> low <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), high <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L5951" class="blob-num js-line-number" data-line-number="5951"></td>
        <td id="LC5951" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (low <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>) <span class="pl-en">assert</span>(high <span class="pl-k">===</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5952" class="blob-num js-line-number" data-line-number="5952"></td>
        <td id="LC5952" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">else</span> <span class="pl-en">assert</span>(high <span class="pl-k">===</span> <span class="pl-k">-</span><span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L5953" class="blob-num js-line-number" data-line-number="5953"></td>
        <td id="LC5953" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> low;</td>
      </tr>
      <tr>
        <td id="L5954" class="blob-num js-line-number" data-line-number="5954"></td>
        <td id="LC5954" class="blob-code blob-code-inner js-file-line">      },<span class="pl-en">getZero</span><span class="pl-k">:</span><span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L5955" class="blob-num js-line-number" data-line-number="5955"></td>
        <td id="LC5955" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>() <span class="pl-k">===</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5956" class="blob-num js-line-number" data-line-number="5956"></td>
        <td id="LC5956" class="blob-code blob-code-inner js-file-line">      }};<span class="pl-k">function</span> <span class="pl-en">___syscall10</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L5957" class="blob-num js-line-number" data-line-number="5957"></td>
        <td id="LC5957" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5958" class="blob-num js-line-number" data-line-number="5958"></td>
        <td id="LC5958" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> unlink</span></td>
      </tr>
      <tr>
        <td id="L5959" class="blob-num js-line-number" data-line-number="5959"></td>
        <td id="LC5959" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>();</td>
      </tr>
      <tr>
        <td id="L5960" class="blob-num js-line-number" data-line-number="5960"></td>
        <td id="LC5960" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">unlink</span>(path);</td>
      </tr>
      <tr>
        <td id="L5961" class="blob-num js-line-number" data-line-number="5961"></td>
        <td id="LC5961" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L5962" class="blob-num js-line-number" data-line-number="5962"></td>
        <td id="LC5962" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5963" class="blob-num js-line-number" data-line-number="5963"></td>
        <td id="LC5963" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L5964" class="blob-num js-line-number" data-line-number="5964"></td>
        <td id="LC5964" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L5965" class="blob-num js-line-number" data-line-number="5965"></td>
        <td id="LC5965" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L5966" class="blob-num js-line-number" data-line-number="5966"></td>
        <td id="LC5966" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L5967" class="blob-num js-line-number" data-line-number="5967"></td>
        <td id="LC5967" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5968" class="blob-num js-line-number" data-line-number="5968"></td>
        <td id="LC5968" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall118</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L5969" class="blob-num js-line-number" data-line-number="5969"></td>
        <td id="LC5969" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5970" class="blob-num js-line-number" data-line-number="5970"></td>
        <td id="LC5970" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> fsync</span></td>
      </tr>
      <tr>
        <td id="L5971" class="blob-num js-line-number" data-line-number="5971"></td>
        <td id="LC5971" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>();</td>
      </tr>
      <tr>
        <td id="L5972" class="blob-num js-line-number" data-line-number="5972"></td>
        <td id="LC5972" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-smi">fsync</span>) {</td>
      </tr>
      <tr>
        <td id="L5973" class="blob-num js-line-number" data-line-number="5973"></td>
        <td id="LC5973" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">stream</span>.<span class="pl-smi">stream_ops</span>.<span class="pl-en">fsync</span>(stream);</td>
      </tr>
      <tr>
        <td id="L5974" class="blob-num js-line-number" data-line-number="5974"></td>
        <td id="LC5974" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L5975" class="blob-num js-line-number" data-line-number="5975"></td>
        <td id="LC5975" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> we can&#39;t do anything synchronously; the in-memory FS is already synced to</span></td>
      </tr>
      <tr>
        <td id="L5976" class="blob-num js-line-number" data-line-number="5976"></td>
        <td id="LC5976" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L5977" class="blob-num js-line-number" data-line-number="5977"></td>
        <td id="LC5977" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L5978" class="blob-num js-line-number" data-line-number="5978"></td>
        <td id="LC5978" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L5979" class="blob-num js-line-number" data-line-number="5979"></td>
        <td id="LC5979" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L5980" class="blob-num js-line-number" data-line-number="5980"></td>
        <td id="LC5980" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L5981" class="blob-num js-line-number" data-line-number="5981"></td>
        <td id="LC5981" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5982" class="blob-num js-line-number" data-line-number="5982"></td>
        <td id="LC5982" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall140</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L5983" class="blob-num js-line-number" data-line-number="5983"></td>
        <td id="LC5983" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5984" class="blob-num js-line-number" data-line-number="5984"></td>
        <td id="LC5984" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> llseek</span></td>
      </tr>
      <tr>
        <td id="L5985" class="blob-num js-line-number" data-line-number="5985"></td>
        <td id="LC5985" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>(), offset_high <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), offset_low <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), result <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), whence <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L5986" class="blob-num js-line-number" data-line-number="5986"></td>
        <td id="LC5986" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">HIGH_OFFSET</span> <span class="pl-k">=</span> <span class="pl-c1">0x100000000</span>; <span class="pl-c"><span class="pl-c">//</span> 2^32</span></td>
      </tr>
      <tr>
        <td id="L5987" class="blob-num js-line-number" data-line-number="5987"></td>
        <td id="LC5987" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> use an unsigned operator on low and shift high by 32-bits</span></td>
      </tr>
      <tr>
        <td id="L5988" class="blob-num js-line-number" data-line-number="5988"></td>
        <td id="LC5988" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> offset <span class="pl-k">=</span> offset_high <span class="pl-k">*</span> <span class="pl-c1">HIGH_OFFSET</span> <span class="pl-k">+</span> (offset_low <span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5989" class="blob-num js-line-number" data-line-number="5989"></td>
        <td id="LC5989" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5990" class="blob-num js-line-number" data-line-number="5990"></td>
        <td id="LC5990" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">DOUBLE_LIMIT</span> <span class="pl-k">=</span> <span class="pl-c1">0x20000000000000</span>; <span class="pl-c"><span class="pl-c">//</span> 2^53</span></td>
      </tr>
      <tr>
        <td id="L5991" class="blob-num js-line-number" data-line-number="5991"></td>
        <td id="LC5991" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT</span></td>
      </tr>
      <tr>
        <td id="L5992" class="blob-num js-line-number" data-line-number="5992"></td>
        <td id="LC5992" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (offset <span class="pl-k">&lt;=</span> <span class="pl-k">-</span><span class="pl-c1">DOUBLE_LIMIT</span> <span class="pl-k">||</span> offset <span class="pl-k">&gt;=</span> <span class="pl-c1">DOUBLE_LIMIT</span>) {</td>
      </tr>
      <tr>
        <td id="L5993" class="blob-num js-line-number" data-line-number="5993"></td>
        <td id="LC5993" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">75</span>;</td>
      </tr>
      <tr>
        <td id="L5994" class="blob-num js-line-number" data-line-number="5994"></td>
        <td id="LC5994" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L5995" class="blob-num js-line-number" data-line-number="5995"></td>
        <td id="LC5995" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L5996" class="blob-num js-line-number" data-line-number="5996"></td>
        <td id="LC5996" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">llseek</span>(stream, offset, whence);</td>
      </tr>
      <tr>
        <td id="L5997" class="blob-num js-line-number" data-line-number="5997"></td>
        <td id="LC5997" class="blob-code blob-code-inner js-file-line">      (tempI64 <span class="pl-k">=</span> [<span class="pl-smi">stream</span>.<span class="pl-smi">position</span><span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>,(tempDouble<span class="pl-k">=</span><span class="pl-smi">stream</span>.<span class="pl-smi">position</span>,(<span class="pl-k">+</span>(<span class="pl-en">Math_abs</span>(tempDouble))) <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span> <span class="pl-k">?</span> (tempDouble <span class="pl-k">&gt;</span> <span class="pl-c1">0.0</span> <span class="pl-k">?</span> ((<span class="pl-en">Math_min</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_floor</span>((tempDouble)<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>))), <span class="pl-c1">4294967295.0</span>))<span class="pl-k">|</span><span class="pl-c1">0</span>)<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span> <span class="pl-k">:</span> (<span class="pl-k">~~</span>((<span class="pl-k">+</span>(<span class="pl-en">Math_ceil</span>((tempDouble <span class="pl-k">-</span> <span class="pl-k">+</span>(((<span class="pl-k">~~</span>(tempDouble)))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">/</span><span class="pl-c1">4294967296.0</span>)))))<span class="pl-k">&gt;&gt;&gt;</span><span class="pl-c1">0</span>) <span class="pl-k">:</span> <span class="pl-c1">0</span>)],<span class="pl-c1">HEAP32</span>[((result)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">0</span>],<span class="pl-c1">HEAP32</span>[(((result)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>tempI64[<span class="pl-c1">1</span>]);</td>
      </tr>
      <tr>
        <td id="L5998" class="blob-num js-line-number" data-line-number="5998"></td>
        <td id="LC5998" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">stream</span>.<span class="pl-smi">getdents</span> <span class="pl-k">&amp;&amp;</span> offset <span class="pl-k">===</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> whence <span class="pl-k">===</span> <span class="pl-c1">0</span>) <span class="pl-smi">stream</span>.<span class="pl-smi">getdents</span> <span class="pl-k">=</span> <span class="pl-c1">null</span>; <span class="pl-c"><span class="pl-c">//</span> reset readdir state</span></td>
      </tr>
      <tr>
        <td id="L5999" class="blob-num js-line-number" data-line-number="5999"></td>
        <td id="LC5999" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6000" class="blob-num js-line-number" data-line-number="6000"></td>
        <td id="LC6000" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6001" class="blob-num js-line-number" data-line-number="6001"></td>
        <td id="LC6001" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6002" class="blob-num js-line-number" data-line-number="6002"></td>
        <td id="LC6002" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6003" class="blob-num js-line-number" data-line-number="6003"></td>
        <td id="LC6003" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6004" class="blob-num js-line-number" data-line-number="6004"></td>
        <td id="LC6004" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6005" class="blob-num js-line-number" data-line-number="6005"></td>
        <td id="LC6005" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6006" class="blob-num js-line-number" data-line-number="6006"></td>
        <td id="LC6006" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall15</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6007" class="blob-num js-line-number" data-line-number="6007"></td>
        <td id="LC6007" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6008" class="blob-num js-line-number" data-line-number="6008"></td>
        <td id="LC6008" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> chmod</span></td>
      </tr>
      <tr>
        <td id="L6009" class="blob-num js-line-number" data-line-number="6009"></td>
        <td id="LC6009" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), mode <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6010" class="blob-num js-line-number" data-line-number="6010"></td>
        <td id="LC6010" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">chmod</span>(path, mode);</td>
      </tr>
      <tr>
        <td id="L6011" class="blob-num js-line-number" data-line-number="6011"></td>
        <td id="LC6011" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6012" class="blob-num js-line-number" data-line-number="6012"></td>
        <td id="LC6012" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6013" class="blob-num js-line-number" data-line-number="6013"></td>
        <td id="LC6013" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6014" class="blob-num js-line-number" data-line-number="6014"></td>
        <td id="LC6014" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6015" class="blob-num js-line-number" data-line-number="6015"></td>
        <td id="LC6015" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6016" class="blob-num js-line-number" data-line-number="6016"></td>
        <td id="LC6016" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6017" class="blob-num js-line-number" data-line-number="6017"></td>
        <td id="LC6017" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6018" class="blob-num js-line-number" data-line-number="6018"></td>
        <td id="LC6018" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall183</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6019" class="blob-num js-line-number" data-line-number="6019"></td>
        <td id="LC6019" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6020" class="blob-num js-line-number" data-line-number="6020"></td>
        <td id="LC6020" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> getcwd</span></td>
      </tr>
      <tr>
        <td id="L6021" class="blob-num js-line-number" data-line-number="6021"></td>
        <td id="LC6021" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), size <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6022" class="blob-num js-line-number" data-line-number="6022"></td>
        <td id="LC6022" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (size <span class="pl-k">===</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L6023" class="blob-num js-line-number" data-line-number="6023"></td>
        <td id="LC6023" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> cwd <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">cwd</span>();</td>
      </tr>
      <tr>
        <td id="L6024" class="blob-num js-line-number" data-line-number="6024"></td>
        <td id="LC6024" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> cwdLengthInBytes <span class="pl-k">=</span> <span class="pl-en">lengthBytesUTF8</span>(cwd);</td>
      </tr>
      <tr>
        <td id="L6025" class="blob-num js-line-number" data-line-number="6025"></td>
        <td id="LC6025" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (size <span class="pl-k">&lt;</span> cwdLengthInBytes <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">34</span>;</td>
      </tr>
      <tr>
        <td id="L6026" class="blob-num js-line-number" data-line-number="6026"></td>
        <td id="LC6026" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">stringToUTF8</span>(cwd, buf, size);</td>
      </tr>
      <tr>
        <td id="L6027" class="blob-num js-line-number" data-line-number="6027"></td>
        <td id="LC6027" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> buf;</td>
      </tr>
      <tr>
        <td id="L6028" class="blob-num js-line-number" data-line-number="6028"></td>
        <td id="LC6028" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6029" class="blob-num js-line-number" data-line-number="6029"></td>
        <td id="LC6029" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6030" class="blob-num js-line-number" data-line-number="6030"></td>
        <td id="LC6030" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6031" class="blob-num js-line-number" data-line-number="6031"></td>
        <td id="LC6031" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6032" class="blob-num js-line-number" data-line-number="6032"></td>
        <td id="LC6032" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6033" class="blob-num js-line-number" data-line-number="6033"></td>
        <td id="LC6033" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6034" class="blob-num js-line-number" data-line-number="6034"></td>
        <td id="LC6034" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6035" class="blob-num js-line-number" data-line-number="6035"></td>
        <td id="LC6035" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6036" class="blob-num js-line-number" data-line-number="6036"></td>
        <td id="LC6036" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6037" class="blob-num js-line-number" data-line-number="6037"></td>
        <td id="LC6037" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">function</span> <span class="pl-en">__emscripten_syscall_mmap2</span>(<span class="pl-smi">addr</span>, <span class="pl-smi">len</span>, <span class="pl-smi">prot</span>, <span class="pl-smi">flags</span>, <span class="pl-smi">fd</span>, <span class="pl-smi">off</span>) {</td>
      </tr>
      <tr>
        <td id="L6038" class="blob-num js-line-number" data-line-number="6038"></td>
        <td id="LC6038" class="blob-code blob-code-inner js-file-line">      off <span class="pl-k">&lt;&lt;=</span> <span class="pl-c1">12</span>; <span class="pl-c"><span class="pl-c">//</span> undo pgoffset</span></td>
      </tr>
      <tr>
        <td id="L6039" class="blob-num js-line-number" data-line-number="6039"></td>
        <td id="LC6039" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ptr;</td>
      </tr>
      <tr>
        <td id="L6040" class="blob-num js-line-number" data-line-number="6040"></td>
        <td id="LC6040" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> allocated <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L6041" class="blob-num js-line-number" data-line-number="6041"></td>
        <td id="LC6041" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6042" class="blob-num js-line-number" data-line-number="6042"></td>
        <td id="LC6042" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> addr argument must be page aligned if MAP_FIXED flag is set.</span></td>
      </tr>
      <tr>
        <td id="L6043" class="blob-num js-line-number" data-line-number="6043"></td>
        <td id="LC6043" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">16</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> (addr <span class="pl-k">%</span> <span class="pl-c1">PAGE_SIZE</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6044" class="blob-num js-line-number" data-line-number="6044"></td>
        <td id="LC6044" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L6045" class="blob-num js-line-number" data-line-number="6045"></td>
        <td id="LC6045" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6046" class="blob-num js-line-number" data-line-number="6046"></td>
        <td id="LC6046" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6047" class="blob-num js-line-number" data-line-number="6047"></td>
        <td id="LC6047" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> MAP_ANONYMOUS (aka MAP_ANON) isn&#39;t actually defined by POSIX spec,</span></td>
      </tr>
      <tr>
        <td id="L6048" class="blob-num js-line-number" data-line-number="6048"></td>
        <td id="LC6048" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> but it is widely used way to allocate memory pages on Linux, BSD and Mac.</span></td>
      </tr>
      <tr>
        <td id="L6049" class="blob-num js-line-number" data-line-number="6049"></td>
        <td id="LC6049" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> In this case fd argument is ignored.</span></td>
      </tr>
      <tr>
        <td id="L6050" class="blob-num js-line-number" data-line-number="6050"></td>
        <td id="LC6050" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> ((flags <span class="pl-k">&amp;</span> <span class="pl-c1">32</span>) <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6051" class="blob-num js-line-number" data-line-number="6051"></td>
        <td id="LC6051" class="blob-code blob-code-inner js-file-line">        ptr <span class="pl-k">=</span> <span class="pl-en">_memalign</span>(<span class="pl-c1">PAGE_SIZE</span>, len);</td>
      </tr>
      <tr>
        <td id="L6052" class="blob-num js-line-number" data-line-number="6052"></td>
        <td id="LC6052" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>ptr) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">12</span>;</td>
      </tr>
      <tr>
        <td id="L6053" class="blob-num js-line-number" data-line-number="6053"></td>
        <td id="LC6053" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">_memset</span>(ptr, <span class="pl-c1">0</span>, len);</td>
      </tr>
      <tr>
        <td id="L6054" class="blob-num js-line-number" data-line-number="6054"></td>
        <td id="LC6054" class="blob-code blob-code-inner js-file-line">        allocated <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L6055" class="blob-num js-line-number" data-line-number="6055"></td>
        <td id="LC6055" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L6056" class="blob-num js-line-number" data-line-number="6056"></td>
        <td id="LC6056" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> info <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(fd);</td>
      </tr>
      <tr>
        <td id="L6057" class="blob-num js-line-number" data-line-number="6057"></td>
        <td id="LC6057" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-k">!</span>info) <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">9</span>;</td>
      </tr>
      <tr>
        <td id="L6058" class="blob-num js-line-number" data-line-number="6058"></td>
        <td id="LC6058" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> res <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">mmap</span>(info, <span class="pl-c1">HEAPU8</span>, addr, len, off, prot, flags);</td>
      </tr>
      <tr>
        <td id="L6059" class="blob-num js-line-number" data-line-number="6059"></td>
        <td id="LC6059" class="blob-code blob-code-inner js-file-line">        ptr <span class="pl-k">=</span> <span class="pl-smi">res</span>.<span class="pl-smi">ptr</span>;</td>
      </tr>
      <tr>
        <td id="L6060" class="blob-num js-line-number" data-line-number="6060"></td>
        <td id="LC6060" class="blob-code blob-code-inner js-file-line">        allocated <span class="pl-k">=</span> <span class="pl-smi">res</span>.<span class="pl-smi">allocated</span>;</td>
      </tr>
      <tr>
        <td id="L6061" class="blob-num js-line-number" data-line-number="6061"></td>
        <td id="LC6061" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6062" class="blob-num js-line-number" data-line-number="6062"></td>
        <td id="LC6062" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">mappings</span>[ptr] <span class="pl-k">=</span> { malloc<span class="pl-k">:</span> ptr, len<span class="pl-k">:</span> len, allocated<span class="pl-k">:</span> allocated, fd<span class="pl-k">:</span> fd, flags<span class="pl-k">:</span> flags };</td>
      </tr>
      <tr>
        <td id="L6063" class="blob-num js-line-number" data-line-number="6063"></td>
        <td id="LC6063" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> ptr;</td>
      </tr>
      <tr>
        <td id="L6064" class="blob-num js-line-number" data-line-number="6064"></td>
        <td id="LC6064" class="blob-code blob-code-inner js-file-line">    }function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;</td>
      </tr>
      <tr>
        <td id="L6065" class="blob-num js-line-number" data-line-number="6065"></td>
        <td id="LC6065" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6066" class="blob-num js-line-number" data-line-number="6066"></td>
        <td id="LC6066" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> mmap2</span></td>
      </tr>
      <tr>
        <td id="L6067" class="blob-num js-line-number" data-line-number="6067"></td>
        <td id="LC6067" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> addr <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), len <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), prot <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), flags <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), fd <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), off <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>()</td>
      </tr>
      <tr>
        <td id="L6068" class="blob-num js-line-number" data-line-number="6068"></td>
        <td id="LC6068" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">__emscripten_syscall_mmap2</span>(addr, len, prot, flags, fd, off);</td>
      </tr>
      <tr>
        <td id="L6069" class="blob-num js-line-number" data-line-number="6069"></td>
        <td id="LC6069" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6070" class="blob-num js-line-number" data-line-number="6070"></td>
        <td id="LC6070" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6071" class="blob-num js-line-number" data-line-number="6071"></td>
        <td id="LC6071" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6072" class="blob-num js-line-number" data-line-number="6072"></td>
        <td id="LC6072" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6073" class="blob-num js-line-number" data-line-number="6073"></td>
        <td id="LC6073" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6074" class="blob-num js-line-number" data-line-number="6074"></td>
        <td id="LC6074" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6075" class="blob-num js-line-number" data-line-number="6075"></td>
        <td id="LC6075" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall194</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6076" class="blob-num js-line-number" data-line-number="6076"></td>
        <td id="LC6076" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6077" class="blob-num js-line-number" data-line-number="6077"></td>
        <td id="LC6077" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> ftruncate64</span></td>
      </tr>
      <tr>
        <td id="L6078" class="blob-num js-line-number" data-line-number="6078"></td>
        <td id="LC6078" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), zero <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getZero</span>(), length <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">get64</span>();</td>
      </tr>
      <tr>
        <td id="L6079" class="blob-num js-line-number" data-line-number="6079"></td>
        <td id="LC6079" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">ftruncate</span>(fd, length);</td>
      </tr>
      <tr>
        <td id="L6080" class="blob-num js-line-number" data-line-number="6080"></td>
        <td id="LC6080" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6081" class="blob-num js-line-number" data-line-number="6081"></td>
        <td id="LC6081" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6082" class="blob-num js-line-number" data-line-number="6082"></td>
        <td id="LC6082" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6083" class="blob-num js-line-number" data-line-number="6083"></td>
        <td id="LC6083" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6084" class="blob-num js-line-number" data-line-number="6084"></td>
        <td id="LC6084" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6085" class="blob-num js-line-number" data-line-number="6085"></td>
        <td id="LC6085" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6086" class="blob-num js-line-number" data-line-number="6086"></td>
        <td id="LC6086" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6087" class="blob-num js-line-number" data-line-number="6087"></td>
        <td id="LC6087" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall195</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6088" class="blob-num js-line-number" data-line-number="6088"></td>
        <td id="LC6088" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6089" class="blob-num js-line-number" data-line-number="6089"></td>
        <td id="LC6089" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> SYS_stat64</span></td>
      </tr>
      <tr>
        <td id="L6090" class="blob-num js-line-number" data-line-number="6090"></td>
        <td id="LC6090" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6091" class="blob-num js-line-number" data-line-number="6091"></td>
        <td id="LC6091" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doStat</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">stat</span>, path, buf);</td>
      </tr>
      <tr>
        <td id="L6092" class="blob-num js-line-number" data-line-number="6092"></td>
        <td id="LC6092" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6093" class="blob-num js-line-number" data-line-number="6093"></td>
        <td id="LC6093" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6094" class="blob-num js-line-number" data-line-number="6094"></td>
        <td id="LC6094" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6095" class="blob-num js-line-number" data-line-number="6095"></td>
        <td id="LC6095" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6096" class="blob-num js-line-number" data-line-number="6096"></td>
        <td id="LC6096" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6097" class="blob-num js-line-number" data-line-number="6097"></td>
        <td id="LC6097" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6098" class="blob-num js-line-number" data-line-number="6098"></td>
        <td id="LC6098" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall196</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6099" class="blob-num js-line-number" data-line-number="6099"></td>
        <td id="LC6099" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6100" class="blob-num js-line-number" data-line-number="6100"></td>
        <td id="LC6100" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> SYS_lstat64</span></td>
      </tr>
      <tr>
        <td id="L6101" class="blob-num js-line-number" data-line-number="6101"></td>
        <td id="LC6101" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6102" class="blob-num js-line-number" data-line-number="6102"></td>
        <td id="LC6102" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doStat</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">lstat</span>, path, buf);</td>
      </tr>
      <tr>
        <td id="L6103" class="blob-num js-line-number" data-line-number="6103"></td>
        <td id="LC6103" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6104" class="blob-num js-line-number" data-line-number="6104"></td>
        <td id="LC6104" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6105" class="blob-num js-line-number" data-line-number="6105"></td>
        <td id="LC6105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6106" class="blob-num js-line-number" data-line-number="6106"></td>
        <td id="LC6106" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6107" class="blob-num js-line-number" data-line-number="6107"></td>
        <td id="LC6107" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6108" class="blob-num js-line-number" data-line-number="6108"></td>
        <td id="LC6108" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6109" class="blob-num js-line-number" data-line-number="6109"></td>
        <td id="LC6109" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall197</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6110" class="blob-num js-line-number" data-line-number="6110"></td>
        <td id="LC6110" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6111" class="blob-num js-line-number" data-line-number="6111"></td>
        <td id="LC6111" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> SYS_fstat64</span></td>
      </tr>
      <tr>
        <td id="L6112" class="blob-num js-line-number" data-line-number="6112"></td>
        <td id="LC6112" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6113" class="blob-num js-line-number" data-line-number="6113"></td>
        <td id="LC6113" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doStat</span>(<span class="pl-c1">FS</span>.<span class="pl-smi">stat</span>, <span class="pl-smi">stream</span>.<span class="pl-smi">path</span>, buf);</td>
      </tr>
      <tr>
        <td id="L6114" class="blob-num js-line-number" data-line-number="6114"></td>
        <td id="LC6114" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6115" class="blob-num js-line-number" data-line-number="6115"></td>
        <td id="LC6115" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6116" class="blob-num js-line-number" data-line-number="6116"></td>
        <td id="LC6116" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6117" class="blob-num js-line-number" data-line-number="6117"></td>
        <td id="LC6117" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6118" class="blob-num js-line-number" data-line-number="6118"></td>
        <td id="LC6118" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6119" class="blob-num js-line-number" data-line-number="6119"></td>
        <td id="LC6119" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6120" class="blob-num js-line-number" data-line-number="6120"></td>
        <td id="LC6120" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6121" class="blob-num js-line-number" data-line-number="6121"></td>
        <td id="LC6121" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> <span class="pl-c1">PROCINFO</span><span class="pl-k">=</span>{ppid<span class="pl-k">:</span><span class="pl-c1">1</span>,pid<span class="pl-k">:</span><span class="pl-c1">42</span>,sid<span class="pl-k">:</span><span class="pl-c1">42</span>,pgid<span class="pl-k">:</span><span class="pl-c1">42</span>};<span class="pl-k">function</span> <span class="pl-en">___syscall20</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6122" class="blob-num js-line-number" data-line-number="6122"></td>
        <td id="LC6122" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6123" class="blob-num js-line-number" data-line-number="6123"></td>
        <td id="LC6123" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> getpid</span></td>
      </tr>
      <tr>
        <td id="L6124" class="blob-num js-line-number" data-line-number="6124"></td>
        <td id="LC6124" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">PROCINFO</span>.<span class="pl-smi">pid</span>;</td>
      </tr>
      <tr>
        <td id="L6125" class="blob-num js-line-number" data-line-number="6125"></td>
        <td id="LC6125" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6126" class="blob-num js-line-number" data-line-number="6126"></td>
        <td id="LC6126" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6127" class="blob-num js-line-number" data-line-number="6127"></td>
        <td id="LC6127" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6128" class="blob-num js-line-number" data-line-number="6128"></td>
        <td id="LC6128" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6129" class="blob-num js-line-number" data-line-number="6129"></td>
        <td id="LC6129" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6130" class="blob-num js-line-number" data-line-number="6130"></td>
        <td id="LC6130" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6131" class="blob-num js-line-number" data-line-number="6131"></td>
        <td id="LC6131" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6132" class="blob-num js-line-number" data-line-number="6132"></td>
        <td id="LC6132" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall202</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6133" class="blob-num js-line-number" data-line-number="6133"></td>
        <td id="LC6133" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6134" class="blob-num js-line-number" data-line-number="6134"></td>
        <td id="LC6134" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> getgid32</span></td>
      </tr>
      <tr>
        <td id="L6135" class="blob-num js-line-number" data-line-number="6135"></td>
        <td id="LC6135" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6136" class="blob-num js-line-number" data-line-number="6136"></td>
        <td id="LC6136" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6137" class="blob-num js-line-number" data-line-number="6137"></td>
        <td id="LC6137" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6138" class="blob-num js-line-number" data-line-number="6138"></td>
        <td id="LC6138" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6139" class="blob-num js-line-number" data-line-number="6139"></td>
        <td id="LC6139" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6140" class="blob-num js-line-number" data-line-number="6140"></td>
        <td id="LC6140" class="blob-code blob-code-inner js-file-line">  }function ___syscall201(a0,a1</td>
      </tr>
      <tr>
        <td id="L6141" class="blob-num js-line-number" data-line-number="6141"></td>
        <td id="LC6141" class="blob-code blob-code-inner js-file-line">  ) {</td>
      </tr>
      <tr>
        <td id="L6142" class="blob-num js-line-number" data-line-number="6142"></td>
        <td id="LC6142" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-en">___syscall202</span>(a0,a1);</td>
      </tr>
      <tr>
        <td id="L6143" class="blob-num js-line-number" data-line-number="6143"></td>
        <td id="LC6143" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6144" class="blob-num js-line-number" data-line-number="6144"></td>
        <td id="LC6144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6145" class="blob-num js-line-number" data-line-number="6145"></td>
        <td id="LC6145" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall207</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6146" class="blob-num js-line-number" data-line-number="6146"></td>
        <td id="LC6146" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6147" class="blob-num js-line-number" data-line-number="6147"></td>
        <td id="LC6147" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> fchown32</span></td>
      </tr>
      <tr>
        <td id="L6148" class="blob-num js-line-number" data-line-number="6148"></td>
        <td id="LC6148" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), owner <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), group <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6149" class="blob-num js-line-number" data-line-number="6149"></td>
        <td id="LC6149" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">fchown</span>(fd, owner, group);</td>
      </tr>
      <tr>
        <td id="L6150" class="blob-num js-line-number" data-line-number="6150"></td>
        <td id="LC6150" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6151" class="blob-num js-line-number" data-line-number="6151"></td>
        <td id="LC6151" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6152" class="blob-num js-line-number" data-line-number="6152"></td>
        <td id="LC6152" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6153" class="blob-num js-line-number" data-line-number="6153"></td>
        <td id="LC6153" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6154" class="blob-num js-line-number" data-line-number="6154"></td>
        <td id="LC6154" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6155" class="blob-num js-line-number" data-line-number="6155"></td>
        <td id="LC6155" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6156" class="blob-num js-line-number" data-line-number="6156"></td>
        <td id="LC6156" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6157" class="blob-num js-line-number" data-line-number="6157"></td>
        <td id="LC6157" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall212</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6158" class="blob-num js-line-number" data-line-number="6158"></td>
        <td id="LC6158" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6159" class="blob-num js-line-number" data-line-number="6159"></td>
        <td id="LC6159" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> chown32</span></td>
      </tr>
      <tr>
        <td id="L6160" class="blob-num js-line-number" data-line-number="6160"></td>
        <td id="LC6160" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), owner <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), group <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6161" class="blob-num js-line-number" data-line-number="6161"></td>
        <td id="LC6161" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">chown</span>(path, owner, group);</td>
      </tr>
      <tr>
        <td id="L6162" class="blob-num js-line-number" data-line-number="6162"></td>
        <td id="LC6162" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6163" class="blob-num js-line-number" data-line-number="6163"></td>
        <td id="LC6163" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6164" class="blob-num js-line-number" data-line-number="6164"></td>
        <td id="LC6164" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6165" class="blob-num js-line-number" data-line-number="6165"></td>
        <td id="LC6165" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6166" class="blob-num js-line-number" data-line-number="6166"></td>
        <td id="LC6166" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6167" class="blob-num js-line-number" data-line-number="6167"></td>
        <td id="LC6167" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6168" class="blob-num js-line-number" data-line-number="6168"></td>
        <td id="LC6168" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6169" class="blob-num js-line-number" data-line-number="6169"></td>
        <td id="LC6169" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall221</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6170" class="blob-num js-line-number" data-line-number="6170"></td>
        <td id="LC6170" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6171" class="blob-num js-line-number" data-line-number="6171"></td>
        <td id="LC6171" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> fcntl64</span></td>
      </tr>
      <tr>
        <td id="L6172" class="blob-num js-line-number" data-line-number="6172"></td>
        <td id="LC6172" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>(), cmd <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6173" class="blob-num js-line-number" data-line-number="6173"></td>
        <td id="LC6173" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">switch</span> (cmd) {</td>
      </tr>
      <tr>
        <td id="L6174" class="blob-num js-line-number" data-line-number="6174"></td>
        <td id="LC6174" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">0</span>: {</td>
      </tr>
      <tr>
        <td id="L6175" class="blob-num js-line-number" data-line-number="6175"></td>
        <td id="LC6175" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> arg <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6176" class="blob-num js-line-number" data-line-number="6176"></td>
        <td id="LC6176" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (arg <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6177" class="blob-num js-line-number" data-line-number="6177"></td>
        <td id="LC6177" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L6178" class="blob-num js-line-number" data-line-number="6178"></td>
        <td id="LC6178" class="blob-code blob-code-inner js-file-line">          }</td>
      </tr>
      <tr>
        <td id="L6179" class="blob-num js-line-number" data-line-number="6179"></td>
        <td id="LC6179" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> newStream;</td>
      </tr>
      <tr>
        <td id="L6180" class="blob-num js-line-number" data-line-number="6180"></td>
        <td id="LC6180" class="blob-code blob-code-inner js-file-line">          newStream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(<span class="pl-smi">stream</span>.<span class="pl-smi">path</span>, <span class="pl-smi">stream</span>.<span class="pl-smi">flags</span>, <span class="pl-c1">0</span>, arg);</td>
      </tr>
      <tr>
        <td id="L6181" class="blob-num js-line-number" data-line-number="6181"></td>
        <td id="LC6181" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">newStream</span>.<span class="pl-smi">fd</span>;</td>
      </tr>
      <tr>
        <td id="L6182" class="blob-num js-line-number" data-line-number="6182"></td>
        <td id="LC6182" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6183" class="blob-num js-line-number" data-line-number="6183"></td>
        <td id="LC6183" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">1</span>:</td>
      </tr>
      <tr>
        <td id="L6184" class="blob-num js-line-number" data-line-number="6184"></td>
        <td id="LC6184" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">2</span>:</td>
      </tr>
      <tr>
        <td id="L6185" class="blob-num js-line-number" data-line-number="6185"></td>
        <td id="LC6185" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;  <span class="pl-c"><span class="pl-c">//</span> FD_CLOEXEC makes no sense for a single process.</span></td>
      </tr>
      <tr>
        <td id="L6186" class="blob-num js-line-number" data-line-number="6186"></td>
        <td id="LC6186" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">3</span>:</td>
      </tr>
      <tr>
        <td id="L6187" class="blob-num js-line-number" data-line-number="6187"></td>
        <td id="LC6187" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">flags</span>;</td>
      </tr>
      <tr>
        <td id="L6188" class="blob-num js-line-number" data-line-number="6188"></td>
        <td id="LC6188" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">4</span>: {</td>
      </tr>
      <tr>
        <td id="L6189" class="blob-num js-line-number" data-line-number="6189"></td>
        <td id="LC6189" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> arg <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6190" class="blob-num js-line-number" data-line-number="6190"></td>
        <td id="LC6190" class="blob-code blob-code-inner js-file-line">          <span class="pl-smi">stream</span>.<span class="pl-smi">flags</span> <span class="pl-k">|=</span> arg;</td>
      </tr>
      <tr>
        <td id="L6191" class="blob-num js-line-number" data-line-number="6191"></td>
        <td id="LC6191" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6192" class="blob-num js-line-number" data-line-number="6192"></td>
        <td id="LC6192" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6193" class="blob-num js-line-number" data-line-number="6193"></td>
        <td id="LC6193" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">12</span>:</td>
      </tr>
      <tr>
        <td id="L6194" class="blob-num js-line-number" data-line-number="6194"></td>
        <td id="LC6194" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span> case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this <span class="pl-c">*/</span></span> {</td>
      </tr>
      <tr>
        <td id="L6195" class="blob-num js-line-number" data-line-number="6195"></td>
        <td id="LC6195" class="blob-code blob-code-inner js-file-line">          </td>
      </tr>
      <tr>
        <td id="L6196" class="blob-num js-line-number" data-line-number="6196"></td>
        <td id="LC6196" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> arg <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6197" class="blob-num js-line-number" data-line-number="6197"></td>
        <td id="LC6197" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> offset <span class="pl-k">=</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6198" class="blob-num js-line-number" data-line-number="6198"></td>
        <td id="LC6198" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> We&#39;re always unlocked.</span></td>
      </tr>
      <tr>
        <td id="L6199" class="blob-num js-line-number" data-line-number="6199"></td>
        <td id="LC6199" class="blob-code blob-code-inner js-file-line">          <span class="pl-c1">HEAP16</span>[(((arg)<span class="pl-k">+</span>(offset))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span>)]<span class="pl-k">=</span><span class="pl-c1">2</span>;</td>
      </tr>
      <tr>
        <td id="L6200" class="blob-num js-line-number" data-line-number="6200"></td>
        <td id="LC6200" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6201" class="blob-num js-line-number" data-line-number="6201"></td>
        <td id="LC6201" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6202" class="blob-num js-line-number" data-line-number="6202"></td>
        <td id="LC6202" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">13</span>:</td>
      </tr>
      <tr>
        <td id="L6203" class="blob-num js-line-number" data-line-number="6203"></td>
        <td id="LC6203" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">14</span>:</td>
      </tr>
      <tr>
        <td id="L6204" class="blob-num js-line-number" data-line-number="6204"></td>
        <td id="LC6204" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span> case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6205" class="blob-num js-line-number" data-line-number="6205"></td>
        <td id="LC6205" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span> case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6206" class="blob-num js-line-number" data-line-number="6206"></td>
        <td id="LC6206" class="blob-code blob-code-inner js-file-line">          </td>
      </tr>
      <tr>
        <td id="L6207" class="blob-num js-line-number" data-line-number="6207"></td>
        <td id="LC6207" class="blob-code blob-code-inner js-file-line">          </td>
      </tr>
      <tr>
        <td id="L6208" class="blob-num js-line-number" data-line-number="6208"></td>
        <td id="LC6208" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> Pretend that the locking is successful.</span></td>
      </tr>
      <tr>
        <td id="L6209" class="blob-num js-line-number" data-line-number="6209"></td>
        <td id="LC6209" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">16</span>:</td>
      </tr>
      <tr>
        <td id="L6210" class="blob-num js-line-number" data-line-number="6210"></td>
        <td id="LC6210" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">8</span>:</td>
      </tr>
      <tr>
        <td id="L6211" class="blob-num js-line-number" data-line-number="6211"></td>
        <td id="LC6211" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>; <span class="pl-c"><span class="pl-c">//</span> These are for sockets. We don&#39;t have them fully implemented yet.</span></td>
      </tr>
      <tr>
        <td id="L6212" class="blob-num js-line-number" data-line-number="6212"></td>
        <td id="LC6212" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">9</span>:</td>
      </tr>
      <tr>
        <td id="L6213" class="blob-num js-line-number" data-line-number="6213"></td>
        <td id="LC6213" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.</span></td>
      </tr>
      <tr>
        <td id="L6214" class="blob-num js-line-number" data-line-number="6214"></td>
        <td id="LC6214" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">___setErrNo</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L6215" class="blob-num js-line-number" data-line-number="6215"></td>
        <td id="LC6215" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6216" class="blob-num js-line-number" data-line-number="6216"></td>
        <td id="LC6216" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">default</span>: {</td>
      </tr>
      <tr>
        <td id="L6217" class="blob-num js-line-number" data-line-number="6217"></td>
        <td id="LC6217" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L6218" class="blob-num js-line-number" data-line-number="6218"></td>
        <td id="LC6218" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6219" class="blob-num js-line-number" data-line-number="6219"></td>
        <td id="LC6219" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6220" class="blob-num js-line-number" data-line-number="6220"></td>
        <td id="LC6220" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6221" class="blob-num js-line-number" data-line-number="6221"></td>
        <td id="LC6221" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6222" class="blob-num js-line-number" data-line-number="6222"></td>
        <td id="LC6222" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6223" class="blob-num js-line-number" data-line-number="6223"></td>
        <td id="LC6223" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6224" class="blob-num js-line-number" data-line-number="6224"></td>
        <td id="LC6224" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6225" class="blob-num js-line-number" data-line-number="6225"></td>
        <td id="LC6225" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6226" class="blob-num js-line-number" data-line-number="6226"></td>
        <td id="LC6226" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall3</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6227" class="blob-num js-line-number" data-line-number="6227"></td>
        <td id="LC6227" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6228" class="blob-num js-line-number" data-line-number="6228"></td>
        <td id="LC6228" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> read</span></td>
      </tr>
      <tr>
        <td id="L6229" class="blob-num js-line-number" data-line-number="6229"></td>
        <td id="LC6229" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), count <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6230" class="blob-num js-line-number" data-line-number="6230"></td>
        <td id="LC6230" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-en">read</span>(stream, <span class="pl-c1">HEAP8</span>,buf, count);</td>
      </tr>
      <tr>
        <td id="L6231" class="blob-num js-line-number" data-line-number="6231"></td>
        <td id="LC6231" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6232" class="blob-num js-line-number" data-line-number="6232"></td>
        <td id="LC6232" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6233" class="blob-num js-line-number" data-line-number="6233"></td>
        <td id="LC6233" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6234" class="blob-num js-line-number" data-line-number="6234"></td>
        <td id="LC6234" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6235" class="blob-num js-line-number" data-line-number="6235"></td>
        <td id="LC6235" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6236" class="blob-num js-line-number" data-line-number="6236"></td>
        <td id="LC6236" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6237" class="blob-num js-line-number" data-line-number="6237"></td>
        <td id="LC6237" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall33</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6238" class="blob-num js-line-number" data-line-number="6238"></td>
        <td id="LC6238" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6239" class="blob-num js-line-number" data-line-number="6239"></td>
        <td id="LC6239" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> access</span></td>
      </tr>
      <tr>
        <td id="L6240" class="blob-num js-line-number" data-line-number="6240"></td>
        <td id="LC6240" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), amode <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6241" class="blob-num js-line-number" data-line-number="6241"></td>
        <td id="LC6241" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doAccess</span>(path, amode);</td>
      </tr>
      <tr>
        <td id="L6242" class="blob-num js-line-number" data-line-number="6242"></td>
        <td id="LC6242" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6243" class="blob-num js-line-number" data-line-number="6243"></td>
        <td id="LC6243" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6244" class="blob-num js-line-number" data-line-number="6244"></td>
        <td id="LC6244" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6245" class="blob-num js-line-number" data-line-number="6245"></td>
        <td id="LC6245" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6246" class="blob-num js-line-number" data-line-number="6246"></td>
        <td id="LC6246" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6247" class="blob-num js-line-number" data-line-number="6247"></td>
        <td id="LC6247" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6248" class="blob-num js-line-number" data-line-number="6248"></td>
        <td id="LC6248" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall39</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6249" class="blob-num js-line-number" data-line-number="6249"></td>
        <td id="LC6249" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6250" class="blob-num js-line-number" data-line-number="6250"></td>
        <td id="LC6250" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> mkdir</span></td>
      </tr>
      <tr>
        <td id="L6251" class="blob-num js-line-number" data-line-number="6251"></td>
        <td id="LC6251" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), mode <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6252" class="blob-num js-line-number" data-line-number="6252"></td>
        <td id="LC6252" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doMkdir</span>(path, mode);</td>
      </tr>
      <tr>
        <td id="L6253" class="blob-num js-line-number" data-line-number="6253"></td>
        <td id="LC6253" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6254" class="blob-num js-line-number" data-line-number="6254"></td>
        <td id="LC6254" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6255" class="blob-num js-line-number" data-line-number="6255"></td>
        <td id="LC6255" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6256" class="blob-num js-line-number" data-line-number="6256"></td>
        <td id="LC6256" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6257" class="blob-num js-line-number" data-line-number="6257"></td>
        <td id="LC6257" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6258" class="blob-num js-line-number" data-line-number="6258"></td>
        <td id="LC6258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6259" class="blob-num js-line-number" data-line-number="6259"></td>
        <td id="LC6259" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall4</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6260" class="blob-num js-line-number" data-line-number="6260"></td>
        <td id="LC6260" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6261" class="blob-num js-line-number" data-line-number="6261"></td>
        <td id="LC6261" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> write</span></td>
      </tr>
      <tr>
        <td id="L6262" class="blob-num js-line-number" data-line-number="6262"></td>
        <td id="LC6262" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), count <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6263" class="blob-num js-line-number" data-line-number="6263"></td>
        <td id="LC6263" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">FS</span>.<span class="pl-c1">write</span>(stream, <span class="pl-c1">HEAP8</span>,buf, count);</td>
      </tr>
      <tr>
        <td id="L6264" class="blob-num js-line-number" data-line-number="6264"></td>
        <td id="LC6264" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6265" class="blob-num js-line-number" data-line-number="6265"></td>
        <td id="LC6265" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6266" class="blob-num js-line-number" data-line-number="6266"></td>
        <td id="LC6266" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6267" class="blob-num js-line-number" data-line-number="6267"></td>
        <td id="LC6267" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6268" class="blob-num js-line-number" data-line-number="6268"></td>
        <td id="LC6268" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6269" class="blob-num js-line-number" data-line-number="6269"></td>
        <td id="LC6269" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6270" class="blob-num js-line-number" data-line-number="6270"></td>
        <td id="LC6270" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall40</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6271" class="blob-num js-line-number" data-line-number="6271"></td>
        <td id="LC6271" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6272" class="blob-num js-line-number" data-line-number="6272"></td>
        <td id="LC6272" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> rmdir</span></td>
      </tr>
      <tr>
        <td id="L6273" class="blob-num js-line-number" data-line-number="6273"></td>
        <td id="LC6273" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>();</td>
      </tr>
      <tr>
        <td id="L6274" class="blob-num js-line-number" data-line-number="6274"></td>
        <td id="LC6274" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">rmdir</span>(path);</td>
      </tr>
      <tr>
        <td id="L6275" class="blob-num js-line-number" data-line-number="6275"></td>
        <td id="LC6275" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6276" class="blob-num js-line-number" data-line-number="6276"></td>
        <td id="LC6276" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6277" class="blob-num js-line-number" data-line-number="6277"></td>
        <td id="LC6277" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6278" class="blob-num js-line-number" data-line-number="6278"></td>
        <td id="LC6278" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6279" class="blob-num js-line-number" data-line-number="6279"></td>
        <td id="LC6279" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6280" class="blob-num js-line-number" data-line-number="6280"></td>
        <td id="LC6280" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6281" class="blob-num js-line-number" data-line-number="6281"></td>
        <td id="LC6281" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6282" class="blob-num js-line-number" data-line-number="6282"></td>
        <td id="LC6282" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall5</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6283" class="blob-num js-line-number" data-line-number="6283"></td>
        <td id="LC6283" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6284" class="blob-num js-line-number" data-line-number="6284"></td>
        <td id="LC6284" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> open</span></td>
      </tr>
      <tr>
        <td id="L6285" class="blob-num js-line-number" data-line-number="6285"></td>
        <td id="LC6285" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> pathname <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), flags <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), mode <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(); <span class="pl-c"><span class="pl-c">//</span> optional TODO</span></td>
      </tr>
      <tr>
        <td id="L6286" class="blob-num js-line-number" data-line-number="6286"></td>
        <td id="LC6286" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-c1">open</span>(pathname, flags, mode);</td>
      </tr>
      <tr>
        <td id="L6287" class="blob-num js-line-number" data-line-number="6287"></td>
        <td id="LC6287" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">stream</span>.<span class="pl-smi">fd</span>;</td>
      </tr>
      <tr>
        <td id="L6288" class="blob-num js-line-number" data-line-number="6288"></td>
        <td id="LC6288" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6289" class="blob-num js-line-number" data-line-number="6289"></td>
        <td id="LC6289" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6290" class="blob-num js-line-number" data-line-number="6290"></td>
        <td id="LC6290" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6291" class="blob-num js-line-number" data-line-number="6291"></td>
        <td id="LC6291" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6292" class="blob-num js-line-number" data-line-number="6292"></td>
        <td id="LC6292" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6293" class="blob-num js-line-number" data-line-number="6293"></td>
        <td id="LC6293" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6294" class="blob-num js-line-number" data-line-number="6294"></td>
        <td id="LC6294" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall6</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6295" class="blob-num js-line-number" data-line-number="6295"></td>
        <td id="LC6295" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6296" class="blob-num js-line-number" data-line-number="6296"></td>
        <td id="LC6296" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> close</span></td>
      </tr>
      <tr>
        <td id="L6297" class="blob-num js-line-number" data-line-number="6297"></td>
        <td id="LC6297" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStreamFromFD</span>();</td>
      </tr>
      <tr>
        <td id="L6298" class="blob-num js-line-number" data-line-number="6298"></td>
        <td id="LC6298" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-c1">close</span>(stream);</td>
      </tr>
      <tr>
        <td id="L6299" class="blob-num js-line-number" data-line-number="6299"></td>
        <td id="LC6299" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6300" class="blob-num js-line-number" data-line-number="6300"></td>
        <td id="LC6300" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6301" class="blob-num js-line-number" data-line-number="6301"></td>
        <td id="LC6301" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6302" class="blob-num js-line-number" data-line-number="6302"></td>
        <td id="LC6302" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6303" class="blob-num js-line-number" data-line-number="6303"></td>
        <td id="LC6303" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6304" class="blob-num js-line-number" data-line-number="6304"></td>
        <td id="LC6304" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6305" class="blob-num js-line-number" data-line-number="6305"></td>
        <td id="LC6305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6306" class="blob-num js-line-number" data-line-number="6306"></td>
        <td id="LC6306" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall85</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6307" class="blob-num js-line-number" data-line-number="6307"></td>
        <td id="LC6307" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6308" class="blob-num js-line-number" data-line-number="6308"></td>
        <td id="LC6308" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> readlink</span></td>
      </tr>
      <tr>
        <td id="L6309" class="blob-num js-line-number" data-line-number="6309"></td>
        <td id="LC6309" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> path <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">getStr</span>(), buf <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), bufsize <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6310" class="blob-num js-line-number" data-line-number="6310"></td>
        <td id="LC6310" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doReadlink</span>(path, buf, bufsize);</td>
      </tr>
      <tr>
        <td id="L6311" class="blob-num js-line-number" data-line-number="6311"></td>
        <td id="LC6311" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6312" class="blob-num js-line-number" data-line-number="6312"></td>
        <td id="LC6312" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6313" class="blob-num js-line-number" data-line-number="6313"></td>
        <td id="LC6313" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6314" class="blob-num js-line-number" data-line-number="6314"></td>
        <td id="LC6314" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6315" class="blob-num js-line-number" data-line-number="6315"></td>
        <td id="LC6315" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6316" class="blob-num js-line-number" data-line-number="6316"></td>
        <td id="LC6316" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6317" class="blob-num js-line-number" data-line-number="6317"></td>
        <td id="LC6317" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6318" class="blob-num js-line-number" data-line-number="6318"></td>
        <td id="LC6318" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">__emscripten_syscall_munmap</span>(<span class="pl-smi">addr</span>, <span class="pl-smi">len</span>) {</td>
      </tr>
      <tr>
        <td id="L6319" class="blob-num js-line-number" data-line-number="6319"></td>
        <td id="LC6319" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (addr <span class="pl-k">===</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">||</span> len <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6320" class="blob-num js-line-number" data-line-number="6320"></td>
        <td id="LC6320" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">22</span>;</td>
      </tr>
      <tr>
        <td id="L6321" class="blob-num js-line-number" data-line-number="6321"></td>
        <td id="LC6321" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6322" class="blob-num js-line-number" data-line-number="6322"></td>
        <td id="LC6322" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> TODO: support unmmap&#39;ing parts of allocations</span></td>
      </tr>
      <tr>
        <td id="L6323" class="blob-num js-line-number" data-line-number="6323"></td>
        <td id="LC6323" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> info <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">mappings</span>[addr];</td>
      </tr>
      <tr>
        <td id="L6324" class="blob-num js-line-number" data-line-number="6324"></td>
        <td id="LC6324" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>info) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6325" class="blob-num js-line-number" data-line-number="6325"></td>
        <td id="LC6325" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (len <span class="pl-k">===</span> <span class="pl-smi">info</span>.<span class="pl-smi">len</span>) {</td>
      </tr>
      <tr>
        <td id="L6326" class="blob-num js-line-number" data-line-number="6326"></td>
        <td id="LC6326" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(<span class="pl-smi">info</span>.<span class="pl-smi">fd</span>);</td>
      </tr>
      <tr>
        <td id="L6327" class="blob-num js-line-number" data-line-number="6327"></td>
        <td id="LC6327" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doMsync</span>(addr, stream, len, <span class="pl-smi">info</span>.<span class="pl-smi">flags</span>);</td>
      </tr>
      <tr>
        <td id="L6328" class="blob-num js-line-number" data-line-number="6328"></td>
        <td id="LC6328" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">munmap</span>(stream);</td>
      </tr>
      <tr>
        <td id="L6329" class="blob-num js-line-number" data-line-number="6329"></td>
        <td id="LC6329" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">mappings</span>[addr] <span class="pl-k">=</span> <span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L6330" class="blob-num js-line-number" data-line-number="6330"></td>
        <td id="LC6330" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-smi">info</span>.<span class="pl-smi">allocated</span>) {</td>
      </tr>
      <tr>
        <td id="L6331" class="blob-num js-line-number" data-line-number="6331"></td>
        <td id="LC6331" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">_free</span>(<span class="pl-smi">info</span>.<span class="pl-smi">malloc</span>);</td>
      </tr>
      <tr>
        <td id="L6332" class="blob-num js-line-number" data-line-number="6332"></td>
        <td id="LC6332" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6333" class="blob-num js-line-number" data-line-number="6333"></td>
        <td id="LC6333" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6334" class="blob-num js-line-number" data-line-number="6334"></td>
        <td id="LC6334" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6335" class="blob-num js-line-number" data-line-number="6335"></td>
        <td id="LC6335" class="blob-code blob-code-inner js-file-line">    }function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;</td>
      </tr>
      <tr>
        <td id="L6336" class="blob-num js-line-number" data-line-number="6336"></td>
        <td id="LC6336" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6337" class="blob-num js-line-number" data-line-number="6337"></td>
        <td id="LC6337" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> munmap</span></td>
      </tr>
      <tr>
        <td id="L6338" class="blob-num js-line-number" data-line-number="6338"></td>
        <td id="LC6338" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> addr <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), len <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6339" class="blob-num js-line-number" data-line-number="6339"></td>
        <td id="LC6339" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">__emscripten_syscall_munmap</span>(addr, len);</td>
      </tr>
      <tr>
        <td id="L6340" class="blob-num js-line-number" data-line-number="6340"></td>
        <td id="LC6340" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6341" class="blob-num js-line-number" data-line-number="6341"></td>
        <td id="LC6341" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6342" class="blob-num js-line-number" data-line-number="6342"></td>
        <td id="LC6342" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6343" class="blob-num js-line-number" data-line-number="6343"></td>
        <td id="LC6343" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6344" class="blob-num js-line-number" data-line-number="6344"></td>
        <td id="LC6344" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6345" class="blob-num js-line-number" data-line-number="6345"></td>
        <td id="LC6345" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6346" class="blob-num js-line-number" data-line-number="6346"></td>
        <td id="LC6346" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___syscall94</span>(<span class="pl-smi">which</span>, <span class="pl-smi">varargs</span>) {<span class="pl-c1">SYSCALLS</span>.<span class="pl-smi">varargs</span> <span class="pl-k">=</span> varargs;</td>
      </tr>
      <tr>
        <td id="L6347" class="blob-num js-line-number" data-line-number="6347"></td>
        <td id="LC6347" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6348" class="blob-num js-line-number" data-line-number="6348"></td>
        <td id="LC6348" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> fchmod</span></td>
      </tr>
      <tr>
        <td id="L6349" class="blob-num js-line-number" data-line-number="6349"></td>
        <td id="LC6349" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> fd <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>(), mode <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L6350" class="blob-num js-line-number" data-line-number="6350"></td>
        <td id="LC6350" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">FS</span>.<span class="pl-en">fchmod</span>(fd, mode);</td>
      </tr>
      <tr>
        <td id="L6351" class="blob-num js-line-number" data-line-number="6351"></td>
        <td id="LC6351" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6352" class="blob-num js-line-number" data-line-number="6352"></td>
        <td id="LC6352" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6353" class="blob-num js-line-number" data-line-number="6353"></td>
        <td id="LC6353" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6354" class="blob-num js-line-number" data-line-number="6354"></td>
        <td id="LC6354" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6355" class="blob-num js-line-number" data-line-number="6355"></td>
        <td id="LC6355" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6356" class="blob-num js-line-number" data-line-number="6356"></td>
        <td id="LC6356" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6357" class="blob-num js-line-number" data-line-number="6357"></td>
        <td id="LC6357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6358" class="blob-num js-line-number" data-line-number="6358"></td>
        <td id="LC6358" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">___unlock</span>() {}</td>
      </tr>
      <tr>
        <td id="L6359" class="blob-num js-line-number" data-line-number="6359"></td>
        <td id="LC6359" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6360" class="blob-num js-line-number" data-line-number="6360"></td>
        <td id="LC6360" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6361" class="blob-num js-line-number" data-line-number="6361"></td>
        <td id="LC6361" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_fd_write</span>(<span class="pl-smi">stream</span>, <span class="pl-smi">iov</span>, <span class="pl-smi">iovcnt</span>, <span class="pl-smi">pnum</span>) {<span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6362" class="blob-num js-line-number" data-line-number="6362"></td>
        <td id="LC6362" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6363" class="blob-num js-line-number" data-line-number="6363"></td>
        <td id="LC6363" class="blob-code blob-code-inner js-file-line">      stream <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">getStream</span>(stream);</td>
      </tr>
      <tr>
        <td id="L6364" class="blob-num js-line-number" data-line-number="6364"></td>
        <td id="LC6364" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>stream) <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">FS.ErrnoError</span>(<span class="pl-c1">9</span>);</td>
      </tr>
      <tr>
        <td id="L6365" class="blob-num js-line-number" data-line-number="6365"></td>
        <td id="LC6365" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">SYSCALLS</span>.<span class="pl-en">doWritev</span>(stream, iov, iovcnt);</td>
      </tr>
      <tr>
        <td id="L6366" class="blob-num js-line-number" data-line-number="6366"></td>
        <td id="LC6366" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((pnum)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>num</td>
      </tr>
      <tr>
        <td id="L6367" class="blob-num js-line-number" data-line-number="6367"></td>
        <td id="LC6367" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6368" class="blob-num js-line-number" data-line-number="6368"></td>
        <td id="LC6368" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6369" class="blob-num js-line-number" data-line-number="6369"></td>
        <td id="LC6369" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">FS</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>undefined<span class="pl-pds">&#39;</span></span> <span class="pl-k">||</span> <span class="pl-k">!</span>(e <span class="pl-k">instanceof</span> <span class="pl-c1">FS</span>.<span class="pl-smi">ErrnoError</span>)) <span class="pl-en">abort</span>(e);</td>
      </tr>
      <tr>
        <td id="L6370" class="blob-num js-line-number" data-line-number="6370"></td>
        <td id="LC6370" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-smi">e</span>.<span class="pl-smi">errno</span>;</td>
      </tr>
      <tr>
        <td id="L6371" class="blob-num js-line-number" data-line-number="6371"></td>
        <td id="LC6371" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6372" class="blob-num js-line-number" data-line-number="6372"></td>
        <td id="LC6372" class="blob-code blob-code-inner js-file-line">  }function ___wasi_fd_write(</td>
      </tr>
      <tr>
        <td id="L6373" class="blob-num js-line-number" data-line-number="6373"></td>
        <td id="LC6373" class="blob-code blob-code-inner js-file-line">  ) {</td>
      </tr>
      <tr>
        <td id="L6374" class="blob-num js-line-number" data-line-number="6374"></td>
        <td id="LC6374" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-smi">_fd_write</span>.<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L6375" class="blob-num js-line-number" data-line-number="6375"></td>
        <td id="LC6375" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6376" class="blob-num js-line-number" data-line-number="6376"></td>
        <td id="LC6376" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6377" class="blob-num js-line-number" data-line-number="6377"></td>
        <td id="LC6377" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_emscripten_get_heap_size</span>() {</td>
      </tr>
      <tr>
        <td id="L6378" class="blob-num js-line-number" data-line-number="6378"></td>
        <td id="LC6378" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">HEAP8</span>.<span class="pl-c1">length</span>;</td>
      </tr>
      <tr>
        <td id="L6379" class="blob-num js-line-number" data-line-number="6379"></td>
        <td id="LC6379" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6380" class="blob-num js-line-number" data-line-number="6380"></td>
        <td id="LC6380" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6381" class="blob-num js-line-number" data-line-number="6381"></td>
        <td id="LC6381" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_getenv</span>(<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L6382" class="blob-num js-line-number" data-line-number="6382"></td>
        <td id="LC6382" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> char *getenv(const char *name);</span></td>
      </tr>
      <tr>
        <td id="L6383" class="blob-num js-line-number" data-line-number="6383"></td>
        <td id="LC6383" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html</span></td>
      </tr>
      <tr>
        <td id="L6384" class="blob-num js-line-number" data-line-number="6384"></td>
        <td id="LC6384" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (name <span class="pl-k">===</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6385" class="blob-num js-line-number" data-line-number="6385"></td>
        <td id="LC6385" class="blob-code blob-code-inner js-file-line">      name <span class="pl-k">=</span> <span class="pl-en">UTF8ToString</span>(name);</td>
      </tr>
      <tr>
        <td id="L6386" class="blob-num js-line-number" data-line-number="6386"></td>
        <td id="LC6386" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">ENV</span>.<span class="pl-en">hasOwnProperty</span>(name)) <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6387" class="blob-num js-line-number" data-line-number="6387"></td>
        <td id="LC6387" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6388" class="blob-num js-line-number" data-line-number="6388"></td>
        <td id="LC6388" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">_getenv</span>.<span class="pl-smi">ret</span>) <span class="pl-en">_free</span>(<span class="pl-smi">_getenv</span>.<span class="pl-smi">ret</span>);</td>
      </tr>
      <tr>
        <td id="L6389" class="blob-num js-line-number" data-line-number="6389"></td>
        <td id="LC6389" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">_getenv</span>.<span class="pl-smi">ret</span> <span class="pl-k">=</span> <span class="pl-en">allocateUTF8</span>(<span class="pl-c1">ENV</span>[name]);</td>
      </tr>
      <tr>
        <td id="L6390" class="blob-num js-line-number" data-line-number="6390"></td>
        <td id="LC6390" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-smi">_getenv</span>.<span class="pl-smi">ret</span>;</td>
      </tr>
      <tr>
        <td id="L6391" class="blob-num js-line-number" data-line-number="6391"></td>
        <td id="LC6391" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6392" class="blob-num js-line-number" data-line-number="6392"></td>
        <td id="LC6392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6393" class="blob-num js-line-number" data-line-number="6393"></td>
        <td id="LC6393" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_gettimeofday</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L6394" class="blob-num js-line-number" data-line-number="6394"></td>
        <td id="LC6394" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> now <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L6395" class="blob-num js-line-number" data-line-number="6395"></td>
        <td id="LC6395" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>(now<span class="pl-k">/</span><span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> seconds</span></td>
      </tr>
      <tr>
        <td id="L6396" class="blob-num js-line-number" data-line-number="6396"></td>
        <td id="LC6396" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((ptr)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>((now <span class="pl-k">%</span> <span class="pl-c1">1000</span>)<span class="pl-k">*</span><span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>; <span class="pl-c"><span class="pl-c">//</span> microseconds</span></td>
      </tr>
      <tr>
        <td id="L6397" class="blob-num js-line-number" data-line-number="6397"></td>
        <td id="LC6397" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6398" class="blob-num js-line-number" data-line-number="6398"></td>
        <td id="LC6398" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6399" class="blob-num js-line-number" data-line-number="6399"></td>
        <td id="LC6399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6400" class="blob-num js-line-number" data-line-number="6400"></td>
        <td id="LC6400" class="blob-code blob-code-inner js-file-line">   </td>
      </tr>
      <tr>
        <td id="L6401" class="blob-num js-line-number" data-line-number="6401"></td>
        <td id="LC6401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6402" class="blob-num js-line-number" data-line-number="6402"></td>
        <td id="LC6402" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6403" class="blob-num js-line-number" data-line-number="6403"></td>
        <td id="LC6403" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_llvm_log10_f32</span>(<span class="pl-smi">x</span>) {</td>
      </tr>
      <tr>
        <td id="L6404" class="blob-num js-line-number" data-line-number="6404"></td>
        <td id="LC6404" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">log</span>(x) <span class="pl-k">/</span> <span class="pl-c1">Math</span>.<span class="pl-c1">LN10</span>; <span class="pl-c"><span class="pl-c">//</span> TODO: Math.log10, when browser support is there</span></td>
      </tr>
      <tr>
        <td id="L6405" class="blob-num js-line-number" data-line-number="6405"></td>
        <td id="LC6405" class="blob-code blob-code-inner js-file-line">    }function _llvm_log10_f64(a0</td>
      </tr>
      <tr>
        <td id="L6406" class="blob-num js-line-number" data-line-number="6406"></td>
        <td id="LC6406" class="blob-code blob-code-inner js-file-line">  ) {</td>
      </tr>
      <tr>
        <td id="L6407" class="blob-num js-line-number" data-line-number="6407"></td>
        <td id="LC6407" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-en">_llvm_log10_f32</span>(a0);</td>
      </tr>
      <tr>
        <td id="L6408" class="blob-num js-line-number" data-line-number="6408"></td>
        <td id="LC6408" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6409" class="blob-num js-line-number" data-line-number="6409"></td>
        <td id="LC6409" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6410" class="blob-num js-line-number" data-line-number="6410"></td>
        <td id="LC6410" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_llvm_trap</span>() {</td>
      </tr>
      <tr>
        <td id="L6411" class="blob-num js-line-number" data-line-number="6411"></td>
        <td id="LC6411" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>trap!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6412" class="blob-num js-line-number" data-line-number="6412"></td>
        <td id="LC6412" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6413" class="blob-num js-line-number" data-line-number="6413"></td>
        <td id="LC6413" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6414" class="blob-num js-line-number" data-line-number="6414"></td>
        <td id="LC6414" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6415" class="blob-num js-line-number" data-line-number="6415"></td>
        <td id="LC6415" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ___tm_current<span class="pl-k">=</span><span class="pl-c1">61360</span>;</td>
      </tr>
      <tr>
        <td id="L6416" class="blob-num js-line-number" data-line-number="6416"></td>
        <td id="LC6416" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6417" class="blob-num js-line-number" data-line-number="6417"></td>
        <td id="LC6417" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6418" class="blob-num js-line-number" data-line-number="6418"></td>
        <td id="LC6418" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ___tm_timezone<span class="pl-k">=</span>(<span class="pl-en">stringToUTF8</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>GMT<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">61408</span>, <span class="pl-c1">4</span>), <span class="pl-c1">61408</span>);</td>
      </tr>
      <tr>
        <td id="L6419" class="blob-num js-line-number" data-line-number="6419"></td>
        <td id="LC6419" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6420" class="blob-num js-line-number" data-line-number="6420"></td>
        <td id="LC6420" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_tzset</span>() {</td>
      </tr>
      <tr>
        <td id="L6421" class="blob-num js-line-number" data-line-number="6421"></td>
        <td id="LC6421" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> TODO: Use (malleable) environment variables instead of system settings.</span></td>
      </tr>
      <tr>
        <td id="L6422" class="blob-num js-line-number" data-line-number="6422"></td>
        <td id="LC6422" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">_tzset</span>.<span class="pl-smi">called</span>) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L6423" class="blob-num js-line-number" data-line-number="6423"></td>
        <td id="LC6423" class="blob-code blob-code-inner js-file-line">      <span class="pl-smi">_tzset</span>.<span class="pl-smi">called</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L6424" class="blob-num js-line-number" data-line-number="6424"></td>
        <td id="LC6424" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6425" class="blob-num js-line-number" data-line-number="6425"></td>
        <td id="LC6425" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> timezone is specified as seconds west of UTC (&quot;The external variable</span></td>
      </tr>
      <tr>
        <td id="L6426" class="blob-num js-line-number" data-line-number="6426"></td>
        <td id="LC6426" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> `timezone` shall be set to the difference, in seconds, between</span></td>
      </tr>
      <tr>
        <td id="L6427" class="blob-num js-line-number" data-line-number="6427"></td>
        <td id="LC6427" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Coordinated Universal Time (UTC) and local standard time.&quot;), the same</span></td>
      </tr>
      <tr>
        <td id="L6428" class="blob-num js-line-number" data-line-number="6428"></td>
        <td id="LC6428" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> as returned by getTimezoneOffset().</span></td>
      </tr>
      <tr>
        <td id="L6429" class="blob-num js-line-number" data-line-number="6429"></td>
        <td id="LC6429" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html</span></td>
      </tr>
      <tr>
        <td id="L6430" class="blob-num js-line-number" data-line-number="6430"></td>
        <td id="LC6430" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((<span class="pl-en">__get_timezone</span>())<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>(<span class="pl-k">new</span> <span class="pl-en">Date</span>()).<span class="pl-c1">getTimezoneOffset</span>() <span class="pl-k">*</span> <span class="pl-c1">60</span>;</td>
      </tr>
      <tr>
        <td id="L6431" class="blob-num js-line-number" data-line-number="6431"></td>
        <td id="LC6431" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6432" class="blob-num js-line-number" data-line-number="6432"></td>
        <td id="LC6432" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> winter <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-c1">2000</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L6433" class="blob-num js-line-number" data-line-number="6433"></td>
        <td id="LC6433" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> summer <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-c1">2000</span>, <span class="pl-c1">6</span>, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L6434" class="blob-num js-line-number" data-line-number="6434"></td>
        <td id="LC6434" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((<span class="pl-en">__get_daylight</span>())<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">Number</span>(<span class="pl-smi">winter</span>.<span class="pl-c1">getTimezoneOffset</span>() <span class="pl-k">!=</span> <span class="pl-smi">summer</span>.<span class="pl-c1">getTimezoneOffset</span>());</td>
      </tr>
      <tr>
        <td id="L6435" class="blob-num js-line-number" data-line-number="6435"></td>
        <td id="LC6435" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6436" class="blob-num js-line-number" data-line-number="6436"></td>
        <td id="LC6436" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">function</span> <span class="pl-en">extractZone</span>(<span class="pl-smi">date</span>) {</td>
      </tr>
      <tr>
        <td id="L6437" class="blob-num js-line-number" data-line-number="6437"></td>
        <td id="LC6437" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> match <span class="pl-k">=</span> <span class="pl-smi">date</span>.<span class="pl-en">toTimeString</span>().<span class="pl-c1">match</span>(<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-cce">\(</span>(<span class="pl-c1">[<span class="pl-c1">A-Za-z</span> ]</span><span class="pl-k">+</span>)<span class="pl-cce">\)</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>);</td>
      </tr>
      <tr>
        <td id="L6438" class="blob-num js-line-number" data-line-number="6438"></td>
        <td id="LC6438" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> match <span class="pl-k">?</span> match[<span class="pl-c1">1</span>] <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>GMT<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L6439" class="blob-num js-line-number" data-line-number="6439"></td>
        <td id="LC6439" class="blob-code blob-code-inner js-file-line">      };</td>
      </tr>
      <tr>
        <td id="L6440" class="blob-num js-line-number" data-line-number="6440"></td>
        <td id="LC6440" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> winterName <span class="pl-k">=</span> <span class="pl-en">extractZone</span>(winter);</td>
      </tr>
      <tr>
        <td id="L6441" class="blob-num js-line-number" data-line-number="6441"></td>
        <td id="LC6441" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> summerName <span class="pl-k">=</span> <span class="pl-en">extractZone</span>(summer);</td>
      </tr>
      <tr>
        <td id="L6442" class="blob-num js-line-number" data-line-number="6442"></td>
        <td id="LC6442" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> winterNamePtr <span class="pl-k">=</span> <span class="pl-en">allocate</span>(<span class="pl-en">intArrayFromString</span>(winterName), <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">ALLOC_NORMAL</span>);</td>
      </tr>
      <tr>
        <td id="L6443" class="blob-num js-line-number" data-line-number="6443"></td>
        <td id="LC6443" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> summerNamePtr <span class="pl-k">=</span> <span class="pl-en">allocate</span>(<span class="pl-en">intArrayFromString</span>(summerName), <span class="pl-s"><span class="pl-pds">&#39;</span>i8<span class="pl-pds">&#39;</span></span>, <span class="pl-c1">ALLOC_NORMAL</span>);</td>
      </tr>
      <tr>
        <td id="L6444" class="blob-num js-line-number" data-line-number="6444"></td>
        <td id="LC6444" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-smi">summer</span>.<span class="pl-c1">getTimezoneOffset</span>() <span class="pl-k">&lt;</span> <span class="pl-smi">winter</span>.<span class="pl-c1">getTimezoneOffset</span>()) {</td>
      </tr>
      <tr>
        <td id="L6445" class="blob-num js-line-number" data-line-number="6445"></td>
        <td id="LC6445" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Northern hemisphere</span></td>
      </tr>
      <tr>
        <td id="L6446" class="blob-num js-line-number" data-line-number="6446"></td>
        <td id="LC6446" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((<span class="pl-en">__get_tzname</span>())<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>winterNamePtr;</td>
      </tr>
      <tr>
        <td id="L6447" class="blob-num js-line-number" data-line-number="6447"></td>
        <td id="LC6447" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((<span class="pl-en">__get_tzname</span>())<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>summerNamePtr;</td>
      </tr>
      <tr>
        <td id="L6448" class="blob-num js-line-number" data-line-number="6448"></td>
        <td id="LC6448" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L6449" class="blob-num js-line-number" data-line-number="6449"></td>
        <td id="LC6449" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((<span class="pl-en">__get_tzname</span>())<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>summerNamePtr;</td>
      </tr>
      <tr>
        <td id="L6450" class="blob-num js-line-number" data-line-number="6450"></td>
        <td id="LC6450" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((<span class="pl-en">__get_tzname</span>())<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>winterNamePtr;</td>
      </tr>
      <tr>
        <td id="L6451" class="blob-num js-line-number" data-line-number="6451"></td>
        <td id="LC6451" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6452" class="blob-num js-line-number" data-line-number="6452"></td>
        <td id="LC6452" class="blob-code blob-code-inner js-file-line">    }function _localtime_r(time, tmPtr) {</td>
      </tr>
      <tr>
        <td id="L6453" class="blob-num js-line-number" data-line-number="6453"></td>
        <td id="LC6453" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">_tzset</span>();</td>
      </tr>
      <tr>
        <td id="L6454" class="blob-num js-line-number" data-line-number="6454"></td>
        <td id="LC6454" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> date <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-c1">HEAP32</span>[((time)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">*</span><span class="pl-c1">1000</span>);</td>
      </tr>
      <tr>
        <td id="L6455" class="blob-num js-line-number" data-line-number="6455"></td>
        <td id="LC6455" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[((tmPtr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getSeconds</span>();</td>
      </tr>
      <tr>
        <td id="L6456" class="blob-num js-line-number" data-line-number="6456"></td>
        <td id="LC6456" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getMinutes</span>();</td>
      </tr>
      <tr>
        <td id="L6457" class="blob-num js-line-number" data-line-number="6457"></td>
        <td id="LC6457" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">8</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getHours</span>();</td>
      </tr>
      <tr>
        <td id="L6458" class="blob-num js-line-number" data-line-number="6458"></td>
        <td id="LC6458" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">12</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getDate</span>();</td>
      </tr>
      <tr>
        <td id="L6459" class="blob-num js-line-number" data-line-number="6459"></td>
        <td id="LC6459" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">16</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getMonth</span>();</td>
      </tr>
      <tr>
        <td id="L6460" class="blob-num js-line-number" data-line-number="6460"></td>
        <td id="LC6460" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">20</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getFullYear</span>()<span class="pl-k">-</span><span class="pl-c1">1900</span>;</td>
      </tr>
      <tr>
        <td id="L6461" class="blob-num js-line-number" data-line-number="6461"></td>
        <td id="LC6461" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">24</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-smi">date</span>.<span class="pl-c1">getDay</span>();</td>
      </tr>
      <tr>
        <td id="L6462" class="blob-num js-line-number" data-line-number="6462"></td>
        <td id="LC6462" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6463" class="blob-num js-line-number" data-line-number="6463"></td>
        <td id="LC6463" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> start <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-smi">date</span>.<span class="pl-c1">getFullYear</span>(), <span class="pl-c1">0</span>, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L6464" class="blob-num js-line-number" data-line-number="6464"></td>
        <td id="LC6464" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> yday <span class="pl-k">=</span> ((<span class="pl-smi">date</span>.<span class="pl-c1">getTime</span>() <span class="pl-k">-</span> <span class="pl-smi">start</span>.<span class="pl-c1">getTime</span>()) <span class="pl-k">/</span> (<span class="pl-c1">1000</span> <span class="pl-k">*</span> <span class="pl-c1">60</span> <span class="pl-k">*</span> <span class="pl-c1">60</span> <span class="pl-k">*</span> <span class="pl-c1">24</span>))<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6465" class="blob-num js-line-number" data-line-number="6465"></td>
        <td id="LC6465" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">28</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>yday;</td>
      </tr>
      <tr>
        <td id="L6466" class="blob-num js-line-number" data-line-number="6466"></td>
        <td id="LC6466" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">36</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-k">-</span>(<span class="pl-smi">date</span>.<span class="pl-c1">getTimezoneOffset</span>() <span class="pl-k">*</span> <span class="pl-c1">60</span>);</td>
      </tr>
      <tr>
        <td id="L6467" class="blob-num js-line-number" data-line-number="6467"></td>
        <td id="LC6467" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6468" class="blob-num js-line-number" data-line-number="6468"></td>
        <td id="LC6468" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Attention: DST is in December in South, and some regions don&#39;t have DST at all.</span></td>
      </tr>
      <tr>
        <td id="L6469" class="blob-num js-line-number" data-line-number="6469"></td>
        <td id="LC6469" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> summerOffset <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Date</span>(<span class="pl-c1">2000</span>, <span class="pl-c1">6</span>, <span class="pl-c1">1</span>).<span class="pl-c1">getTimezoneOffset</span>();</td>
      </tr>
      <tr>
        <td id="L6470" class="blob-num js-line-number" data-line-number="6470"></td>
        <td id="LC6470" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> winterOffset <span class="pl-k">=</span> <span class="pl-smi">start</span>.<span class="pl-c1">getTimezoneOffset</span>();</td>
      </tr>
      <tr>
        <td id="L6471" class="blob-num js-line-number" data-line-number="6471"></td>
        <td id="LC6471" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> dst <span class="pl-k">=</span> (summerOffset <span class="pl-k">!=</span> winterOffset <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">date</span>.<span class="pl-c1">getTimezoneOffset</span>() <span class="pl-k">==</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(winterOffset, summerOffset))<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6472" class="blob-num js-line-number" data-line-number="6472"></td>
        <td id="LC6472" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">32</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>dst;</td>
      </tr>
      <tr>
        <td id="L6473" class="blob-num js-line-number" data-line-number="6473"></td>
        <td id="LC6473" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6474" class="blob-num js-line-number" data-line-number="6474"></td>
        <td id="LC6474" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> zonePtr <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((<span class="pl-en">__get_tzname</span>())<span class="pl-k">+</span>(dst <span class="pl-k">?</span> <span class="pl-c1">4</span> <span class="pl-k">:</span> <span class="pl-c1">0</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L6475" class="blob-num js-line-number" data-line-number="6475"></td>
        <td id="LC6475" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAP32</span>[(((tmPtr)<span class="pl-k">+</span>(<span class="pl-c1">40</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>zonePtr;</td>
      </tr>
      <tr>
        <td id="L6476" class="blob-num js-line-number" data-line-number="6476"></td>
        <td id="LC6476" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6477" class="blob-num js-line-number" data-line-number="6477"></td>
        <td id="LC6477" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> tmPtr;</td>
      </tr>
      <tr>
        <td id="L6478" class="blob-num js-line-number" data-line-number="6478"></td>
        <td id="LC6478" class="blob-code blob-code-inner js-file-line">    }function _localtime(time) {</td>
      </tr>
      <tr>
        <td id="L6479" class="blob-num js-line-number" data-line-number="6479"></td>
        <td id="LC6479" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">_localtime_r</span>(time, ___tm_current);</td>
      </tr>
      <tr>
        <td id="L6480" class="blob-num js-line-number" data-line-number="6480"></td>
        <td id="LC6480" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6481" class="blob-num js-line-number" data-line-number="6481"></td>
        <td id="LC6481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6482" class="blob-num js-line-number" data-line-number="6482"></td>
        <td id="LC6482" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6483" class="blob-num js-line-number" data-line-number="6483"></td>
        <td id="LC6483" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_emscripten_memcpy_big</span>(<span class="pl-smi">dest</span>, <span class="pl-smi">src</span>, <span class="pl-smi">num</span>) {</td>
      </tr>
      <tr>
        <td id="L6484" class="blob-num js-line-number" data-line-number="6484"></td>
        <td id="LC6484" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">HEAPU8</span>.<span class="pl-c1">set</span>(<span class="pl-c1">HEAPU8</span>.<span class="pl-en">subarray</span>(src, src<span class="pl-k">+</span>num), dest);</td>
      </tr>
      <tr>
        <td id="L6485" class="blob-num js-line-number" data-line-number="6485"></td>
        <td id="LC6485" class="blob-code blob-code-inner js-file-line">    } </td>
      </tr>
      <tr>
        <td id="L6486" class="blob-num js-line-number" data-line-number="6486"></td>
        <td id="LC6486" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6487" class="blob-num js-line-number" data-line-number="6487"></td>
        <td id="LC6487" class="blob-code blob-code-inner js-file-line">   </td>
      </tr>
      <tr>
        <td id="L6488" class="blob-num js-line-number" data-line-number="6488"></td>
        <td id="LC6488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6489" class="blob-num js-line-number" data-line-number="6489"></td>
        <td id="LC6489" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6490" class="blob-num js-line-number" data-line-number="6490"></td>
        <td id="LC6490" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6491" class="blob-num js-line-number" data-line-number="6491"></td>
        <td id="LC6491" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_usleep</span>(<span class="pl-smi">useconds</span>) {</td>
      </tr>
      <tr>
        <td id="L6492" class="blob-num js-line-number" data-line-number="6492"></td>
        <td id="LC6492" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> int usleep(useconds_t useconds);</span></td>
      </tr>
      <tr>
        <td id="L6493" class="blob-num js-line-number" data-line-number="6493"></td>
        <td id="LC6493" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html</span></td>
      </tr>
      <tr>
        <td id="L6494" class="blob-num js-line-number" data-line-number="6494"></td>
        <td id="LC6494" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> We&#39;re single-threaded, so use a busy loop. Super-ugly.</span></td>
      </tr>
      <tr>
        <td id="L6495" class="blob-num js-line-number" data-line-number="6495"></td>
        <td id="LC6495" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> msec <span class="pl-k">=</span> useconds <span class="pl-k">/</span> <span class="pl-c1">1000</span>;</td>
      </tr>
      <tr>
        <td id="L6496" class="blob-num js-line-number" data-line-number="6496"></td>
        <td id="LC6496" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> ((<span class="pl-c1">ENVIRONMENT_IS_WEB</span> <span class="pl-k">||</span> <span class="pl-c1">ENVIRONMENT_IS_WORKER</span>) <span class="pl-k">&amp;&amp;</span> self[<span class="pl-s"><span class="pl-pds">&#39;</span>performance<span class="pl-pds">&#39;</span></span>] <span class="pl-k">&amp;&amp;</span> self[<span class="pl-s"><span class="pl-pds">&#39;</span>performance<span class="pl-pds">&#39;</span></span>][<span class="pl-s"><span class="pl-pds">&#39;</span>now<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L6497" class="blob-num js-line-number" data-line-number="6497"></td>
        <td id="LC6497" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> start <span class="pl-k">=</span> self[<span class="pl-s"><span class="pl-pds">&#39;</span>performance<span class="pl-pds">&#39;</span></span>][<span class="pl-s"><span class="pl-pds">&#39;</span>now<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L6498" class="blob-num js-line-number" data-line-number="6498"></td>
        <td id="LC6498" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (self[<span class="pl-s"><span class="pl-pds">&#39;</span>performance<span class="pl-pds">&#39;</span></span>][<span class="pl-s"><span class="pl-pds">&#39;</span>now<span class="pl-pds">&#39;</span></span>]() <span class="pl-k">-</span> start <span class="pl-k">&lt;</span> msec) {</td>
      </tr>
      <tr>
        <td id="L6499" class="blob-num js-line-number" data-line-number="6499"></td>
        <td id="LC6499" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Do nothing.</span></td>
      </tr>
      <tr>
        <td id="L6500" class="blob-num js-line-number" data-line-number="6500"></td>
        <td id="LC6500" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6501" class="blob-num js-line-number" data-line-number="6501"></td>
        <td id="LC6501" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L6502" class="blob-num js-line-number" data-line-number="6502"></td>
        <td id="LC6502" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> start <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L6503" class="blob-num js-line-number" data-line-number="6503"></td>
        <td id="LC6503" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (<span class="pl-c1">Date</span>.<span class="pl-en">now</span>() <span class="pl-k">-</span> start <span class="pl-k">&lt;</span> msec) {</td>
      </tr>
      <tr>
        <td id="L6504" class="blob-num js-line-number" data-line-number="6504"></td>
        <td id="LC6504" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> Do nothing.</span></td>
      </tr>
      <tr>
        <td id="L6505" class="blob-num js-line-number" data-line-number="6505"></td>
        <td id="LC6505" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6506" class="blob-num js-line-number" data-line-number="6506"></td>
        <td id="LC6506" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6507" class="blob-num js-line-number" data-line-number="6507"></td>
        <td id="LC6507" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6508" class="blob-num js-line-number" data-line-number="6508"></td>
        <td id="LC6508" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6509" class="blob-num js-line-number" data-line-number="6509"></td>
        <td id="LC6509" class="blob-code blob-code-inner js-file-line">  Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_usleep<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> _usleep;<span class="pl-k">function</span> <span class="pl-en">_nanosleep</span>(<span class="pl-smi">rqtp</span>, <span class="pl-smi">rmtp</span>) {</td>
      </tr>
      <tr>
        <td id="L6510" class="blob-num js-line-number" data-line-number="6510"></td>
        <td id="LC6510" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);</span></td>
      </tr>
      <tr>
        <td id="L6511" class="blob-num js-line-number" data-line-number="6511"></td>
        <td id="LC6511" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (rqtp <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6512" class="blob-num js-line-number" data-line-number="6512"></td>
        <td id="LC6512" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">___setErrNo</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L6513" class="blob-num js-line-number" data-line-number="6513"></td>
        <td id="LC6513" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6514" class="blob-num js-line-number" data-line-number="6514"></td>
        <td id="LC6514" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6515" class="blob-num js-line-number" data-line-number="6515"></td>
        <td id="LC6515" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> seconds <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[((rqtp)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L6516" class="blob-num js-line-number" data-line-number="6516"></td>
        <td id="LC6516" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> nanoseconds <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((rqtp)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)];</td>
      </tr>
      <tr>
        <td id="L6517" class="blob-num js-line-number" data-line-number="6517"></td>
        <td id="LC6517" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (nanoseconds <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> nanoseconds <span class="pl-k">&gt;</span> <span class="pl-c1">999999999</span> <span class="pl-k">||</span> seconds <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6518" class="blob-num js-line-number" data-line-number="6518"></td>
        <td id="LC6518" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">___setErrNo</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L6519" class="blob-num js-line-number" data-line-number="6519"></td>
        <td id="LC6519" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6520" class="blob-num js-line-number" data-line-number="6520"></td>
        <td id="LC6520" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6521" class="blob-num js-line-number" data-line-number="6521"></td>
        <td id="LC6521" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (rmtp <span class="pl-k">!==</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L6522" class="blob-num js-line-number" data-line-number="6522"></td>
        <td id="LC6522" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((rmtp)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6523" class="blob-num js-line-number" data-line-number="6523"></td>
        <td id="LC6523" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[(((rmtp)<span class="pl-k">+</span>(<span class="pl-c1">4</span>))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6524" class="blob-num js-line-number" data-line-number="6524"></td>
        <td id="LC6524" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6525" class="blob-num js-line-number" data-line-number="6525"></td>
        <td id="LC6525" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-en">_usleep</span>((seconds <span class="pl-k">*</span> <span class="pl-c1">1e6</span>) <span class="pl-k">+</span> (nanoseconds <span class="pl-k">/</span> <span class="pl-c1">1000</span>));</td>
      </tr>
      <tr>
        <td id="L6526" class="blob-num js-line-number" data-line-number="6526"></td>
        <td id="LC6526" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6527" class="blob-num js-line-number" data-line-number="6527"></td>
        <td id="LC6527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6528" class="blob-num js-line-number" data-line-number="6528"></td>
        <td id="LC6528" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6529" class="blob-num js-line-number" data-line-number="6529"></td>
        <td id="LC6529" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6530" class="blob-num js-line-number" data-line-number="6530"></td>
        <td id="LC6530" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">abortOnCannotGrowMemory</span>(<span class="pl-smi">requestedSize</span>) {</td>
      </tr>
      <tr>
        <td id="L6531" class="blob-num js-line-number" data-line-number="6531"></td>
        <td id="LC6531" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Cannot enlarge memory arrays to size <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> requestedSize <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">HEAP8</span>.<span class="pl-c1">length</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>, (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6532" class="blob-num js-line-number" data-line-number="6532"></td>
        <td id="LC6532" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6533" class="blob-num js-line-number" data-line-number="6533"></td>
        <td id="LC6533" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6534" class="blob-num js-line-number" data-line-number="6534"></td>
        <td id="LC6534" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">emscripten_realloc_buffer</span>(<span class="pl-smi">size</span>) {</td>
      </tr>
      <tr>
        <td id="L6535" class="blob-num js-line-number" data-line-number="6535"></td>
        <td id="LC6535" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6536" class="blob-num js-line-number" data-line-number="6536"></td>
        <td id="LC6536" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> round size grow request up to wasm page size (fixed 64KB per spec)</span></td>
      </tr>
      <tr>
        <td id="L6537" class="blob-num js-line-number" data-line-number="6537"></td>
        <td id="LC6537" class="blob-code blob-code-inner js-file-line">        <span class="pl-smi">wasmMemory</span>.<span class="pl-en">grow</span>((size <span class="pl-k">-</span> <span class="pl-smi">buffer</span>.<span class="pl-smi">byteLength</span> <span class="pl-k">+</span> <span class="pl-c1">65535</span>) <span class="pl-k">&gt;&gt;</span> <span class="pl-c1">16</span>); <span class="pl-c"><span class="pl-c">//</span> .grow() takes a delta compared to the previous size</span></td>
      </tr>
      <tr>
        <td id="L6538" class="blob-num js-line-number" data-line-number="6538"></td>
        <td id="LC6538" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">updateGlobalBufferAndViews</span>(<span class="pl-smi">wasmMemory</span>.<span class="pl-smi">buffer</span>);</td>
      </tr>
      <tr>
        <td id="L6539" class="blob-num js-line-number" data-line-number="6539"></td>
        <td id="LC6539" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">/*</span>success<span class="pl-c">*/</span></span>;</td>
      </tr>
      <tr>
        <td id="L6540" class="blob-num js-line-number" data-line-number="6540"></td>
        <td id="LC6540" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">catch</span>(e) {</td>
      </tr>
      <tr>
        <td id="L6541" class="blob-num js-line-number" data-line-number="6541"></td>
        <td id="LC6541" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>emscripten_realloc_buffer: Attempted to grow heap from <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">buffer</span>.<span class="pl-smi">byteLength</span>  <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes to <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> size <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes, but got error: <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> e);</td>
      </tr>
      <tr>
        <td id="L6542" class="blob-num js-line-number" data-line-number="6542"></td>
        <td id="LC6542" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6543" class="blob-num js-line-number" data-line-number="6543"></td>
        <td id="LC6543" class="blob-code blob-code-inner js-file-line">    }function _emscripten_resize_heap(requestedSize) {</td>
      </tr>
      <tr>
        <td id="L6544" class="blob-num js-line-number" data-line-number="6544"></td>
        <td id="LC6544" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> oldSize <span class="pl-k">=</span> <span class="pl-en">_emscripten_get_heap_size</span>();</td>
      </tr>
      <tr>
        <td id="L6545" class="blob-num js-line-number" data-line-number="6545"></td>
        <td id="LC6545" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.</span></td>
      </tr>
      <tr>
        <td id="L6546" class="blob-num js-line-number" data-line-number="6546"></td>
        <td id="LC6546" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">assert</span>(requestedSize <span class="pl-k">&gt;</span> oldSize);</td>
      </tr>
      <tr>
        <td id="L6547" class="blob-num js-line-number" data-line-number="6547"></td>
        <td id="LC6547" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6548" class="blob-num js-line-number" data-line-number="6548"></td>
        <td id="LC6548" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6549" class="blob-num js-line-number" data-line-number="6549"></td>
        <td id="LC6549" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">PAGE_MULTIPLE</span> <span class="pl-k">=</span> <span class="pl-c1">65536</span>;</td>
      </tr>
      <tr>
        <td id="L6550" class="blob-num js-line-number" data-line-number="6550"></td>
        <td id="LC6550" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">LIMIT</span> <span class="pl-k">=</span> <span class="pl-c1">2147483648</span> <span class="pl-k">-</span> <span class="pl-c1">PAGE_MULTIPLE</span>; <span class="pl-c"><span class="pl-c">//</span> We can do one page short of 2GB as theoretical maximum.</span></td>
      </tr>
      <tr>
        <td id="L6551" class="blob-num js-line-number" data-line-number="6551"></td>
        <td id="LC6551" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6552" class="blob-num js-line-number" data-line-number="6552"></td>
        <td id="LC6552" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (requestedSize <span class="pl-k">&gt;</span> <span class="pl-c1">LIMIT</span>) {</td>
      </tr>
      <tr>
        <td id="L6553" class="blob-num js-line-number" data-line-number="6553"></td>
        <td id="LC6553" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Cannot enlarge memory, asked to go up to <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> requestedSize <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes, but the limit is <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">LIMIT</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6554" class="blob-num js-line-number" data-line-number="6554"></td>
        <td id="LC6554" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L6555" class="blob-num js-line-number" data-line-number="6555"></td>
        <td id="LC6555" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6556" class="blob-num js-line-number" data-line-number="6556"></td>
        <td id="LC6556" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6557" class="blob-num js-line-number" data-line-number="6557"></td>
        <td id="LC6557" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> <span class="pl-c1">MIN_TOTAL_MEMORY</span> <span class="pl-k">=</span> <span class="pl-c1">16777216</span>;</td>
      </tr>
      <tr>
        <td id="L6558" class="blob-num js-line-number" data-line-number="6558"></td>
        <td id="LC6558" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> newSize <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(oldSize, <span class="pl-c1">MIN_TOTAL_MEMORY</span>); <span class="pl-c"><span class="pl-c">//</span> So the loop below will not be infinite, and minimum asm.js memory size is 16MB.</span></td>
      </tr>
      <tr>
        <td id="L6559" class="blob-num js-line-number" data-line-number="6559"></td>
        <td id="LC6559" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6560" class="blob-num js-line-number" data-line-number="6560"></td>
        <td id="LC6560" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> TODO: see realloc_buffer - for PTHREADS we may want to decrease these jumps</span></td>
      </tr>
      <tr>
        <td id="L6561" class="blob-num js-line-number" data-line-number="6561"></td>
        <td id="LC6561" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">while</span> (newSize <span class="pl-k">&lt;</span> requestedSize) { <span class="pl-c"><span class="pl-c">//</span> Keep incrementing the heap size as long as it&#39;s less than what is requested.</span></td>
      </tr>
      <tr>
        <td id="L6562" class="blob-num js-line-number" data-line-number="6562"></td>
        <td id="LC6562" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (newSize <span class="pl-k">&lt;=</span> <span class="pl-c1">536870912</span>) {</td>
      </tr>
      <tr>
        <td id="L6563" class="blob-num js-line-number" data-line-number="6563"></td>
        <td id="LC6563" class="blob-code blob-code-inner js-file-line">          newSize <span class="pl-k">=</span> <span class="pl-en">alignUp</span>(<span class="pl-c1">2</span> <span class="pl-k">*</span> newSize, <span class="pl-c1">PAGE_MULTIPLE</span>); <span class="pl-c"><span class="pl-c">//</span> Simple heuristic: double until 1GB...</span></td>
      </tr>
      <tr>
        <td id="L6564" class="blob-num js-line-number" data-line-number="6564"></td>
        <td id="LC6564" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L6565" class="blob-num js-line-number" data-line-number="6565"></td>
        <td id="LC6565" class="blob-code blob-code-inner js-file-line">          <span class="pl-c"><span class="pl-c">//</span> ..., but after that, add smaller increments towards 2GB, which we cannot reach</span></td>
      </tr>
      <tr>
        <td id="L6566" class="blob-num js-line-number" data-line-number="6566"></td>
        <td id="LC6566" class="blob-code blob-code-inner js-file-line">          newSize <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(<span class="pl-en">alignUp</span>((<span class="pl-c1">3</span> <span class="pl-k">*</span> newSize <span class="pl-k">+</span> <span class="pl-c1">2147483648</span>) <span class="pl-k">/</span> <span class="pl-c1">4</span>, <span class="pl-c1">PAGE_MULTIPLE</span>), <span class="pl-c1">LIMIT</span>);</td>
      </tr>
      <tr>
        <td id="L6567" class="blob-num js-line-number" data-line-number="6567"></td>
        <td id="LC6567" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6568" class="blob-num js-line-number" data-line-number="6568"></td>
        <td id="LC6568" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6569" class="blob-num js-line-number" data-line-number="6569"></td>
        <td id="LC6569" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (newSize <span class="pl-k">===</span> oldSize) {</td>
      </tr>
      <tr>
        <td id="L6570" class="blob-num js-line-number" data-line-number="6570"></td>
        <td id="LC6570" class="blob-code blob-code-inner js-file-line">          <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">HEAP8</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L6571" class="blob-num js-line-number" data-line-number="6571"></td>
        <td id="LC6571" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6572" class="blob-num js-line-number" data-line-number="6572"></td>
        <td id="LC6572" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6573" class="blob-num js-line-number" data-line-number="6573"></td>
        <td id="LC6573" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6574" class="blob-num js-line-number" data-line-number="6574"></td>
        <td id="LC6574" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6575" class="blob-num js-line-number" data-line-number="6575"></td>
        <td id="LC6575" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6576" class="blob-num js-line-number" data-line-number="6576"></td>
        <td id="LC6576" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> replacement <span class="pl-k">=</span> <span class="pl-en">emscripten_realloc_buffer</span>(newSize);</td>
      </tr>
      <tr>
        <td id="L6577" class="blob-num js-line-number" data-line-number="6577"></td>
        <td id="LC6577" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>replacement) {</td>
      </tr>
      <tr>
        <td id="L6578" class="blob-num js-line-number" data-line-number="6578"></td>
        <td id="LC6578" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>Failed to grow the heap from <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> oldSize <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes to <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> newSize <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> bytes, not enough memory!<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6579" class="blob-num js-line-number" data-line-number="6579"></td>
        <td id="LC6579" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L6580" class="blob-num js-line-number" data-line-number="6580"></td>
        <td id="LC6580" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6581" class="blob-num js-line-number" data-line-number="6581"></td>
        <td id="LC6581" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6582" class="blob-num js-line-number" data-line-number="6582"></td>
        <td id="LC6582" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6583" class="blob-num js-line-number" data-line-number="6583"></td>
        <td id="LC6583" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="L6584" class="blob-num js-line-number" data-line-number="6584"></td>
        <td id="LC6584" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L6585" class="blob-num js-line-number" data-line-number="6585"></td>
        <td id="LC6585" class="blob-code blob-code-inner js-file-line">    } </td>
      </tr>
      <tr>
        <td id="L6586" class="blob-num js-line-number" data-line-number="6586"></td>
        <td id="LC6586" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6587" class="blob-num js-line-number" data-line-number="6587"></td>
        <td id="LC6587" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_sysconf</span>(<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L6588" class="blob-num js-line-number" data-line-number="6588"></td>
        <td id="LC6588" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> long sysconf(int name);</span></td>
      </tr>
      <tr>
        <td id="L6589" class="blob-num js-line-number" data-line-number="6589"></td>
        <td id="LC6589" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html</span></td>
      </tr>
      <tr>
        <td id="L6590" class="blob-num js-line-number" data-line-number="6590"></td>
        <td id="LC6590" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">switch</span>(name) {</td>
      </tr>
      <tr>
        <td id="L6591" class="blob-num js-line-number" data-line-number="6591"></td>
        <td id="LC6591" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">30</span>: <span class="pl-k">return</span> <span class="pl-c1">PAGE_SIZE</span>;</td>
      </tr>
      <tr>
        <td id="L6592" class="blob-num js-line-number" data-line-number="6592"></td>
        <td id="LC6592" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">85</span>:</td>
      </tr>
      <tr>
        <td id="L6593" class="blob-num js-line-number" data-line-number="6593"></td>
        <td id="LC6593" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">var</span> maxHeapSize <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span> <span class="pl-k">-</span> <span class="pl-c1">65536</span>;</td>
      </tr>
      <tr>
        <td id="L6594" class="blob-num js-line-number" data-line-number="6594"></td>
        <td id="LC6594" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> maxHeapSize <span class="pl-k">/</span> <span class="pl-c1">PAGE_SIZE</span>;</td>
      </tr>
      <tr>
        <td id="L6595" class="blob-num js-line-number" data-line-number="6595"></td>
        <td id="LC6595" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">132</span>:</td>
      </tr>
      <tr>
        <td id="L6596" class="blob-num js-line-number" data-line-number="6596"></td>
        <td id="LC6596" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">133</span>:</td>
      </tr>
      <tr>
        <td id="L6597" class="blob-num js-line-number" data-line-number="6597"></td>
        <td id="LC6597" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">12</span>:</td>
      </tr>
      <tr>
        <td id="L6598" class="blob-num js-line-number" data-line-number="6598"></td>
        <td id="LC6598" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">137</span>:</td>
      </tr>
      <tr>
        <td id="L6599" class="blob-num js-line-number" data-line-number="6599"></td>
        <td id="LC6599" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">138</span>:</td>
      </tr>
      <tr>
        <td id="L6600" class="blob-num js-line-number" data-line-number="6600"></td>
        <td id="LC6600" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">15</span>:</td>
      </tr>
      <tr>
        <td id="L6601" class="blob-num js-line-number" data-line-number="6601"></td>
        <td id="LC6601" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">235</span>:</td>
      </tr>
      <tr>
        <td id="L6602" class="blob-num js-line-number" data-line-number="6602"></td>
        <td id="LC6602" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">16</span>:</td>
      </tr>
      <tr>
        <td id="L6603" class="blob-num js-line-number" data-line-number="6603"></td>
        <td id="LC6603" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">17</span>:</td>
      </tr>
      <tr>
        <td id="L6604" class="blob-num js-line-number" data-line-number="6604"></td>
        <td id="LC6604" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">18</span>:</td>
      </tr>
      <tr>
        <td id="L6605" class="blob-num js-line-number" data-line-number="6605"></td>
        <td id="LC6605" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">19</span>:</td>
      </tr>
      <tr>
        <td id="L6606" class="blob-num js-line-number" data-line-number="6606"></td>
        <td id="LC6606" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">20</span>:</td>
      </tr>
      <tr>
        <td id="L6607" class="blob-num js-line-number" data-line-number="6607"></td>
        <td id="LC6607" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">149</span>:</td>
      </tr>
      <tr>
        <td id="L6608" class="blob-num js-line-number" data-line-number="6608"></td>
        <td id="LC6608" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">13</span>:</td>
      </tr>
      <tr>
        <td id="L6609" class="blob-num js-line-number" data-line-number="6609"></td>
        <td id="LC6609" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">10</span>:</td>
      </tr>
      <tr>
        <td id="L6610" class="blob-num js-line-number" data-line-number="6610"></td>
        <td id="LC6610" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">236</span>:</td>
      </tr>
      <tr>
        <td id="L6611" class="blob-num js-line-number" data-line-number="6611"></td>
        <td id="LC6611" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">153</span>:</td>
      </tr>
      <tr>
        <td id="L6612" class="blob-num js-line-number" data-line-number="6612"></td>
        <td id="LC6612" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">9</span>:</td>
      </tr>
      <tr>
        <td id="L6613" class="blob-num js-line-number" data-line-number="6613"></td>
        <td id="LC6613" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">21</span>:</td>
      </tr>
      <tr>
        <td id="L6614" class="blob-num js-line-number" data-line-number="6614"></td>
        <td id="LC6614" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">22</span>:</td>
      </tr>
      <tr>
        <td id="L6615" class="blob-num js-line-number" data-line-number="6615"></td>
        <td id="LC6615" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">159</span>:</td>
      </tr>
      <tr>
        <td id="L6616" class="blob-num js-line-number" data-line-number="6616"></td>
        <td id="LC6616" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">154</span>:</td>
      </tr>
      <tr>
        <td id="L6617" class="blob-num js-line-number" data-line-number="6617"></td>
        <td id="LC6617" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">14</span>:</td>
      </tr>
      <tr>
        <td id="L6618" class="blob-num js-line-number" data-line-number="6618"></td>
        <td id="LC6618" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">77</span>:</td>
      </tr>
      <tr>
        <td id="L6619" class="blob-num js-line-number" data-line-number="6619"></td>
        <td id="LC6619" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">78</span>:</td>
      </tr>
      <tr>
        <td id="L6620" class="blob-num js-line-number" data-line-number="6620"></td>
        <td id="LC6620" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">139</span>:</td>
      </tr>
      <tr>
        <td id="L6621" class="blob-num js-line-number" data-line-number="6621"></td>
        <td id="LC6621" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">80</span>:</td>
      </tr>
      <tr>
        <td id="L6622" class="blob-num js-line-number" data-line-number="6622"></td>
        <td id="LC6622" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">81</span>:</td>
      </tr>
      <tr>
        <td id="L6623" class="blob-num js-line-number" data-line-number="6623"></td>
        <td id="LC6623" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">82</span>:</td>
      </tr>
      <tr>
        <td id="L6624" class="blob-num js-line-number" data-line-number="6624"></td>
        <td id="LC6624" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">68</span>:</td>
      </tr>
      <tr>
        <td id="L6625" class="blob-num js-line-number" data-line-number="6625"></td>
        <td id="LC6625" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">67</span>:</td>
      </tr>
      <tr>
        <td id="L6626" class="blob-num js-line-number" data-line-number="6626"></td>
        <td id="LC6626" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">164</span>:</td>
      </tr>
      <tr>
        <td id="L6627" class="blob-num js-line-number" data-line-number="6627"></td>
        <td id="LC6627" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">11</span>:</td>
      </tr>
      <tr>
        <td id="L6628" class="blob-num js-line-number" data-line-number="6628"></td>
        <td id="LC6628" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">29</span>:</td>
      </tr>
      <tr>
        <td id="L6629" class="blob-num js-line-number" data-line-number="6629"></td>
        <td id="LC6629" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">47</span>:</td>
      </tr>
      <tr>
        <td id="L6630" class="blob-num js-line-number" data-line-number="6630"></td>
        <td id="LC6630" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">48</span>:</td>
      </tr>
      <tr>
        <td id="L6631" class="blob-num js-line-number" data-line-number="6631"></td>
        <td id="LC6631" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">95</span>:</td>
      </tr>
      <tr>
        <td id="L6632" class="blob-num js-line-number" data-line-number="6632"></td>
        <td id="LC6632" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">52</span>:</td>
      </tr>
      <tr>
        <td id="L6633" class="blob-num js-line-number" data-line-number="6633"></td>
        <td id="LC6633" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">51</span>:</td>
      </tr>
      <tr>
        <td id="L6634" class="blob-num js-line-number" data-line-number="6634"></td>
        <td id="LC6634" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">46</span>:</td>
      </tr>
      <tr>
        <td id="L6635" class="blob-num js-line-number" data-line-number="6635"></td>
        <td id="LC6635" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">200809</span>;</td>
      </tr>
      <tr>
        <td id="L6636" class="blob-num js-line-number" data-line-number="6636"></td>
        <td id="LC6636" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">79</span>:</td>
      </tr>
      <tr>
        <td id="L6637" class="blob-num js-line-number" data-line-number="6637"></td>
        <td id="LC6637" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6638" class="blob-num js-line-number" data-line-number="6638"></td>
        <td id="LC6638" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">27</span>:</td>
      </tr>
      <tr>
        <td id="L6639" class="blob-num js-line-number" data-line-number="6639"></td>
        <td id="LC6639" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">246</span>:</td>
      </tr>
      <tr>
        <td id="L6640" class="blob-num js-line-number" data-line-number="6640"></td>
        <td id="LC6640" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">127</span>:</td>
      </tr>
      <tr>
        <td id="L6641" class="blob-num js-line-number" data-line-number="6641"></td>
        <td id="LC6641" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">128</span>:</td>
      </tr>
      <tr>
        <td id="L6642" class="blob-num js-line-number" data-line-number="6642"></td>
        <td id="LC6642" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">23</span>:</td>
      </tr>
      <tr>
        <td id="L6643" class="blob-num js-line-number" data-line-number="6643"></td>
        <td id="LC6643" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">24</span>:</td>
      </tr>
      <tr>
        <td id="L6644" class="blob-num js-line-number" data-line-number="6644"></td>
        <td id="LC6644" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">160</span>:</td>
      </tr>
      <tr>
        <td id="L6645" class="blob-num js-line-number" data-line-number="6645"></td>
        <td id="LC6645" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">161</span>:</td>
      </tr>
      <tr>
        <td id="L6646" class="blob-num js-line-number" data-line-number="6646"></td>
        <td id="LC6646" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">181</span>:</td>
      </tr>
      <tr>
        <td id="L6647" class="blob-num js-line-number" data-line-number="6647"></td>
        <td id="LC6647" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">182</span>:</td>
      </tr>
      <tr>
        <td id="L6648" class="blob-num js-line-number" data-line-number="6648"></td>
        <td id="LC6648" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">242</span>:</td>
      </tr>
      <tr>
        <td id="L6649" class="blob-num js-line-number" data-line-number="6649"></td>
        <td id="LC6649" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">183</span>:</td>
      </tr>
      <tr>
        <td id="L6650" class="blob-num js-line-number" data-line-number="6650"></td>
        <td id="LC6650" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">184</span>:</td>
      </tr>
      <tr>
        <td id="L6651" class="blob-num js-line-number" data-line-number="6651"></td>
        <td id="LC6651" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">243</span>:</td>
      </tr>
      <tr>
        <td id="L6652" class="blob-num js-line-number" data-line-number="6652"></td>
        <td id="LC6652" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">244</span>:</td>
      </tr>
      <tr>
        <td id="L6653" class="blob-num js-line-number" data-line-number="6653"></td>
        <td id="LC6653" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">245</span>:</td>
      </tr>
      <tr>
        <td id="L6654" class="blob-num js-line-number" data-line-number="6654"></td>
        <td id="LC6654" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">165</span>:</td>
      </tr>
      <tr>
        <td id="L6655" class="blob-num js-line-number" data-line-number="6655"></td>
        <td id="LC6655" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">178</span>:</td>
      </tr>
      <tr>
        <td id="L6656" class="blob-num js-line-number" data-line-number="6656"></td>
        <td id="LC6656" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">179</span>:</td>
      </tr>
      <tr>
        <td id="L6657" class="blob-num js-line-number" data-line-number="6657"></td>
        <td id="LC6657" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">49</span>:</td>
      </tr>
      <tr>
        <td id="L6658" class="blob-num js-line-number" data-line-number="6658"></td>
        <td id="LC6658" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">50</span>:</td>
      </tr>
      <tr>
        <td id="L6659" class="blob-num js-line-number" data-line-number="6659"></td>
        <td id="LC6659" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">168</span>:</td>
      </tr>
      <tr>
        <td id="L6660" class="blob-num js-line-number" data-line-number="6660"></td>
        <td id="LC6660" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">169</span>:</td>
      </tr>
      <tr>
        <td id="L6661" class="blob-num js-line-number" data-line-number="6661"></td>
        <td id="LC6661" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">175</span>:</td>
      </tr>
      <tr>
        <td id="L6662" class="blob-num js-line-number" data-line-number="6662"></td>
        <td id="LC6662" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">170</span>:</td>
      </tr>
      <tr>
        <td id="L6663" class="blob-num js-line-number" data-line-number="6663"></td>
        <td id="LC6663" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">171</span>:</td>
      </tr>
      <tr>
        <td id="L6664" class="blob-num js-line-number" data-line-number="6664"></td>
        <td id="LC6664" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">172</span>:</td>
      </tr>
      <tr>
        <td id="L6665" class="blob-num js-line-number" data-line-number="6665"></td>
        <td id="LC6665" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">97</span>:</td>
      </tr>
      <tr>
        <td id="L6666" class="blob-num js-line-number" data-line-number="6666"></td>
        <td id="LC6666" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">76</span>:</td>
      </tr>
      <tr>
        <td id="L6667" class="blob-num js-line-number" data-line-number="6667"></td>
        <td id="LC6667" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">32</span>:</td>
      </tr>
      <tr>
        <td id="L6668" class="blob-num js-line-number" data-line-number="6668"></td>
        <td id="LC6668" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">173</span>:</td>
      </tr>
      <tr>
        <td id="L6669" class="blob-num js-line-number" data-line-number="6669"></td>
        <td id="LC6669" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">35</span>:</td>
      </tr>
      <tr>
        <td id="L6670" class="blob-num js-line-number" data-line-number="6670"></td>
        <td id="LC6670" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6671" class="blob-num js-line-number" data-line-number="6671"></td>
        <td id="LC6671" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">176</span>:</td>
      </tr>
      <tr>
        <td id="L6672" class="blob-num js-line-number" data-line-number="6672"></td>
        <td id="LC6672" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">177</span>:</td>
      </tr>
      <tr>
        <td id="L6673" class="blob-num js-line-number" data-line-number="6673"></td>
        <td id="LC6673" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">7</span>:</td>
      </tr>
      <tr>
        <td id="L6674" class="blob-num js-line-number" data-line-number="6674"></td>
        <td id="LC6674" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">155</span>:</td>
      </tr>
      <tr>
        <td id="L6675" class="blob-num js-line-number" data-line-number="6675"></td>
        <td id="LC6675" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">8</span>:</td>
      </tr>
      <tr>
        <td id="L6676" class="blob-num js-line-number" data-line-number="6676"></td>
        <td id="LC6676" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">157</span>:</td>
      </tr>
      <tr>
        <td id="L6677" class="blob-num js-line-number" data-line-number="6677"></td>
        <td id="LC6677" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">125</span>:</td>
      </tr>
      <tr>
        <td id="L6678" class="blob-num js-line-number" data-line-number="6678"></td>
        <td id="LC6678" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">126</span>:</td>
      </tr>
      <tr>
        <td id="L6679" class="blob-num js-line-number" data-line-number="6679"></td>
        <td id="LC6679" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">92</span>:</td>
      </tr>
      <tr>
        <td id="L6680" class="blob-num js-line-number" data-line-number="6680"></td>
        <td id="LC6680" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">93</span>:</td>
      </tr>
      <tr>
        <td id="L6681" class="blob-num js-line-number" data-line-number="6681"></td>
        <td id="LC6681" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">129</span>:</td>
      </tr>
      <tr>
        <td id="L6682" class="blob-num js-line-number" data-line-number="6682"></td>
        <td id="LC6682" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">130</span>:</td>
      </tr>
      <tr>
        <td id="L6683" class="blob-num js-line-number" data-line-number="6683"></td>
        <td id="LC6683" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">131</span>:</td>
      </tr>
      <tr>
        <td id="L6684" class="blob-num js-line-number" data-line-number="6684"></td>
        <td id="LC6684" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">94</span>:</td>
      </tr>
      <tr>
        <td id="L6685" class="blob-num js-line-number" data-line-number="6685"></td>
        <td id="LC6685" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">91</span>:</td>
      </tr>
      <tr>
        <td id="L6686" class="blob-num js-line-number" data-line-number="6686"></td>
        <td id="LC6686" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6687" class="blob-num js-line-number" data-line-number="6687"></td>
        <td id="LC6687" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">74</span>:</td>
      </tr>
      <tr>
        <td id="L6688" class="blob-num js-line-number" data-line-number="6688"></td>
        <td id="LC6688" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">60</span>:</td>
      </tr>
      <tr>
        <td id="L6689" class="blob-num js-line-number" data-line-number="6689"></td>
        <td id="LC6689" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">69</span>:</td>
      </tr>
      <tr>
        <td id="L6690" class="blob-num js-line-number" data-line-number="6690"></td>
        <td id="LC6690" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">70</span>:</td>
      </tr>
      <tr>
        <td id="L6691" class="blob-num js-line-number" data-line-number="6691"></td>
        <td id="LC6691" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">4</span>:</td>
      </tr>
      <tr>
        <td id="L6692" class="blob-num js-line-number" data-line-number="6692"></td>
        <td id="LC6692" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">1024</span>;</td>
      </tr>
      <tr>
        <td id="L6693" class="blob-num js-line-number" data-line-number="6693"></td>
        <td id="LC6693" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">31</span>:</td>
      </tr>
      <tr>
        <td id="L6694" class="blob-num js-line-number" data-line-number="6694"></td>
        <td id="LC6694" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">42</span>:</td>
      </tr>
      <tr>
        <td id="L6695" class="blob-num js-line-number" data-line-number="6695"></td>
        <td id="LC6695" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">72</span>:</td>
      </tr>
      <tr>
        <td id="L6696" class="blob-num js-line-number" data-line-number="6696"></td>
        <td id="LC6696" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">32</span>;</td>
      </tr>
      <tr>
        <td id="L6697" class="blob-num js-line-number" data-line-number="6697"></td>
        <td id="LC6697" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">87</span>:</td>
      </tr>
      <tr>
        <td id="L6698" class="blob-num js-line-number" data-line-number="6698"></td>
        <td id="LC6698" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">26</span>:</td>
      </tr>
      <tr>
        <td id="L6699" class="blob-num js-line-number" data-line-number="6699"></td>
        <td id="LC6699" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">33</span>:</td>
      </tr>
      <tr>
        <td id="L6700" class="blob-num js-line-number" data-line-number="6700"></td>
        <td id="LC6700" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">2147483647</span>;</td>
      </tr>
      <tr>
        <td id="L6701" class="blob-num js-line-number" data-line-number="6701"></td>
        <td id="LC6701" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">34</span>:</td>
      </tr>
      <tr>
        <td id="L6702" class="blob-num js-line-number" data-line-number="6702"></td>
        <td id="LC6702" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">1</span>:</td>
      </tr>
      <tr>
        <td id="L6703" class="blob-num js-line-number" data-line-number="6703"></td>
        <td id="LC6703" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">47839</span>;</td>
      </tr>
      <tr>
        <td id="L6704" class="blob-num js-line-number" data-line-number="6704"></td>
        <td id="LC6704" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">38</span>:</td>
      </tr>
      <tr>
        <td id="L6705" class="blob-num js-line-number" data-line-number="6705"></td>
        <td id="LC6705" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">36</span>:</td>
      </tr>
      <tr>
        <td id="L6706" class="blob-num js-line-number" data-line-number="6706"></td>
        <td id="LC6706" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">99</span>;</td>
      </tr>
      <tr>
        <td id="L6707" class="blob-num js-line-number" data-line-number="6707"></td>
        <td id="LC6707" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">43</span>:</td>
      </tr>
      <tr>
        <td id="L6708" class="blob-num js-line-number" data-line-number="6708"></td>
        <td id="LC6708" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">37</span>:</td>
      </tr>
      <tr>
        <td id="L6709" class="blob-num js-line-number" data-line-number="6709"></td>
        <td id="LC6709" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">2048</span>;</td>
      </tr>
      <tr>
        <td id="L6710" class="blob-num js-line-number" data-line-number="6710"></td>
        <td id="LC6710" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">0</span>: <span class="pl-k">return</span> <span class="pl-c1">2097152</span>;</td>
      </tr>
      <tr>
        <td id="L6711" class="blob-num js-line-number" data-line-number="6711"></td>
        <td id="LC6711" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">3</span>: <span class="pl-k">return</span> <span class="pl-c1">65536</span>;</td>
      </tr>
      <tr>
        <td id="L6712" class="blob-num js-line-number" data-line-number="6712"></td>
        <td id="LC6712" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">28</span>: <span class="pl-k">return</span> <span class="pl-c1">32768</span>;</td>
      </tr>
      <tr>
        <td id="L6713" class="blob-num js-line-number" data-line-number="6713"></td>
        <td id="LC6713" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">44</span>: <span class="pl-k">return</span> <span class="pl-c1">32767</span>;</td>
      </tr>
      <tr>
        <td id="L6714" class="blob-num js-line-number" data-line-number="6714"></td>
        <td id="LC6714" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">75</span>: <span class="pl-k">return</span> <span class="pl-c1">16384</span>;</td>
      </tr>
      <tr>
        <td id="L6715" class="blob-num js-line-number" data-line-number="6715"></td>
        <td id="LC6715" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">39</span>: <span class="pl-k">return</span> <span class="pl-c1">1000</span>;</td>
      </tr>
      <tr>
        <td id="L6716" class="blob-num js-line-number" data-line-number="6716"></td>
        <td id="LC6716" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">89</span>: <span class="pl-k">return</span> <span class="pl-c1">700</span>;</td>
      </tr>
      <tr>
        <td id="L6717" class="blob-num js-line-number" data-line-number="6717"></td>
        <td id="LC6717" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">71</span>: <span class="pl-k">return</span> <span class="pl-c1">256</span>;</td>
      </tr>
      <tr>
        <td id="L6718" class="blob-num js-line-number" data-line-number="6718"></td>
        <td id="LC6718" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">40</span>: <span class="pl-k">return</span> <span class="pl-c1">255</span>;</td>
      </tr>
      <tr>
        <td id="L6719" class="blob-num js-line-number" data-line-number="6719"></td>
        <td id="LC6719" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">2</span>: <span class="pl-k">return</span> <span class="pl-c1">100</span>;</td>
      </tr>
      <tr>
        <td id="L6720" class="blob-num js-line-number" data-line-number="6720"></td>
        <td id="LC6720" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">180</span>: <span class="pl-k">return</span> <span class="pl-c1">64</span>;</td>
      </tr>
      <tr>
        <td id="L6721" class="blob-num js-line-number" data-line-number="6721"></td>
        <td id="LC6721" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">25</span>: <span class="pl-k">return</span> <span class="pl-c1">20</span>;</td>
      </tr>
      <tr>
        <td id="L6722" class="blob-num js-line-number" data-line-number="6722"></td>
        <td id="LC6722" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">5</span>: <span class="pl-k">return</span> <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L6723" class="blob-num js-line-number" data-line-number="6723"></td>
        <td id="LC6723" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">6</span>: <span class="pl-k">return</span> <span class="pl-c1">6</span>;</td>
      </tr>
      <tr>
        <td id="L6724" class="blob-num js-line-number" data-line-number="6724"></td>
        <td id="LC6724" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">73</span>: <span class="pl-k">return</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L6725" class="blob-num js-line-number" data-line-number="6725"></td>
        <td id="LC6725" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">case</span> <span class="pl-c1">84</span>: {</td>
      </tr>
      <tr>
        <td id="L6726" class="blob-num js-line-number" data-line-number="6726"></td>
        <td id="LC6726" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">navigator</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>) <span class="pl-k">return</span> <span class="pl-c1">navigator</span>[<span class="pl-s"><span class="pl-pds">&#39;</span>hardwareConcurrency<span class="pl-pds">&#39;</span></span>] <span class="pl-k">||</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6727" class="blob-num js-line-number" data-line-number="6727"></td>
        <td id="LC6727" class="blob-code blob-code-inner js-file-line">          <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6728" class="blob-num js-line-number" data-line-number="6728"></td>
        <td id="LC6728" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6729" class="blob-num js-line-number" data-line-number="6729"></td>
        <td id="LC6729" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6730" class="blob-num js-line-number" data-line-number="6730"></td>
        <td id="LC6730" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">___setErrNo</span>(<span class="pl-c1">22</span>);</td>
      </tr>
      <tr>
        <td id="L6731" class="blob-num js-line-number" data-line-number="6731"></td>
        <td id="LC6731" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6732" class="blob-num js-line-number" data-line-number="6732"></td>
        <td id="LC6732" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6733" class="blob-num js-line-number" data-line-number="6733"></td>
        <td id="LC6733" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6734" class="blob-num js-line-number" data-line-number="6734"></td>
        <td id="LC6734" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_time</span>(<span class="pl-smi">ptr</span>) {</td>
      </tr>
      <tr>
        <td id="L6735" class="blob-num js-line-number" data-line-number="6735"></td>
        <td id="LC6735" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> ret <span class="pl-k">=</span> (<span class="pl-c1">Date</span>.<span class="pl-en">now</span>()<span class="pl-k">/</span><span class="pl-c1">1000</span>)<span class="pl-k">|</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6736" class="blob-num js-line-number" data-line-number="6736"></td>
        <td id="LC6736" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (ptr) {</td>
      </tr>
      <tr>
        <td id="L6737" class="blob-num js-line-number" data-line-number="6737"></td>
        <td id="LC6737" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">HEAP32</span>[((ptr)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)]<span class="pl-k">=</span>ret;</td>
      </tr>
      <tr>
        <td id="L6738" class="blob-num js-line-number" data-line-number="6738"></td>
        <td id="LC6738" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6739" class="blob-num js-line-number" data-line-number="6739"></td>
        <td id="LC6739" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L6740" class="blob-num js-line-number" data-line-number="6740"></td>
        <td id="LC6740" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6741" class="blob-num js-line-number" data-line-number="6741"></td>
        <td id="LC6741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6742" class="blob-num js-line-number" data-line-number="6742"></td>
        <td id="LC6742" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">_utimes</span>(<span class="pl-smi">path</span>, <span class="pl-smi">times</span>) {</td>
      </tr>
      <tr>
        <td id="L6743" class="blob-num js-line-number" data-line-number="6743"></td>
        <td id="LC6743" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> time;</td>
      </tr>
      <tr>
        <td id="L6744" class="blob-num js-line-number" data-line-number="6744"></td>
        <td id="LC6744" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (times) {</td>
      </tr>
      <tr>
        <td id="L6745" class="blob-num js-line-number" data-line-number="6745"></td>
        <td id="LC6745" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">var</span> offset <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6746" class="blob-num js-line-number" data-line-number="6746"></td>
        <td id="LC6746" class="blob-code blob-code-inner js-file-line">        time <span class="pl-k">=</span> <span class="pl-c1">HEAP32</span>[(((times)<span class="pl-k">+</span>(offset))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)] <span class="pl-k">*</span> <span class="pl-c1">1000</span>;</td>
      </tr>
      <tr>
        <td id="L6747" class="blob-num js-line-number" data-line-number="6747"></td>
        <td id="LC6747" class="blob-code blob-code-inner js-file-line">        offset <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-k">+</span> <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L6748" class="blob-num js-line-number" data-line-number="6748"></td>
        <td id="LC6748" class="blob-code blob-code-inner js-file-line">        time <span class="pl-k">+=</span> <span class="pl-c1">HEAP32</span>[(((times)<span class="pl-k">+</span>(offset))<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span>)] <span class="pl-k">/</span> <span class="pl-c1">1000</span>;</td>
      </tr>
      <tr>
        <td id="L6749" class="blob-num js-line-number" data-line-number="6749"></td>
        <td id="LC6749" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L6750" class="blob-num js-line-number" data-line-number="6750"></td>
        <td id="LC6750" class="blob-code blob-code-inner js-file-line">        time <span class="pl-k">=</span> <span class="pl-c1">Date</span>.<span class="pl-en">now</span>();</td>
      </tr>
      <tr>
        <td id="L6751" class="blob-num js-line-number" data-line-number="6751"></td>
        <td id="LC6751" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6752" class="blob-num js-line-number" data-line-number="6752"></td>
        <td id="LC6752" class="blob-code blob-code-inner js-file-line">      path <span class="pl-k">=</span> <span class="pl-en">UTF8ToString</span>(path);</td>
      </tr>
      <tr>
        <td id="L6753" class="blob-num js-line-number" data-line-number="6753"></td>
        <td id="LC6753" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6754" class="blob-num js-line-number" data-line-number="6754"></td>
        <td id="LC6754" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">utime</span>(path, time, time);</td>
      </tr>
      <tr>
        <td id="L6755" class="blob-num js-line-number" data-line-number="6755"></td>
        <td id="LC6755" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L6756" class="blob-num js-line-number" data-line-number="6756"></td>
        <td id="LC6756" class="blob-code blob-code-inner js-file-line">      } <span class="pl-k">catch</span> (e) {</td>
      </tr>
      <tr>
        <td id="L6757" class="blob-num js-line-number" data-line-number="6757"></td>
        <td id="LC6757" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FS</span>.<span class="pl-en">handleFSError</span>(e);</td>
      </tr>
      <tr>
        <td id="L6758" class="blob-num js-line-number" data-line-number="6758"></td>
        <td id="LC6758" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6759" class="blob-num js-line-number" data-line-number="6759"></td>
        <td id="LC6759" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6760" class="blob-num js-line-number" data-line-number="6760"></td>
        <td id="LC6760" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6761" class="blob-num js-line-number" data-line-number="6761"></td>
        <td id="LC6761" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">FS</span>.<span class="pl-en">staticInit</span>();;</td>
      </tr>
      <tr>
        <td id="L6762" class="blob-num js-line-number" data-line-number="6762"></td>
        <td id="LC6762" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-c1">ENVIRONMENT_HAS_NODE</span>) { <span class="pl-k">var</span> fs <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>fs<span class="pl-pds">&quot;</span></span>); <span class="pl-k">var</span> <span class="pl-c1">NODEJS_PATH</span> <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>path<span class="pl-pds">&quot;</span></span>); <span class="pl-c1">NODEFS</span>.<span class="pl-en">staticInit</span>(); };</td>
      </tr>
      <tr>
        <td id="L6763" class="blob-num js-line-number" data-line-number="6763"></td>
        <td id="LC6763" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> <span class="pl-c1">ASSERTIONS</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L6764" class="blob-num js-line-number" data-line-number="6764"></td>
        <td id="LC6764" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6765" class="blob-num js-line-number" data-line-number="6765"></td>
        <td id="LC6765" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copyright 2017 The Emscripten Authors.  All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L6766" class="blob-num js-line-number" data-line-number="6766"></td>
        <td id="LC6766" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Emscripten is available under two separate licenses, the MIT license and the</span></td>
      </tr>
      <tr>
        <td id="L6767" class="blob-num js-line-number" data-line-number="6767"></td>
        <td id="LC6767" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> University of Illinois/NCSA Open Source License.  Both these licenses can be</span></td>
      </tr>
      <tr>
        <td id="L6768" class="blob-num js-line-number" data-line-number="6768"></td>
        <td id="LC6768" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> found in the LICENSE file.</span></td>
      </tr>
      <tr>
        <td id="L6769" class="blob-num js-line-number" data-line-number="6769"></td>
        <td id="LC6769" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6770" class="blob-num js-line-number" data-line-number="6770"></td>
        <td id="LC6770" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(string, boolean=, number=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6771" class="blob-num js-line-number" data-line-number="6771"></td>
        <td id="LC6771" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">intArrayFromString</span>(<span class="pl-smi">stringy</span>, <span class="pl-smi">dontAddNull</span>, <span class="pl-smi">length</span>) {</td>
      </tr>
      <tr>
        <td id="L6772" class="blob-num js-line-number" data-line-number="6772"></td>
        <td id="LC6772" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> len <span class="pl-k">=</span> length <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> length <span class="pl-k">:</span> <span class="pl-en">lengthBytesUTF8</span>(stringy)<span class="pl-k">+</span><span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L6773" class="blob-num js-line-number" data-line-number="6773"></td>
        <td id="LC6773" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> u8array <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Array</span>(len);</td>
      </tr>
      <tr>
        <td id="L6774" class="blob-num js-line-number" data-line-number="6774"></td>
        <td id="LC6774" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> numBytesWritten <span class="pl-k">=</span> <span class="pl-en">stringToUTF8Array</span>(stringy, u8array, <span class="pl-c1">0</span>, <span class="pl-smi">u8array</span>.<span class="pl-c1">length</span>);</td>
      </tr>
      <tr>
        <td id="L6775" class="blob-num js-line-number" data-line-number="6775"></td>
        <td id="LC6775" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (dontAddNull) <span class="pl-smi">u8array</span>.<span class="pl-c1">length</span> <span class="pl-k">=</span> numBytesWritten;</td>
      </tr>
      <tr>
        <td id="L6776" class="blob-num js-line-number" data-line-number="6776"></td>
        <td id="LC6776" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> u8array;</td>
      </tr>
      <tr>
        <td id="L6777" class="blob-num js-line-number" data-line-number="6777"></td>
        <td id="LC6777" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6778" class="blob-num js-line-number" data-line-number="6778"></td>
        <td id="LC6778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6779" class="blob-num js-line-number" data-line-number="6779"></td>
        <td id="LC6779" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">intArrayToString</span>(<span class="pl-smi">array</span>) {</td>
      </tr>
      <tr>
        <td id="L6780" class="blob-num js-line-number" data-line-number="6780"></td>
        <td id="LC6780" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> ret <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L6781" class="blob-num js-line-number" data-line-number="6781"></td>
        <td id="LC6781" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">array</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</td>
      </tr>
      <tr>
        <td id="L6782" class="blob-num js-line-number" data-line-number="6782"></td>
        <td id="LC6782" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> chr <span class="pl-k">=</span> array[i];</td>
      </tr>
      <tr>
        <td id="L6783" class="blob-num js-line-number" data-line-number="6783"></td>
        <td id="LC6783" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (chr <span class="pl-k">&gt;</span> <span class="pl-c1">0xFF</span>) {</td>
      </tr>
      <tr>
        <td id="L6784" class="blob-num js-line-number" data-line-number="6784"></td>
        <td id="LC6784" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-c1">ASSERTIONS</span>) {</td>
      </tr>
      <tr>
        <td id="L6785" class="blob-num js-line-number" data-line-number="6785"></td>
        <td id="LC6785" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">assert</span>(<span class="pl-c1">false</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>Character code <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> chr <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> (<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(chr) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>)  at offset <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> i <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span> not in 0x00-0xFF.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6786" class="blob-num js-line-number" data-line-number="6786"></td>
        <td id="LC6786" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L6787" class="blob-num js-line-number" data-line-number="6787"></td>
        <td id="LC6787" class="blob-code blob-code-inner js-file-line">      chr <span class="pl-k">&amp;=</span> <span class="pl-c1">0xFF</span>;</td>
      </tr>
      <tr>
        <td id="L6788" class="blob-num js-line-number" data-line-number="6788"></td>
        <td id="LC6788" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6789" class="blob-num js-line-number" data-line-number="6789"></td>
        <td id="LC6789" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">ret</span>.<span class="pl-c1">push</span>(<span class="pl-c1">String</span>.<span class="pl-c1">fromCharCode</span>(chr));</td>
      </tr>
      <tr>
        <td id="L6790" class="blob-num js-line-number" data-line-number="6790"></td>
        <td id="LC6790" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L6791" class="blob-num js-line-number" data-line-number="6791"></td>
        <td id="LC6791" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-smi">ret</span>.<span class="pl-c1">join</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L6792" class="blob-num js-line-number" data-line-number="6792"></td>
        <td id="LC6792" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6793" class="blob-num js-line-number" data-line-number="6793"></td>
        <td id="LC6793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6794" class="blob-num js-line-number" data-line-number="6794"></td>
        <td id="LC6794" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6795" class="blob-num js-line-number" data-line-number="6795"></td>
        <td id="LC6795" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array</span></td>
      </tr>
      <tr>
        <td id="L6796" class="blob-num js-line-number" data-line-number="6796"></td>
        <td id="LC6796" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6797" class="blob-num js-line-number" data-line-number="6797"></td>
        <td id="LC6797" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_i</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>i<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6798" class="blob-num js-line-number" data-line-number="6798"></td>
        <td id="LC6798" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_ii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>ii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6799" class="blob-num js-line-number" data-line-number="6799"></td>
        <td id="LC6799" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6800" class="blob-num js-line-number" data-line-number="6800"></td>
        <td id="LC6800" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6801" class="blob-num js-line-number" data-line-number="6801"></td>
        <td id="LC6801" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiiii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiiii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6802" class="blob-num js-line-number" data-line-number="6802"></td>
        <td id="LC6802" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiiiii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiiiii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6803" class="blob-num js-line-number" data-line-number="6803"></td>
        <td id="LC6803" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiiiiii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiiiiii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6804" class="blob-num js-line-number" data-line-number="6804"></td>
        <td id="LC6804" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiiiiij</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiiiiij<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6805" class="blob-num js-line-number" data-line-number="6805"></td>
        <td id="LC6805" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiiij</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiiij<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6806" class="blob-num js-line-number" data-line-number="6806"></td>
        <td id="LC6806" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iij</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iij<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6807" class="blob-num js-line-number" data-line-number="6807"></td>
        <td id="LC6807" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iiji</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iiji<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6808" class="blob-num js-line-number" data-line-number="6808"></td>
        <td id="LC6808" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_iijii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>iijii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6809" class="blob-num js-line-number" data-line-number="6809"></td>
        <td id="LC6809" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_jiji</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>jiji<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6810" class="blob-num js-line-number" data-line-number="6810"></td>
        <td id="LC6810" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_vi</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>vi<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6811" class="blob-num js-line-number" data-line-number="6811"></td>
        <td id="LC6811" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_vii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>vii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6812" class="blob-num js-line-number" data-line-number="6812"></td>
        <td id="LC6812" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_viii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>viii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6813" class="blob-num js-line-number" data-line-number="6813"></td>
        <td id="LC6813" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_viiii</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>viiii<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6814" class="blob-num js-line-number" data-line-number="6814"></td>
        <td id="LC6814" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_viiiij</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>viiiij<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6815" class="blob-num js-line-number" data-line-number="6815"></td>
        <td id="LC6815" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_viij</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>viij<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6816" class="blob-num js-line-number" data-line-number="6816"></td>
        <td id="LC6816" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">nullFunc_viji</span>(<span class="pl-smi">x</span>) { <span class="pl-en">abortFnPtrError</span>(x, <span class="pl-s"><span class="pl-pds">&#39;</span>viji<span class="pl-pds">&#39;</span></span>); }</td>
      </tr>
      <tr>
        <td id="L6817" class="blob-num js-line-number" data-line-number="6817"></td>
        <td id="LC6817" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6818" class="blob-num js-line-number" data-line-number="6818"></td>
        <td id="LC6818" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_i</span>(<span class="pl-smi">index</span>) {</td>
      </tr>
      <tr>
        <td id="L6819" class="blob-num js-line-number" data-line-number="6819"></td>
        <td id="LC6819" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index]();</td>
      </tr>
      <tr>
        <td id="L6820" class="blob-num js-line-number" data-line-number="6820"></td>
        <td id="LC6820" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6821" class="blob-num js-line-number" data-line-number="6821"></td>
        <td id="LC6821" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6822" class="blob-num js-line-number" data-line-number="6822"></td>
        <td id="LC6822" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_ii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>) {</td>
      </tr>
      <tr>
        <td id="L6823" class="blob-num js-line-number" data-line-number="6823"></td>
        <td id="LC6823" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1);</td>
      </tr>
      <tr>
        <td id="L6824" class="blob-num js-line-number" data-line-number="6824"></td>
        <td id="LC6824" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6825" class="blob-num js-line-number" data-line-number="6825"></td>
        <td id="LC6825" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6826" class="blob-num js-line-number" data-line-number="6826"></td>
        <td id="LC6826" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>) {</td>
      </tr>
      <tr>
        <td id="L6827" class="blob-num js-line-number" data-line-number="6827"></td>
        <td id="LC6827" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2);</td>
      </tr>
      <tr>
        <td id="L6828" class="blob-num js-line-number" data-line-number="6828"></td>
        <td id="LC6828" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6829" class="blob-num js-line-number" data-line-number="6829"></td>
        <td id="LC6829" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6830" class="blob-num js-line-number" data-line-number="6830"></td>
        <td id="LC6830" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6831" class="blob-num js-line-number" data-line-number="6831"></td>
        <td id="LC6831" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6832" class="blob-num js-line-number" data-line-number="6832"></td>
        <td id="LC6832" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6833" class="blob-num js-line-number" data-line-number="6833"></td>
        <td id="LC6833" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6834" class="blob-num js-line-number" data-line-number="6834"></td>
        <td id="LC6834" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiiii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>) {</td>
      </tr>
      <tr>
        <td id="L6835" class="blob-num js-line-number" data-line-number="6835"></td>
        <td id="LC6835" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4);</td>
      </tr>
      <tr>
        <td id="L6836" class="blob-num js-line-number" data-line-number="6836"></td>
        <td id="LC6836" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6837" class="blob-num js-line-number" data-line-number="6837"></td>
        <td id="LC6837" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6838" class="blob-num js-line-number" data-line-number="6838"></td>
        <td id="LC6838" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiiiii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>,<span class="pl-smi">a5</span>) {</td>
      </tr>
      <tr>
        <td id="L6839" class="blob-num js-line-number" data-line-number="6839"></td>
        <td id="LC6839" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4,a5);</td>
      </tr>
      <tr>
        <td id="L6840" class="blob-num js-line-number" data-line-number="6840"></td>
        <td id="LC6840" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6841" class="blob-num js-line-number" data-line-number="6841"></td>
        <td id="LC6841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6842" class="blob-num js-line-number" data-line-number="6842"></td>
        <td id="LC6842" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiiiiii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>,<span class="pl-smi">a5</span>,<span class="pl-smi">a6</span>) {</td>
      </tr>
      <tr>
        <td id="L6843" class="blob-num js-line-number" data-line-number="6843"></td>
        <td id="LC6843" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4,a5,a6);</td>
      </tr>
      <tr>
        <td id="L6844" class="blob-num js-line-number" data-line-number="6844"></td>
        <td id="LC6844" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6845" class="blob-num js-line-number" data-line-number="6845"></td>
        <td id="LC6845" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6846" class="blob-num js-line-number" data-line-number="6846"></td>
        <td id="LC6846" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiiiiij</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>,<span class="pl-smi">a5</span>,<span class="pl-smi">a6</span>) {</td>
      </tr>
      <tr>
        <td id="L6847" class="blob-num js-line-number" data-line-number="6847"></td>
        <td id="LC6847" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4,a5,a6);</td>
      </tr>
      <tr>
        <td id="L6848" class="blob-num js-line-number" data-line-number="6848"></td>
        <td id="LC6848" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6849" class="blob-num js-line-number" data-line-number="6849"></td>
        <td id="LC6849" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6850" class="blob-num js-line-number" data-line-number="6850"></td>
        <td id="LC6850" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiiij</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>) {</td>
      </tr>
      <tr>
        <td id="L6851" class="blob-num js-line-number" data-line-number="6851"></td>
        <td id="LC6851" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4);</td>
      </tr>
      <tr>
        <td id="L6852" class="blob-num js-line-number" data-line-number="6852"></td>
        <td id="LC6852" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6853" class="blob-num js-line-number" data-line-number="6853"></td>
        <td id="LC6853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6854" class="blob-num js-line-number" data-line-number="6854"></td>
        <td id="LC6854" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iij</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>) {</td>
      </tr>
      <tr>
        <td id="L6855" class="blob-num js-line-number" data-line-number="6855"></td>
        <td id="LC6855" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2);</td>
      </tr>
      <tr>
        <td id="L6856" class="blob-num js-line-number" data-line-number="6856"></td>
        <td id="LC6856" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6857" class="blob-num js-line-number" data-line-number="6857"></td>
        <td id="LC6857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6858" class="blob-num js-line-number" data-line-number="6858"></td>
        <td id="LC6858" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iiji</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6859" class="blob-num js-line-number" data-line-number="6859"></td>
        <td id="LC6859" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6860" class="blob-num js-line-number" data-line-number="6860"></td>
        <td id="LC6860" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6861" class="blob-num js-line-number" data-line-number="6861"></td>
        <td id="LC6861" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6862" class="blob-num js-line-number" data-line-number="6862"></td>
        <td id="LC6862" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_iijii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>) {</td>
      </tr>
      <tr>
        <td id="L6863" class="blob-num js-line-number" data-line-number="6863"></td>
        <td id="LC6863" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3,a4);</td>
      </tr>
      <tr>
        <td id="L6864" class="blob-num js-line-number" data-line-number="6864"></td>
        <td id="LC6864" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6865" class="blob-num js-line-number" data-line-number="6865"></td>
        <td id="LC6865" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6866" class="blob-num js-line-number" data-line-number="6866"></td>
        <td id="LC6866" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_jiji</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6867" class="blob-num js-line-number" data-line-number="6867"></td>
        <td id="LC6867" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6868" class="blob-num js-line-number" data-line-number="6868"></td>
        <td id="LC6868" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6869" class="blob-num js-line-number" data-line-number="6869"></td>
        <td id="LC6869" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6870" class="blob-num js-line-number" data-line-number="6870"></td>
        <td id="LC6870" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_vi</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>) {</td>
      </tr>
      <tr>
        <td id="L6871" class="blob-num js-line-number" data-line-number="6871"></td>
        <td id="LC6871" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1);</td>
      </tr>
      <tr>
        <td id="L6872" class="blob-num js-line-number" data-line-number="6872"></td>
        <td id="LC6872" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6873" class="blob-num js-line-number" data-line-number="6873"></td>
        <td id="LC6873" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6874" class="blob-num js-line-number" data-line-number="6874"></td>
        <td id="LC6874" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_vii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>) {</td>
      </tr>
      <tr>
        <td id="L6875" class="blob-num js-line-number" data-line-number="6875"></td>
        <td id="LC6875" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2);</td>
      </tr>
      <tr>
        <td id="L6876" class="blob-num js-line-number" data-line-number="6876"></td>
        <td id="LC6876" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6877" class="blob-num js-line-number" data-line-number="6877"></td>
        <td id="LC6877" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6878" class="blob-num js-line-number" data-line-number="6878"></td>
        <td id="LC6878" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_viii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6879" class="blob-num js-line-number" data-line-number="6879"></td>
        <td id="LC6879" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6880" class="blob-num js-line-number" data-line-number="6880"></td>
        <td id="LC6880" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6881" class="blob-num js-line-number" data-line-number="6881"></td>
        <td id="LC6881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6882" class="blob-num js-line-number" data-line-number="6882"></td>
        <td id="LC6882" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_viiii</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>) {</td>
      </tr>
      <tr>
        <td id="L6883" class="blob-num js-line-number" data-line-number="6883"></td>
        <td id="LC6883" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2,a3,a4);</td>
      </tr>
      <tr>
        <td id="L6884" class="blob-num js-line-number" data-line-number="6884"></td>
        <td id="LC6884" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6885" class="blob-num js-line-number" data-line-number="6885"></td>
        <td id="LC6885" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6886" class="blob-num js-line-number" data-line-number="6886"></td>
        <td id="LC6886" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_viiiij</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>,<span class="pl-smi">a4</span>,<span class="pl-smi">a5</span>) {</td>
      </tr>
      <tr>
        <td id="L6887" class="blob-num js-line-number" data-line-number="6887"></td>
        <td id="LC6887" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2,a3,a4,a5);</td>
      </tr>
      <tr>
        <td id="L6888" class="blob-num js-line-number" data-line-number="6888"></td>
        <td id="LC6888" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6889" class="blob-num js-line-number" data-line-number="6889"></td>
        <td id="LC6889" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6890" class="blob-num js-line-number" data-line-number="6890"></td>
        <td id="LC6890" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_viij</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6891" class="blob-num js-line-number" data-line-number="6891"></td>
        <td id="LC6891" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6892" class="blob-num js-line-number" data-line-number="6892"></td>
        <td id="LC6892" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6893" class="blob-num js-line-number" data-line-number="6893"></td>
        <td id="LC6893" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6894" class="blob-num js-line-number" data-line-number="6894"></td>
        <td id="LC6894" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">jsCall_viji</span>(<span class="pl-smi">index</span>,<span class="pl-smi">a1</span>,<span class="pl-smi">a2</span>,<span class="pl-smi">a3</span>) {</td>
      </tr>
      <tr>
        <td id="L6895" class="blob-num js-line-number" data-line-number="6895"></td>
        <td id="LC6895" class="blob-code blob-code-inner js-file-line">    functionPointers[index](a1,a2,a3);</td>
      </tr>
      <tr>
        <td id="L6896" class="blob-num js-line-number" data-line-number="6896"></td>
        <td id="LC6896" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6897" class="blob-num js-line-number" data-line-number="6897"></td>
        <td id="LC6897" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6898" class="blob-num js-line-number" data-line-number="6898"></td>
        <td id="LC6898" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> asmGlobalArg <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="L6899" class="blob-num js-line-number" data-line-number="6899"></td>
        <td id="LC6899" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6900" class="blob-num js-line-number" data-line-number="6900"></td>
        <td id="LC6900" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> asmLibraryArg <span class="pl-k">=</span> {</td>
      </tr>
      <tr>
        <td id="L6901" class="blob-num js-line-number" data-line-number="6901"></td>
        <td id="LC6901" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>abort<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> abort,</td>
      </tr>
      <tr>
        <td id="L6902" class="blob-num js-line-number" data-line-number="6902"></td>
        <td id="LC6902" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>setTempRet0<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> setTempRet0,</td>
      </tr>
      <tr>
        <td id="L6903" class="blob-num js-line-number" data-line-number="6903"></td>
        <td id="LC6903" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>getTempRet0<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> getTempRet0,</td>
      </tr>
      <tr>
        <td id="L6904" class="blob-num js-line-number" data-line-number="6904"></td>
        <td id="LC6904" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>abortStackOverflow<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> abortStackOverflow,</td>
      </tr>
      <tr>
        <td id="L6905" class="blob-num js-line-number" data-line-number="6905"></td>
        <td id="LC6905" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_i<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_i,</td>
      </tr>
      <tr>
        <td id="L6906" class="blob-num js-line-number" data-line-number="6906"></td>
        <td id="LC6906" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_ii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_ii,</td>
      </tr>
      <tr>
        <td id="L6907" class="blob-num js-line-number" data-line-number="6907"></td>
        <td id="LC6907" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iii,</td>
      </tr>
      <tr>
        <td id="L6908" class="blob-num js-line-number" data-line-number="6908"></td>
        <td id="LC6908" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiii,</td>
      </tr>
      <tr>
        <td id="L6909" class="blob-num js-line-number" data-line-number="6909"></td>
        <td id="LC6909" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiiii,</td>
      </tr>
      <tr>
        <td id="L6910" class="blob-num js-line-number" data-line-number="6910"></td>
        <td id="LC6910" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiiiii,</td>
      </tr>
      <tr>
        <td id="L6911" class="blob-num js-line-number" data-line-number="6911"></td>
        <td id="LC6911" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiiiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiiiiii,</td>
      </tr>
      <tr>
        <td id="L6912" class="blob-num js-line-number" data-line-number="6912"></td>
        <td id="LC6912" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiiiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiiiiij,</td>
      </tr>
      <tr>
        <td id="L6913" class="blob-num js-line-number" data-line-number="6913"></td>
        <td id="LC6913" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiiij,</td>
      </tr>
      <tr>
        <td id="L6914" class="blob-num js-line-number" data-line-number="6914"></td>
        <td id="LC6914" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iij,</td>
      </tr>
      <tr>
        <td id="L6915" class="blob-num js-line-number" data-line-number="6915"></td>
        <td id="LC6915" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iiji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iiji,</td>
      </tr>
      <tr>
        <td id="L6916" class="blob-num js-line-number" data-line-number="6916"></td>
        <td id="LC6916" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_iijii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_iijii,</td>
      </tr>
      <tr>
        <td id="L6917" class="blob-num js-line-number" data-line-number="6917"></td>
        <td id="LC6917" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_jiji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_jiji,</td>
      </tr>
      <tr>
        <td id="L6918" class="blob-num js-line-number" data-line-number="6918"></td>
        <td id="LC6918" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_vi<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_vi,</td>
      </tr>
      <tr>
        <td id="L6919" class="blob-num js-line-number" data-line-number="6919"></td>
        <td id="LC6919" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_vii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_vii,</td>
      </tr>
      <tr>
        <td id="L6920" class="blob-num js-line-number" data-line-number="6920"></td>
        <td id="LC6920" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_viii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_viii,</td>
      </tr>
      <tr>
        <td id="L6921" class="blob-num js-line-number" data-line-number="6921"></td>
        <td id="LC6921" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_viiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_viiii,</td>
      </tr>
      <tr>
        <td id="L6922" class="blob-num js-line-number" data-line-number="6922"></td>
        <td id="LC6922" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_viiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_viiiij,</td>
      </tr>
      <tr>
        <td id="L6923" class="blob-num js-line-number" data-line-number="6923"></td>
        <td id="LC6923" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_viij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_viij,</td>
      </tr>
      <tr>
        <td id="L6924" class="blob-num js-line-number" data-line-number="6924"></td>
        <td id="LC6924" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>nullFunc_viji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> nullFunc_viji,</td>
      </tr>
      <tr>
        <td id="L6925" class="blob-num js-line-number" data-line-number="6925"></td>
        <td id="LC6925" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_i<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_i,</td>
      </tr>
      <tr>
        <td id="L6926" class="blob-num js-line-number" data-line-number="6926"></td>
        <td id="LC6926" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_ii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_ii,</td>
      </tr>
      <tr>
        <td id="L6927" class="blob-num js-line-number" data-line-number="6927"></td>
        <td id="LC6927" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iii,</td>
      </tr>
      <tr>
        <td id="L6928" class="blob-num js-line-number" data-line-number="6928"></td>
        <td id="LC6928" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiii,</td>
      </tr>
      <tr>
        <td id="L6929" class="blob-num js-line-number" data-line-number="6929"></td>
        <td id="LC6929" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiiii,</td>
      </tr>
      <tr>
        <td id="L6930" class="blob-num js-line-number" data-line-number="6930"></td>
        <td id="LC6930" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiiiii,</td>
      </tr>
      <tr>
        <td id="L6931" class="blob-num js-line-number" data-line-number="6931"></td>
        <td id="LC6931" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiiiiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiiiiii,</td>
      </tr>
      <tr>
        <td id="L6932" class="blob-num js-line-number" data-line-number="6932"></td>
        <td id="LC6932" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiiiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiiiiij,</td>
      </tr>
      <tr>
        <td id="L6933" class="blob-num js-line-number" data-line-number="6933"></td>
        <td id="LC6933" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiiij,</td>
      </tr>
      <tr>
        <td id="L6934" class="blob-num js-line-number" data-line-number="6934"></td>
        <td id="LC6934" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iij,</td>
      </tr>
      <tr>
        <td id="L6935" class="blob-num js-line-number" data-line-number="6935"></td>
        <td id="LC6935" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iiji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iiji,</td>
      </tr>
      <tr>
        <td id="L6936" class="blob-num js-line-number" data-line-number="6936"></td>
        <td id="LC6936" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_iijii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_iijii,</td>
      </tr>
      <tr>
        <td id="L6937" class="blob-num js-line-number" data-line-number="6937"></td>
        <td id="LC6937" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_jiji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_jiji,</td>
      </tr>
      <tr>
        <td id="L6938" class="blob-num js-line-number" data-line-number="6938"></td>
        <td id="LC6938" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_vi<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_vi,</td>
      </tr>
      <tr>
        <td id="L6939" class="blob-num js-line-number" data-line-number="6939"></td>
        <td id="LC6939" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_vii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_vii,</td>
      </tr>
      <tr>
        <td id="L6940" class="blob-num js-line-number" data-line-number="6940"></td>
        <td id="LC6940" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_viii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_viii,</td>
      </tr>
      <tr>
        <td id="L6941" class="blob-num js-line-number" data-line-number="6941"></td>
        <td id="LC6941" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_viiii<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_viiii,</td>
      </tr>
      <tr>
        <td id="L6942" class="blob-num js-line-number" data-line-number="6942"></td>
        <td id="LC6942" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_viiiij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_viiiij,</td>
      </tr>
      <tr>
        <td id="L6943" class="blob-num js-line-number" data-line-number="6943"></td>
        <td id="LC6943" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_viij<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_viij,</td>
      </tr>
      <tr>
        <td id="L6944" class="blob-num js-line-number" data-line-number="6944"></td>
        <td id="LC6944" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsCall_viji<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsCall_viji,</td>
      </tr>
      <tr>
        <td id="L6945" class="blob-num js-line-number" data-line-number="6945"></td>
        <td id="LC6945" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___assert_fail<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___assert_fail,</td>
      </tr>
      <tr>
        <td id="L6946" class="blob-num js-line-number" data-line-number="6946"></td>
        <td id="LC6946" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___buildEnvironment<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___buildEnvironment,</td>
      </tr>
      <tr>
        <td id="L6947" class="blob-num js-line-number" data-line-number="6947"></td>
        <td id="LC6947" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___lock<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___lock,</td>
      </tr>
      <tr>
        <td id="L6948" class="blob-num js-line-number" data-line-number="6948"></td>
        <td id="LC6948" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___setErrNo<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___setErrNo,</td>
      </tr>
      <tr>
        <td id="L6949" class="blob-num js-line-number" data-line-number="6949"></td>
        <td id="LC6949" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall10<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall10,</td>
      </tr>
      <tr>
        <td id="L6950" class="blob-num js-line-number" data-line-number="6950"></td>
        <td id="LC6950" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall118<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall118,</td>
      </tr>
      <tr>
        <td id="L6951" class="blob-num js-line-number" data-line-number="6951"></td>
        <td id="LC6951" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall140<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall140,</td>
      </tr>
      <tr>
        <td id="L6952" class="blob-num js-line-number" data-line-number="6952"></td>
        <td id="LC6952" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall15<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall15,</td>
      </tr>
      <tr>
        <td id="L6953" class="blob-num js-line-number" data-line-number="6953"></td>
        <td id="LC6953" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall183<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall183,</td>
      </tr>
      <tr>
        <td id="L6954" class="blob-num js-line-number" data-line-number="6954"></td>
        <td id="LC6954" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall192<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall192,</td>
      </tr>
      <tr>
        <td id="L6955" class="blob-num js-line-number" data-line-number="6955"></td>
        <td id="LC6955" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall194<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall194,</td>
      </tr>
      <tr>
        <td id="L6956" class="blob-num js-line-number" data-line-number="6956"></td>
        <td id="LC6956" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall195<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall195,</td>
      </tr>
      <tr>
        <td id="L6957" class="blob-num js-line-number" data-line-number="6957"></td>
        <td id="LC6957" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall196<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall196,</td>
      </tr>
      <tr>
        <td id="L6958" class="blob-num js-line-number" data-line-number="6958"></td>
        <td id="LC6958" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall197<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall197,</td>
      </tr>
      <tr>
        <td id="L6959" class="blob-num js-line-number" data-line-number="6959"></td>
        <td id="LC6959" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall20<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall20,</td>
      </tr>
      <tr>
        <td id="L6960" class="blob-num js-line-number" data-line-number="6960"></td>
        <td id="LC6960" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall201<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall201,</td>
      </tr>
      <tr>
        <td id="L6961" class="blob-num js-line-number" data-line-number="6961"></td>
        <td id="LC6961" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall202<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall202,</td>
      </tr>
      <tr>
        <td id="L6962" class="blob-num js-line-number" data-line-number="6962"></td>
        <td id="LC6962" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall207<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall207,</td>
      </tr>
      <tr>
        <td id="L6963" class="blob-num js-line-number" data-line-number="6963"></td>
        <td id="LC6963" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall212<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall212,</td>
      </tr>
      <tr>
        <td id="L6964" class="blob-num js-line-number" data-line-number="6964"></td>
        <td id="LC6964" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall221<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall221,</td>
      </tr>
      <tr>
        <td id="L6965" class="blob-num js-line-number" data-line-number="6965"></td>
        <td id="LC6965" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall3<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall3,</td>
      </tr>
      <tr>
        <td id="L6966" class="blob-num js-line-number" data-line-number="6966"></td>
        <td id="LC6966" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall33<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall33,</td>
      </tr>
      <tr>
        <td id="L6967" class="blob-num js-line-number" data-line-number="6967"></td>
        <td id="LC6967" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall39<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall39,</td>
      </tr>
      <tr>
        <td id="L6968" class="blob-num js-line-number" data-line-number="6968"></td>
        <td id="LC6968" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall4<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall4,</td>
      </tr>
      <tr>
        <td id="L6969" class="blob-num js-line-number" data-line-number="6969"></td>
        <td id="LC6969" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall40<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall40,</td>
      </tr>
      <tr>
        <td id="L6970" class="blob-num js-line-number" data-line-number="6970"></td>
        <td id="LC6970" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall5<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall5,</td>
      </tr>
      <tr>
        <td id="L6971" class="blob-num js-line-number" data-line-number="6971"></td>
        <td id="LC6971" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall6<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall6,</td>
      </tr>
      <tr>
        <td id="L6972" class="blob-num js-line-number" data-line-number="6972"></td>
        <td id="LC6972" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall85<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall85,</td>
      </tr>
      <tr>
        <td id="L6973" class="blob-num js-line-number" data-line-number="6973"></td>
        <td id="LC6973" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall91<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall91,</td>
      </tr>
      <tr>
        <td id="L6974" class="blob-num js-line-number" data-line-number="6974"></td>
        <td id="LC6974" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___syscall94<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___syscall94,</td>
      </tr>
      <tr>
        <td id="L6975" class="blob-num js-line-number" data-line-number="6975"></td>
        <td id="LC6975" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___unlock<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___unlock,</td>
      </tr>
      <tr>
        <td id="L6976" class="blob-num js-line-number" data-line-number="6976"></td>
        <td id="LC6976" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>___wasi_fd_write<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> ___wasi_fd_write,</td>
      </tr>
      <tr>
        <td id="L6977" class="blob-num js-line-number" data-line-number="6977"></td>
        <td id="LC6977" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>__emscripten_syscall_mmap2<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> __emscripten_syscall_mmap2,</td>
      </tr>
      <tr>
        <td id="L6978" class="blob-num js-line-number" data-line-number="6978"></td>
        <td id="LC6978" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>__emscripten_syscall_munmap<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> __emscripten_syscall_munmap,</td>
      </tr>
      <tr>
        <td id="L6979" class="blob-num js-line-number" data-line-number="6979"></td>
        <td id="LC6979" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_emscripten_get_heap_size<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _emscripten_get_heap_size,</td>
      </tr>
      <tr>
        <td id="L6980" class="blob-num js-line-number" data-line-number="6980"></td>
        <td id="LC6980" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_emscripten_memcpy_big<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _emscripten_memcpy_big,</td>
      </tr>
      <tr>
        <td id="L6981" class="blob-num js-line-number" data-line-number="6981"></td>
        <td id="LC6981" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_emscripten_resize_heap<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _emscripten_resize_heap,</td>
      </tr>
      <tr>
        <td id="L6982" class="blob-num js-line-number" data-line-number="6982"></td>
        <td id="LC6982" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_fd_write<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _fd_write,</td>
      </tr>
      <tr>
        <td id="L6983" class="blob-num js-line-number" data-line-number="6983"></td>
        <td id="LC6983" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_getenv<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _getenv,</td>
      </tr>
      <tr>
        <td id="L6984" class="blob-num js-line-number" data-line-number="6984"></td>
        <td id="LC6984" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_gettimeofday<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _gettimeofday,</td>
      </tr>
      <tr>
        <td id="L6985" class="blob-num js-line-number" data-line-number="6985"></td>
        <td id="LC6985" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_llvm_log10_f32<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _llvm_log10_f32,</td>
      </tr>
      <tr>
        <td id="L6986" class="blob-num js-line-number" data-line-number="6986"></td>
        <td id="LC6986" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_llvm_log10_f64<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _llvm_log10_f64,</td>
      </tr>
      <tr>
        <td id="L6987" class="blob-num js-line-number" data-line-number="6987"></td>
        <td id="LC6987" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_llvm_trap<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _llvm_trap,</td>
      </tr>
      <tr>
        <td id="L6988" class="blob-num js-line-number" data-line-number="6988"></td>
        <td id="LC6988" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_localtime<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _localtime,</td>
      </tr>
      <tr>
        <td id="L6989" class="blob-num js-line-number" data-line-number="6989"></td>
        <td id="LC6989" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_localtime_r<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _localtime_r,</td>
      </tr>
      <tr>
        <td id="L6990" class="blob-num js-line-number" data-line-number="6990"></td>
        <td id="LC6990" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_nanosleep<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _nanosleep,</td>
      </tr>
      <tr>
        <td id="L6991" class="blob-num js-line-number" data-line-number="6991"></td>
        <td id="LC6991" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_sysconf<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _sysconf,</td>
      </tr>
      <tr>
        <td id="L6992" class="blob-num js-line-number" data-line-number="6992"></td>
        <td id="LC6992" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_time<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _time,</td>
      </tr>
      <tr>
        <td id="L6993" class="blob-num js-line-number" data-line-number="6993"></td>
        <td id="LC6993" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_tzset<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _tzset,</td>
      </tr>
      <tr>
        <td id="L6994" class="blob-num js-line-number" data-line-number="6994"></td>
        <td id="LC6994" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_usleep<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _usleep,</td>
      </tr>
      <tr>
        <td id="L6995" class="blob-num js-line-number" data-line-number="6995"></td>
        <td id="LC6995" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>_utimes<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> _utimes,</td>
      </tr>
      <tr>
        <td id="L6996" class="blob-num js-line-number" data-line-number="6996"></td>
        <td id="LC6996" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>abortOnCannotGrowMemory<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> abortOnCannotGrowMemory,</td>
      </tr>
      <tr>
        <td id="L6997" class="blob-num js-line-number" data-line-number="6997"></td>
        <td id="LC6997" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>demangle<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> demangle,</td>
      </tr>
      <tr>
        <td id="L6998" class="blob-num js-line-number" data-line-number="6998"></td>
        <td id="LC6998" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>demangleAll<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> demangleAll,</td>
      </tr>
      <tr>
        <td id="L6999" class="blob-num js-line-number" data-line-number="6999"></td>
        <td id="LC6999" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>emscripten_realloc_buffer<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> emscripten_realloc_buffer,</td>
      </tr>
      <tr>
        <td id="L7000" class="blob-num js-line-number" data-line-number="7000"></td>
        <td id="LC7000" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>jsStackTrace<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> jsStackTrace,</td>
      </tr>
      <tr>
        <td id="L7001" class="blob-num js-line-number" data-line-number="7001"></td>
        <td id="LC7001" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>stackTrace<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> stackTrace,</td>
      </tr>
      <tr>
        <td id="L7002" class="blob-num js-line-number" data-line-number="7002"></td>
        <td id="LC7002" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>tempDoublePtr<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> tempDoublePtr,</td>
      </tr>
      <tr>
        <td id="L7003" class="blob-num js-line-number" data-line-number="7003"></td>
        <td id="LC7003" class="blob-code blob-code-inner js-file-line">  <span class="pl-s"><span class="pl-pds">&quot;</span>DYNAMICTOP_PTR<span class="pl-pds">&quot;</span></span><span class="pl-k">:</span> <span class="pl-c1">DYNAMICTOP_PTR</span></td>
      </tr>
      <tr>
        <td id="L7004" class="blob-num js-line-number" data-line-number="7004"></td>
        <td id="LC7004" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7005" class="blob-num js-line-number" data-line-number="7005"></td>
        <td id="LC7005" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> EMSCRIPTEN_START_ASM</span></td>
      </tr>
      <tr>
        <td id="L7006" class="blob-num js-line-number" data-line-number="7006"></td>
        <td id="LC7006" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> asm <span class="pl-k">=</span>Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>]<span class="pl-c"><span class="pl-c">//</span> EMSCRIPTEN_END_ASM</span></td>
      </tr>
      <tr>
        <td id="L7007" class="blob-num js-line-number" data-line-number="7007"></td>
        <td id="LC7007" class="blob-code blob-code-inner js-file-line">(asmGlobalArg, asmLibraryArg, buffer);</td>
      </tr>
      <tr>
        <td id="L7008" class="blob-num js-line-number" data-line-number="7008"></td>
        <td id="LC7008" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7009" class="blob-num js-line-number" data-line-number="7009"></td>
        <td id="LC7009" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> asm;</td>
      </tr>
      <tr>
        <td id="L7010" class="blob-num js-line-number" data-line-number="7010"></td>
        <td id="LC7010" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _RegisterExtensionFunctions <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_RegisterExtensionFunctions<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7011" class="blob-num js-line-number" data-line-number="7011"></td>
        <td id="LC7011" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7012" class="blob-num js-line-number" data-line-number="7012"></td>
        <td id="LC7012" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7013" class="blob-num js-line-number" data-line-number="7013"></td>
        <td id="LC7013" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_RegisterExtensionFunctions<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7014" class="blob-num js-line-number" data-line-number="7014"></td>
        <td id="LC7014" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7015" class="blob-num js-line-number" data-line-number="7015"></td>
        <td id="LC7015" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7016" class="blob-num js-line-number" data-line-number="7016"></td>
        <td id="LC7016" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> ___emscripten_environ_constructor <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>___emscripten_environ_constructor<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7017" class="blob-num js-line-number" data-line-number="7017"></td>
        <td id="LC7017" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7018" class="blob-num js-line-number" data-line-number="7018"></td>
        <td id="LC7018" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7019" class="blob-num js-line-number" data-line-number="7019"></td>
        <td id="LC7019" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>___emscripten_environ_constructor<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7020" class="blob-num js-line-number" data-line-number="7020"></td>
        <td id="LC7020" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7021" class="blob-num js-line-number" data-line-number="7021"></td>
        <td id="LC7021" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7022" class="blob-num js-line-number" data-line-number="7022"></td>
        <td id="LC7022" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> ___errno_location <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>___errno_location<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7023" class="blob-num js-line-number" data-line-number="7023"></td>
        <td id="LC7023" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7024" class="blob-num js-line-number" data-line-number="7024"></td>
        <td id="LC7024" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7025" class="blob-num js-line-number" data-line-number="7025"></td>
        <td id="LC7025" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>___errno_location<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7026" class="blob-num js-line-number" data-line-number="7026"></td>
        <td id="LC7026" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7027" class="blob-num js-line-number" data-line-number="7027"></td>
        <td id="LC7027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7028" class="blob-num js-line-number" data-line-number="7028"></td>
        <td id="LC7028" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> __get_daylight <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>__get_daylight<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7029" class="blob-num js-line-number" data-line-number="7029"></td>
        <td id="LC7029" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7030" class="blob-num js-line-number" data-line-number="7030"></td>
        <td id="LC7030" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7031" class="blob-num js-line-number" data-line-number="7031"></td>
        <td id="LC7031" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>__get_daylight<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7032" class="blob-num js-line-number" data-line-number="7032"></td>
        <td id="LC7032" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7033" class="blob-num js-line-number" data-line-number="7033"></td>
        <td id="LC7033" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7034" class="blob-num js-line-number" data-line-number="7034"></td>
        <td id="LC7034" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> __get_environ <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>__get_environ<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7035" class="blob-num js-line-number" data-line-number="7035"></td>
        <td id="LC7035" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7036" class="blob-num js-line-number" data-line-number="7036"></td>
        <td id="LC7036" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7037" class="blob-num js-line-number" data-line-number="7037"></td>
        <td id="LC7037" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>__get_environ<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7038" class="blob-num js-line-number" data-line-number="7038"></td>
        <td id="LC7038" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7039" class="blob-num js-line-number" data-line-number="7039"></td>
        <td id="LC7039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7040" class="blob-num js-line-number" data-line-number="7040"></td>
        <td id="LC7040" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> __get_timezone <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>__get_timezone<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7041" class="blob-num js-line-number" data-line-number="7041"></td>
        <td id="LC7041" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7042" class="blob-num js-line-number" data-line-number="7042"></td>
        <td id="LC7042" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7043" class="blob-num js-line-number" data-line-number="7043"></td>
        <td id="LC7043" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>__get_timezone<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7044" class="blob-num js-line-number" data-line-number="7044"></td>
        <td id="LC7044" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7045" class="blob-num js-line-number" data-line-number="7045"></td>
        <td id="LC7045" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7046" class="blob-num js-line-number" data-line-number="7046"></td>
        <td id="LC7046" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> __get_tzname <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>__get_tzname<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7047" class="blob-num js-line-number" data-line-number="7047"></td>
        <td id="LC7047" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7048" class="blob-num js-line-number" data-line-number="7048"></td>
        <td id="LC7048" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7049" class="blob-num js-line-number" data-line-number="7049"></td>
        <td id="LC7049" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>__get_tzname<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7050" class="blob-num js-line-number" data-line-number="7050"></td>
        <td id="LC7050" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7051" class="blob-num js-line-number" data-line-number="7051"></td>
        <td id="LC7051" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7052" class="blob-num js-line-number" data-line-number="7052"></td>
        <td id="LC7052" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _emscripten_replace_memory <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_emscripten_replace_memory<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7053" class="blob-num js-line-number" data-line-number="7053"></td>
        <td id="LC7053" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7054" class="blob-num js-line-number" data-line-number="7054"></td>
        <td id="LC7054" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7055" class="blob-num js-line-number" data-line-number="7055"></td>
        <td id="LC7055" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_emscripten_replace_memory<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7056" class="blob-num js-line-number" data-line-number="7056"></td>
        <td id="LC7056" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7057" class="blob-num js-line-number" data-line-number="7057"></td>
        <td id="LC7057" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7058" class="blob-num js-line-number" data-line-number="7058"></td>
        <td id="LC7058" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _fflush <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_fflush<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7059" class="blob-num js-line-number" data-line-number="7059"></td>
        <td id="LC7059" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7060" class="blob-num js-line-number" data-line-number="7060"></td>
        <td id="LC7060" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7061" class="blob-num js-line-number" data-line-number="7061"></td>
        <td id="LC7061" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_fflush<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7062" class="blob-num js-line-number" data-line-number="7062"></td>
        <td id="LC7062" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7063" class="blob-num js-line-number" data-line-number="7063"></td>
        <td id="LC7063" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7064" class="blob-num js-line-number" data-line-number="7064"></td>
        <td id="LC7064" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _free <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_free<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7065" class="blob-num js-line-number" data-line-number="7065"></td>
        <td id="LC7065" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7066" class="blob-num js-line-number" data-line-number="7066"></td>
        <td id="LC7066" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7067" class="blob-num js-line-number" data-line-number="7067"></td>
        <td id="LC7067" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_free<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7068" class="blob-num js-line-number" data-line-number="7068"></td>
        <td id="LC7068" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7069" class="blob-num js-line-number" data-line-number="7069"></td>
        <td id="LC7069" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7070" class="blob-num js-line-number" data-line-number="7070"></td>
        <td id="LC7070" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _llvm_bswap_i32 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_llvm_bswap_i32<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7071" class="blob-num js-line-number" data-line-number="7071"></td>
        <td id="LC7071" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7072" class="blob-num js-line-number" data-line-number="7072"></td>
        <td id="LC7072" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7073" class="blob-num js-line-number" data-line-number="7073"></td>
        <td id="LC7073" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_llvm_bswap_i32<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7074" class="blob-num js-line-number" data-line-number="7074"></td>
        <td id="LC7074" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7075" class="blob-num js-line-number" data-line-number="7075"></td>
        <td id="LC7075" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7076" class="blob-num js-line-number" data-line-number="7076"></td>
        <td id="LC7076" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _malloc <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_malloc<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7077" class="blob-num js-line-number" data-line-number="7077"></td>
        <td id="LC7077" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7078" class="blob-num js-line-number" data-line-number="7078"></td>
        <td id="LC7078" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7079" class="blob-num js-line-number" data-line-number="7079"></td>
        <td id="LC7079" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_malloc<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7080" class="blob-num js-line-number" data-line-number="7080"></td>
        <td id="LC7080" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7081" class="blob-num js-line-number" data-line-number="7081"></td>
        <td id="LC7081" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7082" class="blob-num js-line-number" data-line-number="7082"></td>
        <td id="LC7082" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _memalign <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_memalign<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7083" class="blob-num js-line-number" data-line-number="7083"></td>
        <td id="LC7083" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7084" class="blob-num js-line-number" data-line-number="7084"></td>
        <td id="LC7084" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7085" class="blob-num js-line-number" data-line-number="7085"></td>
        <td id="LC7085" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_memalign<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7086" class="blob-num js-line-number" data-line-number="7086"></td>
        <td id="LC7086" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7087" class="blob-num js-line-number" data-line-number="7087"></td>
        <td id="LC7087" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7088" class="blob-num js-line-number" data-line-number="7088"></td>
        <td id="LC7088" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _memcpy <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_memcpy<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7089" class="blob-num js-line-number" data-line-number="7089"></td>
        <td id="LC7089" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7090" class="blob-num js-line-number" data-line-number="7090"></td>
        <td id="LC7090" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7091" class="blob-num js-line-number" data-line-number="7091"></td>
        <td id="LC7091" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_memcpy<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7092" class="blob-num js-line-number" data-line-number="7092"></td>
        <td id="LC7092" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7093" class="blob-num js-line-number" data-line-number="7093"></td>
        <td id="LC7093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7094" class="blob-num js-line-number" data-line-number="7094"></td>
        <td id="LC7094" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _memmove <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_memmove<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7095" class="blob-num js-line-number" data-line-number="7095"></td>
        <td id="LC7095" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7096" class="blob-num js-line-number" data-line-number="7096"></td>
        <td id="LC7096" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7097" class="blob-num js-line-number" data-line-number="7097"></td>
        <td id="LC7097" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_memmove<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7098" class="blob-num js-line-number" data-line-number="7098"></td>
        <td id="LC7098" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7099" class="blob-num js-line-number" data-line-number="7099"></td>
        <td id="LC7099" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7100" class="blob-num js-line-number" data-line-number="7100"></td>
        <td id="LC7100" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _memset <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_memset<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7101" class="blob-num js-line-number" data-line-number="7101"></td>
        <td id="LC7101" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7102" class="blob-num js-line-number" data-line-number="7102"></td>
        <td id="LC7102" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7103" class="blob-num js-line-number" data-line-number="7103"></td>
        <td id="LC7103" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_memset<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7104" class="blob-num js-line-number" data-line-number="7104"></td>
        <td id="LC7104" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7105" class="blob-num js-line-number" data-line-number="7105"></td>
        <td id="LC7105" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7106" class="blob-num js-line-number" data-line-number="7106"></td>
        <td id="LC7106" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sbrk <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sbrk<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7107" class="blob-num js-line-number" data-line-number="7107"></td>
        <td id="LC7107" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7108" class="blob-num js-line-number" data-line-number="7108"></td>
        <td id="LC7108" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7109" class="blob-num js-line-number" data-line-number="7109"></td>
        <td id="LC7109" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sbrk<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7110" class="blob-num js-line-number" data-line-number="7110"></td>
        <td id="LC7110" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7111" class="blob-num js-line-number" data-line-number="7111"></td>
        <td id="LC7111" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7112" class="blob-num js-line-number" data-line-number="7112"></td>
        <td id="LC7112" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_bind_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_blob<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7113" class="blob-num js-line-number" data-line-number="7113"></td>
        <td id="LC7113" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7114" class="blob-num js-line-number" data-line-number="7114"></td>
        <td id="LC7114" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7115" class="blob-num js-line-number" data-line-number="7115"></td>
        <td id="LC7115" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_blob<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7116" class="blob-num js-line-number" data-line-number="7116"></td>
        <td id="LC7116" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7117" class="blob-num js-line-number" data-line-number="7117"></td>
        <td id="LC7117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7118" class="blob-num js-line-number" data-line-number="7118"></td>
        <td id="LC7118" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_bind_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_double<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7119" class="blob-num js-line-number" data-line-number="7119"></td>
        <td id="LC7119" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7120" class="blob-num js-line-number" data-line-number="7120"></td>
        <td id="LC7120" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7121" class="blob-num js-line-number" data-line-number="7121"></td>
        <td id="LC7121" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_double<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7122" class="blob-num js-line-number" data-line-number="7122"></td>
        <td id="LC7122" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7123" class="blob-num js-line-number" data-line-number="7123"></td>
        <td id="LC7123" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7124" class="blob-num js-line-number" data-line-number="7124"></td>
        <td id="LC7124" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_bind_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_int<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7125" class="blob-num js-line-number" data-line-number="7125"></td>
        <td id="LC7125" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7126" class="blob-num js-line-number" data-line-number="7126"></td>
        <td id="LC7126" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7127" class="blob-num js-line-number" data-line-number="7127"></td>
        <td id="LC7127" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_int<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7128" class="blob-num js-line-number" data-line-number="7128"></td>
        <td id="LC7128" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7129" class="blob-num js-line-number" data-line-number="7129"></td>
        <td id="LC7129" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7130" class="blob-num js-line-number" data-line-number="7130"></td>
        <td id="LC7130" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_bind_parameter_index <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_parameter_index<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7131" class="blob-num js-line-number" data-line-number="7131"></td>
        <td id="LC7131" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7132" class="blob-num js-line-number" data-line-number="7132"></td>
        <td id="LC7132" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7133" class="blob-num js-line-number" data-line-number="7133"></td>
        <td id="LC7133" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_parameter_index<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7134" class="blob-num js-line-number" data-line-number="7134"></td>
        <td id="LC7134" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7135" class="blob-num js-line-number" data-line-number="7135"></td>
        <td id="LC7135" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7136" class="blob-num js-line-number" data-line-number="7136"></td>
        <td id="LC7136" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_bind_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_text<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7137" class="blob-num js-line-number" data-line-number="7137"></td>
        <td id="LC7137" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7138" class="blob-num js-line-number" data-line-number="7138"></td>
        <td id="LC7138" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7139" class="blob-num js-line-number" data-line-number="7139"></td>
        <td id="LC7139" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_bind_text<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7140" class="blob-num js-line-number" data-line-number="7140"></td>
        <td id="LC7140" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7141" class="blob-num js-line-number" data-line-number="7141"></td>
        <td id="LC7141" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7142" class="blob-num js-line-number" data-line-number="7142"></td>
        <td id="LC7142" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_changes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_changes<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7143" class="blob-num js-line-number" data-line-number="7143"></td>
        <td id="LC7143" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7144" class="blob-num js-line-number" data-line-number="7144"></td>
        <td id="LC7144" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7145" class="blob-num js-line-number" data-line-number="7145"></td>
        <td id="LC7145" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_changes<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7146" class="blob-num js-line-number" data-line-number="7146"></td>
        <td id="LC7146" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7147" class="blob-num js-line-number" data-line-number="7147"></td>
        <td id="LC7147" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7148" class="blob-num js-line-number" data-line-number="7148"></td>
        <td id="LC7148" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_clear_bindings <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_clear_bindings<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7149" class="blob-num js-line-number" data-line-number="7149"></td>
        <td id="LC7149" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7150" class="blob-num js-line-number" data-line-number="7150"></td>
        <td id="LC7150" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7151" class="blob-num js-line-number" data-line-number="7151"></td>
        <td id="LC7151" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_clear_bindings<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7152" class="blob-num js-line-number" data-line-number="7152"></td>
        <td id="LC7152" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7153" class="blob-num js-line-number" data-line-number="7153"></td>
        <td id="LC7153" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7154" class="blob-num js-line-number" data-line-number="7154"></td>
        <td id="LC7154" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_close_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_close_v2<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7155" class="blob-num js-line-number" data-line-number="7155"></td>
        <td id="LC7155" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7156" class="blob-num js-line-number" data-line-number="7156"></td>
        <td id="LC7156" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7157" class="blob-num js-line-number" data-line-number="7157"></td>
        <td id="LC7157" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_close_v2<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7158" class="blob-num js-line-number" data-line-number="7158"></td>
        <td id="LC7158" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7159" class="blob-num js-line-number" data-line-number="7159"></td>
        <td id="LC7159" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7160" class="blob-num js-line-number" data-line-number="7160"></td>
        <td id="LC7160" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_blob<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7161" class="blob-num js-line-number" data-line-number="7161"></td>
        <td id="LC7161" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7162" class="blob-num js-line-number" data-line-number="7162"></td>
        <td id="LC7162" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7163" class="blob-num js-line-number" data-line-number="7163"></td>
        <td id="LC7163" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_blob<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7164" class="blob-num js-line-number" data-line-number="7164"></td>
        <td id="LC7164" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7165" class="blob-num js-line-number" data-line-number="7165"></td>
        <td id="LC7165" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7166" class="blob-num js-line-number" data-line-number="7166"></td>
        <td id="LC7166" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_bytes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_bytes<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7167" class="blob-num js-line-number" data-line-number="7167"></td>
        <td id="LC7167" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7168" class="blob-num js-line-number" data-line-number="7168"></td>
        <td id="LC7168" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7169" class="blob-num js-line-number" data-line-number="7169"></td>
        <td id="LC7169" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_bytes<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7170" class="blob-num js-line-number" data-line-number="7170"></td>
        <td id="LC7170" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7171" class="blob-num js-line-number" data-line-number="7171"></td>
        <td id="LC7171" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7172" class="blob-num js-line-number" data-line-number="7172"></td>
        <td id="LC7172" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_double<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7173" class="blob-num js-line-number" data-line-number="7173"></td>
        <td id="LC7173" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7174" class="blob-num js-line-number" data-line-number="7174"></td>
        <td id="LC7174" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7175" class="blob-num js-line-number" data-line-number="7175"></td>
        <td id="LC7175" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_double<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7176" class="blob-num js-line-number" data-line-number="7176"></td>
        <td id="LC7176" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7177" class="blob-num js-line-number" data-line-number="7177"></td>
        <td id="LC7177" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7178" class="blob-num js-line-number" data-line-number="7178"></td>
        <td id="LC7178" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_name <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_name<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7179" class="blob-num js-line-number" data-line-number="7179"></td>
        <td id="LC7179" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7180" class="blob-num js-line-number" data-line-number="7180"></td>
        <td id="LC7180" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7181" class="blob-num js-line-number" data-line-number="7181"></td>
        <td id="LC7181" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_name<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7182" class="blob-num js-line-number" data-line-number="7182"></td>
        <td id="LC7182" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7183" class="blob-num js-line-number" data-line-number="7183"></td>
        <td id="LC7183" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7184" class="blob-num js-line-number" data-line-number="7184"></td>
        <td id="LC7184" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_text<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7185" class="blob-num js-line-number" data-line-number="7185"></td>
        <td id="LC7185" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7186" class="blob-num js-line-number" data-line-number="7186"></td>
        <td id="LC7186" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7187" class="blob-num js-line-number" data-line-number="7187"></td>
        <td id="LC7187" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_text<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7188" class="blob-num js-line-number" data-line-number="7188"></td>
        <td id="LC7188" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7189" class="blob-num js-line-number" data-line-number="7189"></td>
        <td id="LC7189" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7190" class="blob-num js-line-number" data-line-number="7190"></td>
        <td id="LC7190" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_column_type <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_type<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7191" class="blob-num js-line-number" data-line-number="7191"></td>
        <td id="LC7191" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7192" class="blob-num js-line-number" data-line-number="7192"></td>
        <td id="LC7192" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7193" class="blob-num js-line-number" data-line-number="7193"></td>
        <td id="LC7193" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_column_type<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7194" class="blob-num js-line-number" data-line-number="7194"></td>
        <td id="LC7194" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7195" class="blob-num js-line-number" data-line-number="7195"></td>
        <td id="LC7195" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7196" class="blob-num js-line-number" data-line-number="7196"></td>
        <td id="LC7196" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_create_function_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_create_function_v2<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7197" class="blob-num js-line-number" data-line-number="7197"></td>
        <td id="LC7197" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7198" class="blob-num js-line-number" data-line-number="7198"></td>
        <td id="LC7198" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7199" class="blob-num js-line-number" data-line-number="7199"></td>
        <td id="LC7199" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_create_function_v2<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7200" class="blob-num js-line-number" data-line-number="7200"></td>
        <td id="LC7200" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7201" class="blob-num js-line-number" data-line-number="7201"></td>
        <td id="LC7201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7202" class="blob-num js-line-number" data-line-number="7202"></td>
        <td id="LC7202" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_data_count <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_data_count<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7203" class="blob-num js-line-number" data-line-number="7203"></td>
        <td id="LC7203" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7204" class="blob-num js-line-number" data-line-number="7204"></td>
        <td id="LC7204" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7205" class="blob-num js-line-number" data-line-number="7205"></td>
        <td id="LC7205" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_data_count<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7206" class="blob-num js-line-number" data-line-number="7206"></td>
        <td id="LC7206" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7207" class="blob-num js-line-number" data-line-number="7207"></td>
        <td id="LC7207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7208" class="blob-num js-line-number" data-line-number="7208"></td>
        <td id="LC7208" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_errmsg <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_errmsg<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7209" class="blob-num js-line-number" data-line-number="7209"></td>
        <td id="LC7209" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7210" class="blob-num js-line-number" data-line-number="7210"></td>
        <td id="LC7210" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7211" class="blob-num js-line-number" data-line-number="7211"></td>
        <td id="LC7211" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_errmsg<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7212" class="blob-num js-line-number" data-line-number="7212"></td>
        <td id="LC7212" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7213" class="blob-num js-line-number" data-line-number="7213"></td>
        <td id="LC7213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7214" class="blob-num js-line-number" data-line-number="7214"></td>
        <td id="LC7214" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_exec <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_exec<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7215" class="blob-num js-line-number" data-line-number="7215"></td>
        <td id="LC7215" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7216" class="blob-num js-line-number" data-line-number="7216"></td>
        <td id="LC7216" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7217" class="blob-num js-line-number" data-line-number="7217"></td>
        <td id="LC7217" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_exec<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7218" class="blob-num js-line-number" data-line-number="7218"></td>
        <td id="LC7218" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7219" class="blob-num js-line-number" data-line-number="7219"></td>
        <td id="LC7219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7220" class="blob-num js-line-number" data-line-number="7220"></td>
        <td id="LC7220" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_finalize <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_finalize<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7221" class="blob-num js-line-number" data-line-number="7221"></td>
        <td id="LC7221" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7222" class="blob-num js-line-number" data-line-number="7222"></td>
        <td id="LC7222" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7223" class="blob-num js-line-number" data-line-number="7223"></td>
        <td id="LC7223" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_finalize<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7224" class="blob-num js-line-number" data-line-number="7224"></td>
        <td id="LC7224" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7225" class="blob-num js-line-number" data-line-number="7225"></td>
        <td id="LC7225" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7226" class="blob-num js-line-number" data-line-number="7226"></td>
        <td id="LC7226" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_free <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_free<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7227" class="blob-num js-line-number" data-line-number="7227"></td>
        <td id="LC7227" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7228" class="blob-num js-line-number" data-line-number="7228"></td>
        <td id="LC7228" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7229" class="blob-num js-line-number" data-line-number="7229"></td>
        <td id="LC7229" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_free<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7230" class="blob-num js-line-number" data-line-number="7230"></td>
        <td id="LC7230" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7231" class="blob-num js-line-number" data-line-number="7231"></td>
        <td id="LC7231" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7232" class="blob-num js-line-number" data-line-number="7232"></td>
        <td id="LC7232" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_open <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_open<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7233" class="blob-num js-line-number" data-line-number="7233"></td>
        <td id="LC7233" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7234" class="blob-num js-line-number" data-line-number="7234"></td>
        <td id="LC7234" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7235" class="blob-num js-line-number" data-line-number="7235"></td>
        <td id="LC7235" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_open<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7236" class="blob-num js-line-number" data-line-number="7236"></td>
        <td id="LC7236" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7237" class="blob-num js-line-number" data-line-number="7237"></td>
        <td id="LC7237" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7238" class="blob-num js-line-number" data-line-number="7238"></td>
        <td id="LC7238" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_prepare_v2 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_prepare_v2<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7239" class="blob-num js-line-number" data-line-number="7239"></td>
        <td id="LC7239" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7240" class="blob-num js-line-number" data-line-number="7240"></td>
        <td id="LC7240" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7241" class="blob-num js-line-number" data-line-number="7241"></td>
        <td id="LC7241" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_prepare_v2<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7242" class="blob-num js-line-number" data-line-number="7242"></td>
        <td id="LC7242" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7243" class="blob-num js-line-number" data-line-number="7243"></td>
        <td id="LC7243" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7244" class="blob-num js-line-number" data-line-number="7244"></td>
        <td id="LC7244" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_reset <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_reset<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7245" class="blob-num js-line-number" data-line-number="7245"></td>
        <td id="LC7245" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7246" class="blob-num js-line-number" data-line-number="7246"></td>
        <td id="LC7246" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7247" class="blob-num js-line-number" data-line-number="7247"></td>
        <td id="LC7247" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_reset<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7248" class="blob-num js-line-number" data-line-number="7248"></td>
        <td id="LC7248" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7249" class="blob-num js-line-number" data-line-number="7249"></td>
        <td id="LC7249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7250" class="blob-num js-line-number" data-line-number="7250"></td>
        <td id="LC7250" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_blob<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7251" class="blob-num js-line-number" data-line-number="7251"></td>
        <td id="LC7251" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7252" class="blob-num js-line-number" data-line-number="7252"></td>
        <td id="LC7252" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7253" class="blob-num js-line-number" data-line-number="7253"></td>
        <td id="LC7253" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_blob<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7254" class="blob-num js-line-number" data-line-number="7254"></td>
        <td id="LC7254" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7255" class="blob-num js-line-number" data-line-number="7255"></td>
        <td id="LC7255" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7256" class="blob-num js-line-number" data-line-number="7256"></td>
        <td id="LC7256" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_double<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7257" class="blob-num js-line-number" data-line-number="7257"></td>
        <td id="LC7257" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7258" class="blob-num js-line-number" data-line-number="7258"></td>
        <td id="LC7258" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7259" class="blob-num js-line-number" data-line-number="7259"></td>
        <td id="LC7259" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_double<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7260" class="blob-num js-line-number" data-line-number="7260"></td>
        <td id="LC7260" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7261" class="blob-num js-line-number" data-line-number="7261"></td>
        <td id="LC7261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7262" class="blob-num js-line-number" data-line-number="7262"></td>
        <td id="LC7262" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_error <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_error<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7263" class="blob-num js-line-number" data-line-number="7263"></td>
        <td id="LC7263" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7264" class="blob-num js-line-number" data-line-number="7264"></td>
        <td id="LC7264" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7265" class="blob-num js-line-number" data-line-number="7265"></td>
        <td id="LC7265" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_error<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7266" class="blob-num js-line-number" data-line-number="7266"></td>
        <td id="LC7266" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7267" class="blob-num js-line-number" data-line-number="7267"></td>
        <td id="LC7267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7268" class="blob-num js-line-number" data-line-number="7268"></td>
        <td id="LC7268" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_int<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7269" class="blob-num js-line-number" data-line-number="7269"></td>
        <td id="LC7269" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7270" class="blob-num js-line-number" data-line-number="7270"></td>
        <td id="LC7270" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7271" class="blob-num js-line-number" data-line-number="7271"></td>
        <td id="LC7271" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_int<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7272" class="blob-num js-line-number" data-line-number="7272"></td>
        <td id="LC7272" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7273" class="blob-num js-line-number" data-line-number="7273"></td>
        <td id="LC7273" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7274" class="blob-num js-line-number" data-line-number="7274"></td>
        <td id="LC7274" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_int64 <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_int64<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7275" class="blob-num js-line-number" data-line-number="7275"></td>
        <td id="LC7275" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7276" class="blob-num js-line-number" data-line-number="7276"></td>
        <td id="LC7276" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7277" class="blob-num js-line-number" data-line-number="7277"></td>
        <td id="LC7277" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_int64<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7278" class="blob-num js-line-number" data-line-number="7278"></td>
        <td id="LC7278" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7279" class="blob-num js-line-number" data-line-number="7279"></td>
        <td id="LC7279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7280" class="blob-num js-line-number" data-line-number="7280"></td>
        <td id="LC7280" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_null <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_null<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7281" class="blob-num js-line-number" data-line-number="7281"></td>
        <td id="LC7281" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7282" class="blob-num js-line-number" data-line-number="7282"></td>
        <td id="LC7282" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7283" class="blob-num js-line-number" data-line-number="7283"></td>
        <td id="LC7283" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_null<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7284" class="blob-num js-line-number" data-line-number="7284"></td>
        <td id="LC7284" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7285" class="blob-num js-line-number" data-line-number="7285"></td>
        <td id="LC7285" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7286" class="blob-num js-line-number" data-line-number="7286"></td>
        <td id="LC7286" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_result_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_text<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7287" class="blob-num js-line-number" data-line-number="7287"></td>
        <td id="LC7287" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7288" class="blob-num js-line-number" data-line-number="7288"></td>
        <td id="LC7288" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7289" class="blob-num js-line-number" data-line-number="7289"></td>
        <td id="LC7289" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_result_text<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7290" class="blob-num js-line-number" data-line-number="7290"></td>
        <td id="LC7290" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7291" class="blob-num js-line-number" data-line-number="7291"></td>
        <td id="LC7291" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7292" class="blob-num js-line-number" data-line-number="7292"></td>
        <td id="LC7292" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_step <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_step<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7293" class="blob-num js-line-number" data-line-number="7293"></td>
        <td id="LC7293" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7294" class="blob-num js-line-number" data-line-number="7294"></td>
        <td id="LC7294" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7295" class="blob-num js-line-number" data-line-number="7295"></td>
        <td id="LC7295" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_step<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7296" class="blob-num js-line-number" data-line-number="7296"></td>
        <td id="LC7296" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7297" class="blob-num js-line-number" data-line-number="7297"></td>
        <td id="LC7297" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7298" class="blob-num js-line-number" data-line-number="7298"></td>
        <td id="LC7298" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_blob <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_blob<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7299" class="blob-num js-line-number" data-line-number="7299"></td>
        <td id="LC7299" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7300" class="blob-num js-line-number" data-line-number="7300"></td>
        <td id="LC7300" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7301" class="blob-num js-line-number" data-line-number="7301"></td>
        <td id="LC7301" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_blob<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7302" class="blob-num js-line-number" data-line-number="7302"></td>
        <td id="LC7302" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7303" class="blob-num js-line-number" data-line-number="7303"></td>
        <td id="LC7303" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7304" class="blob-num js-line-number" data-line-number="7304"></td>
        <td id="LC7304" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_bytes <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_bytes<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7305" class="blob-num js-line-number" data-line-number="7305"></td>
        <td id="LC7305" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7306" class="blob-num js-line-number" data-line-number="7306"></td>
        <td id="LC7306" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7307" class="blob-num js-line-number" data-line-number="7307"></td>
        <td id="LC7307" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_bytes<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7308" class="blob-num js-line-number" data-line-number="7308"></td>
        <td id="LC7308" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7309" class="blob-num js-line-number" data-line-number="7309"></td>
        <td id="LC7309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7310" class="blob-num js-line-number" data-line-number="7310"></td>
        <td id="LC7310" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_double <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_double<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7311" class="blob-num js-line-number" data-line-number="7311"></td>
        <td id="LC7311" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7312" class="blob-num js-line-number" data-line-number="7312"></td>
        <td id="LC7312" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7313" class="blob-num js-line-number" data-line-number="7313"></td>
        <td id="LC7313" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_double<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7314" class="blob-num js-line-number" data-line-number="7314"></td>
        <td id="LC7314" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7315" class="blob-num js-line-number" data-line-number="7315"></td>
        <td id="LC7315" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7316" class="blob-num js-line-number" data-line-number="7316"></td>
        <td id="LC7316" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_int <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_int<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7317" class="blob-num js-line-number" data-line-number="7317"></td>
        <td id="LC7317" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7318" class="blob-num js-line-number" data-line-number="7318"></td>
        <td id="LC7318" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7319" class="blob-num js-line-number" data-line-number="7319"></td>
        <td id="LC7319" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_int<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7320" class="blob-num js-line-number" data-line-number="7320"></td>
        <td id="LC7320" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7321" class="blob-num js-line-number" data-line-number="7321"></td>
        <td id="LC7321" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7322" class="blob-num js-line-number" data-line-number="7322"></td>
        <td id="LC7322" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_text <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_text<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7323" class="blob-num js-line-number" data-line-number="7323"></td>
        <td id="LC7323" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7324" class="blob-num js-line-number" data-line-number="7324"></td>
        <td id="LC7324" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7325" class="blob-num js-line-number" data-line-number="7325"></td>
        <td id="LC7325" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_text<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7326" class="blob-num js-line-number" data-line-number="7326"></td>
        <td id="LC7326" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7327" class="blob-num js-line-number" data-line-number="7327"></td>
        <td id="LC7327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7328" class="blob-num js-line-number" data-line-number="7328"></td>
        <td id="LC7328" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> _sqlite3_value_type <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_type<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7329" class="blob-num js-line-number" data-line-number="7329"></td>
        <td id="LC7329" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7330" class="blob-num js-line-number" data-line-number="7330"></td>
        <td id="LC7330" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7331" class="blob-num js-line-number" data-line-number="7331"></td>
        <td id="LC7331" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>_sqlite3_value_type<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7332" class="blob-num js-line-number" data-line-number="7332"></td>
        <td id="LC7332" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7333" class="blob-num js-line-number" data-line-number="7333"></td>
        <td id="LC7333" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7334" class="blob-num js-line-number" data-line-number="7334"></td>
        <td id="LC7334" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> establishStackSpace <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>establishStackSpace<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7335" class="blob-num js-line-number" data-line-number="7335"></td>
        <td id="LC7335" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7336" class="blob-num js-line-number" data-line-number="7336"></td>
        <td id="LC7336" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7337" class="blob-num js-line-number" data-line-number="7337"></td>
        <td id="LC7337" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>establishStackSpace<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7338" class="blob-num js-line-number" data-line-number="7338"></td>
        <td id="LC7338" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7339" class="blob-num js-line-number" data-line-number="7339"></td>
        <td id="LC7339" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7340" class="blob-num js-line-number" data-line-number="7340"></td>
        <td id="LC7340" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> stackAlloc <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackAlloc<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7341" class="blob-num js-line-number" data-line-number="7341"></td>
        <td id="LC7341" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7342" class="blob-num js-line-number" data-line-number="7342"></td>
        <td id="LC7342" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7343" class="blob-num js-line-number" data-line-number="7343"></td>
        <td id="LC7343" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>stackAlloc<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7344" class="blob-num js-line-number" data-line-number="7344"></td>
        <td id="LC7344" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7345" class="blob-num js-line-number" data-line-number="7345"></td>
        <td id="LC7345" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7346" class="blob-num js-line-number" data-line-number="7346"></td>
        <td id="LC7346" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> stackRestore <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackRestore<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7347" class="blob-num js-line-number" data-line-number="7347"></td>
        <td id="LC7347" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7348" class="blob-num js-line-number" data-line-number="7348"></td>
        <td id="LC7348" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7349" class="blob-num js-line-number" data-line-number="7349"></td>
        <td id="LC7349" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>stackRestore<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7350" class="blob-num js-line-number" data-line-number="7350"></td>
        <td id="LC7350" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7351" class="blob-num js-line-number" data-line-number="7351"></td>
        <td id="LC7351" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7352" class="blob-num js-line-number" data-line-number="7352"></td>
        <td id="LC7352" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> stackSave <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackSave<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7353" class="blob-num js-line-number" data-line-number="7353"></td>
        <td id="LC7353" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7354" class="blob-num js-line-number" data-line-number="7354"></td>
        <td id="LC7354" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7355" class="blob-num js-line-number" data-line-number="7355"></td>
        <td id="LC7355" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>stackSave<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7356" class="blob-num js-line-number" data-line-number="7356"></td>
        <td id="LC7356" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7357" class="blob-num js-line-number" data-line-number="7357"></td>
        <td id="LC7357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7358" class="blob-num js-line-number" data-line-number="7358"></td>
        <td id="LC7358" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_i <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_i<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7359" class="blob-num js-line-number" data-line-number="7359"></td>
        <td id="LC7359" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7360" class="blob-num js-line-number" data-line-number="7360"></td>
        <td id="LC7360" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7361" class="blob-num js-line-number" data-line-number="7361"></td>
        <td id="LC7361" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_i<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7362" class="blob-num js-line-number" data-line-number="7362"></td>
        <td id="LC7362" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7363" class="blob-num js-line-number" data-line-number="7363"></td>
        <td id="LC7363" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7364" class="blob-num js-line-number" data-line-number="7364"></td>
        <td id="LC7364" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_ii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_ii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7365" class="blob-num js-line-number" data-line-number="7365"></td>
        <td id="LC7365" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7366" class="blob-num js-line-number" data-line-number="7366"></td>
        <td id="LC7366" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7367" class="blob-num js-line-number" data-line-number="7367"></td>
        <td id="LC7367" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_ii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7368" class="blob-num js-line-number" data-line-number="7368"></td>
        <td id="LC7368" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7369" class="blob-num js-line-number" data-line-number="7369"></td>
        <td id="LC7369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7370" class="blob-num js-line-number" data-line-number="7370"></td>
        <td id="LC7370" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7371" class="blob-num js-line-number" data-line-number="7371"></td>
        <td id="LC7371" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7372" class="blob-num js-line-number" data-line-number="7372"></td>
        <td id="LC7372" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7373" class="blob-num js-line-number" data-line-number="7373"></td>
        <td id="LC7373" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7374" class="blob-num js-line-number" data-line-number="7374"></td>
        <td id="LC7374" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7375" class="blob-num js-line-number" data-line-number="7375"></td>
        <td id="LC7375" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7376" class="blob-num js-line-number" data-line-number="7376"></td>
        <td id="LC7376" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7377" class="blob-num js-line-number" data-line-number="7377"></td>
        <td id="LC7377" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7378" class="blob-num js-line-number" data-line-number="7378"></td>
        <td id="LC7378" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7379" class="blob-num js-line-number" data-line-number="7379"></td>
        <td id="LC7379" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7380" class="blob-num js-line-number" data-line-number="7380"></td>
        <td id="LC7380" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7381" class="blob-num js-line-number" data-line-number="7381"></td>
        <td id="LC7381" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7382" class="blob-num js-line-number" data-line-number="7382"></td>
        <td id="LC7382" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiiii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7383" class="blob-num js-line-number" data-line-number="7383"></td>
        <td id="LC7383" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7384" class="blob-num js-line-number" data-line-number="7384"></td>
        <td id="LC7384" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7385" class="blob-num js-line-number" data-line-number="7385"></td>
        <td id="LC7385" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7386" class="blob-num js-line-number" data-line-number="7386"></td>
        <td id="LC7386" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7387" class="blob-num js-line-number" data-line-number="7387"></td>
        <td id="LC7387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7388" class="blob-num js-line-number" data-line-number="7388"></td>
        <td id="LC7388" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiiiii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7389" class="blob-num js-line-number" data-line-number="7389"></td>
        <td id="LC7389" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7390" class="blob-num js-line-number" data-line-number="7390"></td>
        <td id="LC7390" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7391" class="blob-num js-line-number" data-line-number="7391"></td>
        <td id="LC7391" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7392" class="blob-num js-line-number" data-line-number="7392"></td>
        <td id="LC7392" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7393" class="blob-num js-line-number" data-line-number="7393"></td>
        <td id="LC7393" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7394" class="blob-num js-line-number" data-line-number="7394"></td>
        <td id="LC7394" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiiiiii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiiii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7395" class="blob-num js-line-number" data-line-number="7395"></td>
        <td id="LC7395" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7396" class="blob-num js-line-number" data-line-number="7396"></td>
        <td id="LC7396" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7397" class="blob-num js-line-number" data-line-number="7397"></td>
        <td id="LC7397" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiiii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7398" class="blob-num js-line-number" data-line-number="7398"></td>
        <td id="LC7398" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7399" class="blob-num js-line-number" data-line-number="7399"></td>
        <td id="LC7399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7400" class="blob-num js-line-number" data-line-number="7400"></td>
        <td id="LC7400" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiiiiij <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiiij<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7401" class="blob-num js-line-number" data-line-number="7401"></td>
        <td id="LC7401" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7402" class="blob-num js-line-number" data-line-number="7402"></td>
        <td id="LC7402" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7403" class="blob-num js-line-number" data-line-number="7403"></td>
        <td id="LC7403" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiiiij<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7404" class="blob-num js-line-number" data-line-number="7404"></td>
        <td id="LC7404" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7405" class="blob-num js-line-number" data-line-number="7405"></td>
        <td id="LC7405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7406" class="blob-num js-line-number" data-line-number="7406"></td>
        <td id="LC7406" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiiij <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiij<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7407" class="blob-num js-line-number" data-line-number="7407"></td>
        <td id="LC7407" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7408" class="blob-num js-line-number" data-line-number="7408"></td>
        <td id="LC7408" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7409" class="blob-num js-line-number" data-line-number="7409"></td>
        <td id="LC7409" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiiij<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7410" class="blob-num js-line-number" data-line-number="7410"></td>
        <td id="LC7410" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7411" class="blob-num js-line-number" data-line-number="7411"></td>
        <td id="LC7411" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7412" class="blob-num js-line-number" data-line-number="7412"></td>
        <td id="LC7412" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iij <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iij<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7413" class="blob-num js-line-number" data-line-number="7413"></td>
        <td id="LC7413" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7414" class="blob-num js-line-number" data-line-number="7414"></td>
        <td id="LC7414" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7415" class="blob-num js-line-number" data-line-number="7415"></td>
        <td id="LC7415" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iij<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7416" class="blob-num js-line-number" data-line-number="7416"></td>
        <td id="LC7416" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7417" class="blob-num js-line-number" data-line-number="7417"></td>
        <td id="LC7417" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7418" class="blob-num js-line-number" data-line-number="7418"></td>
        <td id="LC7418" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iiji <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiji<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7419" class="blob-num js-line-number" data-line-number="7419"></td>
        <td id="LC7419" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7420" class="blob-num js-line-number" data-line-number="7420"></td>
        <td id="LC7420" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7421" class="blob-num js-line-number" data-line-number="7421"></td>
        <td id="LC7421" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iiji<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7422" class="blob-num js-line-number" data-line-number="7422"></td>
        <td id="LC7422" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7423" class="blob-num js-line-number" data-line-number="7423"></td>
        <td id="LC7423" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7424" class="blob-num js-line-number" data-line-number="7424"></td>
        <td id="LC7424" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_iijii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iijii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7425" class="blob-num js-line-number" data-line-number="7425"></td>
        <td id="LC7425" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7426" class="blob-num js-line-number" data-line-number="7426"></td>
        <td id="LC7426" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7427" class="blob-num js-line-number" data-line-number="7427"></td>
        <td id="LC7427" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_iijii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7428" class="blob-num js-line-number" data-line-number="7428"></td>
        <td id="LC7428" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7429" class="blob-num js-line-number" data-line-number="7429"></td>
        <td id="LC7429" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7430" class="blob-num js-line-number" data-line-number="7430"></td>
        <td id="LC7430" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_jiji <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_jiji<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7431" class="blob-num js-line-number" data-line-number="7431"></td>
        <td id="LC7431" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7432" class="blob-num js-line-number" data-line-number="7432"></td>
        <td id="LC7432" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7433" class="blob-num js-line-number" data-line-number="7433"></td>
        <td id="LC7433" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_jiji<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7434" class="blob-num js-line-number" data-line-number="7434"></td>
        <td id="LC7434" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7435" class="blob-num js-line-number" data-line-number="7435"></td>
        <td id="LC7435" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7436" class="blob-num js-line-number" data-line-number="7436"></td>
        <td id="LC7436" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_vi <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_vi<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7437" class="blob-num js-line-number" data-line-number="7437"></td>
        <td id="LC7437" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7438" class="blob-num js-line-number" data-line-number="7438"></td>
        <td id="LC7438" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7439" class="blob-num js-line-number" data-line-number="7439"></td>
        <td id="LC7439" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_vi<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7440" class="blob-num js-line-number" data-line-number="7440"></td>
        <td id="LC7440" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7441" class="blob-num js-line-number" data-line-number="7441"></td>
        <td id="LC7441" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7442" class="blob-num js-line-number" data-line-number="7442"></td>
        <td id="LC7442" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_vii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_vii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7443" class="blob-num js-line-number" data-line-number="7443"></td>
        <td id="LC7443" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7444" class="blob-num js-line-number" data-line-number="7444"></td>
        <td id="LC7444" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7445" class="blob-num js-line-number" data-line-number="7445"></td>
        <td id="LC7445" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_vii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7446" class="blob-num js-line-number" data-line-number="7446"></td>
        <td id="LC7446" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7447" class="blob-num js-line-number" data-line-number="7447"></td>
        <td id="LC7447" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7448" class="blob-num js-line-number" data-line-number="7448"></td>
        <td id="LC7448" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_viii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7449" class="blob-num js-line-number" data-line-number="7449"></td>
        <td id="LC7449" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7450" class="blob-num js-line-number" data-line-number="7450"></td>
        <td id="LC7450" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7451" class="blob-num js-line-number" data-line-number="7451"></td>
        <td id="LC7451" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7452" class="blob-num js-line-number" data-line-number="7452"></td>
        <td id="LC7452" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7453" class="blob-num js-line-number" data-line-number="7453"></td>
        <td id="LC7453" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7454" class="blob-num js-line-number" data-line-number="7454"></td>
        <td id="LC7454" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_viiii <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viiii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7455" class="blob-num js-line-number" data-line-number="7455"></td>
        <td id="LC7455" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7456" class="blob-num js-line-number" data-line-number="7456"></td>
        <td id="LC7456" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7457" class="blob-num js-line-number" data-line-number="7457"></td>
        <td id="LC7457" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viiii<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7458" class="blob-num js-line-number" data-line-number="7458"></td>
        <td id="LC7458" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7459" class="blob-num js-line-number" data-line-number="7459"></td>
        <td id="LC7459" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7460" class="blob-num js-line-number" data-line-number="7460"></td>
        <td id="LC7460" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_viiiij <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viiiij<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7461" class="blob-num js-line-number" data-line-number="7461"></td>
        <td id="LC7461" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7462" class="blob-num js-line-number" data-line-number="7462"></td>
        <td id="LC7462" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7463" class="blob-num js-line-number" data-line-number="7463"></td>
        <td id="LC7463" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viiiij<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7464" class="blob-num js-line-number" data-line-number="7464"></td>
        <td id="LC7464" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7465" class="blob-num js-line-number" data-line-number="7465"></td>
        <td id="LC7465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7466" class="blob-num js-line-number" data-line-number="7466"></td>
        <td id="LC7466" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_viij <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viij<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7467" class="blob-num js-line-number" data-line-number="7467"></td>
        <td id="LC7467" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7468" class="blob-num js-line-number" data-line-number="7468"></td>
        <td id="LC7468" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7469" class="blob-num js-line-number" data-line-number="7469"></td>
        <td id="LC7469" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viij<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7470" class="blob-num js-line-number" data-line-number="7470"></td>
        <td id="LC7470" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7471" class="blob-num js-line-number" data-line-number="7471"></td>
        <td id="LC7471" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7472" class="blob-num js-line-number" data-line-number="7472"></td>
        <td id="LC7472" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> dynCall_viji <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viji<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7473" class="blob-num js-line-number" data-line-number="7473"></td>
        <td id="LC7473" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(runtimeInitialized, <span class="pl-s"><span class="pl-pds">&#39;</span>you need to wait for the runtime to be ready (e.g. wait for main() to be called)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7474" class="blob-num js-line-number" data-line-number="7474"></td>
        <td id="LC7474" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">assert</span>(<span class="pl-k">!</span>runtimeExited, <span class="pl-s"><span class="pl-pds">&#39;</span>the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7475" class="blob-num js-line-number" data-line-number="7475"></td>
        <td id="LC7475" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> Module[<span class="pl-s"><span class="pl-pds">&quot;</span>asm<span class="pl-pds">&quot;</span></span>][<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall_viji<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">apply</span>(<span class="pl-c1">null</span>, <span class="pl-c1">arguments</span>)</td>
      </tr>
      <tr>
        <td id="L7476" class="blob-num js-line-number" data-line-number="7476"></td>
        <td id="LC7476" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7477" class="blob-num js-line-number" data-line-number="7477"></td>
        <td id="LC7477" class="blob-code blob-code-inner js-file-line">;</td>
      </tr>
      <tr>
        <td id="L7478" class="blob-num js-line-number" data-line-number="7478"></td>
        <td id="LC7478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7479" class="blob-num js-line-number" data-line-number="7479"></td>
        <td id="LC7479" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7480" class="blob-num js-line-number" data-line-number="7480"></td>
        <td id="LC7480" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7481" class="blob-num js-line-number" data-line-number="7481"></td>
        <td id="LC7481" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> === Auto-generated postamble setup entry stuff ===</span></td>
      </tr>
      <tr>
        <td id="L7482" class="blob-num js-line-number" data-line-number="7482"></td>
        <td id="LC7482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7483" class="blob-num js-line-number" data-line-number="7483"></td>
        <td id="LC7483" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&#39;</span>asm<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> asm;</td>
      </tr>
      <tr>
        <td id="L7484" class="blob-num js-line-number" data-line-number="7484"></td>
        <td id="LC7484" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7485" class="blob-num js-line-number" data-line-number="7485"></td>
        <td id="LC7485" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>intArrayFromString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>intArrayFromString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;intArrayFromString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7486" class="blob-num js-line-number" data-line-number="7486"></td>
        <td id="LC7486" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>intArrayToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>intArrayToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;intArrayToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7487" class="blob-num js-line-number" data-line-number="7487"></td>
        <td id="LC7487" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ccall<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>ccall<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ccall&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7488" class="blob-num js-line-number" data-line-number="7488"></td>
        <td id="LC7488" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>cwrap<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> cwrap;</td>
      </tr>
      <tr>
        <td id="L7489" class="blob-num js-line-number" data-line-number="7489"></td>
        <td id="LC7489" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>setValue<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>setValue<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;setValue&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7490" class="blob-num js-line-number" data-line-number="7490"></td>
        <td id="LC7490" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getValue<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getValue<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getValue&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7491" class="blob-num js-line-number" data-line-number="7491"></td>
        <td id="LC7491" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>allocate<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>allocate<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;allocate&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7492" class="blob-num js-line-number" data-line-number="7492"></td>
        <td id="LC7492" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getMemory<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getMemory<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getMemory&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7493" class="blob-num js-line-number" data-line-number="7493"></td>
        <td id="LC7493" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>AsciiToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>AsciiToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;AsciiToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7494" class="blob-num js-line-number" data-line-number="7494"></td>
        <td id="LC7494" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stringToAscii<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stringToAscii<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stringToAscii&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7495" class="blob-num js-line-number" data-line-number="7495"></td>
        <td id="LC7495" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>UTF8ArrayToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>UTF8ArrayToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;UTF8ArrayToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7496" class="blob-num js-line-number" data-line-number="7496"></td>
        <td id="LC7496" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>UTF8ToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>UTF8ToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;UTF8ToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7497" class="blob-num js-line-number" data-line-number="7497"></td>
        <td id="LC7497" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF8Array<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF8Array<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stringToUTF8Array&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7498" class="blob-num js-line-number" data-line-number="7498"></td>
        <td id="LC7498" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF8<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF8<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stringToUTF8&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7499" class="blob-num js-line-number" data-line-number="7499"></td>
        <td id="LC7499" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF8<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF8<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;lengthBytesUTF8&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7500" class="blob-num js-line-number" data-line-number="7500"></td>
        <td id="LC7500" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>UTF16ToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>UTF16ToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;UTF16ToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7501" class="blob-num js-line-number" data-line-number="7501"></td>
        <td id="LC7501" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF16<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF16<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stringToUTF16&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7502" class="blob-num js-line-number" data-line-number="7502"></td>
        <td id="LC7502" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF16<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF16<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;lengthBytesUTF16&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7503" class="blob-num js-line-number" data-line-number="7503"></td>
        <td id="LC7503" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>UTF32ToString<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>UTF32ToString<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;UTF32ToString&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7504" class="blob-num js-line-number" data-line-number="7504"></td>
        <td id="LC7504" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF32<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stringToUTF32<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stringToUTF32&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7505" class="blob-num js-line-number" data-line-number="7505"></td>
        <td id="LC7505" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF32<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>lengthBytesUTF32<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;lengthBytesUTF32&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7506" class="blob-num js-line-number" data-line-number="7506"></td>
        <td id="LC7506" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>allocateUTF8<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>allocateUTF8<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;allocateUTF8&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7507" class="blob-num js-line-number" data-line-number="7507"></td>
        <td id="LC7507" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>stackTrace<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackTrace<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;stackTrace&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7508" class="blob-num js-line-number" data-line-number="7508"></td>
        <td id="LC7508" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addOnPreRun<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addOnPreRun<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addOnPreRun&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7509" class="blob-num js-line-number" data-line-number="7509"></td>
        <td id="LC7509" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addOnInit<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addOnInit<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addOnInit&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7510" class="blob-num js-line-number" data-line-number="7510"></td>
        <td id="LC7510" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addOnPreMain<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addOnPreMain<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addOnPreMain&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7511" class="blob-num js-line-number" data-line-number="7511"></td>
        <td id="LC7511" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addOnExit<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addOnExit<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addOnExit&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7512" class="blob-num js-line-number" data-line-number="7512"></td>
        <td id="LC7512" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addOnPostRun<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addOnPostRun<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addOnPostRun&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7513" class="blob-num js-line-number" data-line-number="7513"></td>
        <td id="LC7513" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>writeStringToMemory<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>writeStringToMemory<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;writeStringToMemory&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7514" class="blob-num js-line-number" data-line-number="7514"></td>
        <td id="LC7514" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>writeArrayToMemory<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>writeArrayToMemory<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;writeArrayToMemory&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7515" class="blob-num js-line-number" data-line-number="7515"></td>
        <td id="LC7515" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>writeAsciiToMemory<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>writeAsciiToMemory<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;writeAsciiToMemory&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7516" class="blob-num js-line-number" data-line-number="7516"></td>
        <td id="LC7516" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addRunDependency<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addRunDependency<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addRunDependency&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7517" class="blob-num js-line-number" data-line-number="7517"></td>
        <td id="LC7517" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>removeRunDependency<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>removeRunDependency<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;removeRunDependency&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7518" class="blob-num js-line-number" data-line-number="7518"></td>
        <td id="LC7518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ENV<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>ENV<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ENV&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7519" class="blob-num js-line-number" data-line-number="7519"></td>
        <td id="LC7519" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7520" class="blob-num js-line-number" data-line-number="7520"></td>
        <td id="LC7520" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createFolder<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createFolder<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createFolder&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7521" class="blob-num js-line-number" data-line-number="7521"></td>
        <td id="LC7521" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createPath<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createPath<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createPath&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7522" class="blob-num js-line-number" data-line-number="7522"></td>
        <td id="LC7522" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createDataFile<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createDataFile<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createDataFile&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7523" class="blob-num js-line-number" data-line-number="7523"></td>
        <td id="LC7523" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createPreloadedFile<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createPreloadedFile<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createPreloadedFile&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7524" class="blob-num js-line-number" data-line-number="7524"></td>
        <td id="LC7524" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createLazyFile<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createLazyFile<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createLazyFile&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7525" class="blob-num js-line-number" data-line-number="7525"></td>
        <td id="LC7525" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createLink<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createLink<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createLink&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7526" class="blob-num js-line-number" data-line-number="7526"></td>
        <td id="LC7526" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_createDevice<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_createDevice<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_createDevice&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7527" class="blob-num js-line-number" data-line-number="7527"></td>
        <td id="LC7527" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>FS_unlink<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>FS_unlink<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;FS_unlink&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7528" class="blob-num js-line-number" data-line-number="7528"></td>
        <td id="LC7528" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>GL<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>GL<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;GL&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7529" class="blob-num js-line-number" data-line-number="7529"></td>
        <td id="LC7529" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>dynamicAlloc<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynamicAlloc<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;dynamicAlloc&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7530" class="blob-num js-line-number" data-line-number="7530"></td>
        <td id="LC7530" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>loadDynamicLibrary<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>loadDynamicLibrary<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;loadDynamicLibrary&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7531" class="blob-num js-line-number" data-line-number="7531"></td>
        <td id="LC7531" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>loadWebAssemblyModule<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>loadWebAssemblyModule<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;loadWebAssemblyModule&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7532" class="blob-num js-line-number" data-line-number="7532"></td>
        <td id="LC7532" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getLEB<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getLEB<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getLEB&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7533" class="blob-num js-line-number" data-line-number="7533"></td>
        <td id="LC7533" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getFunctionTables<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getFunctionTables<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getFunctionTables&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7534" class="blob-num js-line-number" data-line-number="7534"></td>
        <td id="LC7534" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>alignFunctionTables<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>alignFunctionTables<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;alignFunctionTables&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7535" class="blob-num js-line-number" data-line-number="7535"></td>
        <td id="LC7535" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>registerFunctions<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>registerFunctions<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;registerFunctions&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7536" class="blob-num js-line-number" data-line-number="7536"></td>
        <td id="LC7536" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>addFunction<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>addFunction<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;addFunction&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7537" class="blob-num js-line-number" data-line-number="7537"></td>
        <td id="LC7537" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>removeFunction<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>removeFunction<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;removeFunction&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7538" class="blob-num js-line-number" data-line-number="7538"></td>
        <td id="LC7538" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getFuncWrapper<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getFuncWrapper<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getFuncWrapper&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7539" class="blob-num js-line-number" data-line-number="7539"></td>
        <td id="LC7539" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>prettyPrint<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>prettyPrint<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;prettyPrint&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7540" class="blob-num js-line-number" data-line-number="7540"></td>
        <td id="LC7540" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>makeBigInt<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>makeBigInt<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;makeBigInt&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7541" class="blob-num js-line-number" data-line-number="7541"></td>
        <td id="LC7541" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>dynCall<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>dynCall<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;dynCall&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7542" class="blob-num js-line-number" data-line-number="7542"></td>
        <td id="LC7542" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getCompilerSetting<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getCompilerSetting<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getCompilerSetting&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7543" class="blob-num js-line-number" data-line-number="7543"></td>
        <td id="LC7543" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackSave<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> stackSave;</td>
      </tr>
      <tr>
        <td id="L7544" class="blob-num js-line-number" data-line-number="7544"></td>
        <td id="LC7544" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackRestore<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> stackRestore;</td>
      </tr>
      <tr>
        <td id="L7545" class="blob-num js-line-number" data-line-number="7545"></td>
        <td id="LC7545" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&quot;</span>stackAlloc<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> stackAlloc;</td>
      </tr>
      <tr>
        <td id="L7546" class="blob-num js-line-number" data-line-number="7546"></td>
        <td id="LC7546" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>establishStackSpace<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>establishStackSpace<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;establishStackSpace&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7547" class="blob-num js-line-number" data-line-number="7547"></td>
        <td id="LC7547" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>print<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>print<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;print&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7548" class="blob-num js-line-number" data-line-number="7548"></td>
        <td id="LC7548" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>printErr<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>printErr<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;printErr&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7549" class="blob-num js-line-number" data-line-number="7549"></td>
        <td id="LC7549" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>getTempRet0<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>getTempRet0<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;getTempRet0&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7550" class="blob-num js-line-number" data-line-number="7550"></td>
        <td id="LC7550" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>setTempRet0<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>setTempRet0<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;setTempRet0&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7551" class="blob-num js-line-number" data-line-number="7551"></td>
        <td id="LC7551" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>callMain<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>callMain<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;callMain&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7552" class="blob-num js-line-number" data-line-number="7552"></td>
        <td id="LC7552" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>Pointer_stringify<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>Pointer_stringify<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;Pointer_stringify&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };</td>
      </tr>
      <tr>
        <td id="L7553" class="blob-num js-line-number" data-line-number="7553"></td>
        <td id="LC7553" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>warnOnce<span class="pl-pds">&quot;</span></span>)) Module[<span class="pl-s"><span class="pl-pds">&quot;</span>warnOnce<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;warnOnce&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) };<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_NORMAL<span class="pl-pds">&quot;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_NORMAL<span class="pl-pds">&quot;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ALLOC_NORMAL&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L7554" class="blob-num js-line-number" data-line-number="7554"></td>
        <td id="LC7554" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_STACK<span class="pl-pds">&quot;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_STACK<span class="pl-pds">&quot;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ALLOC_STACK&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L7555" class="blob-num js-line-number" data-line-number="7555"></td>
        <td id="LC7555" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_DYNAMIC<span class="pl-pds">&quot;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_DYNAMIC<span class="pl-pds">&quot;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ALLOC_DYNAMIC&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L7556" class="blob-num js-line-number" data-line-number="7556"></td>
        <td id="LC7556" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_NONE<span class="pl-pds">&quot;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>ALLOC_NONE<span class="pl-pds">&quot;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;ALLOC_NONE&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)<span class="pl-pds">&quot;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L7557" class="blob-num js-line-number" data-line-number="7557"></td>
        <td id="LC7557" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Object</span>.<span class="pl-en">getOwnPropertyDescriptor</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>calledRun<span class="pl-pds">&quot;</span></span>)) <span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(Module, <span class="pl-s"><span class="pl-pds">&quot;</span>calledRun<span class="pl-pds">&quot;</span></span>, { <span class="pl-en">get</span><span class="pl-k">:</span> <span class="pl-k">function</span>() { <span class="pl-en">abort</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;calledRun&#39; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you<span class="pl-pds">&quot;</span></span>) } });</td>
      </tr>
      <tr>
        <td id="L7558" class="blob-num js-line-number" data-line-number="7558"></td>
        <td id="LC7558" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7559" class="blob-num js-line-number" data-line-number="7559"></td>
        <td id="LC7559" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7560" class="blob-num js-line-number" data-line-number="7560"></td>
        <td id="LC7560" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7561" class="blob-num js-line-number" data-line-number="7561"></td>
        <td id="LC7561" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> calledRun;</td>
      </tr>
      <tr>
        <td id="L7562" class="blob-num js-line-number" data-line-number="7562"></td>
        <td id="LC7562" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7563" class="blob-num js-line-number" data-line-number="7563"></td>
        <td id="LC7563" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7564" class="blob-num js-line-number" data-line-number="7564"></td>
        <td id="LC7564" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span></span></td>
      </tr>
      <tr>
        <td id="L7565" class="blob-num js-line-number" data-line-number="7565"></td>
        <td id="LC7565" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@constructor</span></span></td>
      </tr>
      <tr>
        <td id="L7566" class="blob-num js-line-number" data-line-number="7566"></td>
        <td id="LC7566" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * <span class="pl-k">@this</span> <span class="pl-en">{ExitStatus}</span></span></td>
      </tr>
      <tr>
        <td id="L7567" class="blob-num js-line-number" data-line-number="7567"></td>
        <td id="LC7567" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7568" class="blob-num js-line-number" data-line-number="7568"></td>
        <td id="LC7568" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">ExitStatus</span>(<span class="pl-smi">status</span>) {</td>
      </tr>
      <tr>
        <td id="L7569" class="blob-num js-line-number" data-line-number="7569"></td>
        <td id="LC7569" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>ExitStatus<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7570" class="blob-num js-line-number" data-line-number="7570"></td>
        <td id="LC7570" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">this</span>.<span class="pl-smi">message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Program terminated with exit(<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> status <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7571" class="blob-num js-line-number" data-line-number="7571"></td>
        <td id="LC7571" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">this</span>.<span class="pl-c1">status</span> <span class="pl-k">=</span> status;</td>
      </tr>
      <tr>
        <td id="L7572" class="blob-num js-line-number" data-line-number="7572"></td>
        <td id="LC7572" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7573" class="blob-num js-line-number" data-line-number="7573"></td>
        <td id="LC7573" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7574" class="blob-num js-line-number" data-line-number="7574"></td>
        <td id="LC7574" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> calledMain <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L7575" class="blob-num js-line-number" data-line-number="7575"></td>
        <td id="LC7575" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7576" class="blob-num js-line-number" data-line-number="7576"></td>
        <td id="LC7576" class="blob-code blob-code-inner js-file-line"><span class="pl-en">dependenciesFulfilled</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">runCaller</span>() {</td>
      </tr>
      <tr>
        <td id="L7577" class="blob-num js-line-number" data-line-number="7577"></td>
        <td id="LC7577" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)</span></td>
      </tr>
      <tr>
        <td id="L7578" class="blob-num js-line-number" data-line-number="7578"></td>
        <td id="LC7578" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>calledRun) <span class="pl-en">run</span>();</td>
      </tr>
      <tr>
        <td id="L7579" class="blob-num js-line-number" data-line-number="7579"></td>
        <td id="LC7579" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">!</span>calledRun) dependenciesFulfilled <span class="pl-k">=</span> runCaller; <span class="pl-c"><span class="pl-c">//</span> try this again later, after new deps are fulfilled</span></td>
      </tr>
      <tr>
        <td id="L7580" class="blob-num js-line-number" data-line-number="7580"></td>
        <td id="LC7580" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7581" class="blob-num js-line-number" data-line-number="7581"></td>
        <td id="LC7581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7582" class="blob-num js-line-number" data-line-number="7582"></td>
        <td id="LC7582" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7583" class="blob-num js-line-number" data-line-number="7583"></td>
        <td id="LC7583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7584" class="blob-num js-line-number" data-line-number="7584"></td>
        <td id="LC7584" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7585" class="blob-num js-line-number" data-line-number="7585"></td>
        <td id="LC7585" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7586" class="blob-num js-line-number" data-line-number="7586"></td>
        <td id="LC7586" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/**</span> <span class="pl-k">@type</span> <span class="pl-en">{function(Array=)}</span> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7587" class="blob-num js-line-number" data-line-number="7587"></td>
        <td id="LC7587" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">run</span>(<span class="pl-smi">args</span>) {</td>
      </tr>
      <tr>
        <td id="L7588" class="blob-num js-line-number" data-line-number="7588"></td>
        <td id="LC7588" class="blob-code blob-code-inner js-file-line">  args <span class="pl-k">=</span> args <span class="pl-k">||</span> arguments_;</td>
      </tr>
      <tr>
        <td id="L7589" class="blob-num js-line-number" data-line-number="7589"></td>
        <td id="LC7589" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7590" class="blob-num js-line-number" data-line-number="7590"></td>
        <td id="LC7590" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (runDependencies <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L7591" class="blob-num js-line-number" data-line-number="7591"></td>
        <td id="LC7591" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L7592" class="blob-num js-line-number" data-line-number="7592"></td>
        <td id="LC7592" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7593" class="blob-num js-line-number" data-line-number="7593"></td>
        <td id="LC7593" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7594" class="blob-num js-line-number" data-line-number="7594"></td>
        <td id="LC7594" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">writeStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L7595" class="blob-num js-line-number" data-line-number="7595"></td>
        <td id="LC7595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7596" class="blob-num js-line-number" data-line-number="7596"></td>
        <td id="LC7596" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">preRun</span>();</td>
      </tr>
      <tr>
        <td id="L7597" class="blob-num js-line-number" data-line-number="7597"></td>
        <td id="LC7597" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7598" class="blob-num js-line-number" data-line-number="7598"></td>
        <td id="LC7598" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (runDependencies <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) <span class="pl-k">return</span>; <span class="pl-c"><span class="pl-c">//</span> a preRun added a dependency, run will be called later</span></td>
      </tr>
      <tr>
        <td id="L7599" class="blob-num js-line-number" data-line-number="7599"></td>
        <td id="LC7599" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7600" class="blob-num js-line-number" data-line-number="7600"></td>
        <td id="LC7600" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">doRun</span>() {</td>
      </tr>
      <tr>
        <td id="L7601" class="blob-num js-line-number" data-line-number="7601"></td>
        <td id="LC7601" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> run may have just been called through dependencies being fulfilled just in this very frame,</span></td>
      </tr>
      <tr>
        <td id="L7602" class="blob-num js-line-number" data-line-number="7602"></td>
        <td id="LC7602" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> or while the async setStatus time below was happening</span></td>
      </tr>
      <tr>
        <td id="L7603" class="blob-num js-line-number" data-line-number="7603"></td>
        <td id="LC7603" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (calledRun) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L7604" class="blob-num js-line-number" data-line-number="7604"></td>
        <td id="LC7604" class="blob-code blob-code-inner js-file-line">    calledRun <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7605" class="blob-num js-line-number" data-line-number="7605"></td>
        <td id="LC7605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7606" class="blob-num js-line-number" data-line-number="7606"></td>
        <td id="LC7606" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">ABORT</span>) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L7607" class="blob-num js-line-number" data-line-number="7607"></td>
        <td id="LC7607" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7608" class="blob-num js-line-number" data-line-number="7608"></td>
        <td id="LC7608" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">initRuntime</span>();</td>
      </tr>
      <tr>
        <td id="L7609" class="blob-num js-line-number" data-line-number="7609"></td>
        <td id="LC7609" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7610" class="blob-num js-line-number" data-line-number="7610"></td>
        <td id="LC7610" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">preMain</span>();</td>
      </tr>
      <tr>
        <td id="L7611" class="blob-num js-line-number" data-line-number="7611"></td>
        <td id="LC7611" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7612" class="blob-num js-line-number" data-line-number="7612"></td>
        <td id="LC7612" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onRuntimeInitialized<span class="pl-pds">&#39;</span></span>]) Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onRuntimeInitialized<span class="pl-pds">&#39;</span></span>]();</td>
      </tr>
      <tr>
        <td id="L7613" class="blob-num js-line-number" data-line-number="7613"></td>
        <td id="LC7613" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7614" class="blob-num js-line-number" data-line-number="7614"></td>
        <td id="LC7614" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">assert</span>(<span class="pl-k">!</span>Module[<span class="pl-s"><span class="pl-pds">&#39;</span>_main<span class="pl-pds">&#39;</span></span>], <span class="pl-s"><span class="pl-pds">&#39;</span>compiled without a main, but one is present. if you added it from JS, use Module[&quot;onRuntimeInitialized&quot;]<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7615" class="blob-num js-line-number" data-line-number="7615"></td>
        <td id="LC7615" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7616" class="blob-num js-line-number" data-line-number="7616"></td>
        <td id="LC7616" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">postRun</span>();</td>
      </tr>
      <tr>
        <td id="L7617" class="blob-num js-line-number" data-line-number="7617"></td>
        <td id="LC7617" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7618" class="blob-num js-line-number" data-line-number="7618"></td>
        <td id="LC7618" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7619" class="blob-num js-line-number" data-line-number="7619"></td>
        <td id="LC7619" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>setStatus<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L7620" class="blob-num js-line-number" data-line-number="7620"></td>
        <td id="LC7620" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>setStatus<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span>Running...<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7621" class="blob-num js-line-number" data-line-number="7621"></td>
        <td id="LC7621" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7622" class="blob-num js-line-number" data-line-number="7622"></td>
        <td id="LC7622" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">setTimeout</span>(<span class="pl-k">function</span>() {</td>
      </tr>
      <tr>
        <td id="L7623" class="blob-num js-line-number" data-line-number="7623"></td>
        <td id="LC7623" class="blob-code blob-code-inner js-file-line">        Module[<span class="pl-s"><span class="pl-pds">&#39;</span>setStatus<span class="pl-pds">&#39;</span></span>](<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7624" class="blob-num js-line-number" data-line-number="7624"></td>
        <td id="LC7624" class="blob-code blob-code-inner js-file-line">      }, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L7625" class="blob-num js-line-number" data-line-number="7625"></td>
        <td id="LC7625" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">doRun</span>();</td>
      </tr>
      <tr>
        <td id="L7626" class="blob-num js-line-number" data-line-number="7626"></td>
        <td id="LC7626" class="blob-code blob-code-inner js-file-line">    }, <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L7627" class="blob-num js-line-number" data-line-number="7627"></td>
        <td id="LC7627" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L7628" class="blob-num js-line-number" data-line-number="7628"></td>
        <td id="LC7628" class="blob-code blob-code-inner js-file-line">  {</td>
      </tr>
      <tr>
        <td id="L7629" class="blob-num js-line-number" data-line-number="7629"></td>
        <td id="LC7629" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">doRun</span>();</td>
      </tr>
      <tr>
        <td id="L7630" class="blob-num js-line-number" data-line-number="7630"></td>
        <td id="LC7630" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7631" class="blob-num js-line-number" data-line-number="7631"></td>
        <td id="LC7631" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkStackCookie</span>();</td>
      </tr>
      <tr>
        <td id="L7632" class="blob-num js-line-number" data-line-number="7632"></td>
        <td id="LC7632" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7633" class="blob-num js-line-number" data-line-number="7633"></td>
        <td id="LC7633" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&#39;</span>run<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> run;</td>
      </tr>
      <tr>
        <td id="L7634" class="blob-num js-line-number" data-line-number="7634"></td>
        <td id="LC7634" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7635" class="blob-num js-line-number" data-line-number="7635"></td>
        <td id="LC7635" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">checkUnflushedContent</span>() {</td>
      </tr>
      <tr>
        <td id="L7636" class="blob-num js-line-number" data-line-number="7636"></td>
        <td id="LC7636" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Compiler settings do not allow exiting the runtime, so flushing</span></td>
      </tr>
      <tr>
        <td id="L7637" class="blob-num js-line-number" data-line-number="7637"></td>
        <td id="LC7637" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> the streams is not possible. but in ASSERTIONS mode we check</span></td>
      </tr>
      <tr>
        <td id="L7638" class="blob-num js-line-number" data-line-number="7638"></td>
        <td id="LC7638" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> if there was something to flush, and if so tell the user they</span></td>
      </tr>
      <tr>
        <td id="L7639" class="blob-num js-line-number" data-line-number="7639"></td>
        <td id="LC7639" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> should request that the runtime be exitable.</span></td>
      </tr>
      <tr>
        <td id="L7640" class="blob-num js-line-number" data-line-number="7640"></td>
        <td id="LC7640" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> Normally we would not even include flush() at all, but in ASSERTIONS</span></td>
      </tr>
      <tr>
        <td id="L7641" class="blob-num js-line-number" data-line-number="7641"></td>
        <td id="LC7641" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> builds we do so just for this check, and here we see if there is any</span></td>
      </tr>
      <tr>
        <td id="L7642" class="blob-num js-line-number" data-line-number="7642"></td>
        <td id="LC7642" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> content to flush, that is, we check if there would have been</span></td>
      </tr>
      <tr>
        <td id="L7643" class="blob-num js-line-number" data-line-number="7643"></td>
        <td id="LC7643" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> something a non-ASSERTIONS build would have not seen.</span></td>
      </tr>
      <tr>
        <td id="L7644" class="blob-num js-line-number" data-line-number="7644"></td>
        <td id="LC7644" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0</span></td>
      </tr>
      <tr>
        <td id="L7645" class="blob-num js-line-number" data-line-number="7645"></td>
        <td id="LC7645" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> mode (which has its own special function for this; otherwise, all</span></td>
      </tr>
      <tr>
        <td id="L7646" class="blob-num js-line-number" data-line-number="7646"></td>
        <td id="LC7646" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> the code is inside libc)</span></td>
      </tr>
      <tr>
        <td id="L7647" class="blob-num js-line-number" data-line-number="7647"></td>
        <td id="LC7647" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> print <span class="pl-k">=</span> out;</td>
      </tr>
      <tr>
        <td id="L7648" class="blob-num js-line-number" data-line-number="7648"></td>
        <td id="LC7648" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> printErr <span class="pl-k">=</span> err;</td>
      </tr>
      <tr>
        <td id="L7649" class="blob-num js-line-number" data-line-number="7649"></td>
        <td id="LC7649" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> has <span class="pl-k">=</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L7650" class="blob-num js-line-number" data-line-number="7650"></td>
        <td id="LC7650" class="blob-code blob-code-inner js-file-line">  out <span class="pl-k">=</span> <span class="pl-en">err</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">x</span>) {</td>
      </tr>
      <tr>
        <td id="L7651" class="blob-num js-line-number" data-line-number="7651"></td>
        <td id="LC7651" class="blob-code blob-code-inner js-file-line">    has <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7652" class="blob-num js-line-number" data-line-number="7652"></td>
        <td id="LC7652" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7653" class="blob-num js-line-number" data-line-number="7653"></td>
        <td id="LC7653" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">try</span> { <span class="pl-c"><span class="pl-c">//</span> it doesn&#39;t matter if it fails</span></td>
      </tr>
      <tr>
        <td id="L7654" class="blob-num js-line-number" data-line-number="7654"></td>
        <td id="LC7654" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> flush <span class="pl-k">=</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>_fflush<span class="pl-pds">&#39;</span></span>];</td>
      </tr>
      <tr>
        <td id="L7655" class="blob-num js-line-number" data-line-number="7655"></td>
        <td id="LC7655" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (flush) <span class="pl-en">flush</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L7656" class="blob-num js-line-number" data-line-number="7656"></td>
        <td id="LC7656" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> also flush in the JS FS layer</span></td>
      </tr>
      <tr>
        <td id="L7657" class="blob-num js-line-number" data-line-number="7657"></td>
        <td id="LC7657" class="blob-code blob-code-inner js-file-line">    [<span class="pl-s"><span class="pl-pds">&#39;</span>stdout<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>stderr<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L7658" class="blob-num js-line-number" data-line-number="7658"></td>
        <td id="LC7658" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> info <span class="pl-k">=</span> <span class="pl-c1">FS</span>.<span class="pl-en">analyzePath</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/dev/<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> name);</td>
      </tr>
      <tr>
        <td id="L7659" class="blob-num js-line-number" data-line-number="7659"></td>
        <td id="LC7659" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-k">!</span>info) <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L7660" class="blob-num js-line-number" data-line-number="7660"></td>
        <td id="LC7660" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> stream <span class="pl-k">=</span> <span class="pl-smi">info</span>.<span class="pl-c1">object</span>;</td>
      </tr>
      <tr>
        <td id="L7661" class="blob-num js-line-number" data-line-number="7661"></td>
        <td id="LC7661" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> rdev <span class="pl-k">=</span> <span class="pl-smi">stream</span>.<span class="pl-smi">rdev</span>;</td>
      </tr>
      <tr>
        <td id="L7662" class="blob-num js-line-number" data-line-number="7662"></td>
        <td id="LC7662" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">var</span> tty <span class="pl-k">=</span> <span class="pl-c1">TTY</span>.<span class="pl-smi">ttys</span>[rdev];</td>
      </tr>
      <tr>
        <td id="L7663" class="blob-num js-line-number" data-line-number="7663"></td>
        <td id="LC7663" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (tty <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">tty</span>.<span class="pl-smi">output</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">tty</span>.<span class="pl-smi">output</span>.<span class="pl-c1">length</span>) {</td>
      </tr>
      <tr>
        <td id="L7664" class="blob-num js-line-number" data-line-number="7664"></td>
        <td id="LC7664" class="blob-code blob-code-inner js-file-line">        has <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7665" class="blob-num js-line-number" data-line-number="7665"></td>
        <td id="LC7665" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L7666" class="blob-num js-line-number" data-line-number="7666"></td>
        <td id="LC7666" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L7667" class="blob-num js-line-number" data-line-number="7667"></td>
        <td id="LC7667" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">catch</span>(e) {}</td>
      </tr>
      <tr>
        <td id="L7668" class="blob-num js-line-number" data-line-number="7668"></td>
        <td id="LC7668" class="blob-code blob-code-inner js-file-line">  out <span class="pl-k">=</span> print;</td>
      </tr>
      <tr>
        <td id="L7669" class="blob-num js-line-number" data-line-number="7669"></td>
        <td id="LC7669" class="blob-code blob-code-inner js-file-line">  err <span class="pl-k">=</span> printErr;</td>
      </tr>
      <tr>
        <td id="L7670" class="blob-num js-line-number" data-line-number="7670"></td>
        <td id="LC7670" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (has) {</td>
      </tr>
      <tr>
        <td id="L7671" class="blob-num js-line-number" data-line-number="7671"></td>
        <td id="LC7671" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">warnOnce</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7672" class="blob-num js-line-number" data-line-number="7672"></td>
        <td id="LC7672" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7673" class="blob-num js-line-number" data-line-number="7673"></td>
        <td id="LC7673" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7674" class="blob-num js-line-number" data-line-number="7674"></td>
        <td id="LC7674" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7675" class="blob-num js-line-number" data-line-number="7675"></td>
        <td id="LC7675" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">exit</span>(<span class="pl-smi">status</span>, <span class="pl-smi">implicit</span>) {</td>
      </tr>
      <tr>
        <td id="L7676" class="blob-num js-line-number" data-line-number="7676"></td>
        <td id="LC7676" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">checkUnflushedContent</span>();</td>
      </tr>
      <tr>
        <td id="L7677" class="blob-num js-line-number" data-line-number="7677"></td>
        <td id="LC7677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7678" class="blob-num js-line-number" data-line-number="7678"></td>
        <td id="LC7678" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> if this is just main exit-ing implicitly, and the status is 0, then we</span></td>
      </tr>
      <tr>
        <td id="L7679" class="blob-num js-line-number" data-line-number="7679"></td>
        <td id="LC7679" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> don&#39;t need to do anything here and can just leave. if the status is</span></td>
      </tr>
      <tr>
        <td id="L7680" class="blob-num js-line-number" data-line-number="7680"></td>
        <td id="LC7680" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> non-zero, though, then we need to report it.</span></td>
      </tr>
      <tr>
        <td id="L7681" class="blob-num js-line-number" data-line-number="7681"></td>
        <td id="LC7681" class="blob-code blob-code-inner js-file-line">  <span class="pl-c"><span class="pl-c">//</span> (we may have warned about this earlier, if a situation justifies doing so)</span></td>
      </tr>
      <tr>
        <td id="L7682" class="blob-num js-line-number" data-line-number="7682"></td>
        <td id="LC7682" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (implicit <span class="pl-k">&amp;&amp;</span> noExitRuntime <span class="pl-k">&amp;&amp;</span> status <span class="pl-k">===</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L7683" class="blob-num js-line-number" data-line-number="7683"></td>
        <td id="LC7683" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L7684" class="blob-num js-line-number" data-line-number="7684"></td>
        <td id="LC7684" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7685" class="blob-num js-line-number" data-line-number="7685"></td>
        <td id="LC7685" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7686" class="blob-num js-line-number" data-line-number="7686"></td>
        <td id="LC7686" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (noExitRuntime) {</td>
      </tr>
      <tr>
        <td id="L7687" class="blob-num js-line-number" data-line-number="7687"></td>
        <td id="LC7687" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> if exit() was called, we may warn the user if the runtime isn&#39;t actually being shut down</span></td>
      </tr>
      <tr>
        <td id="L7688" class="blob-num js-line-number" data-line-number="7688"></td>
        <td id="LC7688" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">!</span>implicit) {</td>
      </tr>
      <tr>
        <td id="L7689" class="blob-num js-line-number" data-line-number="7689"></td>
        <td id="LC7689" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">err</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>exit(<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> status <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>) called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L7690" class="blob-num js-line-number" data-line-number="7690"></td>
        <td id="LC7690" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L7691" class="blob-num js-line-number" data-line-number="7691"></td>
        <td id="LC7691" class="blob-code blob-code-inner js-file-line">  } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7692" class="blob-num js-line-number" data-line-number="7692"></td>
        <td id="LC7692" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7693" class="blob-num js-line-number" data-line-number="7693"></td>
        <td id="LC7693" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ABORT</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7694" class="blob-num js-line-number" data-line-number="7694"></td>
        <td id="LC7694" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">EXITSTATUS</span> <span class="pl-k">=</span> status;</td>
      </tr>
      <tr>
        <td id="L7695" class="blob-num js-line-number" data-line-number="7695"></td>
        <td id="LC7695" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7696" class="blob-num js-line-number" data-line-number="7696"></td>
        <td id="LC7696" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">exitRuntime</span>();</td>
      </tr>
      <tr>
        <td id="L7697" class="blob-num js-line-number" data-line-number="7697"></td>
        <td id="LC7697" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7698" class="blob-num js-line-number" data-line-number="7698"></td>
        <td id="LC7698" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onExit<span class="pl-pds">&#39;</span></span>]) Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onExit<span class="pl-pds">&#39;</span></span>](status);</td>
      </tr>
      <tr>
        <td id="L7699" class="blob-num js-line-number" data-line-number="7699"></td>
        <td id="LC7699" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7700" class="blob-num js-line-number" data-line-number="7700"></td>
        <td id="LC7700" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7701" class="blob-num js-line-number" data-line-number="7701"></td>
        <td id="LC7701" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">quit_</span>(status, <span class="pl-k">new</span> <span class="pl-en">ExitStatus</span>(status));</td>
      </tr>
      <tr>
        <td id="L7702" class="blob-num js-line-number" data-line-number="7702"></td>
        <td id="LC7702" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7703" class="blob-num js-line-number" data-line-number="7703"></td>
        <td id="LC7703" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7704" class="blob-num js-line-number" data-line-number="7704"></td>
        <td id="LC7704" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> abortDecorators <span class="pl-k">=</span> [];</td>
      </tr>
      <tr>
        <td id="L7705" class="blob-num js-line-number" data-line-number="7705"></td>
        <td id="LC7705" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7706" class="blob-num js-line-number" data-line-number="7706"></td>
        <td id="LC7706" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">abort</span>(<span class="pl-smi">what</span>) {</td>
      </tr>
      <tr>
        <td id="L7707" class="blob-num js-line-number" data-line-number="7707"></td>
        <td id="LC7707" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onAbort<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L7708" class="blob-num js-line-number" data-line-number="7708"></td>
        <td id="LC7708" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>onAbort<span class="pl-pds">&#39;</span></span>](what);</td>
      </tr>
      <tr>
        <td id="L7709" class="blob-num js-line-number" data-line-number="7709"></td>
        <td id="LC7709" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7710" class="blob-num js-line-number" data-line-number="7710"></td>
        <td id="LC7710" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7711" class="blob-num js-line-number" data-line-number="7711"></td>
        <td id="LC7711" class="blob-code blob-code-inner js-file-line">  what <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7712" class="blob-num js-line-number" data-line-number="7712"></td>
        <td id="LC7712" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">out</span>(what);</td>
      </tr>
      <tr>
        <td id="L7713" class="blob-num js-line-number" data-line-number="7713"></td>
        <td id="LC7713" class="blob-code blob-code-inner js-file-line">  <span class="pl-en">err</span>(what);</td>
      </tr>
      <tr>
        <td id="L7714" class="blob-num js-line-number" data-line-number="7714"></td>
        <td id="LC7714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7715" class="blob-num js-line-number" data-line-number="7715"></td>
        <td id="LC7715" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">ABORT</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7716" class="blob-num js-line-number" data-line-number="7716"></td>
        <td id="LC7716" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">EXITSTATUS</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L7717" class="blob-num js-line-number" data-line-number="7717"></td>
        <td id="LC7717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7718" class="blob-num js-line-number" data-line-number="7718"></td>
        <td id="LC7718" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> extra <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7719" class="blob-num js-line-number" data-line-number="7719"></td>
        <td id="LC7719" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> output <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>abort(<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> what <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>) at <span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-en">stackTrace</span>() <span class="pl-k">+</span> extra;</td>
      </tr>
      <tr>
        <td id="L7720" class="blob-num js-line-number" data-line-number="7720"></td>
        <td id="LC7720" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (abortDecorators) {</td>
      </tr>
      <tr>
        <td id="L7721" class="blob-num js-line-number" data-line-number="7721"></td>
        <td id="LC7721" class="blob-code blob-code-inner js-file-line">    <span class="pl-smi">abortDecorators</span>.<span class="pl-c1">forEach</span>(<span class="pl-k">function</span>(<span class="pl-smi">decorator</span>) {</td>
      </tr>
      <tr>
        <td id="L7722" class="blob-num js-line-number" data-line-number="7722"></td>
        <td id="LC7722" class="blob-code blob-code-inner js-file-line">      output <span class="pl-k">=</span> <span class="pl-en">decorator</span>(output, what);</td>
      </tr>
      <tr>
        <td id="L7723" class="blob-num js-line-number" data-line-number="7723"></td>
        <td id="LC7723" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L7724" class="blob-num js-line-number" data-line-number="7724"></td>
        <td id="LC7724" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7725" class="blob-num js-line-number" data-line-number="7725"></td>
        <td id="LC7725" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">throw</span> output;</td>
      </tr>
      <tr>
        <td id="L7726" class="blob-num js-line-number" data-line-number="7726"></td>
        <td id="LC7726" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7727" class="blob-num js-line-number" data-line-number="7727"></td>
        <td id="LC7727" class="blob-code blob-code-inner js-file-line">Module[<span class="pl-s"><span class="pl-pds">&#39;</span>abort<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> abort;</td>
      </tr>
      <tr>
        <td id="L7728" class="blob-num js-line-number" data-line-number="7728"></td>
        <td id="LC7728" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7729" class="blob-num js-line-number" data-line-number="7729"></td>
        <td id="LC7729" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L7730" class="blob-num js-line-number" data-line-number="7730"></td>
        <td id="LC7730" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span>) Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>] <span class="pl-k">=</span> [Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>]];</td>
      </tr>
      <tr>
        <td id="L7731" class="blob-num js-line-number" data-line-number="7731"></td>
        <td id="LC7731" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">while</span> (Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L7732" class="blob-num js-line-number" data-line-number="7732"></td>
        <td id="LC7732" class="blob-code blob-code-inner js-file-line">    Module[<span class="pl-s"><span class="pl-pds">&#39;</span>preInit<span class="pl-pds">&#39;</span></span>].<span class="pl-c1">pop</span>()();</td>
      </tr>
      <tr>
        <td id="L7733" class="blob-num js-line-number" data-line-number="7733"></td>
        <td id="LC7733" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L7734" class="blob-num js-line-number" data-line-number="7734"></td>
        <td id="LC7734" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7735" class="blob-num js-line-number" data-line-number="7735"></td>
        <td id="LC7735" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7736" class="blob-num js-line-number" data-line-number="7736"></td>
        <td id="LC7736" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7737" class="blob-num js-line-number" data-line-number="7737"></td>
        <td id="LC7737" class="blob-code blob-code-inner js-file-line">  noExitRuntime <span class="pl-k">=</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7738" class="blob-num js-line-number" data-line-number="7738"></td>
        <td id="LC7738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7739" class="blob-num js-line-number" data-line-number="7739"></td>
        <td id="LC7739" class="blob-code blob-code-inner js-file-line"><span class="pl-en">run</span>();</td>
      </tr>
      <tr>
        <td id="L7740" class="blob-num js-line-number" data-line-number="7740"></td>
        <td id="LC7740" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7741" class="blob-num js-line-number" data-line-number="7741"></td>
        <td id="LC7741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7742" class="blob-num js-line-number" data-line-number="7742"></td>
        <td id="LC7742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7743" class="blob-num js-line-number" data-line-number="7743"></td>
        <td id="LC7743" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7744" class="blob-num js-line-number" data-line-number="7744"></td>
        <td id="LC7744" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7745" class="blob-num js-line-number" data-line-number="7745"></td>
        <td id="LC7745" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> {{MODULE_ADDITIONS}}</span></td>
      </tr>
      <tr>
        <td id="L7746" class="blob-num js-line-number" data-line-number="7746"></td>
        <td id="LC7746" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7747" class="blob-num js-line-number" data-line-number="7747"></td>
        <td id="LC7747" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7748" class="blob-num js-line-number" data-line-number="7748"></td>
        <td id="LC7748" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7749" class="blob-num js-line-number" data-line-number="7749"></td>
        <td id="LC7749" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7750" class="blob-num js-line-number" data-line-number="7750"></td>
        <td id="LC7750" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7751" class="blob-num js-line-number" data-line-number="7751"></td>
        <td id="LC7751" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> The shell-pre.js and emcc-generated code goes above</span></td>
      </tr>
      <tr>
        <td id="L7752" class="blob-num js-line-number" data-line-number="7752"></td>
        <td id="LC7752" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> Module;</td>
      </tr>
      <tr>
        <td id="L7753" class="blob-num js-line-number" data-line-number="7753"></td>
        <td id="LC7753" class="blob-code blob-code-inner js-file-line">    }); <span class="pl-c"><span class="pl-c">//</span> The end of the promise being returned</span></td>
      </tr>
      <tr>
        <td id="L7754" class="blob-num js-line-number" data-line-number="7754"></td>
        <td id="LC7754" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7755" class="blob-num js-line-number" data-line-number="7755"></td>
        <td id="LC7755" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> initSqlJsPromise;</td>
      </tr>
      <tr>
        <td id="L7756" class="blob-num js-line-number" data-line-number="7756"></td>
        <td id="LC7756" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> The end of our initSqlJs function</span></td>
      </tr>
      <tr>
        <td id="L7757" class="blob-num js-line-number" data-line-number="7757"></td>
        <td id="LC7757" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7758" class="blob-num js-line-number" data-line-number="7758"></td>
        <td id="LC7758" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> This bit below is copied almost exactly from what you get when you use the MODULARIZE=1 flag with emcc</span></td>
      </tr>
      <tr>
        <td id="L7759" class="blob-num js-line-number" data-line-number="7759"></td>
        <td id="LC7759" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> However, we don&#39;t want to use the emcc modularization. See shell-pre.js</span></td>
      </tr>
      <tr>
        <td id="L7760" class="blob-num js-line-number" data-line-number="7760"></td>
        <td id="LC7760" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">exports</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">typeof</span> <span class="pl-c1">module</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>){</td>
      </tr>
      <tr>
        <td id="L7761" class="blob-num js-line-number" data-line-number="7761"></td>
        <td id="LC7761" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">module</span>.<span class="pl-smi">exports</span> <span class="pl-k">=</span> initSqlJs;</td>
      </tr>
      <tr>
        <td id="L7762" class="blob-num js-line-number" data-line-number="7762"></td>
        <td id="LC7762" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> This will allow the module to be used in ES6 or CommonJS</span></td>
      </tr>
      <tr>
        <td id="L7763" class="blob-num js-line-number" data-line-number="7763"></td>
        <td id="LC7763" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">module</span>.<span class="pl-smi">exports</span>.<span class="pl-smi">default</span> <span class="pl-k">=</span> initSqlJs;</td>
      </tr>
      <tr>
        <td id="L7764" class="blob-num js-line-number" data-line-number="7764"></td>
        <td id="LC7764" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7765" class="blob-num js-line-number" data-line-number="7765"></td>
        <td id="LC7765" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">typeof</span> define <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>function<span class="pl-pds">&#39;</span></span> <span class="pl-k">&amp;&amp;</span> define[<span class="pl-s"><span class="pl-pds">&#39;</span>amd<span class="pl-pds">&#39;</span></span>]) {</td>
      </tr>
      <tr>
        <td id="L7766" class="blob-num js-line-number" data-line-number="7766"></td>
        <td id="LC7766" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">define</span>([], <span class="pl-k">function</span>() { <span class="pl-k">return</span> initSqlJs; });</td>
      </tr>
      <tr>
        <td id="L7767" class="blob-num js-line-number" data-line-number="7767"></td>
        <td id="LC7767" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7768" class="blob-num js-line-number" data-line-number="7768"></td>
        <td id="LC7768" class="blob-code blob-code-inner js-file-line"><span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">exports</span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&#39;</span>object<span class="pl-pds">&#39;</span></span>){</td>
      </tr>
      <tr>
        <td id="L7769" class="blob-num js-line-number" data-line-number="7769"></td>
        <td id="LC7769" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">exports</span>[<span class="pl-s"><span class="pl-pds">&quot;</span>Module<span class="pl-pds">&quot;</span></span>] <span class="pl-k">=</span> initSqlJs;</td>
      </tr>
      <tr>
        <td id="L7770" class="blob-num js-line-number" data-line-number="7770"></td>
        <td id="LC7770" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7771" class="blob-num js-line-number" data-line-number="7771"></td>
        <td id="LC7771" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
</table>

  <details class="details-reset details-overlay BlobToolbar position-absolute js-file-line-actions dropdown d-none" aria-hidden="true">
    <summary class="btn-octicon ml-0 px-2 p-0 bg-white border border-gray-dark rounded-1" aria-label="Inline file action toolbar">
      <svg class="octicon octicon-kebab-horizontal" viewBox="0 0 13 16" version="1.1" width="13" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm5 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM13 7.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"/></svg>
    </summary>
    <details-menu>
      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se mt-2" style="width:185px">
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-lines" style="cursor:pointer;">
            Copy lines
          </clipboard-copy>
        </li>
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-permalink" style="cursor:pointer;">
            Copy permalink
          </clipboard-copy>
        </li>
        <li><a class="dropdown-item js-update-url-with-hash" id="js-view-git-blame" role="menuitem" href="/kripken/sql.js/blame/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/dist/sql-wasm-debug.js">View git blame</a></li>
          <li><a class="dropdown-item" id="js-new-issue" role="menuitem" href="/kripken/sql.js/issues/new">Reference in new issue</a></li>
      </ul>
    </details-menu>
  </details>

  </div>

    </div>

  

  <details class="details-reset details-overlay details-overlay-dark">
    <summary data-hotkey="l" aria-label="Jump to line"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast linejump" aria-label="Jump to line">
      <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-jump-to-line-form Box-body d-flex" action="" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
        <input class="form-control flex-auto mr-3 linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
        <button type="submit" class="btn" data-close-dialog>Go</button>
</form>    </details-dialog>
  </details>



  </div>
</div>

    </main>
  </div>
  

  </div>

        
<div class="footer container-lg width-full p-responsive" role="contentinfo">
  <div class="position-relative d-flex flex-row-reverse flex-lg-row flex-wrap flex-lg-nowrap flex-justify-center flex-lg-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap col-12 col-lg-5 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0">
      <li class="mr-3 mr-lg-0">&copy; 2019 <span title="0.90878s from unicorn-5bfc4f5455-82d98">GitHub</span>, Inc.</li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to security, text:security" href="https://github.com/security">Security</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://githubstatus.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon d-none d-lg-block mx-lg-4" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap col-12 col-lg-5 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0">
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://github.com/pricing" data-ga-click="Footer, go to Pricing, text:Pricing">Pricing</a></li>
      <li class="mr-3 mr-lg-0"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3 mr-lg-0"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://github.blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
    </button>
    You canât perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha512-hcybWmnZc/MmTSqQy1XHK+BnCKGf74XHXtSJUqDjQbGCitPaKuZomLtzEnWzud5zyr0Cx5cowKxapak6m711cg==" type="application/javascript" src="https://github.githubassets.com/assets/frameworks-fcbb97e8.js"></script>
    
    <script crossorigin="anonymous" async="async" integrity="sha512-mEhViOqajTVIWIt8vaNeZgWVSKFCUJuydMJcDSsZGeWRk/vg1IodwsjZNLW6zpqHESnkvCRcBkYkF1oGf0uMeQ==" type="application/javascript" src="https://github.githubassets.com/assets/github-bootstrap-f844e701.js"></script>
    
    
    
  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden
    >
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

  <div aria-live="polite" class="js-global-screen-reader-notice sr-only"></div>

  </body>
</html>

